<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/usr/local/lib/haxe/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<meta><m n=":forward.variance"/></meta>
		<impl><class path="_Any.Any_Impl_" params="" file="/usr/local/lib/haxe/std/Any.hx" private="1" module="Any" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="Array" params="T" file="/usr/local/lib/haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<contains public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether `this` Array contains `x`.

		If `x` is found by checking standard equality, the function returns `true`, otherwise
		the function returns `false`.</haxe_doc>
		</contains>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="280">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="287">
			<f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array indices and values.</haxe_doc>
		</keyValueIterator>
		<map public="1" params="S" get="inline" set="null" line="298">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="316">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<resize public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Class" params="T" file="/usr/local/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Enum" params="T" file="/usr/local/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/local/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/usr/local/lib/haxe/std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="IntIterator" params="" file="/usr/local/lib/haxe/std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="53">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="62">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="45">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="Map" params="K:V" file="/usr/local/lib/haxe/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="/usr/local/lib/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/usr/local/lib/haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately `3.141592653589793`.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of `-1.0 / 0.0`.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of `1.0 / 0.0`.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		`NaN` stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: `Math.sqrt(-1)`.

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		- If `v` is positive or `0`, the result is unchanged. Otherwise the result is `-v`.
		- If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		- If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		`exp(1.0)` is approximately `2.718281828459`.

		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to `0.0`,
		and less than `1.0`.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</ffloor>
		<fceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fceil>
		<fround public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value, as a Float.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":include"><e>"hxMath.h"</e></m>
		</meta>
	</class>
	<class path="Std" params="" file="/usr/local/lib/haxe/std/cpp/_std/Std.hx">
		<is public="1" get="inline" set="null" line="25" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"Std.is is deprecated. Use Std.isOfType instead."</e></m>
				<m n=":keep"/>
			</meta>
			<haxe_doc>DEPRECATED. Use `Std.isOfType(v, t)` instead.

		Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<isOfType public="1" set="method" line="29" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</isOfType>
		<downcast public="1" params="T:S" set="method" line="33" static="1">
			<f a="value:c">
				<c path="downcast.T"/>
				<x path="Class"><c path="downcast.S"/></x>
				<c path="downcast.S"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Checks if object `value` is an instance of class or interface `c`.

		Compiles only if the type specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the type specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with core types such as `String`,
		`Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</downcast>
		<instance public="1" params="T:S" set="method" line="38" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"Std.instance() is deprecated. Use Std.downcast() instead."</e></m>
				<m n=":keep"/>
			</meta>
		</instance>
		<string public="1" set="method" line="42" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="46" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="50" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If `x` is null, the result is unspecified.
		If `x` cannot be parsed as integer, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="54" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="58" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":headerClassCode"><e><![CDATA["\t\tstatic inline String string(String &s) { return s; }"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Single" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Single"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc>Single-precision IEEE 32bit float (4-byte).</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="/usr/local/lib/haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="StringBuf" params="" file="/usr/local/lib/haxe/std/cpp/_std/StringBuf.hx">
		<b><c path="Array"><c path="String"/></c></b>
		<charBuf><c path="Array"><x path="cpp.Char"/></c></charBuf>
		<charBufAsString set="method" line="37"><f a=""><c path="String"/></f></charBufAsString>
		<flush set="method" line="43"><f a=""><x path="Void"/></f></flush>
		<toString public="1" set="method" line="92">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" set="method" line="35">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="StringTools" params="" file="/usr/local/lib/haxe/std/StringTools.hx">
		<hex public="1" set="method" line="434" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="UInt" params="" file="/usr/local/lib/haxe/std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash and C#.
	Simulate it for other platforms.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/usr/local/lib/haxe/std/UInt.hx" private="1" module="UInt" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="cpp.ArrayBase" params="" file="/usr/local/lib/haxe/std/cpp/ArrayBase.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<getElementSize public="1" set="method"><f a=""><x path="Int"/></f></getElementSize>
		<getByteCount public="1" set="method"><f a=""><x path="Int"/></f></getByteCount>
		<getBase public="1" set="method"><f a=""><c path="cpp.RawPointer"><x path="cpp.Char"/></c></f></getBase>
	</class>
	<class path="cpp.AutoCast" params="" file="/usr/local/lib/haxe/std/cpp/AutoCast.hx" extern="1"/>
	<abstract path="cpp.Char" params="" file="/usr/local/lib/haxe/std/cpp/Char.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cpp.Char"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cpp.ConstPointer" params="T" file="/usr/local/lib/haxe/std/cpp/ConstPointer.hx" extern="1">
		<fromRaw public="1" params="T" set="method" static="1"><f a="ptr">
	<c path="cpp.RawConstPointer"><c path="fromRaw.T"/></c>
	<c path="cpp.ConstPointer"><c path="fromRaw.T"/></c>
</f></fromRaw>
		<fromStar public="1" params="T" set="method" static="1">
			<f a="star">
				<t path="cpp.Star"><c path="fromStar.T"/></t>
				<c path="cpp.ConstPointer"><c path="fromStar.T"/></c>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromRaw"</e></m></meta>
		</fromStar>
		<fromPointer public="1" params="T" set="method" static="1"><f a="inNativePointer">
	<d/>
	<c path="cpp.ConstPointer"><c path="fromPointer.T"/></c>
</f></fromPointer>
		<ptr public="1"><t path="cpp.Star"><c path="cpp.ConstPointer.T"/></t></ptr>
		<value public="1" get="accessor" set="null"><c path="cpp.ConstPointer.T"/></value>
		<raw public="1" get="accessor" set="null"><c path="cpp.RawPointer"><c path="cpp.ConstPointer.T"/></c></raw>
		<constRaw public="1" get="accessor" set="null"><c path="cpp.RawConstPointer"><c path="cpp.ConstPointer.T"/></c></constRaw>
		<get_value public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t></f></get_value>
		<get_constRaw public="1" set="method"><f a=""><c path="cpp.RawConstPointer"><c path="cpp.ConstPointer.T"/></c></f></get_constRaw>
		<get_raw public="1" set="method"><f a=""><c path="cpp.RawPointer"><c path="cpp.ConstPointer.T"/></c></f></get_raw>
		<lt public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></lt>
		<leq public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></leq>
		<gt public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></gt>
		<geq public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></geq>
		<setRaw public="1" params="O" set="method"><f a="ptr">
	<c path="cpp.RawPointer"><c path="setRaw.O"/></c>
	<x path="Void"/>
</f></setRaw>
		<reinterpret public="1" params="Other" set="method"><f a=""><c path="cpp.Pointer"><c path="reinterpret.Other"/></c></f></reinterpret>
		<rawCast public="1" params="Other" set="method"><f a=""><c path="cpp.RawPointer"><c path="rawCast.Other"/></c></f></rawCast>
		<at public="1" set="method"><f a="inIndex">
	<x path="Int"/>
	<t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t>
</f></at>
		<inc public="1" set="method"><f a=""><c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c></f></inc>
		<dec public="1" set="method"><f a=""><c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c></f></dec>
		<incBy public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></incBy>
		<decBy public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></decBy>
		<add public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></add>
		<sub public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></sub>
		<postIncVal public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t></f></postIncVal>
		<meta>
			<m n=":coreType"/>
			<m n=":include"><e>"cpp/Pointer.h"</e></m>
			<m n=":native"><e>"cpp.Pointer"</e></m>
			<m n=":semantics"><e>variable</e></m>
		</meta>
	</class>
	<class path="cpp.EnumBase" params="" file="/usr/local/lib/haxe/std/cpp/EnumBase.hx" extern="1">
		<_hx_getIndex public="1" set="method"><f a=""><x path="Int"/></f></_hx_getIndex>
		<_hx_getTag public="1" set="method"><f a=""><c path="String"/></f></_hx_getTag>
		<_hx_getParamCount public="1" set="method"><f a=""><x path="Int"/></f></_hx_getParamCount>
		<_hx_getParamI public="1" set="method"><f a="inIndex">
	<x path="Int"/>
	<d/>
</f></_hx_getParamI>
		<_hx_getParameters public="1" set="method"><f a=""><c path="Array"><d/></c></f></_hx_getParameters>
		<getIndex public="1" get="inline" set="null" line="35"><f a=""><x path="Int"/></f></getIndex>
		<getTag public="1" get="inline" set="null" line="37"><f a=""><c path="String"/></f></getTag>
		<getParamCount public="1" get="inline" set="null" line="39"><f a=""><x path="Int"/></f></getParamCount>
		<getParamI public="1" get="inline" set="null" line="41"><f a="inIndex">
	<x path="Int"/>
	<d/>
</f></getParamI>
		<getParameters public="1" get="inline" set="null" line="43"><f a=""><c path="Array"><d/></c></f></getParameters>
		<meta><m n=":native"><e>"hx.EnumBase"</e></m></meta>
	</class>
	<class path="cpp.ErrorConstants" params="" file="/usr/local/lib/haxe/std/cpp/ErrorConstants.hx" extern="1">
		<invalidCast public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_CAST"</e></m></meta>
		</invalidCast>
		<indexOutOfBounds public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INDEX_OUT_OF_BOUNDS"</e></m></meta>
		</indexOutOfBounds>
		<invalidObject public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_OBJECT"</e></m></meta>
		</invalidObject>
		<invalidArgCount public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_ARG_COUNT"</e></m></meta>
		</invalidArgCount>
		<nullFunctionPointer public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_NULL_FUNCTION_POINTER"</e></m></meta>
		</nullFunctionPointer>
	</class>
	<abstract path="cpp.Float32" params="" file="/usr/local/lib/haxe/std/cpp/Float32.hx">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="cpp.Float32"/></this>
		<to><icast><x path="Float"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cpp.NativeArray" params="" file="/usr/local/lib/haxe/std/cpp/NativeArray.hx" extern="1">
		<create public="1" params="T" set="method" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="Array"><c path="create.T"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_create_array_length"</e></m></meta>
		</create>
		<blit public="1" params="T" get="inline" set="null" line="37" static="1">
			<f a="ioDestArray:inDestElement:inSourceArray:inSourceElement:inElementCount">
				<c path="Array"><c path="blit.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="blit.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</blit>
		<getBase public="1" get="inline" set="null" line="41" static="1">
			<f a="inArray">
				<c path="Array"><d/></c>
				<c path="cpp.ArrayBase"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getBase>
		<reserve public="1" params="T" set="method" static="1">
			<f a="inArray:inElements">
				<c path="Array"><c path="reserve.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</reserve>
		<capacity public="1" params="T" set="method" static="1">
			<f a="inArray">
				<c path="Array"><c path="capacity.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</capacity>
		<getElementSize public="1" params="T" set="method" static="1">
			<f a="inArray">
				<c path="Array"><c path="getElementSize.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</getElementSize>
		<address public="1" params="T" get="inline" set="null" line="54" static="1"><f a="inArray:inIndex">
	<c path="Array"><c path="address.T"/></c>
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="address.T"/></c>
</f></address>
		<setData public="1" params="T" set="method" static="1">
			<f a="inArray:inData:inElementCount">
				<c path="Array"><c path="setData.T"/></c>
				<c path="cpp.Pointer"><c path="setData.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</setData>
		<setUnmanagedData public="1" params="T" set="method" static="1">
			<f a="inArray:inData:inElementCount">
				<c path="Array"><c path="setUnmanagedData.T"/></c>
				<c path="cpp.ConstPointer"><c path="setUnmanagedData.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</setUnmanagedData>
		<zero public="1" params="T" set="method" static="1">
			<f a="ioDestArray:?inFirst:?inElements">
				<c path="Array"><c path="zero.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</zero>
		<removeAt public="1" params="T" set="method" static="1">
			<f a="ioDestArray:inIndex">
				<c path="Array"><c path="removeAt.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</removeAt>
		<memcmp public="1" params="T" set="method" static="1">
			<f a="inArrayA:inArrayB">
				<c path="Array"><c path="memcmp.T"/></c>
				<c path="Array"><c path="memcmp.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</memcmp>
		<resolveVirtualArray public="1" set="method" static="1">
			<f a="inArray">
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_reslove_virtual_array"</e></m></meta>
		</resolveVirtualArray>
		<unsafeGet public="1" params="T" set="method" static="1">
			<f a="inDestArray:inIndex">
				<c path="Array"><c path="unsafeGet.T"/></c>
				<x path="Int"/>
				<c path="unsafeGet.T"/>
			</f>
			<meta><m n=":native"><e>"_hx_array_unsafe_get"</e></m></meta>
		</unsafeGet>
		<unsafeSet public="1" params="T" get="inline" set="null" line="93" static="1">
			<f a="ioDestArray:inIndex:inValue">
				<c path="Array"><c path="unsafeSet.T"/></c>
				<x path="Int"/>
				<c path="unsafeSet.T"/>
				<c path="unsafeSet.T"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":native"><e>"_hx_array_unsafe_set"</e></m>
			</meta>
		</unsafeSet>
		<setSize public="1" params="T" set="method" static="1">
			<f a="ioArray:inSize">
				<c path="Array"><c path="setSize.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="setSize.T"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_array_set_size_exact"</e></m></meta>
		</setSize>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="cpp.NativeString" params="" file="/usr/local/lib/haxe/std/cpp/NativeString.hx" extern="1">
		<raw public="1" get="inline" set="null" line="26" static="1">
			<f a="inString">
				<c path="String"/>
				<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</raw>
		<c_str public="1" get="inline" set="null" line="29" static="1">
			<f a="inString">
				<c path="String"/>
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</c_str>
		<fromPointer public="1" get="inline" set="null" line="32" static="1">
			<f a="inPtr">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromPointer>
		<fromGcPointer public="1" get="inline" set="null" line="35" static="1">
			<f a="inPtr:inLen">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromGcPointer>
		<parseFloat public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_float"</e></m></meta>
		</parseFloat>
		<parseSubstrFloat public="1" set="method" static="1">
			<f a="inString:start:length">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_substr_float"</e></m></meta>
		</parseSubstrFloat>
		<parseInt public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_substr_int"</e></m></meta>
		</parseInt>
		<parseSubstrInt public="1" set="method" static="1">
			<f a="inString:start:length">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_substr_int"</e></m></meta>
		</parseSubstrInt>
		<compare public="1" set="method" static="1">
			<f a="inString0:inString1">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_string_compare"</e></m></meta>
		</compare>
		<utf8CharCodeAt public="1" set="method" static="1">
			<f a="inString:inIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_char_code_at"</e></m></meta>
		</utf8CharCodeAt>
		<utf8Length public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_length"</e></m></meta>
		</utf8Length>
		<utf8IsValid public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_is_valid"</e></m></meta>
		</utf8IsValid>
		<utf8Sub public="1" set="method" static="1">
			<f a="inString:charStart:inLen">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_sub"</e></m></meta>
		</utf8Sub>
		<fromPointerLen public="1" set="method" static="1">
			<f a="inPtr:len">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_string_create"</e></m></meta>
		</fromPointerLen>
		<utf8DecodeAdvance public="1" set="method" static="1">
			<f a="reference">
				<x path="cpp.Char"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_decode_advance"</e></m></meta>
		</utf8DecodeAdvance>
	</class>
	<class path="cpp.ObjectType" params="" file="/usr/local/lib/haxe/std/cpp/ObjectType.hx" extern="1">
		<vtUnknown public="1" get="inline" set="null" expr="-1" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</vtUnknown>
		<vtInt public="1" get="inline" set="null" expr="0xff" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xff</e></m></meta>
		</vtInt>
		<vtNull public="1" get="inline" set="null" expr="0" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</vtNull>
		<vtFloat public="1" get="inline" set="null" expr="1" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</vtFloat>
		<vtBool public="1" get="inline" set="null" expr="2" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</vtBool>
		<vtString public="1" get="inline" set="null" expr="3" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</vtString>
		<vtObject public="1" get="inline" set="null" expr="4" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</vtObject>
		<vtArray public="1" get="inline" set="null" expr="5" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</vtArray>
		<vtFunction public="1" get="inline" set="null" expr="6" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</vtFunction>
		<vtEnum public="1" get="inline" set="null" expr="7" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</vtEnum>
		<vtClass public="1" get="inline" set="null" expr="8" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</vtClass>
		<vtInt64 public="1" get="inline" set="null" expr="9" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</vtInt64>
		<vtAbstractBase public="1" get="inline" set="null" expr="0x100" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100</e></m></meta>
		</vtAbstractBase>
	</class>
	<class path="cpp.Pointer" params="T" file="/usr/local/lib/haxe/std/cpp/Pointer.hx" extern="1">
		<extends path="cpp.ConstPointer"><c path="cpp.Pointer.T"/></extends>
		<fromRaw public="1" params="T" set="method" static="1"><f a="ptr">
	<c path="cpp.RawPointer"><c path="fromRaw.T"/></c>
	<c path="cpp.Pointer"><c path="fromRaw.T"/></c>
</f></fromRaw>
		<fromStar public="1" params="T" set="method" static="1">
			<f a="star">
				<t path="cpp.Star"><c path="fromStar.T"/></t>
				<c path="cpp.Pointer"><c path="fromStar.T"/></c>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromRaw"</e></m></meta>
		</fromStar>
		<nativeFromHandle public="1" params="T" set="method" static="1">
			<f a="inHandle:?inKind">
				<d/>
				<c path="String"/>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromHandle"</e></m></meta>
		</nativeFromHandle>
		<fromHandle public="1" params="T" get="inline" set="null" line="44" static="1"><f a="inHandle:?inKind">
	<d/>
	<c path="String"/>
	<c path="cpp.Pointer"><c path="fromHandle.T"/></c>
</f></fromHandle>
		<fromPointer public="1" params="T" set="method" static="1"><f a="inNativePointer">
	<d/>
	<c path="cpp.Pointer"><c path="fromPointer.T"/></c>
</f></fromPointer>
		<addressOf public="1" params="T" set="method" static="1"><f a="inVariable">
	<t path="cpp.Reference"><c path="addressOf.T"/></t>
	<c path="cpp.Pointer"><c path="addressOf.T"/></c>
</f></addressOf>
		<endOf public="1" params="T" set="method" static="1"><f a="inVariable">
	<c path="endOf.T"/>
	<c path="cpp.Pointer"><c path="cpp.Void"/></c>
</f></endOf>
		<nativeArrayElem public="1" params="T" set="method" static="1">
			<f a="array:inElem">
				<c path="Array"><c path="nativeArrayElem.T"/></c>
				<x path="Int"/>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::arrayElem"</e></m></meta>
		</nativeArrayElem>
		<arrayElem public="1" params="T" get="inline" set="null" line="56" static="1"><f a="array:inElem">
	<c path="Array"><c path="arrayElem.T"/></c>
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="arrayElem.T"/></c>
</f></arrayElem>
		<nativeOfArray public="1" params="T" set="method" static="1">
			<f a="array">
				<c path="Array"><c path="nativeOfArray.T"/></c>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::ofArray"</e></m></meta>
		</nativeOfArray>
		<ofArray public="1" params="T" get="inline" set="null" line="62" static="1"><f a="array">
	<c path="Array"><c path="ofArray.T"/></c>
	<c path="cpp.Pointer"><c path="ofArray.T"/></c>
</f></ofArray>
		<ref public="1" get="accessor" set="accessor"><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></ref>
		<get_ref public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></f></get_ref>
		<set_ref public="1" set="method"><f a="t">
	<c path="cpp.Pointer.T"/>
	<t path="cpp.Reference"><c path="cpp.Pointer.T"/></t>
</f></set_ref>
		<setAt public="1" set="method"><f a="inIndex:value">
	<x path="Int"/>
	<c path="cpp.Pointer.T"/>
	<x path="Void"/>
</f></setAt>
		<toUnmanagedArray public="1" get="inline" set="null" line="66"><f a="elementCount">
	<x path="Int"/>
	<c path="Array"><c path="cpp.Pointer.T"/></c>
</f></toUnmanagedArray>
		<toUnmanagedVector public="1" get="inline" set="null" line="73"><f a="elementCount">
	<x path="Int"/>
	<x path="haxe.ds.Vector"><c path="cpp.Pointer.T"/></x>
</f></toUnmanagedVector>
		<inc public="1" set="method" override="1"><f a=""><c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c></f></inc>
		<dec public="1" set="method" override="1"><f a=""><c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c></f></dec>
		<incBy public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></incBy>
		<decBy public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></decBy>
		<add public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></add>
		<sub public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></sub>
		<postIncRef public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></f></postIncRef>
		<destroy public="1" set="method"><f a=""><x path="Void"/></f></destroy>
		<destroyArray public="1" set="method"><f a=""><x path="Void"/></f></destroyArray>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreType"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
	</class>
	<class path="cpp.RawConstPointer" params="T" file="/usr/local/lib/haxe/std/cpp/RawConstPointer.hx" extern="1">
		<addressOf public="1" params="T" set="method" static="1">
			<f a="t">
				<c path="addressOf.T"/>
				<c path="cpp.RawConstPointer"><c path="addressOf.T"/></c>
			</f>
			<meta><m n=":native"><e>"::hx::AddressOf"</e></m></meta>
		</addressOf>
		<meta><m n=":unreflective"/></meta>
	</class>
	<class path="cpp.RawPointer" params="T" file="/usr/local/lib/haxe/std/cpp/RawPointer.hx" extern="1">
		<extends path="cpp.RawConstPointer"><c path="cpp.RawPointer.T"/></extends>
		<addressOf public="1" params="T" set="method" static="1">
			<f a="t">
				<c path="addressOf.T"/>
				<c path="cpp.RawPointer"><c path="addressOf.T"/></c>
			</f>
			<meta><m n=":native"><e>"::hx::AddressOf"</e></m></meta>
		</addressOf>
		<meta><m n=":unreflective"/></meta>
	</class>
	<typedef path="cpp.Reference" params="T" file="/usr/local/lib/haxe/std/cpp/Reference.hx">
		<c path="cpp.Reference.T"/>
		<haxe_doc>Allows haxe to type result correctly, and hxcpp can recognise this and
	prevent unwanted casting.</haxe_doc>
		<meta><m n=":semantics"><e>reference</e></m></meta>
	</typedef>
	<typedef path="cpp.Star" params="T" file="/usr/local/lib/haxe/std/cpp/Star.hx">
		<x path="Null"><c path="cpp.Star.T"/></x>
		<haxe_doc>Allows haxe to type result correctly, and hxcpp can recognise this use the
	correct type.</haxe_doc>
	</typedef>
	<abstract path="cpp.UInt8" params="" file="/usr/local/lib/haxe/std/cpp/UInt8.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cpp.UInt8"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cpp.Void" params="" file="/usr/local/lib/haxe/std/cpp/Void.hx" extern="1"><meta><m n=":native"><e>"void"</e></m></meta></class>
	<enum path="fracs.DifferencePreference" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,1-alpha/src/fracs/Angles.hx" module="fracs.Angles">
		<CLOCKWISE/>
		<ANTICLOCKWISE/>
		<SMALL/>
		<LARGE/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="fracs.Angles" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,1-alpha/src/fracs/Angles.hx">
		<pi2pi public="1" get="inline" set="null" line="11" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></pi2pi>
		<zeroto2pi public="1" get="inline" set="null" line="19" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zeroto2pi>
		<zerotoMinus2pi public="1" get="inline" set="null" line="27" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zerotoMinus2pi>
		<differencePrefer public="1" get="inline" set="null" line="36" static="1"><f a="a:b:prefer">
	<x path="Float"/>
	<x path="Float"/>
	<e path="fracs.DifferencePreference"/>
	<x path="Float"/>
</f></differencePrefer>
		<difference public="1" get="inline" set="null" line="48" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></difference>
		<differenceClockWise public="1" get="inline" set="null" line="57" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceClockWise>
		<differenceAntiClockwise public="1" get="inline" set="null" line="61" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceAntiClockwise>
		<differenceSmall public="1" get="inline" set="null" line="65" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceSmall>
		<differenceLarge public="1" get="inline" set="null" line="80" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceLarge>
		<differenceSmallLarge public="1" get="inline" set="null" line="95" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<a>
		<small><x path="Float"/></small>
		<large><x path="Float"/></large>
	</a>
</f></differenceSmallLarge>
	</class>
	<typedef path="fracs.Fractional" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,1-alpha/src/fracs/Fraction.hx" module="fracs.Fraction"><a>
	<value><x path="Null"><x path="Float"/></x></value>
	<positive><x path="Bool"/></positive>
	<numerator><x path="Int"/></numerator>
	<denominator><x path="Int"/></denominator>
</a></typedef>
	<abstract path="fracs.FractionArray" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,1-alpha/src/fracs/Fraction.hx" module="fracs.Fraction">
		<from><icast><c path="Array"><x path="fracs.Fraction"/></c></icast></from>
		<this><c path="Array"><x path="fracs.Fraction"/></c></this>
		<to>
			<icast><c path="Array"><x path="fracs.Fraction"/></c></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta>
			<m n=":arrayAccess"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="fracs._Fraction.FractionArray_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,1-alpha/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="?val">
			<c path="Array"><x path="fracs.Fraction"/></c>
			<x path="fracs.FractionArray"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<add public="1" get="inline" set="null" line="17" static="1"><f a="this:val">
	<c path="Array"><x path="fracs.Fraction"/></c>
	<x path="fracs.Fraction"/>
	<x path="Void"/>
</f></add>
	<toString public="1" get="inline" set="null" line="23" static="1">
		<f a="this">
			<c path="Array"><x path="fracs.Fraction"/></c>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="fracs._Fraction.FractionArray_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,1-alpha/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="?val">
				<c path="Array"><x path="fracs.Fraction"/></c>
				<x path="fracs.FractionArray"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<add public="1" get="inline" set="null" line="17" static="1"><f a="this:val">
	<c path="Array"><x path="fracs.Fraction"/></c>
	<x path="fracs.Fraction"/>
	<x path="Void"/>
</f></add>
		<toString public="1" get="inline" set="null" line="23" static="1">
			<f a="this">
				<c path="Array"><x path="fracs.Fraction"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
	</class>
	<abstract path="fracs.Fraction" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,1-alpha/src/fracs/Fraction.hx">
		<from>
			<icast><t path="fracs.Fractional"/></icast>
			<icast field="fromString"><c path="String"/></icast>
			<icast field="fromFloat"><x path="Float"/></icast>
		</from>
		<this><t path="fracs.Fractional"/></this>
		<to>
			<icast><t path="fracs.Fractional"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="fracs._Fraction.Fraction_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,1-alpha/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="numerator:denominator:?positive:?value" v="::true:null">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta>
			<m n=":value"><e>{ value : null, positive : true }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<optimize get="inline" set="null" line="45" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.Fraction"/>
</f></optimize>
	<optimizeFraction get="inline" set="null" line="49" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.Fraction"/>
</f></optimizeFraction>
	<toFloat public="1" get="inline" set="null" line="54" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</toFloat>
	<float public="1" get="inline" set="null" line="62" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="Float"/>
</f></float>
	<verbose public="1" get="inline" set="null" line="66" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<c path="String"/>
</f></verbose>
	<fromString public="1" get="inline" set="null" line="71" static="1">
		<f a="val">
			<c path="String"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="82" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<fromFloat public="1" get="inline" set="null" line="98" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<firstFloat public="1" get="inline" set="null" line="119" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.Fraction"/>
</f></firstFloat>
	<byDenominator public="1" get="inline" set="null" line="126" static="1"><f a="this:val">
	<t path="fracs.Fractional"/>
	<x path="Int"/>
	<c path="String"/>
</f></byDenominator>
	<all public="1" get="inline" set="null" line="137" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.FractionArray"/>
</f></all>
	<similarToFraction public="1" get="inline" set="null" line="141" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.FractionArray"/>
</f></similarToFraction>
	<similarToValue public="1" get="inline" set="null" line="146" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.FractionArray"/>
</f></similarToValue>
</class></impl>
	</abstract>
	<class path="fracs._Fraction.Fraction_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,1-alpha/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="numerator:denominator:?positive:?value" v="::true:null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta>
				<m n=":value"><e>{ value : null, positive : true }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<optimize get="inline" set="null" line="45" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.Fraction"/>
</f></optimize>
		<optimizeFraction get="inline" set="null" line="49" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.Fraction"/>
</f></optimizeFraction>
		<toFloat public="1" get="inline" set="null" line="54" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</toFloat>
		<float public="1" get="inline" set="null" line="62" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="Float"/>
</f></float>
		<verbose public="1" get="inline" set="null" line="66" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<c path="String"/>
</f></verbose>
		<fromString public="1" get="inline" set="null" line="71" static="1">
			<f a="val">
				<c path="String"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="82" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<fromFloat public="1" get="inline" set="null" line="98" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<firstFloat public="1" get="inline" set="null" line="119" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.Fraction"/>
</f></firstFloat>
		<byDenominator public="1" get="inline" set="null" line="126" static="1"><f a="this:val">
	<t path="fracs.Fractional"/>
	<x path="Int"/>
	<c path="String"/>
</f></byDenominator>
		<all public="1" get="inline" set="null" line="137" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.FractionArray"/>
</f></all>
		<similarToFraction public="1" get="inline" set="null" line="141" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.FractionArray"/>
</f></similarToFraction>
		<similarToValue public="1" get="inline" set="null" line="146" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.FractionArray"/>
</f></similarToValue>
	</class>
	<class path="fracs.Fracs" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,1-alpha/src/fracs/Fraction.hx" module="fracs.Fraction">
		<grabDecimalInput get="inline" set="null" line="154" static="1"><f a="decimalVal">
	<c path="String"/>
	<x path="Float"/>
</f></grabDecimalInput>
		<approximateFractions set="method" line="160" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.FractionArray"/>
			</f>
			<meta><m n=":allow"><e>fracs.Fraction</e></m></meta>
		</approximateFractions>
		<getMaxNumerator get="inline" set="null" line="186" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></getMaxNumerator>
		<extractDigitStr get="inline" set="null" line="219" static="1"><f a="fStr">
	<c path="String"/>
	<c path="String"/>
</f></extractDigitStr>
		<getMaxNumeratorStr get="inline" set="null" line="240" static="1"><f a="fStr">
	<c path="String"/>
	<x path="Float"/>
</f></getMaxNumeratorStr>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="fracs.Pi2pi" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,1-alpha/src/fracs/Pi2pi.hx">
		<from>
			<icast field="fromFloat"><x path="Float"/></icast>
			<icast field="fromFraction"><x path="fracs.Fraction"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to>
			<icast><x path="Float"/></icast>
			<icast field="tofraction"><x path="fracs.Fraction"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta><m n="forward"/></meta>
		<impl><class path="fracs._Pi2pi.Pi2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,1-alpha/src/fracs/Pi2pi.hx" private="1" module="fracs.Pi2pi" final="1">
	<_new get="inline" set="null" line="5" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromFloat public="1" get="inline" set="null" line="11" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<additionPi public="1" set="method" line="20" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</additionPi>
	<subtractionPi public="1" set="method" line="24" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtractionPi>
	<dividePi public="1" set="method" line="28" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</dividePi>
	<timesPi public="1" set="method" line="32" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</timesPi>
	<addition public="1" set="method" line="36" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</addition>
	<subtraction public="1" set="method" line="40" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtraction>
	<divide public="1" set="method" line="44" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<times public="1" set="method" line="48" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</times>
	<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
	<get_degrees public="1" get="inline" set="null" line="53" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
	<set_degrees public="1" get="inline" set="null" line="57" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
	<fromFraction get="inline" set="null" line="63" static="1">
		<f a="val">
			<x path="fracs.Fraction"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFraction>
	<tofraction get="inline" set="null" line="67" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":to"/></meta>
	</tofraction>
	<fromString get="inline" set="null" line="72" static="1">
		<f a="val">
			<c path="String"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="78" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="fracs._Pi2pi.Pi2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,1-alpha/src/fracs/Pi2pi.hx" private="1" module="fracs.Pi2pi" final="1">
		<_new get="inline" set="null" line="5" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromFloat public="1" get="inline" set="null" line="11" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<additionPi public="1" set="method" line="20" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</additionPi>
		<subtractionPi public="1" set="method" line="24" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtractionPi>
		<dividePi public="1" set="method" line="28" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</dividePi>
		<timesPi public="1" set="method" line="32" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</timesPi>
		<addition public="1" set="method" line="36" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</addition>
		<subtraction public="1" set="method" line="40" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtraction>
		<divide public="1" set="method" line="44" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<times public="1" set="method" line="48" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</times>
		<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
		<get_degrees public="1" get="inline" set="null" line="53" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
		<set_degrees public="1" get="inline" set="null" line="57" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
		<fromFraction get="inline" set="null" line="63" static="1">
			<f a="val">
				<x path="fracs.Fraction"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFraction>
		<tofraction get="inline" set="null" line="67" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":to"/></meta>
		</tofraction>
		<fromString get="inline" set="null" line="72" static="1">
			<f a="val">
				<c path="String"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="78" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
	</class>
	<abstract path="fracs.ZeroTo2pi" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,1-alpha/src/fracs/ZeroTo2pi.hx">
		<from>
			<icast field="fromFloat"><x path="Float"/></icast>
			<icast field="fromFraction"><x path="fracs.Fraction"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to>
			<icast><x path="Float"/></icast>
			<icast field="tofraction"><x path="fracs.Fraction"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta><m n="forward"/></meta>
		<impl><class path="fracs._ZeroTo2pi.ZeroTo2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,1-alpha/src/fracs/ZeroTo2pi.hx" private="1" module="fracs.ZeroTo2pi" final="1">
	<_new get="inline" set="null" line="5" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromFloat public="1" get="inline" set="null" line="11" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<additionPi public="1" set="method" line="20" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</additionPi>
	<subtractionPi public="1" set="method" line="24" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtractionPi>
	<dividePi public="1" set="method" line="28" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</dividePi>
	<timesPi public="1" set="method" line="32" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</timesPi>
	<addition public="1" set="method" line="36" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</addition>
	<subtraction public="1" set="method" line="40" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtraction>
	<divide public="1" set="method" line="44" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<times public="1" set="method" line="48" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</times>
	<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
	<get_degrees public="1" get="inline" set="null" line="53" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
	<set_degrees public="1" get="inline" set="null" line="57" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
	<fromFraction get="inline" set="null" line="63" static="1">
		<f a="val">
			<x path="fracs.Fraction"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFraction>
	<tofraction get="inline" set="null" line="67" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":to"/></meta>
	</tofraction>
	<fromString get="inline" set="null" line="72" static="1">
		<f a="val">
			<c path="String"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="78" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="fracs._ZeroTo2pi.ZeroTo2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,1-alpha/src/fracs/ZeroTo2pi.hx" private="1" module="fracs.ZeroTo2pi" final="1">
		<_new get="inline" set="null" line="5" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromFloat public="1" get="inline" set="null" line="11" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<additionPi public="1" set="method" line="20" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</additionPi>
		<subtractionPi public="1" set="method" line="24" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtractionPi>
		<dividePi public="1" set="method" line="28" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</dividePi>
		<timesPi public="1" set="method" line="32" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</timesPi>
		<addition public="1" set="method" line="36" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</addition>
		<subtraction public="1" set="method" line="40" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtraction>
		<divide public="1" set="method" line="44" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<times public="1" set="method" line="48" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</times>
		<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
		<get_degrees public="1" get="inline" set="null" line="53" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
		<set_degrees public="1" get="inline" set="null" line="57" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
		<fromFraction get="inline" set="null" line="63" static="1">
			<f a="val">
				<x path="fracs.Fraction"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFraction>
		<tofraction get="inline" set="null" line="67" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":to"/></meta>
		</tofraction>
		<fromString get="inline" set="null" line="72" static="1">
			<f a="val">
				<c path="String"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="78" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
	</class>
	<abstract path="haxe.CallStack" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1"><meta><m n=":keep"/></meta></class>
	<class path="haxe.EnumTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.Exception" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Exception.hx">
		<caught set="method" line="18" static="1"><f a="value">
	<x path="Any"/>
	<c path="haxe.Exception"/>
</f></caught>
		<thrown set="method" line="26" static="1"><f a="value">
	<x path="Any"/>
	<x path="Any"/>
</f></thrown>
		<message public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Exception message.</haxe_doc>
		</message>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<__exceptionMessage>
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__exceptionMessage>
		<__nativeStack>
			<c path="Array"><c path="String"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__nativeStack>
		<__skipStack expr="0">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
			</meta>
		</__skipStack>
		<__nativeException>
			<x path="Any"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeException>
		<__previousException>
			<x path="Null"><c path="haxe.Exception"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__previousException>
		<unwrap set="method" line="48"><f a=""><x path="Any"/></f></unwrap>
		<toString public="1" set="method" line="52">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<get_message set="method" line="66"><f a=""><c path="String"/></f></get_message>
		<get_native final="1" set="method" line="74"><f a=""><x path="Any"/></f></get_native>
		<new public="1" set="method" line="36">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="haxe.Int32" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe._Int64.___Int64" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64" extern="1">
		<make public="1" set="method" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_make"</e></m></meta>
		</make>
		<ofInt public="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>" ::cpp::Int64Struct"</e></m></meta>
		</ofInt>
		<isInt64 public="1" set="method" static="1">
			<f a="d">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>" ::cpp::Int64Struct::is"</e></m></meta>
		</isInt64>
		<isNeg public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_is_neg"</e></m></meta>
		</isNeg>
		<isZero public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_is_zero"</e></m></meta>
		</isZero>
		<compare public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_compare"</e></m></meta>
		</compare>
		<ucompare public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_ucompare"</e></m></meta>
		</ucompare>
		<toString public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_to_string"</e></m></meta>
		</toString>
		<neg public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neg"</e></m></meta>
		</neg>
		<preIncrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_pre_increment"</e></m></meta>
		</preIncrement>
		<postIncrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_post_increment"</e></m></meta>
		</postIncrement>
		<preDecrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_pre_decrement"</e></m></meta>
		</preDecrement>
		<postDecrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_post_decrement"</e></m></meta>
		</postDecrement>
		<add public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_add"</e></m></meta>
		</add>
		<addInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_add"</e></m></meta>
		</addInt>
		<sub public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</sub>
		<subInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</subInt>
		<intSub public="1" set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</intSub>
		<mul public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_mul"</e></m></meta>
		</mul>
		<div public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_div"</e></m></meta>
		</div>
		<mod public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_mod"</e></m></meta>
		</mod>
		<eq public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_eq"</e></m></meta>
		</eq>
		<eqInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_eq"</e></m></meta>
		</eqInt>
		<neq public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neq"</e></m></meta>
		</neq>
		<neqInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neq"</e></m></meta>
		</neqInt>
		<complement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_complement"</e></m></meta>
		</complement>
		<bitAnd public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_and"</e></m></meta>
		</bitAnd>
		<bitOr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_or"</e></m></meta>
		</bitOr>
		<bitXor public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_xor"</e></m></meta>
		</bitXor>
		<shl public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_shl"</e></m></meta>
		</shl>
		<shr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_shr"</e></m></meta>
		</shr>
		<ushr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_ushr"</e></m></meta>
		</ushr>
		<high public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_high"</e></m></meta>
		</high>
		<low public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_low"</e></m></meta>
		</low>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":notNull"/>
			<m n=":include"><e>"cpp/Int64.h"</e></m>
			<m n=":native"><e>"cpp::Int64Struct"</e></m>
		</meta>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64"><c path="haxe._Int64.___Int64"/></typedef>
	<abstract path="haxe.Int64" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<meta>
			<m n=":coreApi"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.Log" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="29" static="1">
			<f a="v:?infos">
				<d/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.NativeStackTrace" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/NativeStackTrace.hx">
		<saveStack public="1" get="inline" set="null" line="12" static="1">
			<f a="exception">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature"><e>"haxe.NativeStackTrace.exceptionStack"</e></m></meta>
		</saveStack>
		<callStack public="1" set="method" line="16" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":noDebug"/>
			</meta>
		</callStack>
		<exceptionStack public="1" set="method" line="21" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":noDebug"/>
			</meta>
		</exceptionStack>
		<haxe_doc>Do not use manually.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/usr/local/lib/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.ValueException" params="" file="/usr/local/lib/haxe/std/haxe/ValueException.hx">
		<extends path="haxe.Exception"/>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>Thrown value.</haxe_doc>
		</value>
		<unwrap set="method" line="35" override="1">
			<f a=""><x path="Any"/></f>
			<haxe_doc>Extract an originally thrown value.

		This method must return the same value on subsequent calls.
		Used internally for catching non-native exceptions.
		Do _not_ override unless you know what you are doing.</haxe_doc>
		</unwrap>
		<new public="1" set="method" line="23"><f a="value:?previous:?native">
	<x path="Any"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception containing arbitrary value.

	This class is automatically used for throwing values, which don't extend `haxe.Exception`
	or native exception type.
	For example:
	```haxe
	throw "Terrible error";
	```
	will be compiled to
	```haxe
	throw new ValueException("Terrible error");
	```</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.ds.Map" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":multiType"><e>@:followWithAbstracts K</e></m>
		</meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.StringMap" params="T" file="/usr/local/lib/haxe/std/cpp/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h>
			<d/>
			<meta><m n=":ifFeature"><e>"haxe.ds.StringMap.*"</e></m></meta>
		</h>
		<set public="1" set="method" line="60">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<new public="1" set="method" line="58">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":headerClassCode"><e><![CDATA["\n  inline void set(String key, ::null value) { __string_hash_set(HX_MAP_THIS,key,value); }\n  inline void set(String key, bool value) { __string_hash_set(HX_MAP_THIS,key,value); }\n  inline void set(String key, char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, unsigned char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, signed char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, short value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, unsigned short value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, int value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, unsigned int value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, float value) { __string_hash_set_float(HX_MAP_THIS,key,value); }\n  inline void set(String key, double value) { __string_hash_set_float(HX_MAP_THIS,key,value); }\n  inline void set(String key, ::String value) { __string_hash_set_string(HX_MAP_THIS,key,value); }\n\n  template<typename V, typename H>\n  inline void set(String key, const ::cpp::Struct<V,H> &value) {__string_hash_set(HX_MAP_THIS,key,value); }\n  template<typename V>\n  inline void set(String key, const ::cpp::Function<V> &value) {__string_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\n  template<typename V>\n  inline void set(String key, const ::cpp::Pointer<V> &value) {__string_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\n\n  template<typename VALUE>\n  inline void set(Dynamic &key, const VALUE &value) { set( (String)key, value ); }\n\n  inline bool get_bool(String key) { return __string_hash_get_bool(h,key); }\n  inline int get_int(String key) { return __string_hash_get_int(h,key); }\n  inline Float get_float(String key) { return __string_hash_get_float(h,key); }\n  inline String get_string(String key) { return __string_hash_get_string(h,key); }\n"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.extern.AsVar" params="T" file="/usr/local/lib/haxe/std/haxe/extern/AsVar.hx">
		<from><icast><c path="haxe.extern.AsVar.T"/></icast></from>
		<this><c path="haxe.extern.AsVar.T"/></this>
		<to><icast><c path="haxe.extern.AsVar.T"/></icast></to>
		<haxe_doc>If this type is used as an argument type, the compiler ensures that
	argument expressions are bound to a local variable.</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
		<impl><class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.io.Bytes" params="" file="/projects/May2019/May2020/lime/src/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="506" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="536" static="1">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns bytes representation of the given String, using specific encoding (UTF-8 by default)</haxe_doc>
		</ofString>
		<ofData public="1" set="method" line="598" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<ofHex public="1" set="method" line="615" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Convert hexadecimal string to Bytes.
		Support only straight hex string ( Example: "0FDA14058916052309" )</haxe_doc>
		</ofHex>
		<fastGet public="1" get="inline" set="null" line="636" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Read the most efficiently possible the n-th byte of the data.
		Behavior when reading outside of the available data is unspecified.</haxe_doc>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="53">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="70">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</set>
		<blit public="1" set="method" line="89"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<fill public="1" set="method" line="128">
			<f a="pos:len:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fill>
		<sub public="1" set="method" line="148"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="176"><f a="other">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></compare>
		<getDouble public="1" get="inline" set="null" line="229">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the IEEE double precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getDouble>
		<getFloat public="1" get="inline" set="null" line="251">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the IEEE single precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getFloat>
		<setDouble public="1" set="method" line="273">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Store the IEEE double precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setDouble>
		<setFloat public="1" set="method" line="299">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Store the IEEE single precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setFloat>
		<getUInt16 public="1" get="inline" set="null" line="319">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</getUInt16>
		<setUInt16 public="1" get="inline" set="null" line="331">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</setUInt16>
		<getInt32 public="1" get="inline" set="null" line="344">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt32>
		<getInt64 public="1" get="inline" set="null" line="362">
			<f a="pos">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt64>
		<setInt32 public="1" get="inline" set="null" line="370">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt32>
		<setInt64 public="1" get="inline" set="null" line="385">
			<f a="pos:v">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt64>
		<getString public="1" set="method" line="391">
			<f a="pos:len:?encoding">
				<x path="Int"/>
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getString>
		<readString public="1" get="inline" set="null" line="456">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"readString is deprecated, use getString instead"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</readString>
		<toString public="1" set="method" line="464">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns string representation of the bytes as UTF8</haxe_doc>
		</toString>
		<toHex public="1" set="method" line="485"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="501"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new set="method" line="44"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":autoBuild"><e>lime._internal.macros.AssetsMacro.embedBytes()</e></m>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/usr/local/lib/haxe/std/haxe/io/BytesData.hx"><c path="Array"><x path="cpp.UInt8"/></c></typedef>
	<enum path="haxe.io.Encoding" params="" file="/usr/local/lib/haxe/std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.io.Error" params="" file="/usr/local/lib/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/usr/local/lib/haxe/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="44">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="hxGeomAlgo.Debug" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Debug.hx">
		<assert public="1" get="inline" set="null" line="22" static="1">
			<f a="cond:?message:?pos">
				<x path="Bool"/>
				<c path="String"/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Used for sanity-checks throughout the code when in debug mode (or if -D GEOM_CHECKS is passed to the compiler).
   * Should be automatically stripped out by the compiler in release mode (or if -D NO_GEOM_CHECKS is passed to the compiler).</haxe_doc>
		</assert>
		<haxe_doc>* @author azrafe7</haxe_doc>
	</class>
	<class path="hxGeomAlgo.HomogCoord" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/HomogCoord.hx">
		<INFINITY public="1" expr="new HomogCoord()" line="19" static="1">
			<c path="hxGeomAlgo.HomogCoord"/>
			<meta><m n=":value"><e>new HomogCoord()</e></m></meta>
		</INFINITY>
		<det public="1" set="method" line="63" static="1"><f a="p:q:r">
	<c path="hxGeomAlgo.HomogCoord"/>
	<c path="hxGeomAlgo.HomogCoord"/>
	<c path="hxGeomAlgo.HomogCoord"/>
	<x path="Float"/>
</f></det>
		<ccw public="1" set="method" line="67" static="1"><f a="p:q:r">
	<c path="hxGeomAlgo.HomogCoord"/>
	<c path="hxGeomAlgo.HomogCoord"/>
	<c path="hxGeomAlgo.HomogCoord"/>
	<x path="Bool"/>
</f></ccw>
		<cw public="1" set="method" line="71" static="1"><f a="p:q:r">
	<c path="hxGeomAlgo.HomogCoord"/>
	<c path="hxGeomAlgo.HomogCoord"/>
	<c path="hxGeomAlgo.HomogCoord"/>
	<x path="Bool"/>
</f></cw>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<w public="1"><x path="Float"/></w>
		<add public="1" set="method" line="31"><f a="p">
	<c path="hxGeomAlgo.HomogCoord"/>
	<c path="hxGeomAlgo.HomogCoord"/>
</f></add>
		<sub public="1" set="method" line="33"><f a="p">
	<c path="hxGeomAlgo.HomogCoord"/>
	<c path="hxGeomAlgo.HomogCoord"/>
</f></sub>
		<neg public="1" set="method" line="35"><f a=""><c path="hxGeomAlgo.HomogCoord"/></f></neg>
		<mul public="1" set="method" line="37"><f a="m">
	<x path="Float"/>
	<c path="hxGeomAlgo.HomogCoord"/>
</f></mul>
		<div public="1" set="method" line="39"><f a="m">
	<x path="Float"/>
	<c path="hxGeomAlgo.HomogCoord"/>
</f></div>
		<normalize public="1" set="method" line="41"><f a=""><c path="hxGeomAlgo.HomogCoord"/></f></normalize>
		<lengthSquared public="1" set="method" line="43"><f a=""><x path="Float"/></f></lengthSquared>
		<length public="1" set="method" line="45"><f a=""><x path="Float"/></f></length>
		<perp public="1" set="method" line="47"><f a=""><c path="hxGeomAlgo.HomogCoord"/></f></perp>
		<dotPoint public="1" set="method" line="49"><f a="p">
	<x path="hxGeomAlgo.HxPoint"/>
	<x path="Float"/>
</f></dotPoint>
		<dot public="1" set="method" line="51"><f a="p">
	<c path="hxGeomAlgo.HomogCoord"/>
	<x path="Float"/>
</f></dot>
		<perpdot public="1" set="method" line="53"><f a="p">
	<c path="hxGeomAlgo.HomogCoord"/>
	<x path="Float"/>
</f></perpdot>
		<dotperp public="1" set="method" line="55"><f a="p">
	<c path="hxGeomAlgo.HomogCoord"/>
	<x path="Float"/>
</f></dotperp>
		<equals public="1" set="method" line="57"><f a="p">
	<c path="hxGeomAlgo.HomogCoord"/>
	<x path="Bool"/>
</f></equals>
		<left public="1" set="method" line="59"><f a="p">
	<x path="hxGeomAlgo.HxPoint"/>
	<x path="Bool"/>
</f></left>
		<right public="1" set="method" line="61"><f a="p">
	<x path="hxGeomAlgo.HxPoint"/>
	<x path="Bool"/>
</f></right>
		<toScreen public="1" set="method" line="75"><f a=""><x path="hxGeomAlgo.HxPoint"/></f></toScreen>
		<toPoint public="1" set="method" line="79"><f a=""><x path="hxGeomAlgo.HxPoint"/></f></toPoint>
		<meet public="1" set="method" line="81"><f a="p">
	<c path="hxGeomAlgo.HomogCoord"/>
	<c path="hxGeomAlgo.HomogCoord"/>
</f></meet>
		<meetPoint public="1" set="method" line="85"><f a="p">
	<x path="hxGeomAlgo.HxPoint"/>
	<c path="hxGeomAlgo.HomogCoord"/>
</f></meetPoint>
		<toString public="1" set="method" line="89"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="25">
			<f a="?x:?y:?w" v="0:0:1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1, y : 0, x : 0 }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxGeomAlgo.HxPoint" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/HxPoint.hx">
		<from>
			<icast><c path="hxGeomAlgo.HxPointData"/></icast>
			<icast field="fromPointStruct"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></icast>
		</from>
		<this><c path="hxGeomAlgo.HxPointData"/></this>
		<to>
			<icast><c path="hxGeomAlgo.HxPointData"/></icast>
			<icast field="toPointStruct"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></icast>
		</to>
		<haxe_doc>* Minimal Point class (auto-converting to/from flash.geom.Point and {x:Float, y:Float}).
 * 
 * @author azrafe7</haxe_doc>
		<meta><m n=":expose"/></meta>
		<impl><class path="hxGeomAlgo._HxPoint.HxPoint_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/HxPoint.hx" private="1" module="hxGeomAlgo.HxPoint" final="1">
	<EMPTY public="1" set="null" expr="new HxPoint(Math.NaN, Math.NaN)" line="11" static="1">
		<x path="hxGeomAlgo.HxPoint"/>
		<meta><m n=":value"><e>new HxPoint(Math.NaN, Math.NaN)</e></m></meta>
	</EMPTY>
	<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
	<get_x get="inline" set="null" line="14" static="1"><f a="this">
	<c path="hxGeomAlgo.HxPointData"/>
	<x path="Float"/>
</f></get_x>
	<set_x get="inline" set="null" line="15" static="1"><f a="this:value">
	<c path="hxGeomAlgo.HxPointData"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
	<get_y get="inline" set="null" line="18" static="1"><f a="this">
	<c path="hxGeomAlgo.HxPointData"/>
	<x path="Float"/>
</f></get_y>
	<set_y get="inline" set="null" line="19" static="1"><f a="this:value">
	<c path="hxGeomAlgo.HxPointData"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<_new public="1" set="method" line="21" static="1">
		<f a="?x:?y" v="0:0">
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxGeomAlgo.HxPoint"/>
		</f>
		<meta>
			<m n=":value"><e>{ y : 0, x : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<setTo public="1" set="method" line="27" static="1"><f a="this:newX:newY">
	<c path="hxGeomAlgo.HxPointData"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setTo>
	<equals public="1" get="inline" set="null" line="33" static="1"><f a="this:p">
	<c path="hxGeomAlgo.HxPointData"/>
	<x path="hxGeomAlgo.HxPoint"/>
	<x path="Bool"/>
</f></equals>
	<clone public="1" get="inline" set="null" line="38" static="1"><f a="this">
	<c path="hxGeomAlgo.HxPointData"/>
	<x path="hxGeomAlgo.HxPoint"/>
</f></clone>
	<toString public="1" get="inline" set="null" line="43" static="1"><f a="this">
	<c path="hxGeomAlgo.HxPointData"/>
	<c path="String"/>
</f></toString>
	<fromPointStruct get="inline" set="null" line="60" static="1">
		<f a="p">
			<a>
				<y><x path="Float"/></y>
				<x><x path="Float"/></x>
			</a>
			<x path="hxGeomAlgo.HxPoint"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromPointStruct>
	<toPointStruct get="inline" set="null" line="65" static="1">
		<f a="this">
			<c path="hxGeomAlgo.HxPointData"/>
			<a>
				<y><x path="Float"/></y>
				<x><x path="Float"/></x>
			</a>
		</f>
		<meta><m n=":to"/></meta>
	</toPointStruct>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":expose"/>
	</meta>
</class></impl>
	</abstract>
	<class path="hxGeomAlgo.HxPointData" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/HxPoint.hx" module="hxGeomAlgo.HxPoint">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<toString public="1" get="inline" set="null" line="83"><f a=""><c path="String"/></f></toString>
		<new public="1" get="inline" set="null" line="77">
			<f a="?x:?y" v="0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0 }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxGeomAlgo._HxPoint.HxPoint_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/HxPoint.hx" private="1" module="hxGeomAlgo.HxPoint" final="1">
		<EMPTY public="1" set="null" expr="new HxPoint(Math.NaN, Math.NaN)" line="11" static="1">
			<x path="hxGeomAlgo.HxPoint"/>
			<meta><m n=":value"><e>new HxPoint(Math.NaN, Math.NaN)</e></m></meta>
		</EMPTY>
		<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
		<get_x get="inline" set="null" line="14" static="1"><f a="this">
	<c path="hxGeomAlgo.HxPointData"/>
	<x path="Float"/>
</f></get_x>
		<set_x get="inline" set="null" line="15" static="1"><f a="this:value">
	<c path="hxGeomAlgo.HxPointData"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
		<get_y get="inline" set="null" line="18" static="1"><f a="this">
	<c path="hxGeomAlgo.HxPointData"/>
	<x path="Float"/>
</f></get_y>
		<set_y get="inline" set="null" line="19" static="1"><f a="this:value">
	<c path="hxGeomAlgo.HxPointData"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<_new public="1" set="method" line="21" static="1">
			<f a="?x:?y" v="0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxGeomAlgo.HxPoint"/>
			</f>
			<meta>
				<m n=":value"><e>{ y : 0, x : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<setTo public="1" set="method" line="27" static="1"><f a="this:newX:newY">
	<c path="hxGeomAlgo.HxPointData"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setTo>
		<equals public="1" get="inline" set="null" line="33" static="1"><f a="this:p">
	<c path="hxGeomAlgo.HxPointData"/>
	<x path="hxGeomAlgo.HxPoint"/>
	<x path="Bool"/>
</f></equals>
		<clone public="1" get="inline" set="null" line="38" static="1"><f a="this">
	<c path="hxGeomAlgo.HxPointData"/>
	<x path="hxGeomAlgo.HxPoint"/>
</f></clone>
		<toString public="1" get="inline" set="null" line="43" static="1"><f a="this">
	<c path="hxGeomAlgo.HxPointData"/>
	<c path="String"/>
</f></toString>
		<fromPointStruct get="inline" set="null" line="60" static="1">
			<f a="p">
				<a>
					<y><x path="Float"/></y>
					<x><x path="Float"/></x>
				</a>
				<x path="hxGeomAlgo.HxPoint"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromPointStruct>
		<toPointStruct get="inline" set="null" line="65" static="1">
			<f a="this">
				<c path="hxGeomAlgo.HxPointData"/>
				<a>
					<y><x path="Float"/></y>
					<x><x path="Float"/></x>
				</a>
			</f>
			<meta><m n=":to"/></meta>
		</toPointStruct>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":expose"/>
		</meta>
	</class>
	<typedef path="hxGeomAlgo.Poly" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/PolyTools.hx" module="hxGeomAlgo.PolyTools"><c path="Array"><x path="hxGeomAlgo.HxPoint"/></c></typedef>
	<typedef path="hxGeomAlgo.Tri" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/PolyTools.hx" module="hxGeomAlgo.PolyTools"><t path="hxGeomAlgo.Poly"/></typedef>
	<typedef path="hxGeomAlgo.Diagonal" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/PolyTools.hx" module="hxGeomAlgo.PolyTools">
		<a>
			<to><x path="Int"/></to>
			<from><x path="Int"/></from>
		</a>
		<meta><m n=":expose"/></meta>
	</typedef>
	<class path="hxGeomAlgo.PolyTools" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/PolyTools.hx">
		<point expr="new HxPoint()" line="31" static="1">
			<x path="hxGeomAlgo.HxPoint"/>
			<meta><m n=":value"><e>new HxPoint()</e></m></meta>
		</point>
		<zero public="1" expr="new HxPoint(0, 0)" line="33" static="1">
			<x path="hxGeomAlgo.HxPoint"/>
			<meta><m n=":value"><e>new HxPoint(0, 0)</e></m></meta>
		</zero>
		<EPSILON public="1" expr=".00000001" line="35" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>.00000001</e></m></meta>
		</EPSILON>
		<isCCW public="1" set="method" line="39" static="1">
			<f a="poly">
				<t path="hxGeomAlgo.Poly"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `poly` is counterclockwise (assumes y axis pointing down).</haxe_doc>
		</isCCW>
		<isCW public="1" set="method" line="51" static="1">
			<f a="poly">
				<t path="hxGeomAlgo.Poly"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `poly` is clockwise (assumes y axis pointing down).</haxe_doc>
		</isCW>
		<makeCCW public="1" set="method" line="63" static="1">
			<f a="poly">
				<t path="hxGeomAlgo.Poly"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Makes `poly` counterclockwise (in place). Returns true if reversed.</haxe_doc>
		</makeCCW>
		<makeCW public="1" set="method" line="76" static="1">
			<f a="poly">
				<t path="hxGeomAlgo.Poly"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Makes `poly` clockwise (in place). Returns true if reversed.</haxe_doc>
		</makeCW>
		<isConvex public="1" set="method" line="92" static="1">
			<f a="poly">
				<t path="hxGeomAlgo.Poly"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Assuming the polygon is simple (not self-intersecting), checks if it is convex.</haxe_doc>
		</isConvex>
		<isSimple public="1" set="method" line="125" static="1">
			<f a="poly">
				<t path="hxGeomAlgo.Poly"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if the polygon is simple (not self-intersecting).</haxe_doc>
		</isSimple>
		<segmentIntersect public="1" set="method" line="160" static="1">
			<f a="p0:p1:q0:q1">
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
			</f>
			<haxe_doc>* Returns the intersection point between segments p0-p1 and q0-q1. Null if no intersection is found.</haxe_doc>
		</segmentIntersect>
		<findDuplicatePoints public="1" set="method" line="204" static="1">
			<f a="poly:?consecutiveOnly:?wrapAround" v=":true:true">
				<t path="hxGeomAlgo.Poly"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ wrapAround : true, consecutiveOnly : true }</e></m></meta>
			<haxe_doc>* Returns indices of duplicate points in `poly` (or an empty array if none are found).
   * NOTE: indices in the result are guaranteed to be in ascending order.
   * 
   * @param consecutiveOnly		if true only equal adjacent points are reported
   * @param wrapAround			if true also first vs last point will be checked</haxe_doc>
		</findDuplicatePoints>
		<intersection public="1" set="method" line="225" static="1">
			<f a="p1:p2:q1:q2">
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Finds the intersection point between lines extending the segments `p1`-`p2` and `q1`-`q2`. Returns null if they're parallel.</haxe_doc>
		</intersection>
		<isReflex public="1" set="method" line="246" static="1">
			<f a="poly:idx">
				<t path="hxGeomAlgo.Poly"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `poly` vertex at idx is a reflex vertex.</haxe_doc>
		</isReflex>
		<at public="1" get="inline" set="null" line="252" static="1">
			<f a="poly:idx">
				<t path="hxGeomAlgo.Poly"/>
				<x path="Int"/>
				<x path="hxGeomAlgo.HxPoint"/>
			</f>
			<haxe_doc>Gets `poly` vertex at `idx` (wrapping around if needed).</haxe_doc>
		</at>
		<wrappedIdx public="1" get="inline" set="null" line="259" static="1">
			<f a="poly:idx">
				<t path="hxGeomAlgo.Poly"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Gets usable `idx` from `poly` (wrapping around if needed).</haxe_doc>
		</wrappedIdx>
		<side public="1" get="inline" set="null" line="267" static="1">
			<f a="p:a:b">
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[Gets the side (signed area) of `p` relative to the line extending `b`-`a` (> 0 -> left, < 0 -> right, == 0 -> collinear).]]></haxe_doc>
		</side>
		<isLeft public="1" get="inline" set="null" line="273" static="1">
			<f a="p:a:b">
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `p` is on the left of the line extending `b`-`a`.</haxe_doc>
		</isLeft>
		<isLeftOrOn public="1" get="inline" set="null" line="279" static="1">
			<f a="p:a:b">
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `p` is on the left or collinear to the line extending `b`-`a`.</haxe_doc>
		</isLeftOrOn>
		<isRight public="1" get="inline" set="null" line="285" static="1">
			<f a="p:a:b">
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `p` is on the right of the line extending `b`-`a`.</haxe_doc>
		</isRight>
		<isRightOrOn public="1" get="inline" set="null" line="291" static="1">
			<f a="p:a:b">
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `p` is on the right or collinear to the line extending `b`-`a`.</haxe_doc>
		</isRightOrOn>
		<isCollinear public="1" get="inline" set="null" line="297" static="1">
			<f a="p:a:b">
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the specified triangle is degenerate (collinear points).</haxe_doc>
		</isCollinear>
		<distance public="1" get="inline" set="null" line="302" static="1">
			<f a="v:w">
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Distance from `v` to `w`.</haxe_doc>
		</distance>
		<distanceToSegment public="1" get="inline" set="null" line="305" static="1">
			<f a="p:v:w">
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Perpendicular distance from `p` to line segment `v`-`w`.</haxe_doc>
		</distanceToSegment>
		<distanceSquared public="1" get="inline" set="null" line="308" static="1">
			<f a="v:w">
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Squared distance from `v` to `w`.</haxe_doc>
		</distanceSquared>
		<distanceToSegmentSquared public="1" set="method" line="311" static="1">
			<f a="p:v:w">
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Squared perpendicular distance from `p` to line segment `v`-`w`.</haxe_doc>
		</distanceToSegmentSquared>
		<getCentroid public="1" set="method" line="321" static="1"><f a="poly">
	<t path="hxGeomAlgo.Poly"/>
	<x path="hxGeomAlgo.HxPoint"/>
</f></getCentroid>
		<getArea public="1" set="method" line="342" static="1"><f a="poly">
	<t path="hxGeomAlgo.Poly"/>
	<x path="Float"/>
</f></getArea>
		<meet public="1" set="method" line="354" static="1"><f a="p:q">
	<x path="hxGeomAlgo.HxPoint"/>
	<x path="hxGeomAlgo.HxPoint"/>
	<c path="hxGeomAlgo.HomogCoord"/>
</f></meet>
		<dot public="1" set="method" line="360" static="1">
			<f a="p:q">
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Dot product.</haxe_doc>
		</dot>
		<sqr public="1" get="inline" set="null" line="365" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Returns `x` squared.</haxe_doc>
		</sqr>
		<eq public="1" get="inline" set="null" line="369" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Returns true if `a` is _acceptably_ equal to `b` (i.e. `a` is within EPSILON distance from `b`).</haxe_doc>
		</eq>
		<clear public="1" params="T" get="inline" set="null" line="375" static="1">
			<f a="array">
				<c path="Array"><c path="clear.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Empties an array of its contents.</haxe_doc>
		</clear>
		<toFloatArray public="1" set="method" line="385" static="1">
			<f a="poly:?out">
				<t path="hxGeomAlgo.Poly"/>
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc><![CDATA[Converts a poly defined by an Array<HxPoint> to an Array<Float> (appending values to `out` if specified).]]></haxe_doc>
		</toFloatArray>
		<reverseFloatArray public="1" set="method" line="398" static="1">
			<f a="poly:?inPlace" v=":false">
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>{ inPlace : false }</e></m></meta>
			<haxe_doc>Reverses the coords of the 2D float array `poly` (doing it `inPlace` if specified).</haxe_doc>
		</reverseFloatArray>
		<flatten public="1" params="T" set="method" line="413" static="1">
			<f a="array:?out">
				<c path="Array"><c path="Array"><c path="flatten.T"/></c></c>
				<c path="Array"><c path="flatten.T"/></c>
				<c path="Array"><c path="flatten.T"/></c>
			</f>
			<haxe_doc>Converts an Array of Arrays into a 'flattened' Array (appending values to `out` if specified).</haxe_doc>
		</flatten>
		<toPointArray public="1" set="method" line="425" static="1">
			<f a="poly:?out">
				<c path="Array"><x path="Float"/></c>
				<x path="Null"><t path="hxGeomAlgo.Poly"/></x>
				<t path="hxGeomAlgo.Poly"/>
			</f>
			<haxe_doc><![CDATA[Converts a poly defined by an Array<Float> to an Array<HxPoint> (appending values to `out` if specified).]]></haxe_doc>
		</toPointArray>
		<inflateLine public="1" set="method" line="439" static="1">
			<f a="start:end:thickness">
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="hxGeomAlgo.HxPoint"/>
				<x path="Float"/>
				<t path="hxGeomAlgo.Poly"/>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Expands a line into a rectangular poly, offsetting it by half-`thickness` along its normals.</haxe_doc>
		</inflateLine>
		<clip public="1" set="method" line="457" static="1">
			<f a="subjPoly:clipPoly">
				<t path="hxGeomAlgo.Poly"/>
				<t path="hxGeomAlgo.Poly"/>
				<c path="Array"><t path="hxGeomAlgo.Poly"/></c>
			</f>
			<haxe_doc>* Clips `subjPoly` with `clipPoly` (using the Sutherland-Hodgman algorithm).
   * 
   * NOTE: expects simple polygons, and `clipPoly` MUST be convex.
   * 
   * @see https://en.wikipedia.org/wiki/Sutherland%E2%80%93Hodgman_algorithm</haxe_doc>
		</clip>
		<exposeEnum public="1" params="T" set="method" line="502" static="1">
			<f a="enumClass:?as">
				<x path="Enum"><c path="exposeEnum.T"/></x>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noUsing"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Used internally to expose enums in js.</haxe_doc>
		</exposeEnum>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":expose"/>
		</meta>
	</class>
	<enum path="hxGeomAlgo.WindingRule" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Tess2.hx" module="hxGeomAlgo.Tess2">
		<ODD/>
		<NON_ZERO/>
		<POSITIVE/>
		<NEGATIVE/>
		<ABS_GEQ_TWO/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
			<m n=":expose"/>
		</meta>
	</enum>
	<enum path="hxGeomAlgo.ResultType" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Tess2.hx" module="hxGeomAlgo.Tess2">
		<POLYGONS/>
		<CONNECTED_POLYGONS/>
		<BOUNDARY_CONTOURS/>
		<EXPERIMENTAL_DELAUNAY/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
			<m n=":expose"/>
		</meta>
	</enum>
	<typedef path="hxGeomAlgo.TessResult" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Tess2.hx" module="hxGeomAlgo.Tess2"><a>
	<vertices><c path="Array"><x path="Float"/></c></vertices>
	<vertexIndices><c path="Array"><x path="Int"/></c></vertexIndices>
	<vertexCount><x path="Int"/></vertexCount>
	<elements><c path="Array"><x path="Int"/></c></elements>
	<elementCount><x path="Int"/></elementCount>
</a></typedef>
	<class path="hxGeomAlgo.Tess2" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Tess2.hx">
		<tesselate public="1" set="method" line="125" static="1">
			<f a="contours:?windingRule:?resultType:?polySize:?vertexDim:?normal" v=":null:null:3:2:null">
				<c path="Array"><c path="Array"><x path="Float"/></c></c>
				<e path="hxGeomAlgo.WindingRule"/>
				<e path="hxGeomAlgo.ResultType"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
				<t path="hxGeomAlgo.TessResult"/>
			</f>
			<meta><m n=":value"><e>{ normal : null, vertexDim : 2, polySize : 3, resultType : null, windingRule : null }</e></m></meta>
			<haxe_doc><![CDATA[* Tesselates the specified `contours`.
   * 
   * (see Tess2.convertResult() for an easy way to use the returned TessResult)
   * 
   * @param	contours		Array of polygons to tesselate. Each poly is specified as a sequence of point coords (i.e. [x0, y0, x1, y1, x2, y2, ...]).
   * @param	windingRule		Winding rule to apply. Deaults to WindingRule.ODD.
   * @param	resultType		The result type you want as output. Defaults to ResultType.POLYGONS.
   * @param	polySize		Max dimesion of the polygons resulting from the tesselation. Defaults to 3 (not considered if resultType is BOUNDARY_CONTOURS or EXPERIMENTAL_DELAUNAY).
   * @param	vertexDim		Pass 2 when working with 2D polys (default), or 3 for 3D.
   * @param	normal			Array of length 3 representing the normals in each plane.
   * 
   * @return A structure of TessResult type, composed of the following fields:
   *		   { 
   *				vertices:Array<Float>;		// A sequence of point coords in the same format of `contours`.
   *				vertexIndices:Array<Int>;	// A sequence of indices that map into the original `contours` joined together.
   *				vertexCount:Int;			// The number of vertices.
   *				elements:Array<Int>;		// Elements' indices whose meaning depends on the ResultType used.
   *				elementCount:Int;			// The number of elements found.
   * 		   };]]></haxe_doc>
		</tesselate>
		<union public="1" set="method" line="150" static="1">
			<f a="contoursA:contoursB:?resultType:?polySize:?vertexDim" v="::null:3:2">
				<c path="Array"><c path="Array"><x path="Float"/></c></c>
				<c path="Array"><c path="Array"><x path="Float"/></c></c>
				<e path="hxGeomAlgo.ResultType"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="hxGeomAlgo.TessResult"/>
			</f>
			<meta><m n=":value"><e>{ vertexDim : 2, polySize : 3, resultType : null }</e></m></meta>
			<haxe_doc>* Computes the union between `contoursA` and `contoursB`. 
   *
   * @see "CSG Uses for Winding Rules" section on http://www.glprogramming.com/red/chapter11.html</haxe_doc>
		</union>
		<intersection public="1" set="method" line="161" static="1">
			<f a="contoursA:contoursB:?resultType:?polySize:?vertexDim" v="::null:3:2">
				<c path="Array"><c path="Array"><x path="Float"/></c></c>
				<c path="Array"><c path="Array"><x path="Float"/></c></c>
				<e path="hxGeomAlgo.ResultType"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="hxGeomAlgo.TessResult"/>
			</f>
			<meta><m n=":value"><e>{ vertexDim : 2, polySize : 3, resultType : null }</e></m></meta>
			<haxe_doc>* Computes the intersection between `contoursA` and `contoursB`.
   *
   * @see "CSG Uses for Winding Rules" section on http://www.glprogramming.com/red/chapter11.html</haxe_doc>
		</intersection>
		<difference public="1" set="method" line="172" static="1">
			<f a="contoursA:contoursB:?resultType:?polySize:?vertexDim" v="::null:3:2">
				<c path="Array"><c path="Array"><x path="Float"/></c></c>
				<c path="Array"><c path="Array"><x path="Float"/></c></c>
				<e path="hxGeomAlgo.ResultType"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="hxGeomAlgo.TessResult"/>
			</f>
			<meta><m n=":value"><e>{ vertexDim : 2, polySize : 3, resultType : null }</e></m></meta>
			<haxe_doc>* Computes `contoursA` - `contoursB`.
   *
   * @see "CSG Uses for Winding Rules" section on http://www.glprogramming.com/red/chapter11.html</haxe_doc>
		</difference>
		<convertResult public="1" set="method" line="190" static="1">
			<f a="vertices:elements:resultType:polySize:?out">
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Int"/></c>
				<e path="hxGeomAlgo.ResultType"/>
				<x path="Int"/>
				<c path="Array"><t path="hxGeomAlgo.Poly"/></c>
				<c path="Array"><t path="hxGeomAlgo.Poly"/></c>
			</f>
			<haxe_doc>* Converts the results from tesselate() in a more manageable output.
   * 
   * @param	vertices	A sequence of point coords in the same format of `contours`. Typically the `vertices` field of Tess2.tesselate() output.
   * @param	elements	A sequence of elements. Typically the `vertices` field of Tess2.tesselate() output.
   * @param	resultType	The `resultType` passed to Tess2.tesselate().
   * @param	polySize	The `polySize` passed to Tess2.tesselate().
   * @param	out			The output will be appended to this array of polygons (if specified).
   * 
   * @return An array of polygons.</haxe_doc>
		</convertResult>
		<haxe_doc>* Class offering a quick wrapper around Tesselator functions.
 * 
 * For more info about how to use this class see the demo by Mikko Mononen on (https://github.com/memononen/tess2.js).
 * Live version rehosted here (https://dl.dropboxusercontent.com/u/32864004/dev/FPDemo/tess2.js-demo/index.html).
 * 
 * Further reading: http://www.glprogramming.com/red/chapter11.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="hxGeomAlgo._Tess2.TessVertex" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Tess2.hx" private="1" module="hxGeomAlgo.Tess2">
		<next public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.TessVertex"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</next>
		<prev public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.TessVertex"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</prev>
		<anEdge public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</anEdge>
		<coords public="1" expr="[0, 0, 0]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[0, 0, 0]</e></m></meta>
		</coords>
		<s public="1" expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</s>
		<t public="1" expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</t>
		<pqHandle public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</pqHandle>
		<n public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</n>
		<idx public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</idx>
		<new public="1" set="method" line="323"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxGeomAlgo._Tess2.TessFace" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Tess2.hx" private="1" module="hxGeomAlgo.Tess2">
		<next public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.TessFace"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</next>
		<prev public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.TessFace"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</prev>
		<anEdge public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</anEdge>
		<trail public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.TessFace"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</trail>
		<n public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</n>
		<marked public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</marked>
		<inside public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</inside>
		<new public="1" set="method" line="338"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxGeomAlgo._Tess2.TessHalfEdge" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Tess2.hx" private="1" module="hxGeomAlgo.Tess2">
		<next public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</next>
		<Sym public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</Sym>
		<Onext public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</Onext>
		<Lnext public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</Lnext>
		<Org public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.TessVertex"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</Org>
		<Lface public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.TessFace"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</Lface>
		<activeRegion public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</activeRegion>
		<winding public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</winding>
		<side public="1"><x path="Int"/></side>
		<mark public="1"><x path="Bool"/></mark>
		<Rface public="1" get="accessor" set="accessor"><c path="hxGeomAlgo._Tess2.TessFace"/></Rface>
		<get_Rface set="method" line="363"><f a=""><c path="hxGeomAlgo._Tess2.TessFace"/></f></get_Rface>
		<set_Rface set="method" line="364"><f a="v">
	<c path="hxGeomAlgo._Tess2.TessFace"/>
	<c path="hxGeomAlgo._Tess2.TessFace"/>
</f></set_Rface>
		<Dst public="1" get="accessor" set="accessor"><c path="hxGeomAlgo._Tess2.TessVertex"/></Dst>
		<get_Dst set="method" line="367"><f a=""><c path="hxGeomAlgo._Tess2.TessVertex"/></f></get_Dst>
		<set_Dst set="method" line="368"><f a="v">
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
</f></set_Dst>
		<Oprev public="1" get="accessor" set="accessor"><c path="hxGeomAlgo._Tess2.TessHalfEdge"/></Oprev>
		<get_Oprev set="method" line="371"><f a=""><c path="hxGeomAlgo._Tess2.TessHalfEdge"/></f></get_Oprev>
		<set_Oprev set="method" line="372"><f a="v">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
</f></set_Oprev>
		<Lprev public="1" get="accessor" set="accessor"><c path="hxGeomAlgo._Tess2.TessHalfEdge"/></Lprev>
		<get_Lprev set="method" line="375"><f a=""><c path="hxGeomAlgo._Tess2.TessHalfEdge"/></f></get_Lprev>
		<set_Lprev set="method" line="376"><f a="v">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
</f></set_Lprev>
		<Dprev public="1" get="accessor" set="accessor"><c path="hxGeomAlgo._Tess2.TessHalfEdge"/></Dprev>
		<get_Dprev set="method" line="379"><f a=""><c path="hxGeomAlgo._Tess2.TessHalfEdge"/></f></get_Dprev>
		<set_Dprev set="method" line="380"><f a="v">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
</f></set_Dprev>
		<Rprev public="1" get="accessor" set="accessor"><c path="hxGeomAlgo._Tess2.TessHalfEdge"/></Rprev>
		<get_Rprev set="method" line="383"><f a=""><c path="hxGeomAlgo._Tess2.TessHalfEdge"/></f></get_Rprev>
		<set_Rprev set="method" line="384"><f a="v">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
</f></set_Rprev>
		<Dnext public="1" get="accessor" set="accessor"><c path="hxGeomAlgo._Tess2.TessHalfEdge"/></Dnext>
		<get_Dnext set="method" line="387"><f a=""><c path="hxGeomAlgo._Tess2.TessHalfEdge"/></f></get_Dnext>
		<set_Dnext set="method" line="388"><f a="v">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
</f></set_Dnext>
		<Rnext public="1" get="accessor" set="accessor"><c path="hxGeomAlgo._Tess2.TessHalfEdge"/></Rnext>
		<get_Rnext set="method" line="391"><f a=""><c path="hxGeomAlgo._Tess2.TessHalfEdge"/></f></get_Rnext>
		<set_Rnext set="method" line="392"><f a="v">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
</f></set_Rnext>
		<new public="1" set="method" line="357"><f a="side">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxGeomAlgo._Tess2.TessMesh" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Tess2.hx" private="1" module="hxGeomAlgo.Tess2">
		<flipEdge public="1" set="method" line="780" static="1"><f a="mesh:edge">
	<c path="hxGeomAlgo._Tess2.TessMesh"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<x path="Void"/>
</f></flipEdge>
		<v public="1" expr="new TessVertex()">
			<c path="hxGeomAlgo._Tess2.TessVertex"/>
			<meta><m n=":value"><e>new TessVertex()</e></m></meta>
		</v>
		<f public="1" expr="new TessFace()">
			<c path="hxGeomAlgo._Tess2.TessFace"/>
			<meta><m n=":value"><e>new TessFace()</e></m></meta>
		</f>
		<e public="1" expr="new TessHalfEdge(0)">
			<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
			<meta><m n=":value"><e>new TessHalfEdge(0)</e></m></meta>
		</e>
		<eSym public="1" expr="new TessHalfEdge(1)">
			<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
			<meta><m n=":value"><e>new TessHalfEdge(1)</e></m></meta>
		</eSym>
		<vHead public="1"><c path="hxGeomAlgo._Tess2.TessVertex"/></vHead>
		<fHead public="1"><c path="hxGeomAlgo._Tess2.TessFace"/></fHead>
		<eHead public="1"><c path="hxGeomAlgo._Tess2.TessHalfEdge"/></eHead>
		<eHeadSym public="1"><c path="hxGeomAlgo._Tess2.TessHalfEdge"/></eHeadSym>
		<makeEdge_ set="method" line="526"><f a="eNext">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
</f></makeEdge_>
		<splice_ set="method" line="568"><f a="a:b">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<x path="Void"/>
</f></splice_>
		<makeVertex_ set="method" line="584"><f a="newVertex:eOrig:vNext">
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Void"/>
</f></makeVertex_>
		<makeFace_ set="method" line="613"><f a="newFace:eOrig:fNext">
	<c path="hxGeomAlgo._Tess2.TessFace"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessFace"/>
	<x path="Void"/>
</f></makeFace_>
		<killEdge_ set="method" line="645"><f a="eDel">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<x path="Void"/>
</f></killEdge_>
		<killVertex_ set="method" line="660"><f a="vDel:newOrg">
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Void"/>
</f></killVertex_>
		<killFace_ set="method" line="680"><f a="fDel:newLface">
	<c path="hxGeomAlgo._Tess2.TessFace"/>
	<c path="hxGeomAlgo._Tess2.TessFace"/>
	<x path="Void"/>
</f></killFace_>
		<makeEdge public="1" set="method" line="703">
			<f a=""><c path="hxGeomAlgo._Tess2.TessHalfEdge"/></f>
			<haxe_doc>**************** Basic Edge Operations ********************</haxe_doc>
		</makeEdge>
		<splice public="1" set="method" line="738"><f a="eOrg:eDst">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<x path="Void"/>
</f></splice>
		<delete public="1" set="method" line="868"><f a="eDel">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<x path="Void"/>
</f></delete>
		<addEdgeVertex public="1" set="method" line="926">
			<f a="eOrg">
				<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
				<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
			</f>
			<haxe_doc>****************** Other Edge Operations ********************</haxe_doc>
		</addEdgeVertex>
		<splitEdge public="1" set="method" line="950"><f a="eOrg">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
</f></splitEdge>
		<connect public="1" set="method" line="979"><f a="eOrg:eDst">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
</f></connect>
		<zapFace public="1" set="method" line="1018"><f a="fZap">
	<c path="hxGeomAlgo._Tess2.TessFace"/>
	<x path="Void"/>
</f></zapFace>
		<countFaceVerts_ set="method" line="1059"><f a="f">
	<c path="hxGeomAlgo._Tess2.TessFace"/>
	<x path="Int"/>
</f></countFaceVerts_>
		<mergeConvexFaces public="1" set="method" line="1072"><f a="maxVertsPerFace">
	<x path="Int"/>
	<x path="Bool"/>
</f></mergeConvexFaces>
		<check public="1" set="method" line="1130"><f a=""><x path="Void"/></f></check>
		<new public="1" set="method" line="407"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxGeomAlgo._Tess2.Geom" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Tess2.hx" private="1" module="hxGeomAlgo.Tess2">
		<vertEq public="1" set="method" line="1189" static="1"><f a="u:v">
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Bool"/>
</f></vertEq>
		<vertLeq public="1" set="method" line="1194" static="1"><f a="u:v">
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Bool"/>
</f></vertLeq>
		<transLeq public="1" set="method" line="1199" static="1"><f a="u:v">
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Bool"/>
</f></transLeq>
		<edgeGoesLeft public="1" set="method" line="1203" static="1"><f a="e">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<x path="Bool"/>
</f></edgeGoesLeft>
		<edgeGoesRight public="1" set="method" line="1207" static="1"><f a="e">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<x path="Bool"/>
</f></edgeGoesRight>
		<edgeIsInternal public="1" set="method" line="1211" static="1"><f a="e">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<x path="Bool"/>
</f></edgeIsInternal>
		<vertL1dist public="1" set="method" line="1215" static="1"><f a="u:v">
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Float"/>
</f></vertL1dist>
		<edgeEval public="1" set="method" line="1220" static="1"><f a="u:v:w">
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Float"/>
</f></edgeEval>
		<edgeSign public="1" set="method" line="1248" static="1"><f a="u:v:w">
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Float"/>
</f></edgeSign>
		<transEval public="1" set="method" line="1271" static="1">
			<f a="u:v:w">
				<c path="hxGeomAlgo._Tess2.TessVertex"/>
				<c path="hxGeomAlgo._Tess2.TessVertex"/>
				<c path="hxGeomAlgo._Tess2.TessVertex"/>
				<x path="Float"/>
			</f>
			<haxe_doc>*********************************************************************
  * Define versions of EdgeSign, EdgeEval with s and t transposed.</haxe_doc>
		</transEval>
		<transSign public="1" set="method" line="1299" static="1"><f a="u:v:w">
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Float"/>
</f></transSign>
		<vertCCW public="1" set="method" line="1317" static="1"><f a="u:v:w">
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Bool"/>
</f></vertCCW>
		<interpolate public="1" set="method" line="1335" static="1"><f a="a:x:b:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></interpolate>
		<intersect public="1" set="method" line="1367" static="1"><f a="o1:d1:o2:d2:v">
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Void"/>
</f></intersect>
		<calcAngle public="1" set="method" line="1433" static="1"><f a="v0:v1:v2">
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Float"/>
</f></calcAngle>
		<edgeIsLocallyDelaunay public="1" set="method" line="1450" static="1"><f a="e">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<x path="Bool"/>
</f></edgeIsLocallyDelaunay>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxGeomAlgo._Tess2.DictNode" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Tess2.hx" private="1" module="hxGeomAlgo.Tess2">
		<key public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</key>
		<next public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.DictNode"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</next>
		<prev public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.DictNode"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</prev>
		<new public="1" set="method" line="1462"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxGeomAlgo._Tess2.Dict" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Tess2.hx" private="1" module="hxGeomAlgo.Tess2">
		<head public="1"><c path="hxGeomAlgo._Tess2.DictNode"/></head>
		<frame public="1"><c path="hxGeomAlgo.Tesselator"/></frame>
		<leq public="1"><f a="::">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<x path="Bool"/>
</f></leq>
		<min public="1" set="method" line="1480"><f a=""><c path="hxGeomAlgo._Tess2.DictNode"/></f></min>
		<max public="1" set="method" line="1484"><f a=""><c path="hxGeomAlgo._Tess2.DictNode"/></f></max>
		<insert public="1" set="method" line="1488"><f a="k">
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<c path="hxGeomAlgo._Tess2.DictNode"/>
</f></insert>
		<search public="1" set="method" line="1492"><f a="key">
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<c path="hxGeomAlgo._Tess2.DictNode"/>
</f></search>
		<insertBefore public="1" set="method" line="1505"><f a="node:key">
	<c path="hxGeomAlgo._Tess2.DictNode"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<c path="hxGeomAlgo._Tess2.DictNode"/>
</f></insertBefore>
		<delete public="1" set="method" line="1520"><f a="node">
	<c path="hxGeomAlgo._Tess2.DictNode"/>
	<x path="Void"/>
</f></delete>
		<new public="1" set="method" line="1472"><f a="frame:leq">
	<c path="hxGeomAlgo.Tesselator"/>
	<f a="::">
		<c path="hxGeomAlgo.Tesselator"/>
		<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
		<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
		<x path="Bool"/>
	</f>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxGeomAlgo._Tess2.PQNode" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Tess2.hx" private="1" module="hxGeomAlgo.Tess2">
		<handle public="1" expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</handle>
		<new public="1" set="method" line="1530"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxGeomAlgo._Tess2.PQHandleElem" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Tess2.hx" private="1" module="hxGeomAlgo.Tess2">
		<key public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.TessVertex"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</key>
		<node public="1" expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</node>
		<new public="1" set="method" line="1538"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxGeomAlgo._Tess2.PriorityQ" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Tess2.hx" private="1" module="hxGeomAlgo.Tess2">
		<size public="1"><x path="Int"/></size>
		<max public="1"><x path="Int"/></max>
		<nodes public="1"><c path="Array"><c path="hxGeomAlgo._Tess2.PQNode"/></c></nodes>
		<handles public="1"><c path="Array"><c path="hxGeomAlgo._Tess2.PQHandleElem"/></c></handles>
		<initialized public="1"><x path="Bool"/></initialized>
		<freeList public="1"><x path="Int"/></freeList>
		<leq public="1"><f a=":">
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Bool"/>
</f></leq>
		<floatDown_ set="method" line="1573"><f a="curr">
	<x path="Int"/>
	<x path="Void"/>
</f></floatDown_>
		<floatUp_ set="method" line="1601"><f a="curr">
	<x path="Int"/>
	<x path="Void"/>
</f></floatUp_>
		<init public="1" set="method" line="1622"><f a=""><x path="Void"/></f></init>
		<min public="1" set="method" line="1632"><f a=""><c path="hxGeomAlgo._Tess2.TessVertex"/></f></min>
		<isEmpty public="1" set="method" line="1636"><f a=""><x path="Bool"/></f></isEmpty>
		<insert public="1" set="method" line="1644"><f a="keyNew">
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Int"/>
</f></insert>
		<extractMin public="1" set="method" line="1678"><f a=""><c path="hxGeomAlgo._Tess2.TessVertex"/></f></extractMin>
		<delete public="1" set="method" line="1700"><f a="hCurr">
	<x path="Int"/>
	<x path="Void"/>
</f></delete>
		<new public="1" set="method" line="1552"><f a="size:leq">
	<x path="Int"/>
	<f a=":">
		<c path="hxGeomAlgo._Tess2.TessVertex"/>
		<c path="hxGeomAlgo._Tess2.TessVertex"/>
		<x path="Bool"/>
	</f>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxGeomAlgo._Tess2.ActiveRegion" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Tess2.hx" private="1" module="hxGeomAlgo.Tess2">
		<eUp public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</eUp>
		<nodeUp public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.DictNode"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</nodeUp>
		<windingNumber public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</windingNumber>
		<inside public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</inside>
		<sentinel public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</sentinel>
		<dirty public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</dirty>
		<fixUpperEdge public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</fixUpperEdge>
		<new public="1" set="method" line="1746"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxGeomAlgo._Tess2.Sweep" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Tess2.hx" private="1" module="hxGeomAlgo.Tess2">
		<regionBelow public="1" set="method" line="1751" static="1"><f a="r">
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
</f></regionBelow>
		<regionAbove public="1" set="method" line="1755" static="1"><f a="r">
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
</f></regionAbove>
		<debugEvent public="1" set="method" line="1759" static="1"><f a="tess">
	<c path="hxGeomAlgo.Tesselator"/>
	<x path="Void"/>
</f></debugEvent>
		<addWinding public="1" set="method" line="1796" static="1"><f a="eDst:eSrc">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<x path="Void"/>
</f></addWinding>
		<edgeLeq public="1" set="method" line="1802" static="1"><f a="tess:reg1:reg2">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<x path="Bool"/>
</f></edgeLeq>
		<deleteRegion public="1" set="method" line="1843" static="1"><f a="tess:reg">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<x path="Void"/>
</f></deleteRegion>
		<fixUpperEdge public="1" set="method" line="1856" static="1"><f a="tess:reg:newEdge">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<x path="Void"/>
</f></fixUpperEdge>
		<topLeftRegion public="1" set="method" line="1868" static="1"><f a="tess:reg">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
</f></topLeftRegion>
		<topRightRegion public="1" set="method" line="1891" static="1"><f a="reg">
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
</f></topRightRegion>
		<addRegionBelow public="1" set="method" line="1902" static="1"><f a="tess:regAbove:eNewUp">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
</f></addRegionBelow>
		<isWindingInside public="1" set="method" line="1922" static="1"><f a="tess:n">
	<c path="hxGeomAlgo.Tesselator"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isWindingInside>
		<computeWinding public="1" set="method" line="1940" static="1"><f a="tess:reg">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<x path="Void"/>
</f></computeWinding>
		<finishRegion public="1" set="method" line="1946" static="1"><f a="tess:reg">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<x path="Void"/>
</f></finishRegion>
		<finishLeftRegions public="1" set="method" line="1964" static="1"><f a="tess:regFirst:regLast">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
</f></finishLeftRegions>
		<addRightEdges public="1" set="method" line="2017" static="1"><f a="tess:regUp:eFirst:eLast:eTopLeft:cleanUp">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addRightEdges>
		<spliceMergeVertices public="1" set="method" line="2086" static="1"><f a="tess:e1:e2">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<x path="Void"/>
</f></spliceMergeVertices>
		<vertexWeights public="1" set="method" line="2095" static="1"><f a="isect:org:dst">
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Void"/>
</f></vertexWeights>
		<getIntersectData public="1" set="method" line="2113" static="1"><f a="tess:isect:orgUp:dstUp:orgLo:dstLo">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Void"/>
</f></getIntersectData>
		<checkForRightSplice public="1" set="method" line="2126" static="1"><f a="tess:regUp">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<x path="Bool"/>
</f></checkForRightSplice>
		<checkForLeftSplice public="1" set="method" line="2183" static="1"><f a="tess:regUp">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<x path="Bool"/>
</f></checkForLeftSplice>
		<checkForIntersect public="1" set="method" line="2231" static="1"><f a="tess:regUp">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<x path="Bool"/>
</f></checkForIntersect>
		<walkDirtyRegions public="1" set="method" line="2380" static="1"><f a="tess:regUp">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<x path="Void"/>
</f></walkDirtyRegions>
		<connectRightVertex public="1" set="method" line="2466" static="1"><f a="tess:regUp:eBottomLeft">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<x path="Void"/>
</f></connectRightVertex>
		<connectLeftDegenerate public="1" set="method" line="2557" static="1"><f a="tess:regUp:vEvent">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.ActiveRegion"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Void"/>
</f></connectLeftDegenerate>
		<connectLeftVertex public="1" set="method" line="2616" static="1"><f a="tess:vEvent">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Void"/>
</f></connectLeftVertex>
		<sweepEvent public="1" set="method" line="2683" static="1"><f a="tess:vEvent">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.TessVertex"/>
	<x path="Void"/>
</f></sweepEvent>
		<addSentinel public="1" set="method" line="2738" static="1"><f a="tess:smin:smax:t">
	<c path="hxGeomAlgo.Tesselator"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addSentinel>
		<initEdgeDict public="1" set="method" line="2764" static="1"><f a="tess">
	<c path="hxGeomAlgo.Tesselator"/>
	<x path="Void"/>
</f></initEdgeDict>
		<doneEdgeDict public="1" set="method" line="2785" static="1"><f a="tess">
	<c path="hxGeomAlgo.Tesselator"/>
	<x path="Void"/>
</f></doneEdgeDict>
		<removeDegenerateEdges public="1" set="method" line="2806" static="1"><f a="tess">
	<c path="hxGeomAlgo.Tesselator"/>
	<x path="Void"/>
</f></removeDegenerateEdges>
		<initPriorityQ public="1" set="method" line="2839" static="1"><f a="tess">
	<a>
		<pq><c path="hxGeomAlgo._Tess2.PriorityQ"/></pq>
		<mesh set="null"><a><vHead set="null"><c path="hxGeomAlgo._Tess2.TessVertex"/></vHead></a></mesh>
	</a>
	<x path="Bool"/>
</f></initPriorityQ>
		<donePriorityQ public="1" set="method" line="2878" static="1"><f a="tess">
	<a><pq><c path="hxGeomAlgo._Tess2.PriorityQ"/></pq></a>
	<x path="Void"/>
</f></donePriorityQ>
		<removeDegenerateFaces public="1" set="method" line="2882" static="1"><f a="tess:mesh">
	<c path="hxGeomAlgo.Tesselator"/>
	<c path="hxGeomAlgo._Tess2.TessMesh"/>
	<x path="Bool"/>
</f></removeDegenerateFaces>
		<computeInterior public="1" set="method" line="2917" static="1"><f a="tess">
	<c path="hxGeomAlgo.Tesselator"/>
	<x path="Bool"/>
</f></computeInterior>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxGeomAlgo.Tesselator" params="" file="/usr/local/lib/haxeLibrary/hxGeomAlgo/git/hxGeomAlgo/Tess2.hx" module="hxGeomAlgo.Tess2">
		<mesh public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.TessMesh"/>
			<meta><m n=":value"><e>null</e></m></meta>
			<haxe_doc>* state needed for collecting the input data *</haxe_doc>
		</mesh>
		<normal public="1" expr="[0.0, 0.0, 0.0]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[0.0, 0.0, 0.0]</e></m></meta>
			<haxe_doc>* state needed for projecting onto the sweep plane *</haxe_doc>
		</normal>
		<sUnit public="1" expr="[0.0, 0.0, 0.0]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[0.0, 0.0, 0.0]</e></m></meta>
		</sUnit>
		<tUnit public="1" expr="[0.0, 0.0, 0.0]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[0.0, 0.0, 0.0]</e></m></meta>
		</tUnit>
		<bmin public="1" expr="[0.0, 0.0]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[0.0, 0.0]</e></m></meta>
		</bmin>
		<bmax public="1" expr="[0.0, 0.0]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[0.0, 0.0]</e></m></meta>
		</bmax>
		<windingRule public="1">
			<e path="hxGeomAlgo.WindingRule"/>
			<haxe_doc>* state needed for the line sweep *</haxe_doc>
		</windingRule>
		<dict public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.Dict"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</dict>
		<pq public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.PriorityQ"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</pq>
		<event public="1" expr="null">
			<c path="hxGeomAlgo._Tess2.TessVertex"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</event>
		<vertexIndexCounter public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</vertexIndexCounter>
		<vertices public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</vertices>
		<vertexIndices public="1" expr="[]">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</vertexIndices>
		<vertexCount public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</vertexCount>
		<elements public="1" expr="[]">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</elements>
		<elementCount public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</elementCount>
		<dot_ set="method" line="3025"><f a="u:v">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></dot_>
		<normalize_ set="method" line="3029"><f a="v">
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></normalize_>
		<longAxis_ set="method" line="3038"><f a="v">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
</f></longAxis_>
		<computeNormal_ set="method" line="3046"><f a="norm">
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></computeNormal_>
		<checkOrientation_ set="method" line="3119"><f a=""><x path="Void"/></f></checkOrientation_>
		<projectPolygon_ set="method" line="3182"><f a=""><x path="Void"/></f></projectPolygon_>
		<addWinding_ set="method" line="3261"><f a="eDst:eSrc">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<x path="Void"/>
</f></addWinding_>
		<tessellateMonoRegion_ set="method" line="3294"><f a="mesh:face">
	<c path="hxGeomAlgo._Tess2.TessMesh"/>
	<c path="hxGeomAlgo._Tess2.TessFace"/>
	<x path="Bool"/>
</f></tessellateMonoRegion_>
		<tessellateInterior_ set="method" line="3355"><f a="mesh">
	<c path="hxGeomAlgo._Tess2.TessMesh"/>
	<x path="Bool"/>
</f></tessellateInterior_>
		<refineDelaunay_ set="method" line="3379"><f a="mesh">
	<c path="hxGeomAlgo._Tess2.TessMesh"/>
	<x path="Void"/>
</f></refineDelaunay_>
		<discardExterior_ set="method" line="3439"><f a="mesh">
	<c path="hxGeomAlgo._Tess2.TessMesh"/>
	<x path="Void"/>
</f></discardExterior_>
		<setWindingNumber_ set="method" line="3463"><f a="mesh:value:keepOnlyBoundary">
	<c path="hxGeomAlgo._Tess2.TessMesh"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setWindingNumber_>
		<getNeighbourFace_ set="method" line="3487"><f a="edge">
	<c path="hxGeomAlgo._Tess2.TessHalfEdge"/>
	<x path="Int"/>
</f></getNeighbourFace_>
		<outputPolymesh_ set="method" line="3495"><f a="mesh:resultsType:polySize:vertexDim">
	<c path="hxGeomAlgo._Tess2.TessMesh"/>
	<e path="hxGeomAlgo.ResultType"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></outputPolymesh_>
		<outputContours_ set="method" line="3648"><f a="mesh:vertexDim">
	<c path="hxGeomAlgo._Tess2.TessMesh"/>
	<x path="Int"/>
	<x path="Void"/>
</f></outputContours_>
		<addContour public="1" set="method" line="3745"><f a="vertexDim:vertices">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></addContour>
		<tesselate public="1" set="method" line="3803">
			<f a="windingRule:resultType:polySize:vertexDim:?normal" v="::::null">
				<e path="hxGeomAlgo.WindingRule"/>
				<e path="hxGeomAlgo.ResultType"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ normal : null }</e></m></meta>
		</tesselate>
		<new public="1" set="method" line="3020"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* The actual tesselator class.
 * 
 * For more info about how to use this class see the demo by Mikko Mononen on (https://github.com/memononen/tess2.js).
 * Live version rehosted here (https://dl.dropboxusercontent.com/u/32864004/dev/FPDemo/tess2.js-demo/index.html)
 * 
 * Further reading: http://www.glprogramming.com/red/chapter11.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":expose"/>
		</meta>
	</class>
	<typedef path="hxPolyK.Rectangle" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<width><x path="Float"/></width>
	<height><x path="Float"/></height>
</a></typedef>
	<typedef path="hxPolyK.PointK" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<flag><x path="Bool"/></flag>
</a></typedef>
	<typedef path="hxPolyK.Ray" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK"><a>
	<refl><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></refl>
	<norm><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></norm>
	<edge><x path="Float"/></edge>
	<dist><x path="Float"/></dist>
</a></typedef>
	<typedef path="hxPolyK.Edge" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK"><a>
	<point><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></point>
	<norm><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></norm>
	<edge><x path="Float"/></edge>
	<dist><x path="Float"/></dist>
</a></typedef>
	<abstract path="hxPolyK.ArrayPairs" params="T" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK">
		<this><c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c></this>
		<impl><class path="hxPolyK._PolyK.ArrayPairs_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" private="1" module="hxPolyK.PolyK" final="1">
	<_new public="1" set="method" line="68" static="1">
		<f a="arr">
			<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
			<x path="hxPolyK.ArrayPairs"><c path="hxPolyK.ArrayPairs.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<get_length get="inline" set="null" line="70" static="1"><f a="this">
	<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
	<x path="Int"/>
</f></get_length>
	<access get="inline" set="null" line="71" static="1">
		<f a="this:key">
			<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
			<x path="Int"/>
			<a>
				<y><c path="hxPolyK.ArrayPairs.T"/></y>
				<x><c path="hxPolyK.ArrayPairs.T"/></x>
			</a>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</access>
	<reverse public="1" get="inline" set="null" line="75" static="1"><f a="this">
	<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
	<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
</f></reverse>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="hxPolyK._PolyK.ArrayPairs_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" private="1" module="hxPolyK.PolyK" final="1">
		<_new public="1" set="method" line="68" static="1">
			<f a="arr">
				<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
				<x path="hxPolyK.ArrayPairs"><c path="hxPolyK.ArrayPairs.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<get_length get="inline" set="null" line="70" static="1"><f a="this">
	<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
	<x path="Int"/>
</f></get_length>
		<access get="inline" set="null" line="71" static="1">
			<f a="this:key">
				<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
				<x path="Int"/>
				<a>
					<y><c path="hxPolyK.ArrayPairs.T"/></y>
					<x><c path="hxPolyK.ArrayPairs.T"/></x>
				</a>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</access>
		<reverse public="1" get="inline" set="null" line="75" static="1"><f a="this">
	<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
	<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
</f></reverse>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxPolyK.ArrayTriple" params="T" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK">
		<this><c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c></this>
		<impl><class path="hxPolyK._PolyK.ArrayTriple_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" private="1" module="hxPolyK.PolyK" final="1">
	<_new public="1" set="method" line="86" static="1">
		<f a="arr">
			<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
			<x path="hxPolyK.ArrayTriple"><c path="hxPolyK.ArrayTriple.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<get_length get="inline" set="null" line="88" static="1"><f a="this">
	<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
	<x path="Int"/>
</f></get_length>
	<access get="inline" set="null" line="89" static="1">
		<f a="this:key">
			<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
			<x path="Int"/>
			<a>
				<c><c path="hxPolyK.ArrayTriple.T"/></c>
				<b><c path="hxPolyK.ArrayTriple.T"/></b>
				<a><c path="hxPolyK.ArrayTriple.T"/></a>
			</a>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</access>
	<reverse public="1" get="inline" set="null" line="93" static="1"><f a="this">
	<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
	<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
</f></reverse>
</class></impl>
	</abstract>
	<class path="hxPolyK._PolyK.ArrayTriple_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" private="1" module="hxPolyK.PolyK" final="1">
		<_new public="1" set="method" line="86" static="1">
			<f a="arr">
				<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
				<x path="hxPolyK.ArrayTriple"><c path="hxPolyK.ArrayTriple.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<get_length get="inline" set="null" line="88" static="1"><f a="this">
	<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
	<x path="Int"/>
</f></get_length>
		<access get="inline" set="null" line="89" static="1">
			<f a="this:key">
				<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
				<x path="Int"/>
				<a>
					<c><c path="hxPolyK.ArrayTriple.T"/></c>
					<b><c path="hxPolyK.ArrayTriple.T"/></b>
					<a><c path="hxPolyK.ArrayTriple.T"/></a>
				</a>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</access>
		<reverse public="1" get="inline" set="null" line="93" static="1"><f a="this">
	<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
	<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
</f></reverse>
	</class>
	<class path="hxPolyK.PolyK" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx">
		<small public="1" get="inline" set="null" expr="0.0000000001" line="105" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0000000001</e></m></meta>
		</small>
		<isSimple public="1" get="inline" set="null" line="109" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<x path="Bool"/>
</f></isSimple>
		<isConvex public="1" get="inline" set="null" line="151" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<x path="Bool"/>
</f></isConvex>
		<getArea public="1" get="inline" set="null" line="166" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></getArea>
		<getAABB public="1" get="inline" set="null" line="181" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<t path="hxPolyK.Rectangle"/>
</f></getAABB>
		<reverse public="1" get="inline" set="null" line="195" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
</f></reverse>
		<triangulate public="1" get="inline" set="null" line="201" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
</f></triangulate>
		<containsPoint public="1" set="method" line="262" static="1"><f a="p:px:py">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></containsPoint>
		<slice public="1" set="method" line="305" static="1"><f a="p:ax:ay:bx:by">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><c path="Array"><x path="Float"/></c></c>
</f></slice>
		<raycast public="1" get="inline" set="null" line="396" static="1"><f a="p:x:y:dx:dy:isc">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<t path="hxPolyK.Ray"/>
	<t path="hxPolyK.Ray"/>
</f></raycast>
		<closestEdge public="1" get="inline" set="null" line="432" static="1"><f a="p:x:y:isc">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<t path="hxPolyK.Edge"/>
	<t path="hxPolyK.Edge"/>
</f></closestEdge>
		<pointLineDist get="inline" set="null" line="465" static="1"><f a="p:a:b:edge:isc">
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<x path="Float"/>
	<t path="hxPolyK.Edge"/>
	<x path="Void"/>
</f></pointLineDist>
		<updateISC get="inline" set="null" line="502" static="1"><f a="dx:dy:a1:b1:b2:c:edge:isc">
	<x path="Float"/>
	<x path="Float"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<x path="Float"/>
	<t path="hxPolyK.Ray"/>
	<x path="Void"/>
</f></updateISC>
		<getPoints get="inline" set="null" line="518" static="1"><f a="ps:ind0:ind1">
	<c path="Array"><t path="hxPolyK.PointK"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><t path="hxPolyK.PointK"/></c>
</f></getPoints>
		<firstWithFlag set="method" line="528" static="1"><f a="ps:ind">
	<c path="Array"><t path="hxPolyK.PointK"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></firstWithFlag>
		<pointInTriangle get="inline" set="null" line="536" static="1"><f a="px:py:ax:ay:bx:by:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></pointInTriangle>
		<rayLineIntersection get="inline" set="null" line="555" static="1"><f a="a1:a2:b1:b2:c">
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
</f></rayLineIntersection>
		<getLineIntersection get="inline" set="null" line="574" static="1"><f a="a1:a2:b1:b2">
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
</f></getLineIntersection>
		<inRect get="inline" set="null" line="586" static="1"><f a="a:b:c">
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<x path="Bool"/>
</f></inRect>
		<convex get="inline" set="null" line="597" static="1"><f a="ax:ay:bx:by:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></convex>
		<dist get="inline" set="null" line="602" static="1"><f a="a:b">
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<x path="Float"/>
</f></dist>
		<new public="1" set="method" line="106"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="hyperKitGL.XY" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/XY.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<w public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</w>
		<clone public="1" set="method" line="14"><f a=""><c path="hyperKitGL.XY"/></f></clone>
		<new public="1" set="method" line="10"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ x, y }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="hyperKitGL.io.Array3x7" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Array3x7.hx">
		<this><x path="hyperKitGL.io.ArrayFlatDepth"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="hyperKitGL.io._Array3x7.Array3x7_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Array3x7.hx" private="1" module="hyperKitGL.io.Array3x7" final="1">
	<readItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k">
			<x path="hyperKitGL.io.ArrayFlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="13" static="1"><f a="this:k:v">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></writeItem>
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a=""><x path="hyperKitGL.io.Array3x7"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="23" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="27" static="1"><f a="this:id">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<getArray public="1" get="inline" set="null" line="33" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<t path="hyperKitGL.io.Float32Array"/>
</f></getArray>
	<toEnd public="1" get="inline" set="null" line="41" static="1"><f a="this:id:len">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
	<toStart public="1" get="inline" set="null" line="45" static="1"><f a="this:id:len">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
	<swap public="1" get="inline" set="null" line="49" static="1"><f a="this:id0:id1:len">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
</class></impl>
	</abstract>
	<class path="hyperKitGL.io._Array3x7.Array3x7_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Array3x7.hx" private="1" module="hyperKitGL.io.Array3x7" final="1">
		<readItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k">
				<x path="hyperKitGL.io.ArrayFlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="13" static="1"><f a="this:k:v">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></writeItem>
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a=""><x path="hyperKitGL.io.Array3x7"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="23" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="27" static="1"><f a="this:id">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<getArray public="1" get="inline" set="null" line="33" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<t path="hyperKitGL.io.Float32Array"/>
</f></getArray>
		<toEnd public="1" get="inline" set="null" line="41" static="1"><f a="this:id:len">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
		<toStart public="1" get="inline" set="null" line="45" static="1"><f a="this:id:len">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
		<swap public="1" get="inline" set="null" line="49" static="1"><f a="this:id0:id1:len">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
	</class>
	<abstract path="hyperKitGL.io.Array3x9" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Array3x9.hx">
		<this><x path="hyperKitGL.io.ArrayFlatDepth"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="hyperKitGL.io._Array3x9.Array3x9_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Array3x9.hx" private="1" module="hyperKitGL.io.Array3x9" final="1">
	<readItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k">
			<x path="hyperKitGL.io.ArrayFlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="13" static="1"><f a="this:k:v">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></writeItem>
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a=""><x path="hyperKitGL.io.Array3x9"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="23" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="27" static="1"><f a="this:id">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<getArray public="1" get="inline" set="null" line="32" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<t path="hyperKitGL.io.Float32Array"/>
</f></getArray>
	<toEnd public="1" get="inline" set="null" line="40" static="1"><f a="this:id:len">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
	<toStart public="1" get="inline" set="null" line="44" static="1"><f a="this:id:len">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
	<swap public="1" get="inline" set="null" line="48" static="1"><f a="this:id0:id1:len">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
</class></impl>
	</abstract>
	<class path="hyperKitGL.io._Array3x9.Array3x9_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Array3x9.hx" private="1" module="hyperKitGL.io.Array3x9" final="1">
		<readItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k">
				<x path="hyperKitGL.io.ArrayFlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="13" static="1"><f a="this:k:v">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></writeItem>
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a=""><x path="hyperKitGL.io.Array3x9"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="23" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="27" static="1"><f a="this:id">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<getArray public="1" get="inline" set="null" line="32" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<t path="hyperKitGL.io.Float32Array"/>
</f></getArray>
		<toEnd public="1" get="inline" set="null" line="40" static="1"><f a="this:id:len">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
		<toStart public="1" get="inline" set="null" line="44" static="1"><f a="this:id:len">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
		<swap public="1" get="inline" set="null" line="48" static="1"><f a="this:id0:id1:len">
	<x path="hyperKitGL.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
	</class>
	<abstract path="hyperKitGL.io.ArrayColorTriangles" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/ArrayColorTriangles.hx">
		<from><icast><x path="hyperKitGL.io.Array3x7"/></icast></from>
		<this><x path="hyperKitGL.io.Array3x7"/></this>
		<to><icast><x path="hyperKitGL.io.Array3x7"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="hyperKitGL.io._ArrayColorTriangles.ArrayColorTriangles_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/ArrayColorTriangles.hx" private="1" module="hyperKitGL.io.ArrayColorTriangles" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a=""><x path="hyperKitGL.io.ArrayColorTriangles"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<create public="1" get="inline" set="null" line="10" static="1"><f a=""><x path="hyperKitGL.io.ArrayColorTriangles"/></f></create>
	<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
	<get_ax set="method" line="14" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_ax>
	<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
	<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
	<get_ay set="method" line="23" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_ay>
	<set_ay set="method" line="26" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
	<az public="1" get="accessor" set="accessor" static="1"><x path="Float"/></az>
	<get_az set="method" line="32" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_az>
	<set_az set="method" line="35" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_az>
	<redA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redA>
	<get_redA set="method" line="42" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_redA>
	<set_redA set="method" line="45" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redA>
	<greenA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenA>
	<get_greenA get="inline" set="null" line="53" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_greenA>
	<set_greenA get="inline" set="null" line="57" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenA>
	<blueA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueA>
	<get_blueA get="inline" set="null" line="64" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_blueA>
	<set_blueA get="inline" set="null" line="68" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueA>
	<alphaA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaA>
	<get_alphaA get="inline" set="null" line="75" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_alphaA>
	<set_alphaA get="inline" set="null" line="79" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaA>
	<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
	<get_bx set="method" line="86" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_bx>
	<set_bx set="method" line="89" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
	<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
	<get_by set="method" line="95" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_by>
	<set_by set="method" line="98" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
	<bz public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bz>
	<get_bz set="method" line="104" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_bz>
	<set_bz set="method" line="107" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bz>
	<redB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redB>
	<get_redB set="method" line="114" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_redB>
	<set_redB set="method" line="117" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redB>
	<greenB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenB>
	<get_greenB get="inline" set="null" line="125" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_greenB>
	<set_greenB get="inline" set="null" line="129" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenB>
	<blueB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueB>
	<get_blueB get="inline" set="null" line="136" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_blueB>
	<set_blueB get="inline" set="null" line="140" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueB>
	<alphaB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaB>
	<get_alphaB get="inline" set="null" line="147" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_alphaB>
	<set_alphaB get="inline" set="null" line="151" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaB>
	<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
	<get_cx set="method" line="158" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_cx>
	<set_cx set="method" line="161" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
	<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
	<get_cy set="method" line="167" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_cy>
	<set_cy set="method" line="170" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
	<cz public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cz>
	<get_cz set="method" line="176" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_cz>
	<set_cz set="method" line="179" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cz>
	<redC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redC>
	<get_redC set="method" line="186" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_redC>
	<set_redC set="method" line="189" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redC>
	<greenC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenC>
	<get_greenC get="inline" set="null" line="197" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_greenC>
	<set_greenC get="inline" set="null" line="201" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenC>
	<blueC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueC>
	<get_blueC get="inline" set="null" line="208" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_blueC>
	<set_blueC get="inline" set="null" line="212" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueC>
	<alphaC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaC>
	<get_alphaC get="inline" set="null" line="219" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_alphaC>
	<set_alphaC get="inline" set="null" line="223" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaC>
	<triangle public="1" set="method" line="231" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="hyperKitGL.io.Array3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":keep"/></meta>
	</triangle>
	<adjustWinding public="1" set="method" line="253" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Bool"/>
</f></adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
	<get_x get="inline" set="null" line="258" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_x>
	<set_x get="inline" set="null" line="262" static="1"><f a="this:x">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
	<get_y get="inline" set="null" line="271" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_y>
	<set_y get="inline" set="null" line="275" static="1"><f a="this:y">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<z public="1" get="accessor" set="accessor" static="1"><x path="Float"/></z>
	<get_z get="inline" set="null" line="284" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_z>
	<set_z get="inline" set="null" line="288" static="1"><f a="this:z">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
	<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
	<get_right get="inline" set="null" line="297" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_right>
	<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
	<get_bottom get="inline" set="null" line="302" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_bottom>
	<back public="1" get="accessor" set="null" static="1"><x path="Float"/></back>
	<get_back get="inline" set="null" line="307" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_back>
	<moveDelta set="method" line="310" static="1"><f a="this:dx:dy">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
	<sign public="1" get="inline" set="null" line="319" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<distHit public="1" set="method" line="323" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
	<liteHit public="1" get="inline" set="null" line="332" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
	<fullHit public="1" set="method" line="340" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
	<rotate public="1" get="inline" set="null" line="345" static="1"><f a="this:x:y:theta">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<rotateTrig public="1" get="inline" set="null" line="351" static="1"><f a="this:x:y:cos:sin">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
	<colorTriangles public="1" get="inline" set="null" line="380" static="1"><f a="this:color:times">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="387" static="1"><f a="this:colorA:colorB:colorC">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
	<rgb public="1" get="null" set="accessor" static="1"><x path="Int"/></rgb>
	<set_rgb get="inline" set="null" line="394" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgb>
	<rgbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbA>
	<set_rgbA get="inline" set="null" line="402" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbA>
	<get_rgbA get="inline" set="null" line="410" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
</f></get_rgbA>
	<rgbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbB>
	<set_rgbB get="inline" set="null" line="417" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbB>
	<get_rgbB get="inline" set="null" line="425" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
</f></get_rgbB>
	<rgbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbC>
	<set_rgbC get="inline" set="null" line="432" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbC>
	<get_rgbC get="inline" set="null" line="440" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
</f></get_rgbC>
	<argb public="1" get="null" set="accessor" static="1"><x path="Int"/></argb>
	<set_argb get="inline" set="null" line="447" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
	<argbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbA>
	<set_argbA get="inline" set="null" line="455" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
	<get_argbA get="inline" set="null" line="463" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
</f></get_argbA>
	<argbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbB>
	<set_argbB get="inline" set="null" line="471" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
	<get_argbB get="inline" set="null" line="479" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
</f></get_argbB>
	<argbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbC>
	<set_argbC get="inline" set="null" line="487" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
	<get_argbC get="inline" set="null" line="495" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
</f></get_argbC>
	<prettyStringVert public="1" get="inline" set="null" line="502" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<c path="String"/>
</f></prettyStringVert>
	<prettyAllVert public="1" get="inline" set="null" line="508" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<c path="String"/>
</f></prettyAllVert>
	<hex public="1" get="inline" set="null" line="519" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
	<hexA public="1" get="inline" set="null" line="523" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<c path="String"/>
</f></hexA>
	<hexB public="1" get="inline" set="null" line="527" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<c path="String"/>
</f></hexB>
	<hexC public="1" get="inline" set="null" line="531" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<c path="String"/>
</f></hexC>
	<hexAll public="1" get="inline" set="null" line="535" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<c path="String"/>
</f></hexAll>
	<alphaChannel public="1" get="inline" set="null" line="547" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="550" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="553" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="556" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="hyperKitGL.io._ArrayColorTriangles.ArrayColorTriangles_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/ArrayColorTriangles.hx" private="1" module="hyperKitGL.io.ArrayColorTriangles" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a=""><x path="hyperKitGL.io.ArrayColorTriangles"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<create public="1" get="inline" set="null" line="10" static="1"><f a=""><x path="hyperKitGL.io.ArrayColorTriangles"/></f></create>
		<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
		<get_ax set="method" line="14" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_ax>
		<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
		<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
		<get_ay set="method" line="23" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_ay>
		<set_ay set="method" line="26" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
		<az public="1" get="accessor" set="accessor" static="1"><x path="Float"/></az>
		<get_az set="method" line="32" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_az>
		<set_az set="method" line="35" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_az>
		<redA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redA>
		<get_redA set="method" line="42" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_redA>
		<set_redA set="method" line="45" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redA>
		<greenA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenA>
		<get_greenA get="inline" set="null" line="53" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_greenA>
		<set_greenA get="inline" set="null" line="57" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenA>
		<blueA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueA>
		<get_blueA get="inline" set="null" line="64" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_blueA>
		<set_blueA get="inline" set="null" line="68" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueA>
		<alphaA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaA>
		<get_alphaA get="inline" set="null" line="75" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_alphaA>
		<set_alphaA get="inline" set="null" line="79" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaA>
		<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
		<get_bx set="method" line="86" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_bx>
		<set_bx set="method" line="89" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
		<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
		<get_by set="method" line="95" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_by>
		<set_by set="method" line="98" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
		<bz public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bz>
		<get_bz set="method" line="104" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_bz>
		<set_bz set="method" line="107" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bz>
		<redB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redB>
		<get_redB set="method" line="114" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_redB>
		<set_redB set="method" line="117" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redB>
		<greenB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenB>
		<get_greenB get="inline" set="null" line="125" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_greenB>
		<set_greenB get="inline" set="null" line="129" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenB>
		<blueB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueB>
		<get_blueB get="inline" set="null" line="136" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_blueB>
		<set_blueB get="inline" set="null" line="140" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueB>
		<alphaB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaB>
		<get_alphaB get="inline" set="null" line="147" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_alphaB>
		<set_alphaB get="inline" set="null" line="151" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaB>
		<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
		<get_cx set="method" line="158" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_cx>
		<set_cx set="method" line="161" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
		<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
		<get_cy set="method" line="167" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_cy>
		<set_cy set="method" line="170" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
		<cz public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cz>
		<get_cz set="method" line="176" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_cz>
		<set_cz set="method" line="179" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cz>
		<redC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redC>
		<get_redC set="method" line="186" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_redC>
		<set_redC set="method" line="189" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redC>
		<greenC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenC>
		<get_greenC get="inline" set="null" line="197" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_greenC>
		<set_greenC get="inline" set="null" line="201" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenC>
		<blueC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueC>
		<get_blueC get="inline" set="null" line="208" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_blueC>
		<set_blueC get="inline" set="null" line="212" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueC>
		<alphaC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaC>
		<get_alphaC get="inline" set="null" line="219" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_alphaC>
		<set_alphaC get="inline" set="null" line="223" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaC>
		<triangle public="1" set="method" line="231" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="hyperKitGL.io.Array3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</triangle>
		<adjustWinding public="1" set="method" line="253" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Bool"/>
</f></adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
		<get_x get="inline" set="null" line="258" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_x>
		<set_x get="inline" set="null" line="262" static="1"><f a="this:x">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
		<get_y get="inline" set="null" line="271" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_y>
		<set_y get="inline" set="null" line="275" static="1"><f a="this:y">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<z public="1" get="accessor" set="accessor" static="1"><x path="Float"/></z>
		<get_z get="inline" set="null" line="284" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_z>
		<set_z get="inline" set="null" line="288" static="1"><f a="this:z">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
		<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
		<get_right get="inline" set="null" line="297" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_right>
		<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
		<get_bottom get="inline" set="null" line="302" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_bottom>
		<back public="1" get="accessor" set="null" static="1"><x path="Float"/></back>
		<get_back get="inline" set="null" line="307" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
</f></get_back>
		<moveDelta set="method" line="310" static="1"><f a="this:dx:dy">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
		<sign public="1" get="inline" set="null" line="319" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<distHit public="1" set="method" line="323" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
		<liteHit public="1" get="inline" set="null" line="332" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
		<fullHit public="1" set="method" line="340" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
		<rotate public="1" get="inline" set="null" line="345" static="1"><f a="this:x:y:theta">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<rotateTrig public="1" get="inline" set="null" line="351" static="1"><f a="this:x:y:cos:sin">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
		<colorTriangles public="1" get="inline" set="null" line="380" static="1"><f a="this:color:times">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="387" static="1"><f a="this:colorA:colorB:colorC">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
		<rgb public="1" get="null" set="accessor" static="1"><x path="Int"/></rgb>
		<set_rgb get="inline" set="null" line="394" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgb>
		<rgbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbA>
		<set_rgbA get="inline" set="null" line="402" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbA>
		<get_rgbA get="inline" set="null" line="410" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
</f></get_rgbA>
		<rgbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbB>
		<set_rgbB get="inline" set="null" line="417" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbB>
		<get_rgbB get="inline" set="null" line="425" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
</f></get_rgbB>
		<rgbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbC>
		<set_rgbC get="inline" set="null" line="432" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbC>
		<get_rgbC get="inline" set="null" line="440" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
</f></get_rgbC>
		<argb public="1" get="null" set="accessor" static="1"><x path="Int"/></argb>
		<set_argb get="inline" set="null" line="447" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
		<argbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbA>
		<set_argbA get="inline" set="null" line="455" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
		<get_argbA get="inline" set="null" line="463" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
</f></get_argbA>
		<argbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbB>
		<set_argbB get="inline" set="null" line="471" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
		<get_argbB get="inline" set="null" line="479" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
</f></get_argbB>
		<argbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbC>
		<set_argbC get="inline" set="null" line="487" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
		<get_argbC get="inline" set="null" line="495" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
</f></get_argbC>
		<prettyStringVert public="1" get="inline" set="null" line="502" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<c path="String"/>
</f></prettyStringVert>
		<prettyAllVert public="1" get="inline" set="null" line="508" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<c path="String"/>
</f></prettyAllVert>
		<hex public="1" get="inline" set="null" line="519" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x7"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
		<hexA public="1" get="inline" set="null" line="523" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<c path="String"/>
</f></hexA>
		<hexB public="1" get="inline" set="null" line="527" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<c path="String"/>
</f></hexB>
		<hexC public="1" get="inline" set="null" line="531" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<c path="String"/>
</f></hexC>
		<hexAll public="1" get="inline" set="null" line="535" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x7"/>
	<c path="String"/>
</f></hexAll>
		<alphaChannel public="1" get="inline" set="null" line="547" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="550" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="553" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="556" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hyperKitGL.io.ArrayColorTrianglesUV" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/ArrayColorTrianglesUV.hx">
		<from><icast><x path="hyperKitGL.io.Array3x9"/></icast></from>
		<this><x path="hyperKitGL.io.Array3x9"/></this>
		<to><icast><x path="hyperKitGL.io.Array3x9"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="hyperKitGL.io._ArrayColorTrianglesUV.ArrayColorTrianglesUV_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/ArrayColorTrianglesUV.hx" private="1" module="hyperKitGL.io.ArrayColorTrianglesUV" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a=""><x path="hyperKitGL.io.ArrayColorTrianglesUV"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<create public="1" get="inline" set="null" line="10" static="1"><f a=""><x path="hyperKitGL.io.ArrayColorTrianglesUV"/></f></create>
	<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
	<get_ax set="method" line="14" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_ax>
	<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
	<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
	<get_ay set="method" line="23" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_ay>
	<set_ay set="method" line="26" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
	<az public="1" get="accessor" set="accessor" static="1"><x path="Float"/></az>
	<get_az set="method" line="32" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_az>
	<set_az set="method" line="35" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_az>
	<redA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redA>
	<get_redA set="method" line="42" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_redA>
	<set_redA set="method" line="45" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redA>
	<greenA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenA>
	<get_greenA get="inline" set="null" line="53" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_greenA>
	<set_greenA get="inline" set="null" line="57" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenA>
	<blueA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueA>
	<get_blueA get="inline" set="null" line="64" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_blueA>
	<set_blueA get="inline" set="null" line="68" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueA>
	<alphaA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaA>
	<get_alphaA get="inline" set="null" line="75" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_alphaA>
	<set_alphaA get="inline" set="null" line="79" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaA>
	<uA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></uA>
	<get_uA get="inline" set="null" line="86" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_uA>
	<set_uA get="inline" set="null" line="90" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_uA>
	<vA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></vA>
	<get_vA get="inline" set="null" line="97" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_vA>
	<set_vA get="inline" set="null" line="101" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_vA>
	<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
	<get_bx set="method" line="108" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_bx>
	<set_bx set="method" line="111" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
	<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
	<get_by set="method" line="117" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_by>
	<set_by set="method" line="120" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
	<bz public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bz>
	<get_bz set="method" line="126" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_bz>
	<set_bz set="method" line="129" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bz>
	<redB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redB>
	<get_redB set="method" line="136" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_redB>
	<set_redB set="method" line="139" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redB>
	<greenB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenB>
	<get_greenB get="inline" set="null" line="147" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_greenB>
	<set_greenB get="inline" set="null" line="151" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenB>
	<blueB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueB>
	<get_blueB get="inline" set="null" line="158" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_blueB>
	<set_blueB get="inline" set="null" line="162" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueB>
	<alphaB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaB>
	<get_alphaB get="inline" set="null" line="169" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_alphaB>
	<set_alphaB get="inline" set="null" line="173" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaB>
	<uB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></uB>
	<get_uB get="inline" set="null" line="180" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_uB>
	<set_uB get="inline" set="null" line="184" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_uB>
	<vB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></vB>
	<get_vB get="inline" set="null" line="191" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_vB>
	<set_vB get="inline" set="null" line="195" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_vB>
	<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
	<get_cx set="method" line="202" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_cx>
	<set_cx set="method" line="205" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
	<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
	<get_cy set="method" line="211" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_cy>
	<set_cy set="method" line="214" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
	<cz public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cz>
	<get_cz set="method" line="220" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_cz>
	<set_cz set="method" line="223" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cz>
	<redC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redC>
	<get_redC set="method" line="230" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_redC>
	<set_redC set="method" line="233" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redC>
	<greenC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenC>
	<get_greenC get="inline" set="null" line="241" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_greenC>
	<set_greenC get="inline" set="null" line="245" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenC>
	<blueC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueC>
	<get_blueC get="inline" set="null" line="252" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_blueC>
	<set_blueC get="inline" set="null" line="256" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueC>
	<alphaC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaC>
	<get_alphaC get="inline" set="null" line="263" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_alphaC>
	<set_alphaC get="inline" set="null" line="267" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaC>
	<uC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></uC>
	<get_uC get="inline" set="null" line="274" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_uC>
	<set_uC get="inline" set="null" line="278" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_uC>
	<vC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></vC>
	<get_vC get="inline" set="null" line="285" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_vC>
	<set_vC get="inline" set="null" line="289" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_vC>
	<triangle public="1" set="method" line="298" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="hyperKitGL.io.Array3x9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":keep"/></meta>
	</triangle>
	<triangleUV public="1" set="method" line="324" static="1">
		<f a="this:uA_:vA_:uB_:vB_:uC_:vC_:?windAdjust_">
			<x path="hyperKitGL.io.Array3x9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":keep"/></meta>
	</triangleUV>
	<adjustWinding public="1" set="method" line="341" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Bool"/>
</f></adjustWinding>
	<u public="1" get="accessor" set="accessor" static="1"><x path="Float"/></u>
	<get_u get="inline" set="null" line="346" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_u>
	<set_u get="inline" set="null" line="350" static="1"><f a="this:u_">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_u>
	<v public="1" get="accessor" set="accessor" static="1"><x path="Float"/></v>
	<get_v get="inline" set="null" line="359" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_v>
	<set_v get="inline" set="null" line="363" static="1"><f a="this:v_">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_v>
	<rightU public="1" get="accessor" set="null" static="1"><x path="Float"/></rightU>
	<get_rightU get="inline" set="null" line="373" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_rightU>
	<bottomV public="1" get="accessor" set="null" static="1"><x path="Float"/></bottomV>
	<get_bottomV get="inline" set="null" line="378" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_bottomV>
	<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
	<get_x get="inline" set="null" line="384" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_x>
	<set_x get="inline" set="null" line="388" static="1"><f a="this:x">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
	<get_y get="inline" set="null" line="397" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_y>
	<set_y get="inline" set="null" line="401" static="1"><f a="this:y">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<z public="1" get="accessor" set="accessor" static="1"><x path="Float"/></z>
	<get_z get="inline" set="null" line="410" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_z>
	<set_z get="inline" set="null" line="414" static="1"><f a="this:z">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
	<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
	<get_right get="inline" set="null" line="423" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_right>
	<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
	<get_bottom get="inline" set="null" line="428" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_bottom>
	<back public="1" get="accessor" set="null" static="1"><x path="Float"/></back>
	<get_back get="inline" set="null" line="433" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_back>
	<moveDelta set="method" line="436" static="1"><f a="this:dx:dy">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
	<sign public="1" get="inline" set="null" line="445" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<liteHit public="1" get="inline" set="null" line="450" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
	<fullHit public="1" set="method" line="458" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
	<distHit public="1" set="method" line="463" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
	<moveDeltaUV set="method" line="470" static="1"><f a="this:du:dv">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDeltaUV>
	<rotate public="1" get="inline" set="null" line="479" static="1"><f a="this:x:y:theta">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<rotateTrig public="1" get="inline" set="null" line="485" static="1"><f a="this:x:y:cos:sin">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
	<colorTriangles public="1" get="inline" set="null" line="514" static="1"><f a="this:color:times">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="518" static="1"><f a="this:colorA:colorB:colorC">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
	<rgb public="1" get="null" set="accessor" static="1"><x path="Int"/></rgb>
	<set_rgb get="inline" set="null" line="525" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgb>
	<rgbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbA>
	<set_rgbA get="inline" set="null" line="533" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbA>
	<get_rgbA get="inline" set="null" line="541" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
</f></get_rgbA>
	<rgbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbB>
	<set_rgbB get="inline" set="null" line="548" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbB>
	<get_rgbB get="inline" set="null" line="556" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
</f></get_rgbB>
	<rgbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbC>
	<set_rgbC get="inline" set="null" line="563" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbC>
	<get_rgbC get="inline" set="null" line="571" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
</f></get_rgbC>
	<argb public="1" get="null" set="accessor" static="1"><x path="Int"/></argb>
	<set_argb get="inline" set="null" line="578" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
	<argbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbA>
	<set_argbA get="inline" set="null" line="587" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
	<get_argbA get="inline" set="null" line="595" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
</f></get_argbA>
	<argbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbB>
	<set_argbB get="inline" set="null" line="604" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
	<get_argbB get="inline" set="null" line="612" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
</f></get_argbB>
	<argbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbC>
	<set_argbC get="inline" set="null" line="620" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
	<get_argbC get="inline" set="null" line="628" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
</f></get_argbC>
	<prettyStringVert public="1" get="inline" set="null" line="635" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></prettyStringVert>
	<prettyAllVert public="1" get="inline" set="null" line="641" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></prettyAllVert>
	<hex public="1" get="inline" set="null" line="652" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
	<hexA public="1" get="inline" set="null" line="656" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></hexA>
	<hexB public="1" get="inline" set="null" line="660" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></hexB>
	<hexC public="1" get="inline" set="null" line="664" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></hexC>
	<hexAll public="1" get="inline" set="null" line="668" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></hexAll>
	<prettyStringUV public="1" get="inline" set="null" line="679" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></prettyStringUV>
	<prettyAlluv public="1" get="inline" set="null" line="685" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></prettyAlluv>
	<prettyEverything public="1" get="inline" set="null" line="696" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></prettyEverything>
	<alphaChannel public="1" get="inline" set="null" line="710" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="713" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="716" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="719" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="hyperKitGL.io._ArrayColorTrianglesUV.ArrayColorTrianglesUV_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/ArrayColorTrianglesUV.hx" private="1" module="hyperKitGL.io.ArrayColorTrianglesUV" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a=""><x path="hyperKitGL.io.ArrayColorTrianglesUV"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<create public="1" get="inline" set="null" line="10" static="1"><f a=""><x path="hyperKitGL.io.ArrayColorTrianglesUV"/></f></create>
		<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
		<get_ax set="method" line="14" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_ax>
		<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
		<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
		<get_ay set="method" line="23" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_ay>
		<set_ay set="method" line="26" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
		<az public="1" get="accessor" set="accessor" static="1"><x path="Float"/></az>
		<get_az set="method" line="32" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_az>
		<set_az set="method" line="35" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_az>
		<redA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redA>
		<get_redA set="method" line="42" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_redA>
		<set_redA set="method" line="45" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redA>
		<greenA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenA>
		<get_greenA get="inline" set="null" line="53" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_greenA>
		<set_greenA get="inline" set="null" line="57" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenA>
		<blueA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueA>
		<get_blueA get="inline" set="null" line="64" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_blueA>
		<set_blueA get="inline" set="null" line="68" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueA>
		<alphaA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaA>
		<get_alphaA get="inline" set="null" line="75" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_alphaA>
		<set_alphaA get="inline" set="null" line="79" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaA>
		<uA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></uA>
		<get_uA get="inline" set="null" line="86" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_uA>
		<set_uA get="inline" set="null" line="90" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_uA>
		<vA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></vA>
		<get_vA get="inline" set="null" line="97" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_vA>
		<set_vA get="inline" set="null" line="101" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_vA>
		<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
		<get_bx set="method" line="108" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_bx>
		<set_bx set="method" line="111" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
		<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
		<get_by set="method" line="117" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_by>
		<set_by set="method" line="120" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
		<bz public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bz>
		<get_bz set="method" line="126" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_bz>
		<set_bz set="method" line="129" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bz>
		<redB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redB>
		<get_redB set="method" line="136" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_redB>
		<set_redB set="method" line="139" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redB>
		<greenB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenB>
		<get_greenB get="inline" set="null" line="147" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_greenB>
		<set_greenB get="inline" set="null" line="151" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenB>
		<blueB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueB>
		<get_blueB get="inline" set="null" line="158" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_blueB>
		<set_blueB get="inline" set="null" line="162" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueB>
		<alphaB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaB>
		<get_alphaB get="inline" set="null" line="169" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_alphaB>
		<set_alphaB get="inline" set="null" line="173" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaB>
		<uB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></uB>
		<get_uB get="inline" set="null" line="180" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_uB>
		<set_uB get="inline" set="null" line="184" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_uB>
		<vB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></vB>
		<get_vB get="inline" set="null" line="191" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_vB>
		<set_vB get="inline" set="null" line="195" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_vB>
		<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
		<get_cx set="method" line="202" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_cx>
		<set_cx set="method" line="205" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
		<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
		<get_cy set="method" line="211" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_cy>
		<set_cy set="method" line="214" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
		<cz public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cz>
		<get_cz set="method" line="220" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_cz>
		<set_cz set="method" line="223" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cz>
		<redC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redC>
		<get_redC set="method" line="230" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_redC>
		<set_redC set="method" line="233" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redC>
		<greenC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenC>
		<get_greenC get="inline" set="null" line="241" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_greenC>
		<set_greenC get="inline" set="null" line="245" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenC>
		<blueC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueC>
		<get_blueC get="inline" set="null" line="252" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_blueC>
		<set_blueC get="inline" set="null" line="256" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueC>
		<alphaC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaC>
		<get_alphaC get="inline" set="null" line="263" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_alphaC>
		<set_alphaC get="inline" set="null" line="267" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaC>
		<uC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></uC>
		<get_uC get="inline" set="null" line="274" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_uC>
		<set_uC get="inline" set="null" line="278" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_uC>
		<vC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></vC>
		<get_vC get="inline" set="null" line="285" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_vC>
		<set_vC get="inline" set="null" line="289" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_vC>
		<triangle public="1" set="method" line="298" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="hyperKitGL.io.Array3x9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</triangle>
		<triangleUV public="1" set="method" line="324" static="1">
			<f a="this:uA_:vA_:uB_:vB_:uC_:vC_:?windAdjust_">
				<x path="hyperKitGL.io.Array3x9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</triangleUV>
		<adjustWinding public="1" set="method" line="341" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Bool"/>
</f></adjustWinding>
		<u public="1" get="accessor" set="accessor" static="1"><x path="Float"/></u>
		<get_u get="inline" set="null" line="346" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_u>
		<set_u get="inline" set="null" line="350" static="1"><f a="this:u_">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_u>
		<v public="1" get="accessor" set="accessor" static="1"><x path="Float"/></v>
		<get_v get="inline" set="null" line="359" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_v>
		<set_v get="inline" set="null" line="363" static="1"><f a="this:v_">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_v>
		<rightU public="1" get="accessor" set="null" static="1"><x path="Float"/></rightU>
		<get_rightU get="inline" set="null" line="373" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_rightU>
		<bottomV public="1" get="accessor" set="null" static="1"><x path="Float"/></bottomV>
		<get_bottomV get="inline" set="null" line="378" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_bottomV>
		<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
		<get_x get="inline" set="null" line="384" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_x>
		<set_x get="inline" set="null" line="388" static="1"><f a="this:x">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
		<get_y get="inline" set="null" line="397" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_y>
		<set_y get="inline" set="null" line="401" static="1"><f a="this:y">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<z public="1" get="accessor" set="accessor" static="1"><x path="Float"/></z>
		<get_z get="inline" set="null" line="410" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_z>
		<set_z get="inline" set="null" line="414" static="1"><f a="this:z">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
		<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
		<get_right get="inline" set="null" line="423" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_right>
		<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
		<get_bottom get="inline" set="null" line="428" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_bottom>
		<back public="1" get="accessor" set="null" static="1"><x path="Float"/></back>
		<get_back get="inline" set="null" line="433" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
</f></get_back>
		<moveDelta set="method" line="436" static="1"><f a="this:dx:dy">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
		<sign public="1" get="inline" set="null" line="445" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<liteHit public="1" get="inline" set="null" line="450" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
		<fullHit public="1" set="method" line="458" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
		<distHit public="1" set="method" line="463" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
		<moveDeltaUV set="method" line="470" static="1"><f a="this:du:dv">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDeltaUV>
		<rotate public="1" get="inline" set="null" line="479" static="1"><f a="this:x:y:theta">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<rotateTrig public="1" get="inline" set="null" line="485" static="1"><f a="this:x:y:cos:sin">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
		<colorTriangles public="1" get="inline" set="null" line="514" static="1"><f a="this:color:times">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="518" static="1"><f a="this:colorA:colorB:colorC">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
		<rgb public="1" get="null" set="accessor" static="1"><x path="Int"/></rgb>
		<set_rgb get="inline" set="null" line="525" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgb>
		<rgbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbA>
		<set_rgbA get="inline" set="null" line="533" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbA>
		<get_rgbA get="inline" set="null" line="541" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
</f></get_rgbA>
		<rgbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbB>
		<set_rgbB get="inline" set="null" line="548" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbB>
		<get_rgbB get="inline" set="null" line="556" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
</f></get_rgbB>
		<rgbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbC>
		<set_rgbC get="inline" set="null" line="563" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbC>
		<get_rgbC get="inline" set="null" line="571" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
</f></get_rgbC>
		<argb public="1" get="null" set="accessor" static="1"><x path="Int"/></argb>
		<set_argb get="inline" set="null" line="578" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
		<argbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbA>
		<set_argbA get="inline" set="null" line="587" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
		<get_argbA get="inline" set="null" line="595" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
</f></get_argbA>
		<argbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbB>
		<set_argbB get="inline" set="null" line="604" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
		<get_argbB get="inline" set="null" line="612" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
</f></get_argbB>
		<argbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbC>
		<set_argbC get="inline" set="null" line="620" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
		<get_argbC get="inline" set="null" line="628" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
</f></get_argbC>
		<prettyStringVert public="1" get="inline" set="null" line="635" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></prettyStringVert>
		<prettyAllVert public="1" get="inline" set="null" line="641" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></prettyAllVert>
		<hex public="1" get="inline" set="null" line="652" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Array3x9"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
		<hexA public="1" get="inline" set="null" line="656" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></hexA>
		<hexB public="1" get="inline" set="null" line="660" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></hexB>
		<hexC public="1" get="inline" set="null" line="664" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></hexC>
		<hexAll public="1" get="inline" set="null" line="668" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></hexAll>
		<prettyStringUV public="1" get="inline" set="null" line="679" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></prettyStringUV>
		<prettyAlluv public="1" get="inline" set="null" line="685" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></prettyAlluv>
		<prettyEverything public="1" get="inline" set="null" line="696" static="1"><f a="this">
	<x path="hyperKitGL.io.Array3x9"/>
	<c path="String"/>
</f></prettyEverything>
		<alphaChannel public="1" get="inline" set="null" line="710" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="713" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="716" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="719" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hyperKitGL.io.ArrayFlat" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/ArrayFlat.hx">
		<this><c path="Array"><x path="Float"/></c></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="hyperKitGL.io._ArrayFlat.ArrayFlat_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/ArrayFlat.hx" private="1" module="hyperKitGL.io.ArrayFlat" final="1">
	<readItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="14" static="1">
		<f a="this:k:v">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="18" static="1">
		<f a=""><x path="hyperKitGL.io.ArrayFlat"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<size public="1" get="accessor" set="null" static="1"><x path="Int"/></size>
	<get_size get="inline" set="null" line="25" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
</f></get_size>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="30" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="34" static="1"><f a="this:id">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
	<get_pos get="inline" set="null" line="40" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></get_pos>
	<set_pos get="inline" set="null" line="44" static="1"><f a="this:pos_">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
	<hasNext public="1" get="inline" set="null" line="49" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="51" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></next>
	<increment public="1" get="inline" set="null" line="56" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</increment>
	<setArray public="1" get="inline" set="null" line="74" static="1"><f a="this:arr">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></setArray>
	<clone public="1" get="inline" set="null" line="78" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="hyperKitGL.io.ArrayFlat"/>
</f></clone>
</class></impl>
	</abstract>
	<class path="hyperKitGL.io._ArrayFlat.ArrayFlat_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/ArrayFlat.hx" private="1" module="hyperKitGL.io.ArrayFlat" final="1">
		<readItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="14" static="1">
			<f a="this:k:v">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="18" static="1">
			<f a=""><x path="hyperKitGL.io.ArrayFlat"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<size public="1" get="accessor" set="null" static="1"><x path="Int"/></size>
		<get_size get="inline" set="null" line="25" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
</f></get_size>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="30" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="34" static="1"><f a="this:id">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="40" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></get_pos>
		<set_pos get="inline" set="null" line="44" static="1"><f a="this:pos_">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<hasNext public="1" get="inline" set="null" line="49" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="51" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></next>
		<increment public="1" get="inline" set="null" line="56" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</increment>
		<setArray public="1" get="inline" set="null" line="74" static="1"><f a="this:arr">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></setArray>
		<clone public="1" get="inline" set="null" line="78" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="hyperKitGL.io.ArrayFlat"/>
</f></clone>
	</class>
	<abstract path="hyperKitGL.io.ArrayFlatDepth" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/ArrayFlatDepth.hx">
		<this><x path="hyperKitGL.io.ArrayFlat"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="hyperKitGL.io._ArrayFlatDepth.ArrayFlatDepth_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/ArrayFlatDepth.hx" private="1" module="hyperKitGL.io.ArrayFlatDepth" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a=""><x path="hyperKitGL.io.ArrayFlatDepth"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<rangeToEnd public="1" set="method" line="11" static="1"><f a="this:starting:totalLen:section">
	<x path="hyperKitGL.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToEnd>
	<rangeToStart public="1" get="inline" set="null" line="35" static="1"><f a="this:starting:totalLen">
	<x path="hyperKitGL.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToStart>
	<rangeSwitch public="1" get="inline" set="null" line="60" static="1"><f a="this:start0:start1:totalLen">
	<x path="hyperKitGL.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeSwitch>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="hyperKitGL.io._ArrayFlatDepth.ArrayFlatDepth_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/ArrayFlatDepth.hx" private="1" module="hyperKitGL.io.ArrayFlatDepth" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a=""><x path="hyperKitGL.io.ArrayFlatDepth"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<rangeToEnd public="1" set="method" line="11" static="1"><f a="this:starting:totalLen:section">
	<x path="hyperKitGL.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToEnd>
		<rangeToStart public="1" get="inline" set="null" line="35" static="1"><f a="this:starting:totalLen">
	<x path="hyperKitGL.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToStart>
		<rangeSwitch public="1" get="inline" set="null" line="60" static="1"><f a="this:start0:start1:totalLen">
	<x path="hyperKitGL.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeSwitch>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hyperKitGL.io.Flat3x7" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Flat3x7.hx">
		<this><x path="hyperKitGL.io.Float32FlatDepth"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="hyperKitGL.io._Flat3x7.Flat3x7_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Flat3x7.hx" private="1" module="hyperKitGL.io.Flat3x7" final="1">
	<readItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k">
			<x path="hyperKitGL.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="13" static="1">
		<f a="this:k:v">
			<x path="hyperKitGL.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="hyperKitGL.io.Flat3x7"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="23" static="1"><f a="this">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="27" static="1"><f a="this:id">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<getArray public="1" get="inline" set="null" line="33" static="1"><f a="this">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<t path="hyperKitGL.io.Float32Array"/>
</f></getArray>
	<toEnd public="1" get="inline" set="null" line="37" static="1"><f a="this:id:len">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
	<toStart public="1" get="inline" set="null" line="41" static="1"><f a="this:id:len">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
	<swap public="1" get="inline" set="null" line="45" static="1"><f a="this:id0:id1:len">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
</class></impl>
	</abstract>
	<class path="hyperKitGL.io._Flat3x7.Flat3x7_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Flat3x7.hx" private="1" module="hyperKitGL.io.Flat3x7" final="1">
		<readItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k">
				<x path="hyperKitGL.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="13" static="1">
			<f a="this:k:v">
				<x path="hyperKitGL.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="hyperKitGL.io.Flat3x7"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="23" static="1"><f a="this">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="27" static="1"><f a="this:id">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<getArray public="1" get="inline" set="null" line="33" static="1"><f a="this">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<t path="hyperKitGL.io.Float32Array"/>
</f></getArray>
		<toEnd public="1" get="inline" set="null" line="37" static="1"><f a="this:id:len">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
		<toStart public="1" get="inline" set="null" line="41" static="1"><f a="this:id:len">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
		<swap public="1" get="inline" set="null" line="45" static="1"><f a="this:id0:id1:len">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
	</class>
	<abstract path="hyperKitGL.io.Flat3x9" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Flat3x9.hx">
		<from><icast><x path="hyperKitGL.io.Float32FlatDepth"/></icast></from>
		<this><x path="hyperKitGL.io.Float32FlatDepth"/></this>
		<to><icast><x path="hyperKitGL.io.Float32FlatDepth"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="hyperKitGL.io._Flat3x9.Flat3x9_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Flat3x9.hx" private="1" module="hyperKitGL.io.Flat3x9" final="1">
	<readItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k">
			<x path="hyperKitGL.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="14" static="1">
		<f a="this:k:v">
			<x path="hyperKitGL.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="18" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="hyperKitGL.io.Flat3x9"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="24" static="1"><f a="this">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="28" static="1"><f a="this:id">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<getArray public="1" get="inline" set="null" line="33" static="1"><f a="this">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<t path="hyperKitGL.io.Float32Array"/>
</f></getArray>
	<toEnd public="1" get="inline" set="null" line="37" static="1"><f a="this:id:len">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
	<toStart public="1" get="inline" set="null" line="41" static="1"><f a="this:id:len">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
	<swap public="1" get="inline" set="null" line="45" static="1"><f a="this:id0:id1:len">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
</class></impl>
	</abstract>
	<class path="hyperKitGL.io._Flat3x9.Flat3x9_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Flat3x9.hx" private="1" module="hyperKitGL.io.Flat3x9" final="1">
		<readItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k">
				<x path="hyperKitGL.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="14" static="1">
			<f a="this:k:v">
				<x path="hyperKitGL.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="18" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="hyperKitGL.io.Flat3x9"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="24" static="1"><f a="this">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="28" static="1"><f a="this:id">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<getArray public="1" get="inline" set="null" line="33" static="1"><f a="this">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<t path="hyperKitGL.io.Float32Array"/>
</f></getArray>
		<toEnd public="1" get="inline" set="null" line="37" static="1"><f a="this:id:len">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
		<toStart public="1" get="inline" set="null" line="41" static="1"><f a="this:id:len">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
		<swap public="1" get="inline" set="null" line="45" static="1"><f a="this:id0:id1:len">
	<x path="hyperKitGL.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
	</class>
	<typedef path="hyperKitGL.io.Float32Array" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Float32Array.hx">
		<x path="lime.utils.Float32Array"/>
		<haxe_doc>* switches between Lime, NME and haxe.io.Float32Array</haxe_doc>
	</typedef>
	<abstract path="hyperKitGL.io.Float32Flat" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Float32Flat.hx">
		<from><icast field="fromArray"><t path="hyperKitGL.io.Float32Array"/></icast></from>
		<this><t path="hyperKitGL.io.Float32Array"/></this>
		<to><icast field="toArray"><x path="lime.utils.Float32Array"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="hyperKitGL.io._Float32Flat.Float32Flat_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Float32Flat.hx" private="1" module="hyperKitGL.io.Float32Flat" final="1">
	<readItem public="1" get="inline" set="null" line="19" static="1">
		<f a="this:k">
			<t path="hyperKitGL.io.Float32Array"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Float32Flat(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="32" static="1">
		<f a="this:k:v">
			<t path="hyperKitGL.io.Float32Array"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Float32Flat(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
	</writeItem>
	<_new public="1" get="inline" set="null" line="36" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="hyperKitGL.io.Float32Flat"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<size public="1" get="accessor" set="accessor" static="1"><x path="Int"/></size>
	<get_size get="inline" set="null" line="44" static="1"><f a="this">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Int"/>
</f></get_size>
	<set_size get="inline" set="null" line="49" static="1"><f a="this:id">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="55" static="1"><f a="this">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="59" static="1"><f a="this:id">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
	<get_pos get="inline" set="null" line="65" static="1"><f a="this">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Float"/>
</f></get_pos>
	<set_pos get="inline" set="null" line="69" static="1"><f a="this:pos_">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
	<fits public="1" get="inline" set="null" line="75" static="1"><f a="this:k">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></fits>
	<resize public="1" get="inline" set="null" line="84" static="1"><f a="this:l">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
	<optimiseLength public="1" get="inline" set="null" line="105" static="1"><f a="this">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Int"/>
</f></optimiseLength>
	<updateLen get="inline" set="null" line="111" static="1"><f a="this">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Void"/>
</f></updateLen>
	<hasNext public="1" get="inline" set="null" line="117" static="1"><f a="this">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="119" static="1"><f a="this">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Float"/>
</f></next>
	<increment public="1" get="inline" set="null" line="133" static="1">
		<f a="this">
			<t path="hyperKitGL.io.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</increment>
	<toArray public="1" get="inline" set="null" line="138" static="1">
		<f a="this">
			<t path="hyperKitGL.io.Float32Array"/>
			<t path="hyperKitGL.io.Float32Array"/>
		</f>
		<meta><m n=":to"/></meta>
	</toArray>
	<fromArray public="1" get="inline" set="null" line="143" static="1">
		<f a="arr">
			<t path="hyperKitGL.io.Float32Array"/>
			<x path="hyperKitGL.io.Float32Flat"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArray>
	<clone public="1" get="inline" set="null" line="149" static="1"><f a="this">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="hyperKitGL.io.Float32Flat"/>
</f></clone>
	<fill public="1" get="inline" set="null" line="155" static="1"><f a="this:arr">
	<t path="hyperKitGL.io.Float32Array"/>
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Void"/>
</f></fill>
</class></impl>
	</abstract>
	<class path="hyperKitGL.io._Float32Flat.Float32Flat_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Float32Flat.hx" private="1" module="hyperKitGL.io.Float32Flat" final="1">
		<readItem public="1" get="inline" set="null" line="19" static="1">
			<f a="this:k">
				<t path="hyperKitGL.io.Float32Array"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Float32Flat(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="32" static="1">
			<f a="this:k:v">
				<t path="hyperKitGL.io.Float32Array"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Float32Flat(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
		</writeItem>
		<_new public="1" get="inline" set="null" line="36" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="hyperKitGL.io.Float32Flat"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<size public="1" get="accessor" set="accessor" static="1"><x path="Int"/></size>
		<get_size get="inline" set="null" line="44" static="1"><f a="this">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Int"/>
</f></get_size>
		<set_size get="inline" set="null" line="49" static="1"><f a="this:id">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="55" static="1"><f a="this">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="59" static="1"><f a="this:id">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="65" static="1"><f a="this">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Float"/>
</f></get_pos>
		<set_pos get="inline" set="null" line="69" static="1"><f a="this:pos_">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<fits public="1" get="inline" set="null" line="75" static="1"><f a="this:k">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></fits>
		<resize public="1" get="inline" set="null" line="84" static="1"><f a="this:l">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<optimiseLength public="1" get="inline" set="null" line="105" static="1"><f a="this">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Int"/>
</f></optimiseLength>
		<updateLen get="inline" set="null" line="111" static="1"><f a="this">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Void"/>
</f></updateLen>
		<hasNext public="1" get="inline" set="null" line="117" static="1"><f a="this">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="119" static="1"><f a="this">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Float"/>
</f></next>
		<increment public="1" get="inline" set="null" line="133" static="1">
			<f a="this">
				<t path="hyperKitGL.io.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</increment>
		<toArray public="1" get="inline" set="null" line="138" static="1">
			<f a="this">
				<t path="hyperKitGL.io.Float32Array"/>
				<t path="hyperKitGL.io.Float32Array"/>
			</f>
			<meta><m n=":to"/></meta>
		</toArray>
		<fromArray public="1" get="inline" set="null" line="143" static="1">
			<f a="arr">
				<t path="hyperKitGL.io.Float32Array"/>
				<x path="hyperKitGL.io.Float32Flat"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArray>
		<clone public="1" get="inline" set="null" line="149" static="1"><f a="this">
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="hyperKitGL.io.Float32Flat"/>
</f></clone>
		<fill public="1" get="inline" set="null" line="155" static="1"><f a="this:arr">
	<t path="hyperKitGL.io.Float32Array"/>
	<t path="hyperKitGL.io.Float32Array"/>
	<x path="Void"/>
</f></fill>
	</class>
	<abstract path="hyperKitGL.io.Float32FlatDepth" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Float32FlatDepth.hx">
		<this><x path="hyperKitGL.io.Float32Flat"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="hyperKitGL.io._Float32FlatDepth.Float32FlatDepth_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Float32FlatDepth.hx" private="1" module="hyperKitGL.io.Float32FlatDepth" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="hyperKitGL.io.Float32FlatDepth"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<rangeToEnd public="1" set="method" line="12" static="1"><f a="this:starting:totalLen:section">
	<x path="hyperKitGL.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToEnd>
	<rangeToStart public="1" get="inline" set="null" line="38" static="1"><f a="this:starting:totalLen">
	<x path="hyperKitGL.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToStart>
	<rangeSwitch public="1" get="inline" set="null" line="65" static="1"><f a="this:start0:start1:totalLen">
	<x path="hyperKitGL.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeSwitch>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="hyperKitGL.io._Float32FlatDepth.Float32FlatDepth_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/Float32FlatDepth.hx" private="1" module="hyperKitGL.io.Float32FlatDepth" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="hyperKitGL.io.Float32FlatDepth"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<rangeToEnd public="1" set="method" line="12" static="1"><f a="this:starting:totalLen:section">
	<x path="hyperKitGL.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToEnd>
		<rangeToStart public="1" get="inline" set="null" line="38" static="1"><f a="this:starting:totalLen">
	<x path="hyperKitGL.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToStart>
		<rangeSwitch public="1" get="inline" set="null" line="65" static="1"><f a="this:start0:start1:totalLen">
	<x path="hyperKitGL.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeSwitch>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hyperKitGL.io.FloatColorTriangles" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/FloatColorTriangles.hx">
		<this><x path="hyperKitGL.io.Flat3x7"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="hyperKitGL.io._FloatColorTriangles.FloatColorTriangles_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/FloatColorTriangles.hx" private="1" module="hyperKitGL.io.FloatColorTriangles" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="hyperKitGL.io.FloatColorTriangles"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<create public="1" get="inline" set="null" line="10" static="1"><f a="len">
	<x path="Int"/>
	<x path="hyperKitGL.io.FloatColorTriangles"/>
</f></create>
	<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
	<get_ax set="method" line="14" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_ax>
	<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
	<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
	<get_ay set="method" line="23" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_ay>
	<set_ay set="method" line="26" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
	<az public="1" get="accessor" set="accessor" static="1"><x path="Float"/></az>
	<get_az set="method" line="32" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_az>
	<set_az set="method" line="35" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_az>
	<redA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redA>
	<get_redA set="method" line="42" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_redA>
	<set_redA set="method" line="45" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redA>
	<greenA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenA>
	<get_greenA get="inline" set="null" line="53" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_greenA>
	<set_greenA get="inline" set="null" line="57" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenA>
	<blueA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueA>
	<get_blueA get="inline" set="null" line="64" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_blueA>
	<set_blueA get="inline" set="null" line="68" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueA>
	<alphaA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaA>
	<get_alphaA get="inline" set="null" line="75" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_alphaA>
	<set_alphaA get="inline" set="null" line="79" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaA>
	<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
	<get_bx set="method" line="86" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_bx>
	<set_bx set="method" line="89" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
	<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
	<get_by set="method" line="95" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_by>
	<set_by set="method" line="98" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
	<bz public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bz>
	<get_bz set="method" line="104" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_bz>
	<set_bz set="method" line="107" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bz>
	<redB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redB>
	<get_redB set="method" line="114" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_redB>
	<set_redB set="method" line="117" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redB>
	<greenB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenB>
	<get_greenB get="inline" set="null" line="125" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_greenB>
	<set_greenB get="inline" set="null" line="129" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenB>
	<blueB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueB>
	<get_blueB get="inline" set="null" line="136" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_blueB>
	<set_blueB get="inline" set="null" line="140" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueB>
	<alphaB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaB>
	<get_alphaB get="inline" set="null" line="147" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_alphaB>
	<set_alphaB get="inline" set="null" line="151" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaB>
	<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
	<get_cx set="method" line="158" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_cx>
	<set_cx set="method" line="161" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
	<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
	<get_cy set="method" line="167" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_cy>
	<set_cy set="method" line="170" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
	<cz public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cz>
	<get_cz set="method" line="176" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_cz>
	<set_cz set="method" line="179" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cz>
	<redC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redC>
	<get_redC set="method" line="186" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_redC>
	<set_redC set="method" line="189" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redC>
	<greenC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenC>
	<get_greenC get="inline" set="null" line="197" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_greenC>
	<set_greenC get="inline" set="null" line="201" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenC>
	<blueC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueC>
	<get_blueC get="inline" set="null" line="208" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_blueC>
	<set_blueC get="inline" set="null" line="212" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueC>
	<alphaC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaC>
	<get_alphaC get="inline" set="null" line="219" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_alphaC>
	<set_alphaC get="inline" set="null" line="223" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaC>
	<triangle public="1" set="method" line="231" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="hyperKitGL.io.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":keep"/></meta>
	</triangle>
	<adjustWinding public="1" set="method" line="253" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Bool"/>
</f></adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
	<get_x get="inline" set="null" line="258" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_x>
	<set_x get="inline" set="null" line="262" static="1"><f a="this:x">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
	<get_y get="inline" set="null" line="271" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_y>
	<set_y get="inline" set="null" line="275" static="1"><f a="this:y">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<z public="1" get="accessor" set="accessor" static="1"><x path="Float"/></z>
	<get_z get="inline" set="null" line="284" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_z>
	<set_z get="inline" set="null" line="288" static="1"><f a="this:z">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
	<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
	<get_right get="inline" set="null" line="297" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_right>
	<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
	<get_bottom get="inline" set="null" line="302" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_bottom>
	<back public="1" get="accessor" set="null" static="1"><x path="Float"/></back>
	<get_back get="inline" set="null" line="307" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_back>
	<moveDelta set="method" line="310" static="1"><f a="this:dx:dy">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
	<sign public="1" get="inline" set="null" line="319" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<distHit public="1" set="method" line="323" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
	<liteHit public="1" get="inline" set="null" line="332" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
	<fullHit public="1" set="method" line="340" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
	<rotate public="1" get="inline" set="null" line="345" static="1"><f a="this:x:y:theta">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<rotateTrig public="1" get="inline" set="null" line="351" static="1"><f a="this:x:y:cos:sin">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
	<colorTriangles public="1" get="inline" set="null" line="380" static="1"><f a="this:color:times">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="387" static="1"><f a="this:colorA:colorB:colorC">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
	<rgb public="1" get="null" set="accessor" static="1"><x path="Int"/></rgb>
	<set_rgb get="inline" set="null" line="394" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgb>
	<rgbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbA>
	<set_rgbA get="inline" set="null" line="402" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbA>
	<get_rgbA get="inline" set="null" line="410" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
</f></get_rgbA>
	<rgbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbB>
	<set_rgbB get="inline" set="null" line="417" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbB>
	<get_rgbB get="inline" set="null" line="425" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
</f></get_rgbB>
	<rgbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbC>
	<set_rgbC get="inline" set="null" line="432" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbC>
	<get_rgbC get="inline" set="null" line="440" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
</f></get_rgbC>
	<argb public="1" get="null" set="accessor" static="1"><x path="Int"/></argb>
	<set_argb get="inline" set="null" line="447" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
	<argbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbA>
	<set_argbA get="inline" set="null" line="455" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
	<get_argbA get="inline" set="null" line="463" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
</f></get_argbA>
	<argbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbB>
	<set_argbB get="inline" set="null" line="471" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
	<get_argbB get="inline" set="null" line="479" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
</f></get_argbB>
	<argbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbC>
	<set_argbC get="inline" set="null" line="487" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
	<get_argbC get="inline" set="null" line="495" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
</f></get_argbC>
	<prettyStringVert public="1" get="inline" set="null" line="502" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<c path="String"/>
</f></prettyStringVert>
	<prettyAllVert public="1" get="inline" set="null" line="508" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<c path="String"/>
</f></prettyAllVert>
	<hex public="1" get="inline" set="null" line="519" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
	<hexA public="1" get="inline" set="null" line="523" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<c path="String"/>
</f></hexA>
	<hexB public="1" get="inline" set="null" line="527" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<c path="String"/>
</f></hexB>
	<hexC public="1" get="inline" set="null" line="531" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<c path="String"/>
</f></hexC>
	<hexAll public="1" get="inline" set="null" line="535" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<c path="String"/>
</f></hexAll>
	<alphaChannel public="1" get="inline" set="null" line="547" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="550" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="553" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="556" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="hyperKitGL.io._FloatColorTriangles.FloatColorTriangles_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/FloatColorTriangles.hx" private="1" module="hyperKitGL.io.FloatColorTriangles" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="hyperKitGL.io.FloatColorTriangles"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<create public="1" get="inline" set="null" line="10" static="1"><f a="len">
	<x path="Int"/>
	<x path="hyperKitGL.io.FloatColorTriangles"/>
</f></create>
		<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
		<get_ax set="method" line="14" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_ax>
		<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
		<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
		<get_ay set="method" line="23" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_ay>
		<set_ay set="method" line="26" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
		<az public="1" get="accessor" set="accessor" static="1"><x path="Float"/></az>
		<get_az set="method" line="32" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_az>
		<set_az set="method" line="35" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_az>
		<redA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redA>
		<get_redA set="method" line="42" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_redA>
		<set_redA set="method" line="45" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redA>
		<greenA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenA>
		<get_greenA get="inline" set="null" line="53" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_greenA>
		<set_greenA get="inline" set="null" line="57" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenA>
		<blueA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueA>
		<get_blueA get="inline" set="null" line="64" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_blueA>
		<set_blueA get="inline" set="null" line="68" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueA>
		<alphaA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaA>
		<get_alphaA get="inline" set="null" line="75" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_alphaA>
		<set_alphaA get="inline" set="null" line="79" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaA>
		<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
		<get_bx set="method" line="86" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_bx>
		<set_bx set="method" line="89" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
		<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
		<get_by set="method" line="95" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_by>
		<set_by set="method" line="98" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
		<bz public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bz>
		<get_bz set="method" line="104" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_bz>
		<set_bz set="method" line="107" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bz>
		<redB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redB>
		<get_redB set="method" line="114" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_redB>
		<set_redB set="method" line="117" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redB>
		<greenB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenB>
		<get_greenB get="inline" set="null" line="125" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_greenB>
		<set_greenB get="inline" set="null" line="129" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenB>
		<blueB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueB>
		<get_blueB get="inline" set="null" line="136" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_blueB>
		<set_blueB get="inline" set="null" line="140" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueB>
		<alphaB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaB>
		<get_alphaB get="inline" set="null" line="147" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_alphaB>
		<set_alphaB get="inline" set="null" line="151" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaB>
		<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
		<get_cx set="method" line="158" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_cx>
		<set_cx set="method" line="161" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
		<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
		<get_cy set="method" line="167" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_cy>
		<set_cy set="method" line="170" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
		<cz public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cz>
		<get_cz set="method" line="176" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_cz>
		<set_cz set="method" line="179" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cz>
		<redC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redC>
		<get_redC set="method" line="186" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_redC>
		<set_redC set="method" line="189" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redC>
		<greenC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenC>
		<get_greenC get="inline" set="null" line="197" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_greenC>
		<set_greenC get="inline" set="null" line="201" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenC>
		<blueC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueC>
		<get_blueC get="inline" set="null" line="208" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_blueC>
		<set_blueC get="inline" set="null" line="212" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueC>
		<alphaC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaC>
		<get_alphaC get="inline" set="null" line="219" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_alphaC>
		<set_alphaC get="inline" set="null" line="223" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaC>
		<triangle public="1" set="method" line="231" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="hyperKitGL.io.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</triangle>
		<adjustWinding public="1" set="method" line="253" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Bool"/>
</f></adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
		<get_x get="inline" set="null" line="258" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_x>
		<set_x get="inline" set="null" line="262" static="1"><f a="this:x">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
		<get_y get="inline" set="null" line="271" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_y>
		<set_y get="inline" set="null" line="275" static="1"><f a="this:y">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<z public="1" get="accessor" set="accessor" static="1"><x path="Float"/></z>
		<get_z get="inline" set="null" line="284" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_z>
		<set_z get="inline" set="null" line="288" static="1"><f a="this:z">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
		<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
		<get_right get="inline" set="null" line="297" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_right>
		<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
		<get_bottom get="inline" set="null" line="302" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_bottom>
		<back public="1" get="accessor" set="null" static="1"><x path="Float"/></back>
		<get_back get="inline" set="null" line="307" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
</f></get_back>
		<moveDelta set="method" line="310" static="1"><f a="this:dx:dy">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
		<sign public="1" get="inline" set="null" line="319" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<distHit public="1" set="method" line="323" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
		<liteHit public="1" get="inline" set="null" line="332" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
		<fullHit public="1" set="method" line="340" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
		<rotate public="1" get="inline" set="null" line="345" static="1"><f a="this:x:y:theta">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<rotateTrig public="1" get="inline" set="null" line="351" static="1"><f a="this:x:y:cos:sin">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
		<colorTriangles public="1" get="inline" set="null" line="380" static="1"><f a="this:color:times">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="387" static="1"><f a="this:colorA:colorB:colorC">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
		<rgb public="1" get="null" set="accessor" static="1"><x path="Int"/></rgb>
		<set_rgb get="inline" set="null" line="394" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgb>
		<rgbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbA>
		<set_rgbA get="inline" set="null" line="402" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbA>
		<get_rgbA get="inline" set="null" line="410" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
</f></get_rgbA>
		<rgbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbB>
		<set_rgbB get="inline" set="null" line="417" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbB>
		<get_rgbB get="inline" set="null" line="425" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
</f></get_rgbB>
		<rgbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbC>
		<set_rgbC get="inline" set="null" line="432" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbC>
		<get_rgbC get="inline" set="null" line="440" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
</f></get_rgbC>
		<argb public="1" get="null" set="accessor" static="1"><x path="Int"/></argb>
		<set_argb get="inline" set="null" line="447" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
		<argbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbA>
		<set_argbA get="inline" set="null" line="455" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
		<get_argbA get="inline" set="null" line="463" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
</f></get_argbA>
		<argbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbB>
		<set_argbB get="inline" set="null" line="471" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
		<get_argbB get="inline" set="null" line="479" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
</f></get_argbB>
		<argbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbC>
		<set_argbC get="inline" set="null" line="487" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
		<get_argbC get="inline" set="null" line="495" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
</f></get_argbC>
		<prettyStringVert public="1" get="inline" set="null" line="502" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<c path="String"/>
</f></prettyStringVert>
		<prettyAllVert public="1" get="inline" set="null" line="508" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<c path="String"/>
</f></prettyAllVert>
		<hex public="1" get="inline" set="null" line="519" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x7"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
		<hexA public="1" get="inline" set="null" line="523" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<c path="String"/>
</f></hexA>
		<hexB public="1" get="inline" set="null" line="527" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<c path="String"/>
</f></hexB>
		<hexC public="1" get="inline" set="null" line="531" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<c path="String"/>
</f></hexC>
		<hexAll public="1" get="inline" set="null" line="535" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x7"/>
	<c path="String"/>
</f></hexAll>
		<alphaChannel public="1" get="inline" set="null" line="547" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="550" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="553" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="556" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hyperKitGL.io.FloatColorTrianglesUV" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/FloatColorTrianglesUV.hx">
		<from><icast><x path="hyperKitGL.io.Flat3x9"/></icast></from>
		<this><x path="hyperKitGL.io.Flat3x9"/></this>
		<to><icast><x path="hyperKitGL.io.Flat3x9"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="hyperKitGL.io._FloatColorTrianglesUV.FloatColorTrianglesUV_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/FloatColorTrianglesUV.hx" private="1" module="hyperKitGL.io.FloatColorTrianglesUV" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<create public="1" get="inline" set="null" line="10" static="1"><f a="len">
	<x path="Int"/>
	<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
</f></create>
	<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
	<get_ax set="method" line="14" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_ax>
	<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
	<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
	<get_ay set="method" line="23" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_ay>
	<set_ay set="method" line="26" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
	<az public="1" get="accessor" set="accessor" static="1"><x path="Float"/></az>
	<get_az set="method" line="32" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_az>
	<set_az set="method" line="35" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_az>
	<redA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redA>
	<get_redA set="method" line="42" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_redA>
	<set_redA set="method" line="45" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redA>
	<greenA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenA>
	<get_greenA get="inline" set="null" line="53" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_greenA>
	<set_greenA get="inline" set="null" line="57" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenA>
	<blueA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueA>
	<get_blueA get="inline" set="null" line="64" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_blueA>
	<set_blueA get="inline" set="null" line="68" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueA>
	<alphaA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaA>
	<get_alphaA get="inline" set="null" line="75" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_alphaA>
	<set_alphaA get="inline" set="null" line="79" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaA>
	<uA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></uA>
	<get_uA get="inline" set="null" line="86" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_uA>
	<set_uA get="inline" set="null" line="90" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_uA>
	<vA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></vA>
	<get_vA get="inline" set="null" line="97" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_vA>
	<set_vA get="inline" set="null" line="101" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_vA>
	<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
	<get_bx set="method" line="108" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_bx>
	<set_bx set="method" line="111" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
	<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
	<get_by set="method" line="117" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_by>
	<set_by set="method" line="120" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
	<bz public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bz>
	<get_bz set="method" line="126" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_bz>
	<set_bz set="method" line="129" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bz>
	<redB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redB>
	<get_redB set="method" line="136" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_redB>
	<set_redB set="method" line="139" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redB>
	<greenB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenB>
	<get_greenB get="inline" set="null" line="147" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_greenB>
	<set_greenB get="inline" set="null" line="151" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenB>
	<blueB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueB>
	<get_blueB get="inline" set="null" line="158" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_blueB>
	<set_blueB get="inline" set="null" line="162" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueB>
	<alphaB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaB>
	<get_alphaB get="inline" set="null" line="169" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_alphaB>
	<set_alphaB get="inline" set="null" line="173" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaB>
	<uB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></uB>
	<get_uB get="inline" set="null" line="180" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_uB>
	<set_uB get="inline" set="null" line="184" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_uB>
	<vB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></vB>
	<get_vB get="inline" set="null" line="191" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_vB>
	<set_vB get="inline" set="null" line="195" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_vB>
	<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
	<get_cx set="method" line="202" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_cx>
	<set_cx set="method" line="205" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
	<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
	<get_cy set="method" line="211" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_cy>
	<set_cy set="method" line="214" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
	<cz public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cz>
	<get_cz set="method" line="220" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_cz>
	<set_cz set="method" line="223" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cz>
	<redC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redC>
	<get_redC set="method" line="230" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_redC>
	<set_redC set="method" line="233" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redC>
	<greenC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenC>
	<get_greenC get="inline" set="null" line="241" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_greenC>
	<set_greenC get="inline" set="null" line="245" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenC>
	<blueC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueC>
	<get_blueC get="inline" set="null" line="252" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_blueC>
	<set_blueC get="inline" set="null" line="256" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueC>
	<alphaC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaC>
	<get_alphaC get="inline" set="null" line="263" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_alphaC>
	<set_alphaC get="inline" set="null" line="267" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaC>
	<uC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></uC>
	<get_uC get="inline" set="null" line="274" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_uC>
	<set_uC get="inline" set="null" line="278" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_uC>
	<vC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></vC>
	<get_vC get="inline" set="null" line="285" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_vC>
	<set_vC get="inline" set="null" line="289" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_vC>
	<triangle public="1" set="method" line="298" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="hyperKitGL.io.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":keep"/></meta>
	</triangle>
	<triangleUV public="1" set="method" line="324" static="1">
		<f a="this:uA_:vA_:uB_:vB_:uC_:vC_:?windAdjust_">
			<x path="hyperKitGL.io.Flat3x9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":keep"/></meta>
	</triangleUV>
	<adjustWinding public="1" set="method" line="341" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Bool"/>
</f></adjustWinding>
	<u public="1" get="accessor" set="accessor" static="1"><x path="Float"/></u>
	<get_u get="inline" set="null" line="346" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_u>
	<set_u get="inline" set="null" line="350" static="1"><f a="this:u_">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_u>
	<v public="1" get="accessor" set="accessor" static="1"><x path="Float"/></v>
	<get_v get="inline" set="null" line="359" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_v>
	<set_v get="inline" set="null" line="363" static="1"><f a="this:v_">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_v>
	<rightU public="1" get="accessor" set="null" static="1"><x path="Float"/></rightU>
	<get_rightU get="inline" set="null" line="373" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_rightU>
	<bottomV public="1" get="accessor" set="null" static="1"><x path="Float"/></bottomV>
	<get_bottomV get="inline" set="null" line="378" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_bottomV>
	<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
	<get_x get="inline" set="null" line="384" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_x>
	<set_x get="inline" set="null" line="388" static="1"><f a="this:x">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
	<get_y get="inline" set="null" line="397" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_y>
	<set_y get="inline" set="null" line="401" static="1"><f a="this:y">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<z public="1" get="accessor" set="accessor" static="1"><x path="Float"/></z>
	<get_z get="inline" set="null" line="410" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_z>
	<set_z get="inline" set="null" line="414" static="1"><f a="this:z">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
	<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
	<get_right get="inline" set="null" line="423" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_right>
	<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
	<get_bottom get="inline" set="null" line="428" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_bottom>
	<back public="1" get="accessor" set="null" static="1"><x path="Float"/></back>
	<get_back get="inline" set="null" line="433" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_back>
	<moveDelta set="method" line="436" static="1"><f a="this:dx:dy">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
	<sign public="1" get="inline" set="null" line="445" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<liteHit public="1" get="inline" set="null" line="450" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
	<fullHit public="1" set="method" line="458" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
	<distHit public="1" set="method" line="463" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
	<moveDeltaUV set="method" line="470" static="1"><f a="this:du:dv">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDeltaUV>
	<rotate public="1" get="inline" set="null" line="479" static="1"><f a="this:x:y:theta">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<rotateTrig public="1" get="inline" set="null" line="485" static="1"><f a="this:x:y:cos:sin">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
	<colorTriangles public="1" get="inline" set="null" line="514" static="1"><f a="this:color:times">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="518" static="1"><f a="this:colorA:colorB:colorC">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
	<rgb public="1" get="null" set="accessor" static="1"><x path="Int"/></rgb>
	<set_rgb get="inline" set="null" line="525" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgb>
	<rgbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbA>
	<set_rgbA get="inline" set="null" line="533" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbA>
	<get_rgbA get="inline" set="null" line="541" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
</f></get_rgbA>
	<rgbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbB>
	<set_rgbB get="inline" set="null" line="548" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbB>
	<get_rgbB get="inline" set="null" line="556" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
</f></get_rgbB>
	<rgbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbC>
	<set_rgbC get="inline" set="null" line="563" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbC>
	<get_rgbC get="inline" set="null" line="571" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
</f></get_rgbC>
	<argb public="1" get="null" set="accessor" static="1"><x path="Int"/></argb>
	<set_argb get="inline" set="null" line="578" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
	<argbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbA>
	<set_argbA get="inline" set="null" line="587" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
	<get_argbA get="inline" set="null" line="595" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
</f></get_argbA>
	<argbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbB>
	<set_argbB get="inline" set="null" line="604" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
	<get_argbB get="inline" set="null" line="612" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
</f></get_argbB>
	<argbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbC>
	<set_argbC get="inline" set="null" line="620" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
	<get_argbC get="inline" set="null" line="628" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
</f></get_argbC>
	<prettyStringVert public="1" get="inline" set="null" line="635" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></prettyStringVert>
	<prettyAllVert public="1" get="inline" set="null" line="641" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></prettyAllVert>
	<hex public="1" get="inline" set="null" line="652" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
	<hexA public="1" get="inline" set="null" line="656" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></hexA>
	<hexB public="1" get="inline" set="null" line="660" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></hexB>
	<hexC public="1" get="inline" set="null" line="664" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></hexC>
	<hexAll public="1" get="inline" set="null" line="668" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></hexAll>
	<prettyStringUV public="1" get="inline" set="null" line="679" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></prettyStringUV>
	<prettyAlluv public="1" get="inline" set="null" line="685" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></prettyAlluv>
	<prettyEverything public="1" get="inline" set="null" line="696" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></prettyEverything>
	<alphaChannel public="1" get="inline" set="null" line="710" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="713" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="716" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="719" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="hyperKitGL.io._FloatColorTrianglesUV.FloatColorTrianglesUV_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/io/FloatColorTrianglesUV.hx" private="1" module="hyperKitGL.io.FloatColorTrianglesUV" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<create public="1" get="inline" set="null" line="10" static="1"><f a="len">
	<x path="Int"/>
	<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
</f></create>
		<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
		<get_ax set="method" line="14" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_ax>
		<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
		<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
		<get_ay set="method" line="23" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_ay>
		<set_ay set="method" line="26" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
		<az public="1" get="accessor" set="accessor" static="1"><x path="Float"/></az>
		<get_az set="method" line="32" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_az>
		<set_az set="method" line="35" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_az>
		<redA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redA>
		<get_redA set="method" line="42" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_redA>
		<set_redA set="method" line="45" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redA>
		<greenA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenA>
		<get_greenA get="inline" set="null" line="53" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_greenA>
		<set_greenA get="inline" set="null" line="57" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenA>
		<blueA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueA>
		<get_blueA get="inline" set="null" line="64" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_blueA>
		<set_blueA get="inline" set="null" line="68" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueA>
		<alphaA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaA>
		<get_alphaA get="inline" set="null" line="75" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_alphaA>
		<set_alphaA get="inline" set="null" line="79" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaA>
		<uA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></uA>
		<get_uA get="inline" set="null" line="86" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_uA>
		<set_uA get="inline" set="null" line="90" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_uA>
		<vA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></vA>
		<get_vA get="inline" set="null" line="97" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_vA>
		<set_vA get="inline" set="null" line="101" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_vA>
		<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
		<get_bx set="method" line="108" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_bx>
		<set_bx set="method" line="111" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
		<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
		<get_by set="method" line="117" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_by>
		<set_by set="method" line="120" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
		<bz public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bz>
		<get_bz set="method" line="126" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_bz>
		<set_bz set="method" line="129" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bz>
		<redB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redB>
		<get_redB set="method" line="136" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_redB>
		<set_redB set="method" line="139" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redB>
		<greenB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenB>
		<get_greenB get="inline" set="null" line="147" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_greenB>
		<set_greenB get="inline" set="null" line="151" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenB>
		<blueB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueB>
		<get_blueB get="inline" set="null" line="158" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_blueB>
		<set_blueB get="inline" set="null" line="162" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueB>
		<alphaB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaB>
		<get_alphaB get="inline" set="null" line="169" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_alphaB>
		<set_alphaB get="inline" set="null" line="173" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaB>
		<uB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></uB>
		<get_uB get="inline" set="null" line="180" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_uB>
		<set_uB get="inline" set="null" line="184" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_uB>
		<vB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></vB>
		<get_vB get="inline" set="null" line="191" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_vB>
		<set_vB get="inline" set="null" line="195" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_vB>
		<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
		<get_cx set="method" line="202" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_cx>
		<set_cx set="method" line="205" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
		<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
		<get_cy set="method" line="211" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_cy>
		<set_cy set="method" line="214" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
		<cz public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cz>
		<get_cz set="method" line="220" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_cz>
		<set_cz set="method" line="223" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cz>
		<redC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redC>
		<get_redC set="method" line="230" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_redC>
		<set_redC set="method" line="233" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redC>
		<greenC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenC>
		<get_greenC get="inline" set="null" line="241" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_greenC>
		<set_greenC get="inline" set="null" line="245" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenC>
		<blueC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueC>
		<get_blueC get="inline" set="null" line="252" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_blueC>
		<set_blueC get="inline" set="null" line="256" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueC>
		<alphaC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaC>
		<get_alphaC get="inline" set="null" line="263" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_alphaC>
		<set_alphaC get="inline" set="null" line="267" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaC>
		<uC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></uC>
		<get_uC get="inline" set="null" line="274" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_uC>
		<set_uC get="inline" set="null" line="278" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_uC>
		<vC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></vC>
		<get_vC get="inline" set="null" line="285" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_vC>
		<set_vC get="inline" set="null" line="289" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_vC>
		<triangle public="1" set="method" line="298" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="hyperKitGL.io.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</triangle>
		<triangleUV public="1" set="method" line="324" static="1">
			<f a="this:uA_:vA_:uB_:vB_:uC_:vC_:?windAdjust_">
				<x path="hyperKitGL.io.Flat3x9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</triangleUV>
		<adjustWinding public="1" set="method" line="341" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Bool"/>
</f></adjustWinding>
		<u public="1" get="accessor" set="accessor" static="1"><x path="Float"/></u>
		<get_u get="inline" set="null" line="346" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_u>
		<set_u get="inline" set="null" line="350" static="1"><f a="this:u_">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_u>
		<v public="1" get="accessor" set="accessor" static="1"><x path="Float"/></v>
		<get_v get="inline" set="null" line="359" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_v>
		<set_v get="inline" set="null" line="363" static="1"><f a="this:v_">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_v>
		<rightU public="1" get="accessor" set="null" static="1"><x path="Float"/></rightU>
		<get_rightU get="inline" set="null" line="373" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_rightU>
		<bottomV public="1" get="accessor" set="null" static="1"><x path="Float"/></bottomV>
		<get_bottomV get="inline" set="null" line="378" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_bottomV>
		<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
		<get_x get="inline" set="null" line="384" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_x>
		<set_x get="inline" set="null" line="388" static="1"><f a="this:x">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
		<get_y get="inline" set="null" line="397" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_y>
		<set_y get="inline" set="null" line="401" static="1"><f a="this:y">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<z public="1" get="accessor" set="accessor" static="1"><x path="Float"/></z>
		<get_z get="inline" set="null" line="410" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_z>
		<set_z get="inline" set="null" line="414" static="1"><f a="this:z">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
		<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
		<get_right get="inline" set="null" line="423" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_right>
		<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
		<get_bottom get="inline" set="null" line="428" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_bottom>
		<back public="1" get="accessor" set="null" static="1"><x path="Float"/></back>
		<get_back get="inline" set="null" line="433" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
</f></get_back>
		<moveDelta set="method" line="436" static="1"><f a="this:dx:dy">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
		<sign public="1" get="inline" set="null" line="445" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<liteHit public="1" get="inline" set="null" line="450" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
		<fullHit public="1" set="method" line="458" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
		<distHit public="1" set="method" line="463" static="1"><f a="this:px:py">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
		<moveDeltaUV set="method" line="470" static="1"><f a="this:du:dv">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDeltaUV>
		<rotate public="1" get="inline" set="null" line="479" static="1"><f a="this:x:y:theta">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<rotateTrig public="1" get="inline" set="null" line="485" static="1"><f a="this:x:y:cos:sin">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
		<colorTriangles public="1" get="inline" set="null" line="514" static="1"><f a="this:color:times">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="518" static="1"><f a="this:colorA:colorB:colorC">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
		<rgb public="1" get="null" set="accessor" static="1"><x path="Int"/></rgb>
		<set_rgb get="inline" set="null" line="525" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgb>
		<rgbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbA>
		<set_rgbA get="inline" set="null" line="533" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbA>
		<get_rgbA get="inline" set="null" line="541" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
</f></get_rgbA>
		<rgbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbB>
		<set_rgbB get="inline" set="null" line="548" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbB>
		<get_rgbB get="inline" set="null" line="556" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
</f></get_rgbB>
		<rgbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbC>
		<set_rgbC get="inline" set="null" line="563" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbC>
		<get_rgbC get="inline" set="null" line="571" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
</f></get_rgbC>
		<argb public="1" get="null" set="accessor" static="1"><x path="Int"/></argb>
		<set_argb get="inline" set="null" line="578" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
		<argbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbA>
		<set_argbA get="inline" set="null" line="587" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
		<get_argbA get="inline" set="null" line="595" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
</f></get_argbA>
		<argbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbB>
		<set_argbB get="inline" set="null" line="604" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
		<get_argbB get="inline" set="null" line="612" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
</f></get_argbB>
		<argbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbC>
		<set_argbC get="inline" set="null" line="620" static="1"><f a="this:col">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
		<get_argbC get="inline" set="null" line="628" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
</f></get_argbC>
		<prettyStringVert public="1" get="inline" set="null" line="635" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></prettyStringVert>
		<prettyAllVert public="1" get="inline" set="null" line="641" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></prettyAllVert>
		<hex public="1" get="inline" set="null" line="652" static="1"><f a="this:v">
	<x path="hyperKitGL.io.Flat3x9"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
		<hexA public="1" get="inline" set="null" line="656" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></hexA>
		<hexB public="1" get="inline" set="null" line="660" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></hexB>
		<hexC public="1" get="inline" set="null" line="664" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></hexC>
		<hexAll public="1" get="inline" set="null" line="668" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></hexAll>
		<prettyStringUV public="1" get="inline" set="null" line="679" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></prettyStringUV>
		<prettyAlluv public="1" get="inline" set="null" line="685" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></prettyAlluv>
		<prettyEverything public="1" get="inline" set="null" line="696" static="1"><f a="this">
	<x path="hyperKitGL.io.Flat3x9"/>
	<c path="String"/>
</f></prettyEverything>
		<alphaChannel public="1" get="inline" set="null" line="710" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="713" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="716" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="719" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hyperKitGL.iterArr.ArrayPairs" params="T" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/iterArr/ArrayPairs.hx">
		<this><c path="Array"><c path="hyperKitGL.iterArr.ArrayPairs.T"/></c></this>
		<meta><m n=":transitive"/></meta>
		<impl><class path="hyperKitGL.iterArr._ArrayPairs.ArrayPairs_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/iterArr/ArrayPairs.hx" private="1" module="hyperKitGL.iterArr.ArrayPairs" final="1">
	<_new public="1" set="method" line="4" static="1">
		<f a="arr">
			<c path="Array"><c path="hyperKitGL.iterArr.ArrayPairs.T"/></c>
			<x path="hyperKitGL.iterArr.ArrayPairs"><c path="hyperKitGL.iterArr.ArrayPairs.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<get_length get="inline" set="null" line="6" static="1"><f a="this">
	<c path="Array"><c path="hyperKitGL.iterArr.ArrayPairs.T"/></c>
	<x path="Int"/>
</f></get_length>
	<access get="inline" set="null" line="7" static="1">
		<f a="this:key">
			<c path="Array"><c path="hyperKitGL.iterArr.ArrayPairs.T"/></c>
			<x path="Int"/>
			<a>
				<y><c path="hyperKitGL.iterArr.ArrayPairs.T"/></y>
				<x><c path="hyperKitGL.iterArr.ArrayPairs.T"/></x>
			</a>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</access>
	<getObj public="1" get="inline" set="null" line="11" static="1"><f a="this:key">
	<c path="Array"><c path="hyperKitGL.iterArr.ArrayPairs.T"/></c>
	<x path="Int"/>
	<a>
		<y><c path="hyperKitGL.iterArr.ArrayPairs.T"/></y>
		<x><c path="hyperKitGL.iterArr.ArrayPairs.T"/></x>
	</a>
</f></getObj>
	<reverse public="1" get="inline" set="null" line="16" static="1"><f a="this">
	<c path="Array"><c path="hyperKitGL.iterArr.ArrayPairs.T"/></c>
	<c path="Array"><c path="hyperKitGL.iterArr.ArrayPairs.T"/></c>
</f></reverse>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="hyperKitGL.iterArr._ArrayPairs.ArrayPairs_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/iterArr/ArrayPairs.hx" private="1" module="hyperKitGL.iterArr.ArrayPairs" final="1">
		<_new public="1" set="method" line="4" static="1">
			<f a="arr">
				<c path="Array"><c path="hyperKitGL.iterArr.ArrayPairs.T"/></c>
				<x path="hyperKitGL.iterArr.ArrayPairs"><c path="hyperKitGL.iterArr.ArrayPairs.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<get_length get="inline" set="null" line="6" static="1"><f a="this">
	<c path="Array"><c path="hyperKitGL.iterArr.ArrayPairs.T"/></c>
	<x path="Int"/>
</f></get_length>
		<access get="inline" set="null" line="7" static="1">
			<f a="this:key">
				<c path="Array"><c path="hyperKitGL.iterArr.ArrayPairs.T"/></c>
				<x path="Int"/>
				<a>
					<y><c path="hyperKitGL.iterArr.ArrayPairs.T"/></y>
					<x><c path="hyperKitGL.iterArr.ArrayPairs.T"/></x>
				</a>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</access>
		<getObj public="1" get="inline" set="null" line="11" static="1"><f a="this:key">
	<c path="Array"><c path="hyperKitGL.iterArr.ArrayPairs.T"/></c>
	<x path="Int"/>
	<a>
		<y><c path="hyperKitGL.iterArr.ArrayPairs.T"/></y>
		<x><c path="hyperKitGL.iterArr.ArrayPairs.T"/></x>
	</a>
</f></getObj>
		<reverse public="1" get="inline" set="null" line="16" static="1"><f a="this">
	<c path="Array"><c path="hyperKitGL.iterArr.ArrayPairs.T"/></c>
	<c path="Array"><c path="hyperKitGL.iterArr.ArrayPairs.T"/></c>
</f></reverse>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hyperKitGL.iterArr.ArrayTriple" params="T" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/iterArr/ArrayTriple.hx">
		<this><c path="Array"><c path="hyperKitGL.iterArr.ArrayTriple.T"/></c></this>
		<meta><m n=":transitive"/></meta>
		<impl><class path="hyperKitGL.iterArr._ArrayTriple.ArrayTriple_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/iterArr/ArrayTriple.hx" private="1" module="hyperKitGL.iterArr.ArrayTriple" final="1">
	<_new public="1" set="method" line="4" static="1">
		<f a="arr">
			<c path="Array"><c path="hyperKitGL.iterArr.ArrayTriple.T"/></c>
			<x path="hyperKitGL.iterArr.ArrayTriple"><c path="hyperKitGL.iterArr.ArrayTriple.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<get_length get="inline" set="null" line="6" static="1"><f a="this">
	<c path="Array"><c path="hyperKitGL.iterArr.ArrayTriple.T"/></c>
	<x path="Int"/>
</f></get_length>
	<access get="inline" set="null" line="7" static="1">
		<f a="this:key">
			<c path="Array"><c path="hyperKitGL.iterArr.ArrayTriple.T"/></c>
			<x path="Int"/>
			<a>
				<c><c path="hyperKitGL.iterArr.ArrayTriple.T"/></c>
				<b><c path="hyperKitGL.iterArr.ArrayTriple.T"/></b>
				<a><c path="hyperKitGL.iterArr.ArrayTriple.T"/></a>
			</a>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</access>
	<getObj public="1" get="inline" set="null" line="11" static="1"><f a="this:key">
	<c path="Array"><c path="hyperKitGL.iterArr.ArrayTriple.T"/></c>
	<x path="Int"/>
	<a>
		<c><c path="hyperKitGL.iterArr.ArrayTriple.T"/></c>
		<b><c path="hyperKitGL.iterArr.ArrayTriple.T"/></b>
		<a><c path="hyperKitGL.iterArr.ArrayTriple.T"/></a>
	</a>
</f></getObj>
	<reverse public="1" get="inline" set="null" line="16" static="1"><f a="this">
	<c path="Array"><c path="hyperKitGL.iterArr.ArrayTriple.T"/></c>
	<c path="Array"><c path="hyperKitGL.iterArr.ArrayTriple.T"/></c>
</f></reverse>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="hyperKitGL.iterArr._ArrayTriple.ArrayTriple_Impl_" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/iterArr/ArrayTriple.hx" private="1" module="hyperKitGL.iterArr.ArrayTriple" final="1">
		<_new public="1" set="method" line="4" static="1">
			<f a="arr">
				<c path="Array"><c path="hyperKitGL.iterArr.ArrayTriple.T"/></c>
				<x path="hyperKitGL.iterArr.ArrayTriple"><c path="hyperKitGL.iterArr.ArrayTriple.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<get_length get="inline" set="null" line="6" static="1"><f a="this">
	<c path="Array"><c path="hyperKitGL.iterArr.ArrayTriple.T"/></c>
	<x path="Int"/>
</f></get_length>
		<access get="inline" set="null" line="7" static="1">
			<f a="this:key">
				<c path="Array"><c path="hyperKitGL.iterArr.ArrayTriple.T"/></c>
				<x path="Int"/>
				<a>
					<c><c path="hyperKitGL.iterArr.ArrayTriple.T"/></c>
					<b><c path="hyperKitGL.iterArr.ArrayTriple.T"/></b>
					<a><c path="hyperKitGL.iterArr.ArrayTriple.T"/></a>
				</a>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</access>
		<getObj public="1" get="inline" set="null" line="11" static="1"><f a="this:key">
	<c path="Array"><c path="hyperKitGL.iterArr.ArrayTriple.T"/></c>
	<x path="Int"/>
	<a>
		<c><c path="hyperKitGL.iterArr.ArrayTriple.T"/></c>
		<b><c path="hyperKitGL.iterArr.ArrayTriple.T"/></b>
		<a><c path="hyperKitGL.iterArr.ArrayTriple.T"/></a>
	</a>
</f></getObj>
		<reverse public="1" get="inline" set="null" line="16" static="1"><f a="this">
	<c path="Array"><c path="hyperKitGL.iterArr.ArrayTriple.T"/></c>
	<c path="Array"><c path="hyperKitGL.iterArr.ArrayTriple.T"/></c>
</f></reverse>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hyperKitGL.splitter.SpaceSplitter" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/splitter/SpaceSplitter.hx"><parse public="1" get="inline" set="null" line="6" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><c path="Array"><c path="String"/></c></c>
</f></parse></class>
	<class path="hyperKitGL.splitter.StringCodeIterator" params="" file="/usr/local/lib/haxeLibrary/hyperKitGL/git/src/hyperKitGL/splitter/StringCodeIterator.hx">
		<str expr="&quot;&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>""</e></m></meta>
		</str>
		<b><c path="StringBuf"/></b>
		<pos public="1"><x path="Int"/></pos>
		<c public="1"><x path="Int"/></c>
		<last2 public="1"><c path="String"/></last2>
		<last public="1"><c path="String"/></last>
		<length public="1"><x path="Int"/></length>
		<addChar public="1" get="inline" set="null" line="18"><f a=""><x path="Void"/></f></addChar>
		<toStr public="1" get="inline" set="null" line="22"><f a=""><c path="String"/></f></toStr>
		<isRepeat public="1" get="inline" set="null" line="28"><f a=""><x path="Bool"/></f></isRepeat>
		<resetBuffer public="1" get="inline" set="null" line="34"><f a=""><x path="Void"/></f></resetBuffer>
		<reset public="1" get="inline" set="null" line="38"><f a=""><x path="Void"/></f></reset>
		<hasNext public="1" get="inline" set="null" line="42"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="46"><f a=""><x path="Int"/></f></next>
		<new public="1" set="method" line="11">
			<f a="str_:?pos_" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ pos_ : 0 }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justPath.IPathContext" params="" file="/usr/local/lib/haxeLibrary/justPath/0,0,2-alpha/justPath/IPathContext.hx" interface="1">
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" set="method"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" set="method"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
	</class>
	<abstract path="lime.utils.ArrayBuffer" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBuffer.hx">
		<from><icast><c path="haxe.io.Bytes"/></icast></from>
		<this><c path="haxe.io.Bytes"/></this>
		<to><icast><c path="haxe.io.Bytes"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._ArrayBuffer.ArrayBuffer_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBuffer.hx" private="1" module="lime.utils.ArrayBuffer" final="1">
	<byteLength public="1" get="accessor" set="null" static="1"><x path="Int"/></byteLength>
	<get_byteLength get="inline" set="null" line="16" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></get_byteLength>
	<_new public="1" get="inline" set="null" line="20" static="1">
		<f a="byteLength">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<isView public="1" get="inline" set="null" line="26" static="1"><f a="arg">
	<d/>
	<x path="Bool"/>
</f></isView>
	<slice public="1" get="inline" set="null" line="31" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</slice>
</class></impl>
	</abstract>
	<class path="lime.utils._ArrayBuffer.ArrayBuffer_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBuffer.hx" private="1" module="lime.utils.ArrayBuffer" final="1">
		<byteLength public="1" get="accessor" set="null" static="1"><x path="Int"/></byteLength>
		<get_byteLength get="inline" set="null" line="16" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></get_byteLength>
		<_new public="1" get="inline" set="null" line="20" static="1">
			<f a="byteLength">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<isView public="1" get="inline" set="null" line="26" static="1"><f a="arg">
	<d/>
	<x path="Bool"/>
</f></isView>
		<slice public="1" get="inline" set="null" line="31" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</slice>
	</class>
	<class path="lime.utils.ArrayBufferView" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBufferView.hx">
		<type public="1" expr="TypedArrayType.None">
			<x path="lime.utils.TypedArrayType"/>
			<meta><m n=":value"><e>TypedArrayType.None</e></m></meta>
		</type>
		<buffer public="1"><x path="lime.utils.ArrayBuffer"/></buffer>
		<byteOffset public="1"><x path="Int"/></byteOffset>
		<byteLength public="1"><x path="Int"/></byteLength>
		<length public="1"><x path="Int"/></length>
		<bytesPerElement set="null" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</bytesPerElement>
		<initTypedArray get="inline" set="null" line="48">
			<f a="view">
				<c path="lime.utils.ArrayBufferView"/>
				<c path="lime.utils.ArrayBufferView"/>
			</f>
			<meta><m n=":allow"><e>lime.utils</e></m></meta>
		</initTypedArray>
		<initBuffer get="inline" set="null" line="79">
			<f a="in_buffer:?in_byteOffset:?len" v=":0:null">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="lime.utils.ArrayBufferView"/>
			</f>
			<meta>
				<m n=":value"><e>{ len : null, in_byteOffset : 0 }</e></m>
				<m n=":allow"><e>lime.utils</e></m>
			</meta>
		</initBuffer>
		<initArray params="T" get="inline" set="null" line="115">
			<f a="array">
				<c path="Array"><c path="initArray.T"/></c>
				<c path="lime.utils.ArrayBufferView"/>
			</f>
			<meta><m n=":allow"><e>lime.utils</e></m></meta>
		</initArray>
		<set public="1" params="T" get="inline" set="null" line="132">
			<f a="?view:?array:?offset" v="null:null:0">
				<c path="lime.utils.ArrayBufferView"/>
				<c path="Array"><c path="set.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0, array : null, view : null }</e></m></meta>
		</set>
		<cloneBuffer get="inline" set="null" line="152">
			<f a="src:?srcByteOffset" v=":0">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcByteOffset : 0 }</e></m></meta>
		</cloneBuffer>
		<bytesForType get="inline" set="null" line="211"><f a="type">
	<x path="lime.utils.TypedArrayType"/>
	<x path="Int"/>
</f></bytesForType>
		<toString get="inline" set="null" line="249"><f a=""><c path="String"/></f></toString>
		<toByteLength get="inline" set="null" line="271"><f a="elemCount">
	<x path="Int"/>
	<x path="Int"/>
</f></toByteLength>
		<copyFromArray set="method" line="279">
			<f a="array:?offset" v=":0">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
		</copyFromArray>
		<new get="inline" set="null" line="20">
			<f a="?elements:in_type" v="null:">
				<x path="Int"/>
				<x path="lime.utils.TypedArrayType"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ elements : null }</e></m>
				<m n=":allow"><e>lime.utils</e></m>
			</meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<enum path="lime.utils.TAError" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBufferView.hx" module="lime.utils.ArrayBufferView">
		<RangeError/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
			<m n=":noCompletion"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</enum>
	<abstract path="lime.utils.TypedArrayType" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBufferView.hx" module="lime.utils.ArrayBufferView">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":noCompletion"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":enum"/>
		</meta>
		<impl><class path="lime.utils._ArrayBufferView.TypedArrayType_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBufferView.hx" private="1" module="lime.utils.ArrayBufferView" extern="1" final="1">
	<None public="1" get="inline" set="null" expr="cast 0" line="406" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</None>
	<Int8 public="1" get="inline" set="null" expr="cast 1" line="407" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Int8>
	<Int16 public="1" get="inline" set="null" expr="cast 2" line="408" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Int16>
	<Int32 public="1" get="inline" set="null" expr="cast 3" line="409" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Int32>
	<Uint8 public="1" get="inline" set="null" expr="cast 4" line="410" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Uint8>
	<Uint8Clamped public="1" get="inline" set="null" expr="cast 5" line="411" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Uint8Clamped>
	<Uint16 public="1" get="inline" set="null" expr="cast 6" line="412" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Uint16>
	<Uint32 public="1" get="inline" set="null" expr="cast 7" line="413" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Uint32>
	<Float32 public="1" get="inline" set="null" expr="cast 8" line="414" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Float32>
	<Float64 public="1" get="inline" set="null" expr="cast 9" line="415" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Float64>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.utils._ArrayBufferView.TypedArrayType_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBufferView.hx" private="1" module="lime.utils.ArrayBufferView" extern="1" final="1">
		<None public="1" get="inline" set="null" expr="cast 0" line="406" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</None>
		<Int8 public="1" get="inline" set="null" expr="cast 1" line="407" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Int8>
		<Int16 public="1" get="inline" set="null" expr="cast 2" line="408" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Int16>
		<Int32 public="1" get="inline" set="null" expr="cast 3" line="409" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Int32>
		<Uint8 public="1" get="inline" set="null" expr="cast 4" line="410" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Uint8>
		<Uint8Clamped public="1" get="inline" set="null" expr="cast 5" line="411" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Uint8Clamped>
		<Uint16 public="1" get="inline" set="null" expr="cast 6" line="412" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Uint16>
		<Uint32 public="1" get="inline" set="null" expr="cast 7" line="413" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Uint32>
		<Float32 public="1" get="inline" set="null" expr="cast 8" line="414" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Float32>
		<Float64 public="1" get="inline" set="null" expr="cast 9" line="415" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Float64>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime.utils.ArrayBufferIO" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBufferView.hx" module="lime.utils.ArrayBufferView">
		<getInt16 public="1" set="method" line="492" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getInt16>
		<getInt16_BE public="1" set="method" line="506" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getInt16_BE>
		<setInt16 public="1" set="method" line="520" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setInt16>
		<setInt16_BE public="1" set="method" line="535" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setInt16_BE>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<abstract path="lime.utils.Float32Array" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Float32Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._Float32Array.Float32Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Float32Array.hx" private="1" module="lime.utils.Float32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="92" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<hello public="1" static="1"><x path="Int"/></hello>
	<length public="1" get="null" set="null" static="1"><x path="Int"/></length>
	<subarray public="1" get="inline" set="null" line="131" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="135" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="140" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<toString get="inline" set="null" line="146" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
</class></impl>
	</abstract>
	<class path="lime.utils._Float32Array.Float32Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Float32Array.hx" private="1" module="lime.utils.Float32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<hello public="1" static="1"><x path="Int"/></hello>
		<length public="1" get="null" set="null" static="1"><x path="Int"/></length>
		<subarray public="1" get="inline" set="null" line="131" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="135" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="140" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<toString get="inline" set="null" line="146" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	</class>
	<abstract path="lime.utils.Float64Array" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Float64Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._Float64Array.Float64Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Float64Array.hx" private="1" module="lime.utils.Float64Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="90" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>8</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<subarray public="1" get="inline" set="null" line="128" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="132" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="137" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<get_length get="inline" set="null" line="143" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
	<toString get="inline" set="null" line="161" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
</class></impl>
	</abstract>
	<class path="lime.utils._Float64Array.Float64Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Float64Array.hx" private="1" module="lime.utils.Float64Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<subarray public="1" get="inline" set="null" line="128" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="132" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="137" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<get_length get="inline" set="null" line="143" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
		<toString get="inline" set="null" line="161" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	</class>
	<abstract path="lime.utils.Int16Array" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int16Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._Int16Array.Int16Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int16Array.hx" private="1" module="lime.utils.Int16Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="90" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<subarray public="1" get="inline" set="null" line="128" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int16Array"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="132" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int16Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="137" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<get_length get="inline" set="null" line="143" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
	<toString get="inline" set="null" line="161" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
</class></impl>
	</abstract>
	<class path="lime.utils._Int16Array.Int16Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int16Array.hx" private="1" module="lime.utils.Int16Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<subarray public="1" get="inline" set="null" line="128" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int16Array"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="132" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int16Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="137" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<get_length get="inline" set="null" line="143" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
		<toString get="inline" set="null" line="161" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	</class>
	<abstract path="lime.utils.Int32Array" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int32Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._Int32Array.Int32Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int32Array.hx" private="1" module="lime.utils.Int32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="90" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<subarray public="1" get="inline" set="null" line="128" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="132" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="137" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<get_length get="inline" set="null" line="143" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
	<toString get="inline" set="null" line="161" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
</class></impl>
	</abstract>
	<class path="lime.utils._Int32Array.Int32Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int32Array.hx" private="1" module="lime.utils.Int32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<subarray public="1" get="inline" set="null" line="128" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="132" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="137" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<get_length get="inline" set="null" line="143" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
		<toString get="inline" set="null" line="161" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	</class>
	<abstract path="lime.utils.Int8Array" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int8Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._Int8Array.Int8Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int8Array.hx" private="1" module="lime.utils.Int8Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="88" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<subarray public="1" get="inline" set="null" line="126" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int8Array"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="130" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int8Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="137" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<get_length get="inline" set="null" line="143" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
	<toString get="inline" set="null" line="161" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
</class></impl>
	</abstract>
	<class path="lime.utils._Int8Array.Int8Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int8Array.hx" private="1" module="lime.utils.Int8Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<subarray public="1" get="inline" set="null" line="126" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int8Array"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="130" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int8Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="137" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<get_length get="inline" set="null" line="143" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
		<toString get="inline" set="null" line="161" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	</class>
	<abstract path="lime.utils.UInt16Array" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt16Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._UInt16Array.UInt16Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt16Array.hx" private="1" module="lime.utils.UInt16Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="90" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<subarray public="1" get="inline" set="null" line="128" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="132" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="137" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<get_length get="inline" set="null" line="143" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
	<toString get="inline" set="null" line="161" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
</class></impl>
	</abstract>
	<class path="lime.utils._UInt16Array.UInt16Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt16Array.hx" private="1" module="lime.utils.UInt16Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<subarray public="1" get="inline" set="null" line="128" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="132" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="137" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<get_length get="inline" set="null" line="143" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
		<toString get="inline" set="null" line="161" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	</class>
	<abstract path="lime.utils.UInt32Array" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt32Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._UInt32Array.UInt32Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt32Array.hx" private="1" module="lime.utils.UInt32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="90" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<subarray public="1" get="inline" set="null" line="128" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="132" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="137" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<get_length get="inline" set="null" line="143" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
	<toString get="inline" set="null" line="161" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
</class></impl>
	</abstract>
	<class path="lime.utils._UInt32Array.UInt32Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt32Array.hx" private="1" module="lime.utils.UInt32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<subarray public="1" get="inline" set="null" line="128" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="132" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="137" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<get_length get="inline" set="null" line="143" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
		<toString get="inline" set="null" line="161" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	</class>
	<abstract path="lime.utils.UInt8Array" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt8Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._UInt8Array.UInt8Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt8Array.hx" private="1" module="lime.utils.UInt8Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="88" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<subarray public="1" get="inline" set="null" line="126" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="130" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="135" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<toString get="inline" set="null" line="141" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	<get_length get="inline" set="null" line="144" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
</class></impl>
	</abstract>
	<class path="lime.utils._UInt8Array.UInt8Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt8Array.hx" private="1" module="lime.utils.UInt8Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<subarray public="1" get="inline" set="null" line="126" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="130" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="135" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<toString get="inline" set="null" line="141" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
		<get_length get="inline" set="null" line="144" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
	</class>
	<abstract path="lime.utils.UInt8ClampedArray" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt8ClampedArray.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":arrayAccess"/>
		</meta>
		<impl><class path="lime.utils._UInt8ClampedArray.UInt8ClampedArray_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt8ClampedArray.hx" private="1" module="lime.utils.UInt8ClampedArray" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="100" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<subarray public="1" get="inline" set="null" line="138" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt8ClampedArray"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="142" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt8ClampedArray"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="147" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<get_length get="inline" set="null" line="153" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
	<toString get="inline" set="null" line="171" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
</class></impl>
	</abstract>
	<class path="lime.utils._UInt8ClampedArray.UInt8ClampedArray_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt8ClampedArray.hx" private="1" module="lime.utils.UInt8ClampedArray" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<subarray public="1" get="inline" set="null" line="138" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt8ClampedArray"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="142" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt8ClampedArray"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="147" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<get_length get="inline" set="null" line="153" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
		<toString get="inline" set="null" line="171" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	</class>
	<class path="org.poly2tri.AdvancingFront" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/AdvancingFront.hx">
		<head public="1"><c path="org.poly2tri.Node"/></head>
		<tail public="1"><c path="org.poly2tri.Node"/></tail>
		<search_node public="1"><c path="org.poly2tri.Node"/></search_node>
		<locateNode public="1" set="method" line="16"><f a="x">
	<x path="Float"/>
	<c path="org.poly2tri.Node"/>
</f></locateNode>
		<locatePoint public="1" set="method" line="46"><f a="point">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Node"/>
</f></locatePoint>
		<new public="1" set="method" line="10"><f a="head:tail">
	<c path="org.poly2tri.Node"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Basin" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Basin.hx">
		<left_node public="1"><c path="org.poly2tri.Node"/></left_node>
		<bottom_node public="1"><c path="org.poly2tri.Node"/></bottom_node>
		<right_node public="1"><c path="org.poly2tri.Node"/></right_node>
		<width public="1"><x path="Float"/></width>
		<left_highest public="1"><x path="Bool"/></left_highest>
		<clear public="1" set="method" line="18"><f a=""><x path="Void"/></f></clear>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Constants" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Constants.hx">
		<kAlpha public="1" expr="0.3" line="8" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.3</e></m></meta>
		</kAlpha>
		<EPSILON public="1" expr="1e-12" line="9" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1e-12</e></m></meta>
		</EPSILON>
		<PI_2 public="1" expr="Math.PI / 2" line="10" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>Math.PI / 2</e></m></meta>
		</PI_2>
		<PI_3div4 public="1" expr="3 * Math.PI / 4" line="11" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>3 * Math.PI / 4</e></m></meta>
		</PI_3div4>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Edge" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Edge.hx">
		<p public="1"><c path="org.poly2tri.Point"/></p>
		<q public="1"><c path="org.poly2tri.Point"/></q>
		<toString public="1" set="method" line="43"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="9"><f a="p1:p2">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.EdgeEvent" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/EdgeEvent.hx">
		<constrained_edge public="1"><c path="org.poly2tri.Edge"/></constrained_edge>
		<right public="1"><x path="Bool"/></right>
		<new public="1" set="method" line="9"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Node" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Node.hx">
		<point public="1"><c path="org.poly2tri.Point"/></point>
		<triangle public="1"><c path="org.poly2tri.Triangle"/></triangle>
		<prev public="1"><c path="org.poly2tri.Node"/></prev>
		<next public="1"><c path="org.poly2tri.Node"/></next>
		<value public="1"><x path="Float"/></value>
		<getHoleAngle public="1" set="method" line="27">
			<f a=""><x path="Float"/></f>
			<haxe_doc>*
	 * @param node - middle node
	 * @return the angle between 3 front nodes</haxe_doc>
		</getHoleAngle>
		<getBasinAngle public="1" set="method" line="47"><f a=""><x path="Float"/></f></getBasinAngle>
		<new public="1" set="method" line="14">
			<f a="?point:?triangle" v="null:null">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Triangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ triangle : null, point : null }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Orientation" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Orientation.hx">
		<CW public="1" get="inline" set="null" expr="1" line="5" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</CW>
		<CCW public="1" get="inline" set="null" expr="-1" line="6" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</CCW>
		<COLLINEAR public="1" get="inline" set="null" expr="0" line="7" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</COLLINEAR>
		<orient2d public="1" set="method" line="10" static="1"><f a="pa:pb:pc">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Int"/>
</f></orient2d>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Point" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Point.hx">
		<sortPoints public="1" set="method" line="42" static="1"><f a="points">
	<c path="Array"><c path="org.poly2tri.Point"/></c>
	<x path="Void"/>
</f></sortPoints>
		<cmpPoints public="1" set="method" line="47" static="1"><f a="l:r">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Int"/>
</f></cmpPoints>
		<C_ID public="1" expr="0" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</C_ID>
		<id public="1"><x path="Int"/></id>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<edge_list public="1" get="accessor" set="null"><c path="Array"><c path="org.poly2tri.Edge"/></c></edge_list>
		<get_edge_list set="method" line="29"><f a=""><c path="Array"><c path="org.poly2tri.Edge"/></c></f></get_edge_list>
		<equals public="1" set="method" line="37"><f a="that">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="56"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="18"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Sweep" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Sweep.hx">
		<nextFlipPoint public="1" set="method" line="599" static="1"><f a="ep:eq:ot:op">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
</f></nextFlipPoint>
		<context><c path="org.poly2tri.SweepContext"/></context>
		<triangulate public="1" set="method" line="13"><f a=""><x path="Void"/></f></triangulate>
		<sweepPoints public="1" set="method" line="21"><f a=""><x path="Void"/></f></sweepPoints>
		<finalizationPolygon public="1" set="method" line="36"><f a=""><x path="Void"/></f></finalizationPolygon>
		<pointEvent public="1" set="method" line="52">
			<f a="point">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Node"/>
			</f>
			<haxe_doc>* Find closes node to the left of the new point and
	 * create a new triangle. If needed new holes and basins
	 * will be filled to.</haxe_doc>
		</pointEvent>
		<edgeEventByEdge public="1" set="method" line="67"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></edgeEventByEdge>
		<edgeEventByPoints public="1" set="method" line="82"><f a="ep:eq:triangle:point">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<x path="Void"/>
</f></edgeEventByPoints>
		<newFrontTriangle public="1" set="method" line="113"><f a="point:node">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Node"/>
	<c path="org.poly2tri.Node"/>
</f></newFrontTriangle>
		<fill public="1" set="method" line="140">
			<f a="node">
				<c path="org.poly2tri.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds a triangle to the advancing front to fill a hole.
	 * @param tcx
	 * @param node - middle node, that is the bottom of the hole</haxe_doc>
		</fill>
		<fillAdvancingFront public="1" set="method" line="167">
			<f a="n">
				<c path="org.poly2tri.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fills holes in the Advancing Front</haxe_doc>
		</fillAdvancingFront>
		<legalize public="1" set="method" line="204">
			<f a="t">
				<c path="org.poly2tri.Triangle"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if triangle was legalized</haxe_doc>
		</legalize>
		<fillBasin public="1" set="method" line="274">
			<f a="node">
				<c path="org.poly2tri.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Fills a basin that has formed on the Advancing Front to the right
	 * of given node.<br>
	 * First we decide a left,bottom and right node that forms the
	 * boundaries of the basin. Then we do a reqursive fill.
	 *
	 * @param tcx
	 * @param node - starting node, this or next node will be left node]]></haxe_doc>
		</fillBasin>
		<fillBasinReq public="1" set="method" line="312">
			<f a="node">
				<c path="org.poly2tri.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Recursive algorithm to fill a Basin with triangles
	 *
	 * @param tcx
	 * @param node - bottom_node</haxe_doc>
		</fillBasinReq>
		<isShallow public="1" set="method" line="346"><f a="node">
	<c path="org.poly2tri.Node"/>
	<x path="Bool"/>
</f></isShallow>
		<fillEdgeEvent public="1" set="method" line="357"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillEdgeEvent>
		<fillRightAboveEdgeEvent public="1" set="method" line="369"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillRightAboveEdgeEvent>
		<fillRightBelowEdgeEvent public="1" set="method" line="385"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillRightBelowEdgeEvent>
		<fillRightConcaveEdgeEvent public="1" set="method" line="400"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillRightConcaveEdgeEvent>
		<fillRightConvexEdgeEvent public="1" set="method" line="422"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillRightConvexEdgeEvent>
		<fillLeftAboveEdgeEvent public="1" set="method" line="446"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillLeftAboveEdgeEvent>
		<fillLeftBelowEdgeEvent public="1" set="method" line="462"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillLeftBelowEdgeEvent>
		<fillLeftConvexEdgeEvent public="1" set="method" line="481"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillLeftConvexEdgeEvent>
		<fillLeftConcaveEdgeEvent public="1" set="method" line="505"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillLeftConcaveEdgeEvent>
		<flipEdgeEvent public="1" set="method" line="529"><f a="ep:eq:t:p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<x path="Void"/>
</f></flipEdgeEvent>
		<nextFlipTriangle public="1" set="method" line="577"><f a="o:t:ot:p:op">
	<x path="Int"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
</f></nextFlipTriangle>
		<flipScanEdgeEvent public="1" set="method" line="618"><f a="ep:eq:flip_triangle:t:p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<x path="Void"/>
</f></flipScanEdgeEvent>
		<new public="1" set="method" line="8"><f a="context">
	<c path="org.poly2tri.SweepContext"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.SweepContext" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/SweepContext.hx">
		<triangles public="1"><c path="Array"><c path="org.poly2tri.Triangle"/></c></triangles>
		<points public="1"><c path="Array"><c path="org.poly2tri.Point"/></c></points>
		<edge_list public="1"><c path="Array"><c path="org.poly2tri.Edge"/></c></edge_list>
		<map public="1"><t path="Map">
	<c path="String"/>
	<c path="org.poly2tri.Triangle"/>
</t></map>
		<front public="1"><c path="org.poly2tri.AdvancingFront"/></front>
		<head public="1"><c path="org.poly2tri.Point"/></head>
		<tail public="1"><c path="org.poly2tri.Point"/></tail>
		<basin public="1"><c path="org.poly2tri.Basin"/></basin>
		<edge_event public="1"><c path="org.poly2tri.EdgeEvent"/></edge_event>
		<addPoints set="method" line="43"><f a="points">
	<c path="Array"><c path="org.poly2tri.Point"/></c>
	<x path="Void"/>
</f></addPoints>
		<addPolyline public="1" set="method" line="54"><f a="polyline">
	<c path="Array"><c path="org.poly2tri.Point"/></c>
	<x path="Void"/>
</f></addPolyline>
		<initEdges set="method" line="63"><f a="polyline">
	<c path="Array"><c path="org.poly2tri.Point"/></c>
	<x path="Void"/>
</f></initEdges>
		<addToMap public="1" set="method" line="76"><f a="triangle">
	<c path="org.poly2tri.Triangle"/>
	<x path="Void"/>
</f></addToMap>
		<initTriangulation public="1" set="method" line="82"><f a=""><x path="Void"/></f></initTriangulation>
		<locateNode public="1" set="method" line="111"><f a="point">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Node"/>
</f></locateNode>
		<createAdvancingFront public="1" set="method" line="116"><f a=""><x path="Void"/></f></createAdvancingFront>
		<removeNode public="1" set="method" line="136"><f a="node">
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></removeNode>
		<mapTriangleToNodes public="1" set="method" line="141"><f a="triangle">
	<c path="org.poly2tri.Triangle"/>
	<x path="Void"/>
</f></mapTriangleToNodes>
		<meshClean public="1" set="method" line="153"><f a="t">
	<c path="org.poly2tri.Triangle"/>
	<x path="Void"/>
</f></meshClean>
		<new public="1" set="method" line="25"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Triangle" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Triangle.hx">
		<CW_OFFSET get="inline" set="null" expr="1" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
			<haxe_doc>* Return the point clockwise to the given point.
	 * Return the point counter-clockwise to the given point.
	 *
	 * Return the neighbor clockwise to given point.
	 * Return the neighbor counter-clockwise to given point.</haxe_doc>
		</CW_OFFSET>
		<CCW_OFFSET get="inline" set="null" expr="-1" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</CCW_OFFSET>
		<rotateTrianglePair public="1" set="method" line="332" static="1">
			<f a="t:p:ot:op">
				<c path="org.poly2tri.Triangle"/>
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Triangle"/>
				<c path="org.poly2tri.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Rotates a triangle pair one vertex CW
	 *<pre>
	 *       n2                    n2
	 *  P +-----+             P +-----+
	 *    | t  /|               |\  t |
	 *    |   / |               | \   |
	 *  n1|  /  |n3           n1|  \  |n3
	 *    | /   |    after CW   |   \ |
	 *    |/ oT |               | oT \|
	 *    +-----+ oP            +-----+
	 *       n4                    n4
	 * </pre>]]></haxe_doc>
		</rotateTrianglePair>
		<points public="1"><c path="Array"><c path="org.poly2tri.Point"/></c></points>
		<neighbors public="1"><c path="Array"><c path="org.poly2tri.Triangle"/></c></neighbors>
		<interior public="1"><x path="Bool"/></interior>
		<constrained_edge public="1"><c path="Array"><x path="Bool"/></c></constrained_edge>
		<delaunay_edge public="1"><c path="Array"><x path="Bool"/></c></delaunay_edge>
		<containsPoint public="1" set="method" line="53">
			<f a="point">
				<c path="org.poly2tri.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Test if this Triangle contains the Point object given as parameter as its vertices.
	 *
	 * @return <code>True</code> if the Point objects are of the Triangle's vertices,
	 *         <code>false</code> otherwise.]]></haxe_doc>
		</containsPoint>
		<containsEdgePoints public="1" set="method" line="58"><f a="p1:p2">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></containsEdgePoints>
		<markNeighbor public="1" set="method" line="73">
			<f a="t:p1:p2">
				<c path="org.poly2tri.Triangle"/>
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Update neighbor pointers.<br>
	 * This method takes either 3 parameters (<code>p1</code>, <code>p2</code> and
	 * <code>t</code>) or 1 parameter (<code>t</code>).
	 * @param   t   Triangle object.
	 * @param   p1  Point object.
	 * @param   p2  Point object.]]></haxe_doc>
		</markNeighbor>
		<markNeighborTriangle public="1" set="method" line="91"><f a="that">
	<c path="org.poly2tri.Triangle"/>
	<x path="Void"/>
</f></markNeighborTriangle>
		<getPointIndexOffset public="1" set="method" line="117">
			<f a="p:?offset" v=":0">
				<c path="org.poly2tri.Point"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
		</getPointIndexOffset>
		<pointCW public="1" set="method" line="151"><f a="p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
</f></pointCW>
		<pointCCW public="1" set="method" line="156"><f a="p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
</f></pointCCW>
		<neighborCW public="1" set="method" line="161"><f a="p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
</f></neighborCW>
		<neighborCCW public="1" set="method" line="166"><f a="p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
</f></neighborCCW>
		<getConstrainedEdgeCW public="1" set="method" line="170"><f a="p">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></getConstrainedEdgeCW>
		<setConstrainedEdgeCW public="1" set="method" line="171"><f a="p:ce">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></setConstrainedEdgeCW>
		<getConstrainedEdgeCCW public="1" set="method" line="173"><f a="p">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></getConstrainedEdgeCCW>
		<setConstrainedEdgeCCW public="1" set="method" line="174"><f a="p:ce">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></setConstrainedEdgeCCW>
		<getDelaunayEdgeCW public="1" set="method" line="176"><f a="p">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></getDelaunayEdgeCW>
		<setDelaunayEdgeCW public="1" set="method" line="177"><f a="p:e">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></setDelaunayEdgeCW>
		<getDelaunayEdgeCCW public="1" set="method" line="179"><f a="p">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></getDelaunayEdgeCCW>
		<setDelaunayEdgeCCW public="1" set="method" line="180"><f a="p:e">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></setDelaunayEdgeCCW>
		<neighborAcross public="1" set="method" line="186">
			<f a="p">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Triangle"/>
			</f>
			<haxe_doc>* The neighbor across to given point.</haxe_doc>
		</neighborAcross>
		<oppositePoint public="1" set="method" line="189"><f a="t:p">
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
</f></oppositePoint>
		<legalize public="1" set="method" line="200">
			<f a="opoint:?npoint" v=":null">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ npoint : null }</e></m></meta>
			<haxe_doc><![CDATA[* Legalize triangle by rotating clockwise.<br>
	 * This method takes either 1 parameter (then the triangle is rotated around
	 * points(0)) or 2 parameters (then the triangle is rotated around the first
	 * parameter).]]></haxe_doc>
		</legalize>
		<index public="1" set="method" line="231">
			<f a="p">
				<c path="org.poly2tri.Point"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Alias for getPointIndexOffset
	 *
	 * @param	p</haxe_doc>
		</index>
		<edgeIndex public="1" set="method" line="242"><f a="p1:p2">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Int"/>
</f></edgeIndex>
		<markConstrainedEdgeByIndex public="1" set="method" line="268">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Mark an edge of this triangle as constrained.<br>
	 * This method takes either 1 parameter (an edge index or an Edge instance) or
	 * 2 parameters (two Point instances defining the edge of the triangle).]]></haxe_doc>
		</markConstrainedEdgeByIndex>
		<markConstrainedEdgeByEdge public="1" set="method" line="273"><f a="edge">
	<c path="org.poly2tri.Edge"/>
	<x path="Void"/>
</f></markConstrainedEdgeByEdge>
		<markConstrainedEdgeByPoints public="1" set="method" line="278"><f a="p:q">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Void"/>
</f></markConstrainedEdgeByPoints>
		<isEdgeSide public="1" set="method" line="306">
			<f a="ep:eq">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if a side from this triangle is an edge side.
	 * If sides are not marked they will be marked.
	 *
	 * @param	ep
	 * @param	eq
	 * @return</haxe_doc>
		</isEdgeSide>
		<clearNeigbors public="1" set="method" line="378"><f a=""><x path="Void"/></f></clearNeigbors>
		<clearDelunayEdges public="1" set="method" line="385"><f a=""><x path="Void"/></f></clearDelunayEdges>
		<toString public="1" set="method" line="393"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="22">
			<f a="p1:p2:p3:?fixOrientation:?checkOrientation" v=":::false:true">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ checkOrientation : true, fixOrientation : false }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Utils" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Utils.hx">
		<insideIncircle public="1" set="method" line="30" static="1">
			<f a="pa:pb:pc:pd">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* <b>Requirement</b>:<br>
	 * 1. a, b and c form a triangle.<br>
	 * 2. a and d is know to be on opposite side of bc<br>
	 * <pre>
	 *                a
	 *                +
	 *               / \
	 *              /   \
	 *            b/     \c
	 *            +-------+
	 *           /    d    \
	 *          /           \
	 * </pre>
	 * <b>Fact</b>: d has to be in area B to have a chance to be inside the circle formed by
	 *  a,b and c<br>
	 *  d is outside B if orient2d(a,b,d) or orient2d(c,a,d) is CW<br>
	 *  This preknowledge gives us a way to optimize the incircle test
	 * @param pa - triangle point, opposite d
	 * @param pb - triangle point
	 * @param pc - triangle point
	 * @param pd - point opposite a
	 * @return true if d is inside circle, false if on circle edge]]></haxe_doc>
		</insideIncircle>
		<inScanArea public="1" set="method" line="63" static="1"><f a="pa:pb:pc:pd">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></inScanArea>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.VisiblePolygon" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/VisiblePolygon.hx">
		<sweepContext><c path="org.poly2tri.SweepContext"/></sweepContext>
		<sweep><c path="org.poly2tri.Sweep"/></sweep>
		<triangulated><x path="Bool"/></triangulated>
		<addPolyline public="1" set="method" line="18"><f a="polyline">
	<c path="Array"><c path="org.poly2tri.Point"/></c>
	<x path="Void"/>
</f></addPolyline>
		<addPolylineFromFloats public="1" set="method" line="23"><f a="pos">
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></addPolylineFromFloats>
		<reset public="1" set="method" line="34"><f a=""><x path="Void"/></f></reset>
		<performTriangulationOnce public="1" set="method" line="41"><f a=""><x path="Void"/></f></performTriangulationOnce>
		<getVerticesAndTriangles public="1" set="method" line="49"><f a=""><a>
	<vertices><c path="Array"><x path="Float"/></c></vertices>
	<triangles><c path="Array"><x path="Int"/></c></triangles>
</a></f></getVerticesAndTriangles>
		<getNumTriangles public="1" set="method" line="78"><f a=""><x path="Int"/></f></getNumTriangles>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="pallette.wheel.Wheel24" params="" file="/usr/local/lib/haxeLibrary/pallette/0,0,1/src/pallette/wheel/ColorWheel24.hx" module="pallette.wheel.ColorWheel24">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="pallette.wheel._ColorWheel24.Wheel24_Impl_" params="" file="/usr/local/lib/haxeLibrary/pallette/0,0,1/src/pallette/wheel/ColorWheel24.hx" private="1" module="pallette.wheel.ColorWheel24" extern="1" final="1">
	<redRadish public="1" get="inline" set="null" expr="cast 0xffef3c42" line="5" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffef3c42</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</redRadish>
	<orangeSoda public="1" get="inline" set="null" expr="cast 0xfff25e40" line="6" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff25e40</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</orangeSoda>
	<gokuOrange public="1" get="inline" set="null" expr="cast 0xfff2823a" line="7" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff2823a</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</gokuOrange>
	<highlighterOrange public="1" get="inline" set="null" expr="cast 0xfff69537" line="8" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff69537</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</highlighterOrange>
	<carona public="1" get="inline" set="null" expr="cast 0xfff4aa2f" line="9" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff4aa2f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</carona>
	<solarPower public="1" get="inline" set="null" expr="cast 0xfff6c137" line="10" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff6c137</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</solarPower>
	<flirtatious public="1" get="inline" set="null" expr="cast 0xfffad435" line="11" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfffad435</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</flirtatious>
	<yellowBellied public="1" get="inline" set="null" expr="cast 0xfffdf32f" line="12" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfffdf32f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</yellowBellied>
	<daffodil public="1" get="inline" set="null" expr="cast 0xffffff2d" line="13" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffffff2d</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</daffodil>
	<spoiledEgg public="1" get="inline" set="null" expr="cast 0xffdff429" line="14" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffdff429</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</spoiledEgg>
	<peraRocha public="1" get="inline" set="null" expr="cast 0xffa7d52a" line="15" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffa7d52a</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</peraRocha>
	<appleGreen public="1" get="inline" set="null" expr="cast 0xff79c725" line="16" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff79c725</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</appleGreen>
	<fieldGreen public="1" get="inline" set="null" expr="cast 0xff53c025" line="17" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff53c025</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</fieldGreen>
	<parisGreen public="1" get="inline" set="null" expr="cast 0xff52c67f" line="18" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff52c67f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</parisGreen>
	<maximumBlue public="1" get="inline" set="null" expr="cast 0xff4daecf" line="19" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4daecf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</maximumBlue>
	<blueTourmaline public="1" get="inline" set="null" expr="cast 0xff4592ca" line="20" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4592ca</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</blueTourmaline>
	<celestialPlum public="1" get="inline" set="null" expr="cast 0xff3f77c4" line="21" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3f77c4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</celestialPlum>
	<freeSpeechBlue public="1" get="inline" set="null" expr="cast 0xff3a57bf" line="22" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3a57bf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</freeSpeechBlue>
	<earlySpringNight public="1" get="inline" set="null" expr="cast 0xff3438bd" line="23" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3438bd</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</earlySpringNight>
	<blueDepression public="1" get="inline" set="null" expr="cast 0xff4b27bd" line="24" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4b27bd</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</blueDepression>
	<nebulaFuchsia public="1" get="inline" set="null" expr="cast 0xff7328b6" line="25" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff7328b6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</nebulaFuchsia>
	<fuchsiaFlair public="1" get="inline" set="null" expr="cast 0xffb528c5" line="26" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffb528c5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</fuchsiaFlair>
	<royalFuchsia public="1" get="inline" set="null" expr="cast 0xffc32a94" line="27" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffc32a94</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</royalFuchsia>
	<fuchsiaPurple public="1" get="inline" set="null" expr="cast 0xffdd3371" line="28" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffdd3371</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</fuchsiaPurple>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="pallette.wheel._ColorWheel24.Wheel24_Impl_" params="" file="/usr/local/lib/haxeLibrary/pallette/0,0,1/src/pallette/wheel/ColorWheel24.hx" private="1" module="pallette.wheel.ColorWheel24" extern="1" final="1">
		<redRadish public="1" get="inline" set="null" expr="cast 0xffef3c42" line="5" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffef3c42</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</redRadish>
		<orangeSoda public="1" get="inline" set="null" expr="cast 0xfff25e40" line="6" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff25e40</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</orangeSoda>
		<gokuOrange public="1" get="inline" set="null" expr="cast 0xfff2823a" line="7" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff2823a</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</gokuOrange>
		<highlighterOrange public="1" get="inline" set="null" expr="cast 0xfff69537" line="8" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff69537</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</highlighterOrange>
		<carona public="1" get="inline" set="null" expr="cast 0xfff4aa2f" line="9" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff4aa2f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</carona>
		<solarPower public="1" get="inline" set="null" expr="cast 0xfff6c137" line="10" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff6c137</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</solarPower>
		<flirtatious public="1" get="inline" set="null" expr="cast 0xfffad435" line="11" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfffad435</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</flirtatious>
		<yellowBellied public="1" get="inline" set="null" expr="cast 0xfffdf32f" line="12" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfffdf32f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</yellowBellied>
		<daffodil public="1" get="inline" set="null" expr="cast 0xffffff2d" line="13" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffffff2d</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</daffodil>
		<spoiledEgg public="1" get="inline" set="null" expr="cast 0xffdff429" line="14" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffdff429</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</spoiledEgg>
		<peraRocha public="1" get="inline" set="null" expr="cast 0xffa7d52a" line="15" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffa7d52a</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</peraRocha>
		<appleGreen public="1" get="inline" set="null" expr="cast 0xff79c725" line="16" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff79c725</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</appleGreen>
		<fieldGreen public="1" get="inline" set="null" expr="cast 0xff53c025" line="17" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff53c025</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</fieldGreen>
		<parisGreen public="1" get="inline" set="null" expr="cast 0xff52c67f" line="18" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff52c67f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</parisGreen>
		<maximumBlue public="1" get="inline" set="null" expr="cast 0xff4daecf" line="19" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4daecf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</maximumBlue>
		<blueTourmaline public="1" get="inline" set="null" expr="cast 0xff4592ca" line="20" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4592ca</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</blueTourmaline>
		<celestialPlum public="1" get="inline" set="null" expr="cast 0xff3f77c4" line="21" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3f77c4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</celestialPlum>
		<freeSpeechBlue public="1" get="inline" set="null" expr="cast 0xff3a57bf" line="22" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3a57bf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</freeSpeechBlue>
		<earlySpringNight public="1" get="inline" set="null" expr="cast 0xff3438bd" line="23" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3438bd</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</earlySpringNight>
		<blueDepression public="1" get="inline" set="null" expr="cast 0xff4b27bd" line="24" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4b27bd</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</blueDepression>
		<nebulaFuchsia public="1" get="inline" set="null" expr="cast 0xff7328b6" line="25" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff7328b6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</nebulaFuchsia>
		<fuchsiaFlair public="1" get="inline" set="null" expr="cast 0xffb528c5" line="26" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffb528c5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</fuchsiaFlair>
		<royalFuchsia public="1" get="inline" set="null" expr="cast 0xffc32a94" line="27" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffc32a94</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</royalFuchsia>
		<fuchsiaPurple public="1" get="inline" set="null" expr="cast 0xffdd3371" line="28" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffdd3371</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</fuchsiaPurple>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="pallette.wheel.ColorWheel24" params="" file="/usr/local/lib/haxeLibrary/pallette/0,0,1/src/pallette/wheel/ColorWheel24.hx">
		<getWheel public="1" get="inline" set="null" line="35" static="1"><f a=""><c path="Array"><x path="pallette.wheel.Wheel24"/></c></f></getWheel>
		<random public="1" get="inline" set="null" line="62" static="1"><f a=""><x path="pallette.wheel.Wheel24"/></f></random>
		<getName public="1" get="inline" set="null" line="68" static="1"><f a="w">
	<x path="pallette.wheel.Wheel24"/>
	<c path="String"/>
</f></getName>
		<next public="1" get="inline" set="null" line="97" static="1"><f a="w">
	<x path="pallette.wheel.Wheel24"/>
	<x path="pallette.wheel.Wheel24"/>
</f></next>
		<haxe_doc>![wheel24](../../bootstrap/img/wheel24.png)</haxe_doc>
	</class>
	<class path="trilateral3.DocTrilateral3" params="" file="src/trilateral3/DocTrilateral3.hx">
		<main public="1" set="method" line="18" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<new public="1" set="method" line="21"><f a=""><x path="Void"/></f></new>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</class>
	<class path="trilateral3.Trilateral" params="" file="src/trilateral3/Trilateral.hx">
		<transformMatrix public="1" expr="null" line="6" static="1">
			<x path="Null"><c path="trilateral3.matrix.MatrixDozen"/></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</transformMatrix>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="trilateral3.color.ColorHelper" params="" file="src/trilateral3/color/ColorHelper.hx">
		<getBlack_ public="1" expr="getBlack">
			<f a="r:g:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>getBlack</e></m></meta>
		</getBlack_>
		<from_cymka_ public="1" expr="from_cymka">
			<f a="c:y:m:k:a">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>from_cymka</e></m></meta>
		</from_cymka_>
		<from_argb_ public="1" expr="from_argb">
			<f a="a:r:g:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>from_argb</e></m></meta>
		</from_argb_>
		<toHexInt_ public="1" expr="toHexInt">
			<f a="c">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>toHexInt</e></m></meta>
		</toHexInt_>
		<rgbConvert_ public="1" expr="rgbConvert">
			<f a="color:k">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>rgbConvert</e></m></meta>
		</rgbConvert_>
		<cymkConvert_ public="1" expr="cymkConvert">
			<f a="color:black">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>cymkConvert</e></m></meta>
		</cymkConvert_>
		<alphaChannel_ public="1" expr="alphaChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>alphaChannel</e></m></meta>
		</alphaChannel_>
		<redChannel_ public="1" expr="redChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>redChannel</e></m></meta>
		</redChannel_>
		<greenChannel_ public="1" expr="greenChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>greenChannel</e></m></meta>
		</greenChannel_>
		<blueChannel_ public="1" expr="blueChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>blueChannel</e></m></meta>
		</blueChannel_>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="trilateral3.color._ColorHelper.ColorHelper_Fields_" params="" file="src/trilateral3/color/ColorHelper.hx" private="1" module="trilateral3.color.ColorHelper" final="1">
		<getBlack public="1" get="inline" set="null" line="4" static="1"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></getBlack>
		<from_cymka public="1" get="inline" set="null" line="9" static="1"><f a="c:y:m:k:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_cymka>
		<from_argb public="1" get="inline" set="null" line="16" static="1"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_argb>
		<toHexInt public="1" get="inline" set="null" line="22" static="1"><f a="c">
	<x path="Float"/>
	<x path="Int"/>
</f></toHexInt>
		<rgbConvert public="1" get="inline" set="null" line="25" static="1"><f a="color:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></rgbConvert>
		<cymkConvert public="1" get="inline" set="null" line="28" static="1"><f a="color:black">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cymkConvert>
		<alphaChannel public="1" get="inline" set="null" line="31" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="34" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="37" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="40" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.color.ColorInt" params="" file="src/trilateral3/color/ColorInt.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast field="fromARGB"><c path="trilateral3.structure.ARGB"/></icast>
			<icast field="fromCYMKA"><c path="trilateral3.structure.CYMKA"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toARGB"><c path="trilateral3.structure.ARGB"/></icast>
			<icast field="toCYMK"><c path="trilateral3.structure.CYMKA"/></icast>
		</to>
		<impl><class path="trilateral3.color._ColorInt.ColorInt_Impl_" params="" file="src/trilateral3/color/ColorInt.hx" private="1" module="trilateral3.color.ColorInt" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="v">
			<x path="Int"/>
			<x path="trilateral3.color.ColorInt"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromARGB public="1" get="inline" set="null" line="13" static="1">
		<f a="argb">
			<c path="trilateral3.structure.ARGB"/>
			<x path="trilateral3.color.ColorInt"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromARGB>
	<toARGB public="1" get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="trilateral3.structure.ARGB"/>
		</f>
		<meta><m n=":to"/></meta>
	</toARGB>
	<fromCYMKA public="1" get="inline" set="null" line="23" static="1">
		<f a="c">
			<c path="trilateral3.structure.CYMKA"/>
			<x path="trilateral3.color.ColorInt"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromCYMKA>
	<toCYMK public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="trilateral3.structure.CYMKA"/>
		</f>
		<meta><m n=":to"/></meta>
	</toCYMK>
	<cyan public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cyan>
	<get_cyan get="inline" set="null" line="37" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_cyan>
	<set_cyan get="inline" set="null" line="41" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cyan>
	<yellow public="1" get="accessor" set="accessor" static="1"><x path="Float"/></yellow>
	<get_yellow get="inline" set="null" line="50" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_yellow>
	<set_yellow get="inline" set="null" line="54" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_yellow>
	<magenta public="1" get="accessor" set="accessor" static="1"><x path="Float"/></magenta>
	<get_magenta get="inline" set="null" line="63" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_magenta>
	<set_magenta get="inline" set="null" line="67" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_magenta>
	<black public="1" get="accessor" set="accessor" static="1"><x path="Float"/></black>
	<get_black get="inline" set="null" line="75" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_black>
	<set_black get="inline" set="null" line="78" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_black>
	<alpha public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alpha>
	<get_alpha get="inline" set="null" line="88" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_alpha>
	<set_alpha get="inline" set="null" line="92" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
	<red public="1" get="accessor" set="accessor" static="1"><x path="Float"/></red>
	<get_red get="inline" set="null" line="98" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_red>
	<set_red get="inline" set="null" line="102" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_red>
	<green public="1" get="accessor" set="accessor" static="1"><x path="Float"/></green>
	<get_green get="inline" set="null" line="108" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_green>
	<set_green get="inline" set="null" line="112" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_green>
	<blue public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blue>
	<get_blue get="inline" set="null" line="118" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_blue>
	<set_blue get="inline" set="null" line="122" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blue>
	<aiCYMKA public="1" get="inline" set="null" line="128" static="1">
		<f a="arr:?alpha" v=":1.0">
			<c path="Array"><c path="String"/></c>
			<x path="Float"/>
			<x path="trilateral3.color.ColorInt"/>
		</f>
		<meta><m n=":value"><e>{ alpha : 1.0 }</e></m></meta>
	</aiCYMKA>
	<aiARGB public="1" get="inline" set="null" line="136" static="1">
		<f a="arr:?alpha" v=":1.0">
			<c path="Array"><c path="String"/></c>
			<x path="Float"/>
			<x path="trilateral3.color.ColorInt"/>
		</f>
		<meta><m n=":value"><e>{ alpha : 1.0 }</e></m></meta>
	</aiARGB>
	<aiGreyA public="1" get="inline" set="null" line="144" static="1">
		<f a="s:?alpha" v=":1.0">
			<c path="String"/>
			<x path="Float"/>
			<x path="trilateral3.color.ColorInt"/>
		</f>
		<meta><m n=":value"><e>{ alpha : 1.0 }</e></m></meta>
	</aiGreyA>
	<ARGB_CYMKA public="1" get="inline" set="null" line="151" static="1"><f a="v">
	<c path="trilateral3.structure.ARGB"/>
	<c path="trilateral3.structure.CYMKA"/>
</f></ARGB_CYMKA>
	<CYMKA_ARGB public="1" get="inline" set="null" line="161" static="1"><f a="v">
	<c path="trilateral3.structure.CYMKA"/>
	<c path="trilateral3.structure.ARGB"/>
</f></CYMKA_ARGB>
</class></impl>
	</abstract>
	<class path="trilateral3.color._ColorInt.ColorInt_Impl_" params="" file="src/trilateral3/color/ColorInt.hx" private="1" module="trilateral3.color.ColorInt" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="trilateral3.color.ColorInt"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromARGB public="1" get="inline" set="null" line="13" static="1">
			<f a="argb">
				<c path="trilateral3.structure.ARGB"/>
				<x path="trilateral3.color.ColorInt"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromARGB>
		<toARGB public="1" get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="trilateral3.structure.ARGB"/>
			</f>
			<meta><m n=":to"/></meta>
		</toARGB>
		<fromCYMKA public="1" get="inline" set="null" line="23" static="1">
			<f a="c">
				<c path="trilateral3.structure.CYMKA"/>
				<x path="trilateral3.color.ColorInt"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromCYMKA>
		<toCYMK public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="trilateral3.structure.CYMKA"/>
			</f>
			<meta><m n=":to"/></meta>
		</toCYMK>
		<cyan public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cyan>
		<get_cyan get="inline" set="null" line="37" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_cyan>
		<set_cyan get="inline" set="null" line="41" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cyan>
		<yellow public="1" get="accessor" set="accessor" static="1"><x path="Float"/></yellow>
		<get_yellow get="inline" set="null" line="50" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_yellow>
		<set_yellow get="inline" set="null" line="54" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_yellow>
		<magenta public="1" get="accessor" set="accessor" static="1"><x path="Float"/></magenta>
		<get_magenta get="inline" set="null" line="63" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_magenta>
		<set_magenta get="inline" set="null" line="67" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_magenta>
		<black public="1" get="accessor" set="accessor" static="1"><x path="Float"/></black>
		<get_black get="inline" set="null" line="75" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_black>
		<set_black get="inline" set="null" line="78" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_black>
		<alpha public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alpha>
		<get_alpha get="inline" set="null" line="88" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_alpha>
		<set_alpha get="inline" set="null" line="92" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
		<red public="1" get="accessor" set="accessor" static="1"><x path="Float"/></red>
		<get_red get="inline" set="null" line="98" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_red>
		<set_red get="inline" set="null" line="102" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_red>
		<green public="1" get="accessor" set="accessor" static="1"><x path="Float"/></green>
		<get_green get="inline" set="null" line="108" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_green>
		<set_green get="inline" set="null" line="112" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_green>
		<blue public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blue>
		<get_blue get="inline" set="null" line="118" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_blue>
		<set_blue get="inline" set="null" line="122" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blue>
		<aiCYMKA public="1" get="inline" set="null" line="128" static="1">
			<f a="arr:?alpha" v=":1.0">
				<c path="Array"><c path="String"/></c>
				<x path="Float"/>
				<x path="trilateral3.color.ColorInt"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1.0 }</e></m></meta>
		</aiCYMKA>
		<aiARGB public="1" get="inline" set="null" line="136" static="1">
			<f a="arr:?alpha" v=":1.0">
				<c path="Array"><c path="String"/></c>
				<x path="Float"/>
				<x path="trilateral3.color.ColorInt"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1.0 }</e></m></meta>
		</aiARGB>
		<aiGreyA public="1" get="inline" set="null" line="144" static="1">
			<f a="s:?alpha" v=":1.0">
				<c path="String"/>
				<x path="Float"/>
				<x path="trilateral3.color.ColorInt"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1.0 }</e></m></meta>
		</aiGreyA>
		<ARGB_CYMKA public="1" get="inline" set="null" line="151" static="1"><f a="v">
	<c path="trilateral3.structure.ARGB"/>
	<c path="trilateral3.structure.CYMKA"/>
</f></ARGB_CYMKA>
		<CYMKA_ARGB public="1" get="inline" set="null" line="161" static="1"><f a="v">
	<c path="trilateral3.structure.CYMKA"/>
	<c path="trilateral3.structure.ARGB"/>
</f></CYMKA_ARGB>
	</class>
	<abstract path="trilateral3.drawing.Color3Abstract" params="" file="src/trilateral3/drawing/Color3Abstract.hx">
		<from><icast><t path="trilateral3.drawing.Color3Type"/></icast></from>
		<this><t path="trilateral3.drawing.Color3Type"/></this>
		<to><icast><t path="trilateral3.drawing.Color3Type"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.drawing._Color3Abstract.Color3Abstract_Impl_" params="" file="src/trilateral3/drawing/Color3Abstract.hx" private="1" module="trilateral3.drawing.Color3Abstract" final="1">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="color3Type">
			<t path="trilateral3.drawing.Color3Type"/>
			<x path="trilateral3.drawing.Color3Abstract"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<argb public="1" get="null" set="accessor" static="1"><x path="Int"/></argb>
	<set_argb get="inline" set="null" line="10" static="1"><f a="this:col">
	<t path="trilateral3.drawing.Color3Type"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
	<argbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbA>
	<set_argbA get="inline" set="null" line="17" static="1"><f a="this:col">
	<t path="trilateral3.drawing.Color3Type"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
	<get_argbA get="inline" set="null" line="21" static="1"><f a="this">
	<t path="trilateral3.drawing.Color3Type"/>
	<x path="Int"/>
</f></get_argbA>
	<argbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbB>
	<set_argbB get="inline" set="null" line="26" static="1"><f a="this:col">
	<t path="trilateral3.drawing.Color3Type"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
	<get_argbB get="inline" set="null" line="30" static="1"><f a="this">
	<t path="trilateral3.drawing.Color3Type"/>
	<x path="Int"/>
</f></get_argbB>
	<argbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbC>
	<set_argbC get="inline" set="null" line="35" static="1"><f a="this:col">
	<t path="trilateral3.drawing.Color3Type"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
	<get_argbC get="inline" set="null" line="39" static="1"><f a="this">
	<t path="trilateral3.drawing.Color3Type"/>
	<x path="Int"/>
</f></get_argbC>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._Color3Abstract.Color3Abstract_Impl_" params="" file="src/trilateral3/drawing/Color3Abstract.hx" private="1" module="trilateral3.drawing.Color3Abstract" final="1">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="color3Type">
				<t path="trilateral3.drawing.Color3Type"/>
				<x path="trilateral3.drawing.Color3Abstract"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<argb public="1" get="null" set="accessor" static="1"><x path="Int"/></argb>
		<set_argb get="inline" set="null" line="10" static="1"><f a="this:col">
	<t path="trilateral3.drawing.Color3Type"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
		<argbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbA>
		<set_argbA get="inline" set="null" line="17" static="1"><f a="this:col">
	<t path="trilateral3.drawing.Color3Type"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
		<get_argbA get="inline" set="null" line="21" static="1"><f a="this">
	<t path="trilateral3.drawing.Color3Type"/>
	<x path="Int"/>
</f></get_argbA>
		<argbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbB>
		<set_argbB get="inline" set="null" line="26" static="1"><f a="this:col">
	<t path="trilateral3.drawing.Color3Type"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
		<get_argbB get="inline" set="null" line="30" static="1"><f a="this">
	<t path="trilateral3.drawing.Color3Type"/>
	<x path="Int"/>
</f></get_argbB>
		<argbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbC>
		<set_argbC get="inline" set="null" line="35" static="1"><f a="this:col">
	<t path="trilateral3.drawing.Color3Type"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
		<get_argbC get="inline" set="null" line="39" static="1"><f a="this">
	<t path="trilateral3.drawing.Color3Type"/>
	<x path="Int"/>
</f></get_argbC>
	</class>
	<typedef path="trilateral3.drawing.Color3Type" params="" file="src/trilateral3/drawing/Color3Type.hx"><a>
	<set_argbC set="method"><f a="col">
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
	<set_argbB set="method"><f a="col">
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
	<set_argbA set="method"><f a="col">
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
	<set_argb set="method"><f a="col">
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
	<get_argbC set="method"><f a=""><x path="Int"/></f></get_argbC>
	<get_argbB set="method"><f a=""><x path="Int"/></f></get_argbB>
	<get_argbA set="method"><f a=""><x path="Int"/></f></get_argbA>
</a></typedef>
	<abstract path="trilateral3.drawing.ColorAbstract" params="" file="src/trilateral3/drawing/ColorAbstract.hx">
		<from><icast><t path="trilateral3.drawing.ColorType"/></icast></from>
		<this><t path="trilateral3.drawing.ColorType"/></this>
		<to><icast><t path="trilateral3.drawing.ColorType"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.drawing._ColorAbstract.ColorAbstract_Impl_" params="" file="src/trilateral3/drawing/ColorAbstract.hx" private="1" module="trilateral3.drawing.ColorAbstract" final="1">
	<_new public="1" get="inline" set="null" line="4" static="1">
		<f a="colorType">
			<t path="trilateral3.drawing.ColorType"/>
			<x path="trilateral3.drawing.ColorAbstract"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
	<get_pos get="inline" set="null" line="8" static="1"><f a="this">
	<t path="trilateral3.drawing.ColorType"/>
	<x path="Float"/>
</f></get_pos>
	<set_pos get="inline" set="null" line="11" static="1"><f a="this:v">
	<t path="trilateral3.drawing.ColorType"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
	<size public="1" get="accessor" set="accessor" static="1"><x path="Int"/></size>
	<set_size get="inline" set="null" line="16" static="1"><f a="this:v">
	<t path="trilateral3.drawing.ColorType"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
	<get_size get="inline" set="null" line="20" static="1"><f a="this">
	<t path="trilateral3.drawing.ColorType"/>
	<x path="Int"/>
</f></get_size>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._ColorAbstract.ColorAbstract_Impl_" params="" file="src/trilateral3/drawing/ColorAbstract.hx" private="1" module="trilateral3.drawing.ColorAbstract" final="1">
		<_new public="1" get="inline" set="null" line="4" static="1">
			<f a="colorType">
				<t path="trilateral3.drawing.ColorType"/>
				<x path="trilateral3.drawing.ColorAbstract"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="8" static="1"><f a="this">
	<t path="trilateral3.drawing.ColorType"/>
	<x path="Float"/>
</f></get_pos>
		<set_pos get="inline" set="null" line="11" static="1"><f a="this:v">
	<t path="trilateral3.drawing.ColorType"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<size public="1" get="accessor" set="accessor" static="1"><x path="Int"/></size>
		<set_size get="inline" set="null" line="16" static="1"><f a="this:v">
	<t path="trilateral3.drawing.ColorType"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
		<get_size get="inline" set="null" line="20" static="1"><f a="this">
	<t path="trilateral3.drawing.ColorType"/>
	<x path="Int"/>
</f></get_size>
	</class>
	<typedef path="trilateral3.drawing.ColorType" params="" file="src/trilateral3/drawing/ColorType.hx"><a>
	<set_size set="method"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
	<set_pos set="method"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
	<get_size set="method"><f a=""><x path="Int"/></f></get_size>
	<get_pos set="method"><f a=""><x path="Float"/></f></get_pos>
	<getTriInt><f a=""><c path="trilateral3.structure.TriInt"/></f></getTriInt>
	<cornerColors><f a="colorA:colorB:colorC">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
	<colorTriangles><f a="color:times">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
	<color3current>
		<x path="Null"><x path="trilateral3.drawing.Color3Abstract"/></x>
		<meta><m n=":optional"/></meta>
	</color3current>
</a></typedef>
	<class path="trilateral3.drawing.Contour" params="" file="src/trilateral3/drawing/Contour.hx">
		<smallDotScale get="inline" set="null" expr="0.07" line="95" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.07</e></m></meta>
		</smallDotScale>
		<thetaCompute get="inline" set="null" line="181" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaCompute>
		<dist get="inline" set="null" line="185" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></dist>
		<debugCol0 public="1" expr="redRadish">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>redRadish</e></m></meta>
		</debugCol0>
		<debugCol1 public="1" expr="gokuOrange">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>gokuOrange</e></m></meta>
		</debugCol1>
		<debugCol2 public="1" expr="carona">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>carona</e></m></meta>
		</debugCol2>
		<debugCol3 public="1" expr="flirtatious">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>flirtatious</e></m></meta>
		</debugCol3>
		<debugCol4 public="1" expr="daffodil">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>daffodil</e></m></meta>
		</debugCol4>
		<debugCol5 public="1" expr="peraRocha">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>peraRocha</e></m></meta>
		</debugCol5>
		<debugCol6 public="1" expr="fieldGreen">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>fieldGreen</e></m></meta>
		</debugCol6>
		<debugCol7 public="1" expr="maximumBlue">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>maximumBlue</e></m></meta>
		</debugCol7>
		<debugCol8 public="1" expr="celestialPlum">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>celestialPlum</e></m></meta>
		</debugCol8>
		<debugCol9 public="1" expr="earlySpringNight">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>earlySpringNight</e></m></meta>
		</debugCol9>
		<debugCol10 public="1" expr="nebulaFuchsia">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>nebulaFuchsia</e></m></meta>
		</debugCol10>
		<debugCol11 public="1" expr="royalFuchsia">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>royalFuchsia</e></m></meta>
		</debugCol11>
		<debugCol12 public="1" expr="orangeSoda">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>orangeSoda</e></m></meta>
		</debugCol12>
		<pointsClock public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pointsClock>
		<pointsAnti public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pointsAnti>
		<penultimateCX public="1"><x path="Float"/></penultimateCX>
		<penultimateCY public="1"><x path="Float"/></penultimateCY>
		<lastClockX public="1"><x path="Float"/></lastClockX>
		<lastClockY public="1"><x path="Float"/></lastClockY>
		<penultimateAX public="1"><x path="Float"/></penultimateAX>
		<penultimateAY public="1"><x path="Float"/></penultimateAY>
		<lastAntiX public="1"><x path="Float"/></lastAntiX>
		<lastAntiY public="1"><x path="Float"/></lastAntiY>
		<pen public="1"><c path="trilateral3.drawing.Pen"/></pen>
		<endLine><x path="trilateral3.drawing.StyleEndLine"/></endLine>
		<ax><x path="Float"/></ax>
		<ay><x path="Float"/></ay>
		<bx><x path="Float"/></bx>
		<by><x path="Float"/></by>
		<cx><x path="Float"/></cx>
		<cy><x path="Float"/></cy>
		<dx><x path="Null"><x path="Float"/></x></dx>
		<dy><x path="Null"><x path="Float"/></x></dy>
		<ex><x path="Null"><x path="Float"/></x></ex>
		<ey><x path="Null"><x path="Float"/></x></ey>
		<dxPrev><x path="Null"><x path="Float"/></x></dxPrev>
		<dyPrev><x path="Null"><x path="Float"/></x></dyPrev>
		<exPrev><x path="Null"><x path="Float"/></x></exPrev>
		<eyPrev><x path="Null"><x path="Float"/></x></eyPrev>
		<dxOld><x path="Null"><x path="Float"/></x></dxOld>
		<dyOld><x path="Null"><x path="Float"/></x></dyOld>
		<exOld><x path="Null"><x path="Float"/></x></exOld>
		<eyOld><x path="Null"><x path="Float"/></x></eyOld>
		<jx><x path="Float"/></jx>
		<jy><x path="Float"/></jy>
		<lastClock><x path="Bool"/></lastClock>
		<jxOld><x path="Float"/></jxOld>
		<jyOld><x path="Float"/></jyOld>
		<kax><x path="Float"/></kax>
		<kay><x path="Float"/></kay>
		<kbx><x path="Float"/></kbx>
		<kby><x path="Float"/></kby>
		<kcx><x path="Float"/></kcx>
		<kcy><x path="Float"/></kcy>
		<ncx><x path="Float"/></ncx>
		<ncy><x path="Float"/></ncy>
		<quadIndex><x path="Float"/></quadIndex>
		<angleA public="1"><x path="Float"/></angleA>
		<halfA public="1"><x path="Float"/></halfA>
		<beta public="1"><x path="Float"/></beta>
		<r><x path="Float"/></r>
		<theta public="1"><x path="Float"/></theta>
		<angle1 public="1"><x path="Null"><x path="Float"/></x></angle1>
		<angle2 public="1"><x path="Float"/></angle2>
		<reset public="1" set="method" line="97"><f a=""><x path="Void"/></f></reset>
		<count public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<computeDE public="1" get="inline" set="null" line="140"><f a=""><x path="Void"/></f></computeDE>
		<anglesCompute get="inline" set="null" line="156"><f a=""><x path="Void"/></f></anglesCompute>
		<thetaComputeAdj get="inline" set="null" line="177"><f a="qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaComputeAdj>
		<triangleJoin public="1" get="inline" set="null" line="194">
			<f a="ax_:ay_:bx_:by_:width_:?curveEnds:?overlap" v=":::::false:false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ overlap : false, curveEnds : false }</e></m></meta>
		</triangleJoin>
		<overlapQuad get="inline" set="null" line="301"><f a=""><x path="Void"/></f></overlapQuad>
		<end public="1" get="inline" set="null" line="309"><f a="width_">
	<x path="Float"/>
	<x path="Void"/>
</f></end>
		<triangle2DFill get="inline" set="null" line="315">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</triangle2DFill>
		<addPieXstart get="inline" set="null" line="319">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : -1 }</e></m></meta>
		</addPieXstart>
		<addPieX get="inline" set="null" line="341">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::0:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : 0 }</e></m></meta>
		</addPieX>
		<addPie get="inline" set="null" line="362">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::0:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : 0 }</e></m></meta>
		</addPie>
		<computeJ get="inline" set="null" line="369"><f a="width_:theta0:dif">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></computeJ>
		<addDot get="inline" set="null" line="379"><f a="x:y:color:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addDot>
		<addSmallTriangles get="inline" set="null" line="408"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addSmallTriangles>
		<triangle2DFillangleCorners get="inline" set="null" line="420"><f a="oldx_:oldy_:prevx_:prevy_:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangle2DFillangleCorners>
		<triangle2DFillangleCornersLess get="inline" set="null" line="436"><f a="oldx_:oldy_:prevx_:prevy_:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangle2DFillangleCornersLess>
		<connectQuadsWhenQuadsOverlay get="inline" set="null" line="450"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></connectQuadsWhenQuadsOverlay>
		<connectQuads get="inline" set="null" line="465"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></connectQuads>
		<addInitialQuads get="inline" set="null" line="481"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addInitialQuads>
		<endEdges public="1" set="method" line="564"><f a=""><x path="Void"/></f></endEdges>
		<counter expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</counter>
		<addQuads set="method" line="590"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addQuads>
		<storeLastQuads get="inline" set="null" line="756"><f a=""><x path="Void"/></f></storeLastQuads>
		<isClockwise get="inline" set="null" line="766"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isClockwise>
		<line public="1" get="inline" set="null" line="771">
			<f a="ax_:ay_:bx_:by_:width_:?endLineCurve" v=":::::no">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.drawing.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLineCurve : no }</e></m></meta>
		</line>
		<new public="1" set="method" line="134">
			<f a="pen_:?endLine_" v=":no">
				<c path="trilateral3.drawing.Pen"/>
				<x path="trilateral3.drawing.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLine_ : no }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.drawing.DrawAbstract" params="" file="src/trilateral3/drawing/DrawAbstract.hx">
		<from><icast><t path="trilateral3.drawing.DrawType"/></icast></from>
		<this><t path="trilateral3.drawing.DrawType"/></this>
		<to><icast><t path="trilateral3.drawing.DrawType"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.drawing._DrawAbstract.DrawAbstract_Impl_" params="" file="src/trilateral3/drawing/DrawAbstract.hx" private="1" module="trilateral3.drawing.DrawAbstract" final="1">
	<_new public="1" get="inline" set="null" line="4" static="1">
		<f a="drawType">
			<t path="trilateral3.drawing.DrawType"/>
			<x path="trilateral3.drawing.DrawAbstract"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
	<get_pos get="inline" set="null" line="8" static="1"><f a="this">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Float"/>
</f></get_pos>
	<set_pos get="inline" set="null" line="11" static="1"><f a="this:v">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
	<size public="1" get="accessor" set="accessor" static="1"><x path="Int"/></size>
	<set_size get="inline" set="null" line="16" static="1"><f a="this:v">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
	<get_size get="inline" set="null" line="20" static="1"><f a="this">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Int"/>
</f></get_size>
	<toStart get="inline" set="null" line="23" static="1"><f a="this:v:len">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
	<toEnd get="inline" set="null" line="26" static="1"><f a="this:v:len">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._DrawAbstract.DrawAbstract_Impl_" params="" file="src/trilateral3/drawing/DrawAbstract.hx" private="1" module="trilateral3.drawing.DrawAbstract" final="1">
		<_new public="1" get="inline" set="null" line="4" static="1">
			<f a="drawType">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="trilateral3.drawing.DrawAbstract"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="8" static="1"><f a="this">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Float"/>
</f></get_pos>
		<set_pos get="inline" set="null" line="11" static="1"><f a="this:v">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<size public="1" get="accessor" set="accessor" static="1"><x path="Int"/></size>
		<set_size get="inline" set="null" line="16" static="1"><f a="this:v">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
		<get_size get="inline" set="null" line="20" static="1"><f a="this">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Int"/>
</f></get_size>
		<toStart get="inline" set="null" line="23" static="1"><f a="this:v:len">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
		<toEnd get="inline" set="null" line="26" static="1"><f a="this:v:len">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
	</class>
	<typedef path="trilateral3.drawing.DrawType" params="" file="src/trilateral3/drawing/DrawType.hx"><a>
	<triangleUV>
		<x path="Null"><f a="uA_:vA_:uB_:vB_:uC_:vC_:?windAdjust_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></x>
		<meta><m n=":optional"/></meta>
	</triangleUV>
	<triangleCurrentUV>
		<x path="Null"><x path="trilateral3.drawing.TriangleAbstractUV"/></x>
		<meta><m n=":optional"/></meta>
	</triangleCurrentUV>
	<triangleCurrent>
		<x path="Null"><x path="trilateral3.drawing.TriangleAbstract"/></x>
		<meta><m n=":optional"/></meta>
	</triangleCurrent>
	<triangle><f a="ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></triangle>
	<transformRange><f a="m:startEnd">
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></transformRange>
	<transform><f a="">
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transform>
	<toStart set="method"><f a="v:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
	<toEnd set="method"><f a="v:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
	<set_size set="method"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
	<set_pos set="method"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
	<next><f a=""><x path="Float"/></f></next>
	<hasNext><f a=""><x path="Bool"/></f></hasNext>
	<get_size set="method"><f a=""><x path="Int"/></f></get_size>
	<get_pos set="method"><f a=""><x path="Float"/></f></get_pos>
	<getTriangleUV>
		<x path="Null"><f a=""><c path="trilateral3.structure.TriangleUV"/></f></x>
		<meta><m n=":optional"/></meta>
	</getTriangleUV>
	<getTriangle3D><f a=""><c path="trilateral3.structure.Triangle3D"/></f></getTriangle3D>
</a></typedef>
	<class path="trilateral3.drawing._Fill.Fill_Fields_" params="" file="src/trilateral3/drawing/Fill.hx" private="1" module="trilateral3.drawing.Fill" final="1"><triangulate public="1" set="method" line="17" static="1"><f a="pen:sketch:fillForm">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.drawing.Sketch"/>
	<x path="trilateral3.drawing.StyleFill"/>
	<x path="Void"/>
</f></triangulate></class>
	<class path="trilateral3.drawing.Nymph" params="" file="src/trilateral3/drawing/Nymph.hx">
		<iterNymph public="1" set="method" line="39" static="1"><f a="pen:iteratorRange">
	<c path="trilateral3.drawing.Pen"/>
	<x path="trilateral3.shape.IteratorRange"/>
	<c path="trilateral3.drawing.Nymph"/>
</f></iterNymph>
		<pen><c path="trilateral3.drawing.Pen"/></pen>
		<curr><x path="trilateral3.drawing.TriangleAbstract"/></curr>
		<currUV><x path="trilateral3.drawing.TriangleAbstractUV"/></currUV>
		<curr3color><x path="trilateral3.drawing.Color3Abstract"/></curr3color>
		<indexRange><x path="trilateral3.shape.IndexRange"/></indexRange>
		<sx expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</sx>
		<sy expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</sy>
		<su expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</su>
		<sv expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</sv>
		<theta expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</theta>
		<moveStart public="1" set="method" line="43"><f a="sx_:sy_:su_:sv_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveStart>
		<dMoveXY public="1" set="method" line="59"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></dMoveXY>
		<dMoveUV public="1" set="method" line="68"><f a="du:dv">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></dMoveUV>
		<dMoveXYUV public="1" set="method" line="77"><f a="dx:dy:du:dv">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></dMoveXYUV>
		<setColor public="1" set="method" line="88"><f a="col">
	<x path="Int"/>
	<x path="Void"/>
</f></setColor>
		<setRndColor public="1" set="method" line="94"><f a="col">
	<x path="Int"/>
	<x path="Void"/>
</f></setRndColor>
		<dRotate public="1" set="method" line="100"><f a="dx:dy:dr">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></dRotate>
		<rotateCentre2 public="1" set="method" line="108"><f a="vx:vy:ax:ay:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateCentre2>
		<rotateCentre public="1" set="method" line="112"><f a="vx:vy:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateCentre>
		<x get="accessor" set="accessor"><x path="Float"/></x>
		<get_x public="1" set="method" line="116"><f a=""><x path="Float"/></f></get_x>
		<set_x public="1" set="method" line="119"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y get="accessor" set="accessor"><x path="Float"/></y>
		<get_y public="1" set="method" line="125"><f a=""><x path="Float"/></f></get_y>
		<set_y public="1" set="method" line="128"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<u get="accessor" set="accessor"><x path="Float"/></u>
		<get_u public="1" set="method" line="134"><f a=""><x path="Float"/></f></get_u>
		<set_u public="1" set="method" line="137"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_u>
		<v get="accessor" set="accessor"><x path="Float"/></v>
		<get_v public="1" set="method" line="143"><f a=""><x path="Float"/></f></get_v>
		<set_v public="1" set="method" line="146"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_v>
		<argb public="1" get="accessor" set="accessor"><x path="Int"/></argb>
		<_argb expr="0xFFFFFFFF">
			<x path="Int"/>
			<meta><m n=":value"><e>0xFFFFFFFF</e></m></meta>
		</_argb>
		<set_argb get="inline" set="null" line="154"><f a="col">
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
		<get_argb get="inline" set="null" line="160"><f a=""><x path="Int"/></f></get_argb>
		<new public="1" set="method" line="25"><f a="pen:indexRange">
	<c path="trilateral3.drawing.Pen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* Depreciated</haxe_doc>
	</class>
	<abstract path="trilateral3.drawing.PaintAbstract" params="" file="src/trilateral3/drawing/PaintAbstract.hx">
		<from><icast><t path="trilateral3.drawing.PaintType"/></icast></from>
		<this><t path="trilateral3.drawing.PaintType"/></this>
		<to><icast><t path="trilateral3.drawing.PaintType"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.drawing._PaintAbstract.PaintAbstract_Impl_" params="" file="src/trilateral3/drawing/PaintAbstract.hx" private="1" module="trilateral3.drawing.PaintAbstract" final="1">
	<_new public="1" get="inline" set="null" line="4" static="1">
		<f a="paintType">
			<t path="trilateral3.drawing.PaintType"/>
			<x path="trilateral3.drawing.PaintAbstract"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
	<get_pos get="inline" set="null" line="8" static="1"><f a="this">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Float"/>
</f></get_pos>
	<set_pos get="inline" set="null" line="11" static="1"><f a="this:v">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
	<size public="1" get="accessor" set="accessor" static="1"><x path="Int"/></size>
	<set_size get="inline" set="null" line="16" static="1"><f a="this:v">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
	<get_size get="inline" set="null" line="20" static="1"><f a="this">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Int"/>
</f></get_size>
	<toStart public="1" get="inline" set="null" line="24" static="1"><f a="this:v:len">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
	<toEnd public="1" get="inline" set="null" line="28" static="1"><f a="this:v:len">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
	<swap public="1" get="inline" set="null" line="32" static="1"><f a="this:v0:v1:len">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._PaintAbstract.PaintAbstract_Impl_" params="" file="src/trilateral3/drawing/PaintAbstract.hx" private="1" module="trilateral3.drawing.PaintAbstract" final="1">
		<_new public="1" get="inline" set="null" line="4" static="1">
			<f a="paintType">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="trilateral3.drawing.PaintAbstract"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="8" static="1"><f a="this">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Float"/>
</f></get_pos>
		<set_pos get="inline" set="null" line="11" static="1"><f a="this:v">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<size public="1" get="accessor" set="accessor" static="1"><x path="Int"/></size>
		<set_size get="inline" set="null" line="16" static="1"><f a="this:v">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
		<get_size get="inline" set="null" line="20" static="1"><f a="this">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Int"/>
</f></get_size>
		<toStart public="1" get="inline" set="null" line="24" static="1"><f a="this:v:len">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
		<toEnd public="1" get="inline" set="null" line="28" static="1"><f a="this:v:len">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
		<swap public="1" get="inline" set="null" line="32" static="1"><f a="this:v0:v1:len">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
	</class>
	<typedef path="trilateral3.drawing.PaintType" params="" file="src/trilateral3/drawing/PaintType.hx"><a>
	<triangleUV>
		<x path="Null"><f a="uA_:vA_:uB_:vB_:uC_:vC_:?windAdjust_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></x>
		<meta><m n=":optional"/></meta>
	</triangleUV>
	<triangleCurrentUV>
		<x path="Null"><x path="trilateral3.drawing.TriangleAbstractUV"/></x>
		<meta><m n=":optional"/></meta>
	</triangleCurrentUV>
	<triangleCurrent>
		<x path="Null"><x path="trilateral3.drawing.TriangleAbstract"/></x>
		<meta><m n=":optional"/></meta>
	</triangleCurrent>
	<triangle><f a="ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></triangle>
	<transformRange><f a="m:startEnd">
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></transformRange>
	<transform><f a="">
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transform>
	<toStart set="method"><f a="v:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
	<toEnd set="method"><f a="v:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
	<swap set="method"><f a="v0:v1:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
	<set_size set="method"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
	<set_pos set="method"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
	<next><f a=""><x path="Float"/></f></next>
	<hasNext><f a=""><x path="Bool"/></f></hasNext>
	<get_size set="method"><f a=""><x path="Int"/></f></get_size>
	<get_pos set="method"><f a=""><x path="Float"/></f></get_pos>
	<getTriangleUV>
		<x path="Null"><f a=""><c path="trilateral3.structure.TriangleUV"/></f></x>
		<meta><m n=":optional"/></meta>
	</getTriangleUV>
	<getTriangle3D><f a=""><c path="trilateral3.structure.Triangle3D"/></f></getTriangle3D>
	<getTriInt><f a=""><c path="trilateral3.structure.TriInt"/></f></getTriInt>
	<cornerColors><f a="colorA:colorB:colorC">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
	<colorTriangles><f a="color:times">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
	<color3current>
		<x path="Null"><x path="trilateral3.drawing.Color3Abstract"/></x>
		<meta><m n=":optional"/></meta>
	</color3current>
</a></typedef>
	<class path="trilateral3.drawing.Pen" params="" file="src/trilateral3/drawing/Pen.hx">
		<tweenWrap public="1" set="method" line="368" static="1"><f a="tweenEquation">
	<f a=":::">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
</f></tweenWrap>
		<z2D public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</z2D>
		<useTexture public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</useTexture>
		<textureFX expr="1. / 1000.">
			<x path="Float"/>
			<meta><m n=":value"><e>1. / 1000.</e></m></meta>
		</textureFX>
		<textureFY expr="1. / 1000.">
			<x path="Float"/>
			<meta><m n=":value"><e>1. / 1000.</e></m></meta>
		</textureFY>
		<rounded public="1" expr="30">
			<x path="Float"/>
			<meta><m n=":value"><e>30</e></m></meta>
		</rounded>
		<dz public="1" expr="0.01">
			<x path="Float"/>
			<meta><m n=":value"><e>0.01</e></m></meta>
		</dz>
		<currentColor public="1" expr="0xFACADE">
			<x path="Int"/>
			<meta><m n=":value"><e>0xFACADE</e></m></meta>
		</currentColor>
		<paintType public="1"><x path="trilateral3.drawing.PaintAbstract"/></paintType>
		<translateX public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></translateX>
		<translateY public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></translateY>
		<translateZ public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></translateZ>
		<rotateX public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></rotateX>
		<rotateY public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></rotateY>
		<rotateZ public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></rotateZ>
		<indices public="1" expr="[]">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</indices>
		<transformRange public="1" get="inline" set="null" line="42"><f a="trans:ir">
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></transformRange>
		<textureXYWH public="1" get="null" set="accessor"><x path="trilateral3.structure.XYWH"/></textureXYWH>
		<set_textureXYWH get="inline" set="null" line="47"><f a="r">
	<x path="trilateral3.structure.XYWH"/>
	<x path="trilateral3.structure.XYWH"/>
</f></set_textureXYWH>
		<up public="1" get="inline" set="null" line="53"><f a="ir">
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></up>
		<down public="1" get="inline" set="null" line="58"><f a="ir">
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></down>
		<back public="1" get="inline" set="null" line="63"><f a="ir">
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></back>
		<transBack get="inline" set="null" line="67"><f a=""><c path="trilateral3.matrix.MatrixDozen"/></f></transBack>
		<cornerColor public="1" get="inline" set="null" line="97">
			<f a="?color" v="-1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color : -1 }</e></m></meta>
		</cornerColor>
		<cornerColors public="1" get="inline" set="null" line="102"><f a="colorA:colorB:colorC">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
		<middleColor public="1" get="inline" set="null" line="106"><f a="color:colorCentre">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></middleColor>
		<middleColors public="1" get="inline" set="null" line="110"><f a="color:colorCentre:times">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></middleColors>
		<colorTriangles public="1" get="inline" set="null" line="116"><f a="color:times">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
		<pieDifX public="1" get="inline" set="null" line="124">
			<f a="ax:ay:radius:beta:dif:edgePoly:?sides" v="::::::36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</pieDifX>
		<posTriangle2D public="1" get="inline" set="null" line="156"><f a="ax:ay:bx:by:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></posTriangle2D>
		<posTriangle public="1" get="inline" set="null" line="163"><f a="ax:ay:az:bx:by:bz:cx:cy:cz">
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="Bool"/>
</f></posTriangle>
		<addTriangle public="1" get="inline" set="null" line="185"><f a="ax:ay:az:bx:by:bz:cx:cy:cz">
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="Bool"/>
</f></addTriangle>
		<triangle2DFillGrad public="1" get="inline" set="null" line="233">
			<f a="ax:ay:bx:by:cx:cy:?col0:?col1:?gradCorner" v="::::::-1:-1:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ gradCorner : 0, col1 : -1, col0 : -1 }</e></m></meta>
		</triangle2DFillGrad>
		<triangle2DFill public="1" get="inline" set="null" line="252">
			<f a="ax:ay:bx:by:cx:cy:?color" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ color : -1 }</e></m></meta>
		</triangle2DFill>
		<triangle2DFillColors public="1" get="inline" set="null" line="264">
			<f a="ax:ay:bx:by:cx:cy:?colorA:?colorB:?colorC" v="::::::-1:-1:-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ colorC : -1, colorB : -1, colorA : -1 }</e></m></meta>
		</triangle2DFillColors>
		<nineSliceFill public="1" get="inline" set="null" line="284">
			<f a="ax:ay:width:height:left:right:top:bottom:?color0:?color1:?color2:?color3:?color4:?color5:?color6:?color7:?color8" v="::::::::-1:-1:-1:-1:-1:-1:-1:-1:-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ color8 : -1, color7 : -1, color6 : -1, color5 : -1, color4 : -1, color3 : -1, color2 : -1, color1 : -1, color0 : -1 }</e></m></meta>
		</nineSliceFill>
		<quad2DFill public="1" get="inline" set="null" line="302">
			<f a="ax:ay:width:height:?color" v="::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ color : -1 }</e></m></meta>
		</quad2DFill>
		<quad2DFillclockwise public="1" get="inline" set="null" line="315">
			<f a="ax:ay:bx:by:cx:cy:dx:dy:?color" v="::::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ color : -1 }</e></m></meta>
		</quad2DFillclockwise>
		<quad2DFillColors public="1" get="inline" set="null" line="324">
			<f a="ax:ay:width:height:?colorA:?colorB:?colorC:?colorD" v="::::-1:-1:-1:-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ colorD : -1, colorC : -1, colorB : -1, colorA : -1 }</e></m></meta>
		</quad2DFillColors>
		<quad2DFillclockwiseColors public="1" get="inline" set="null" line="338">
			<f a="ax:ay:bx:by:cx:cy:dx:dy:?colorA:?colorB:?colorC:?colorD" v="::::::::-1:-1:-1:-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ colorD : -1, colorC : -1, colorB : -1, colorA : -1 }</e></m></meta>
		</quad2DFillclockwiseColors>
		<quadGradient public="1" get="inline" set="null" line="354">
			<f a="pos:dim:?col0:?col1:?horizontal:?theta:?pivotX:?pivotY" v="::-1:-1:false:0.:0.:0.">
				<t path="trilateral3.structure.XY"/>
				<t path="trilateral3.structure.XY"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ pivotY : 0., pivotX : 0., theta : 0., horizontal : false, col1 : -1, col0 : -1 }</e></m></meta>
		</quadGradient>
		<multiGradient public="1" get="inline" set="null" line="380">
			<f a="horizontal_:x_:y_:wid_:hi_:colors:?func:?theta:?pivotX:?pivotY" v="::::::null:0.:0.:0.">
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Int"/></c>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ pivotY : 0., pivotX : 0., theta : 0., func : null }</e></m></meta>
		</multiGradient>
		<pos public="1" get="accessor" set="accessor"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="413"><f a=""><x path="Float"/></f></get_pos>
		<set_pos get="inline" set="null" line="417"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<size public="1" get="accessor" set="accessor"><x path="Int"/></size>
		<get_size get="inline" set="null" line="424"><f a=""><x path="Int"/></f></get_size>
		<set_size get="inline" set="null" line="428"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
		<setStartDepth public="1" get="inline" set="null" line="436">
			<f a="v:len">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* sends pos to start of draw array ( bottom? )</haxe_doc>
		</setStartDepth>
		<setEndDepth public="1" get="inline" set="null" line="443">
			<f a="v:len">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* sends pos to end of draw array ( top? )</haxe_doc>
		</setEndDepth>
		<swapDepth public="1" get="inline" set="null" line="450">
			<f a="v0:v1:len">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* swaps positions within draw array</haxe_doc>
		</swapDepth>
		<triangleCurrent public="1" get="accessor" set="null">
			<x path="trilateral3.drawing.TriangleAbstract"/>
			<haxe_doc>* Only optionally available use with care, works with PenNodule.</haxe_doc>
		</triangleCurrent>
		<get_triangleCurrent get="inline" set="null" line="458"><f a=""><x path="trilateral3.drawing.TriangleAbstract"/></f></get_triangleCurrent>
		<triangleCurrentUV public="1" get="accessor" set="null">
			<x path="trilateral3.drawing.TriangleAbstractUV"/>
			<haxe_doc>* Only optionally available use with care, works with PenNoduleUV.</haxe_doc>
		</triangleCurrentUV>
		<get_triangleCurrentUV get="inline" set="null" line="466"><f a=""><x path="trilateral3.drawing.TriangleAbstractUV"/></f></get_triangleCurrentUV>
		<color3Current public="1" get="accessor" set="null">
			<x path="trilateral3.drawing.Color3Abstract"/>
			<haxe_doc>* Only possible if using interleave data structure !! use with care.</haxe_doc>
		</color3Current>
		<get_color3Current get="inline" set="null" line="474"><f a=""><x path="trilateral3.drawing.Color3Abstract"/></f></get_color3Current>
		<copyRange public="1" get="inline" set="null" line="478"><f a="otherPen:startEnd:vec">
	<c path="trilateral3.drawing.Pen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<c path="trilateral3.matrix.Vertex"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></copyRange>
		<new public="1" set="method" line="38"><f a="paintType_">
	<x path="trilateral3.drawing.PaintAbstract"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.drawing.AIColorType" params="" file="src/trilateral3/drawing/Sketch.hx" module="trilateral3.drawing.Sketch">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="trilateral3.drawing._Sketch.AIColorType_Impl_" params="" file="src/trilateral3/drawing/Sketch.hx" private="1" module="trilateral3.drawing.Sketch" extern="1" final="1">
	<GRAY public="1" get="inline" set="null" expr="cast &quot;g&quot;" line="15" static="1">
		<x path="trilateral3.drawing.AIColorType"/>
		<meta>
			<m n=":value"><e>cast "g"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GRAY>
	<CYMK public="1" get="inline" set="null" expr="cast &quot;k&quot;" line="16" static="1">
		<x path="trilateral3.drawing.AIColorType"/>
		<meta>
			<m n=":value"><e>cast "k"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CYMK>
	<RGB public="1" get="inline" set="null" expr="cast &quot;xa&quot;" line="17" static="1">
		<x path="trilateral3.drawing.AIColorType"/>
		<meta>
			<m n=":value"><e>cast "xa"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RGB>
	<EPS_RGB public="1" get="inline" set="null" expr="cast &quot;r&quot;" line="18" static="1">
		<x path="trilateral3.drawing.AIColorType"/>
		<meta>
			<m n=":value"><e>cast "r"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EPS_RGB>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._Sketch.AIColorType_Impl_" params="" file="src/trilateral3/drawing/Sketch.hx" private="1" module="trilateral3.drawing.Sketch" extern="1" final="1">
		<GRAY public="1" get="inline" set="null" expr="cast &quot;g&quot;" line="15" static="1">
			<x path="trilateral3.drawing.AIColorType"/>
			<meta>
				<m n=":value"><e>cast "g"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GRAY>
		<CYMK public="1" get="inline" set="null" expr="cast &quot;k&quot;" line="16" static="1">
			<x path="trilateral3.drawing.AIColorType"/>
			<meta>
				<m n=":value"><e>cast "k"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CYMK>
		<RGB public="1" get="inline" set="null" expr="cast &quot;xa&quot;" line="17" static="1">
			<x path="trilateral3.drawing.AIColorType"/>
			<meta>
				<m n=":value"><e>cast "xa"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RGB>
		<EPS_RGB public="1" get="inline" set="null" expr="cast &quot;r&quot;" line="18" static="1">
			<x path="trilateral3.drawing.AIColorType"/>
			<meta>
				<m n=":value"><e>cast "r"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EPS_RGB>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="trilateral3.drawing.Dim" params="" file="src/trilateral3/drawing/Sketch.hx" module="trilateral3.drawing.Sketch"><a>
	<minY><x path="Float"/></minY>
	<minX><x path="Float"/></minX>
	<maxY><x path="Float"/></maxY>
	<maxX><x path="Float"/></maxX>
</a></typedef>
	<class path="trilateral3.drawing.Sketch" params="" file="src/trilateral3/drawing/Sketch.hx">
		<implements path="justPath.IPathContext"/>
		<create public="1" get="inline" set="null" line="96" static="1">
			<f a="paintType_:sketchForm_:?endLine_" v="::no">
				<x path="trilateral3.drawing.PaintAbstract"/>
				<x path="trilateral3.drawing.StyleSketch"/>
				<x path="trilateral3.drawing.StyleEndLine"/>
				<c path="trilateral3.drawing.Sketch"/>
			</f>
			<meta><m n=":value"><e>{ endLine_ : no }</e></m></meta>
		</create>
		<x expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<width public="1" expr="0.01">
			<x path="Float"/>
			<meta><m n=":value"><e>0.01</e></m></meta>
		</width>
		<widthFunction public="1"><f a="::::">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></widthFunction>
		<colourFunction public="1"><f a="::::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colourFunction>
		<tempArr><c path="Array"><x path="Float"/></c></tempArr>
		<contour public="1"><c path="trilateral3.drawing.Contour"/></contour>
		<pen><c path="trilateral3.drawing.Pen"/></pen>
		<endLine><x path="trilateral3.drawing.StyleEndLine"/></endLine>
		<sketchForm><x path="trilateral3.drawing.StyleSketch"/></sketchForm>
		<points public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></points>
		<pointsClock public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></pointsClock>
		<pointsAnti public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></pointsAnti>
		<dim public="1"><c path="Array"><t path="trilateral3.drawing.Dim"/></c></dim>
		<tracerLine get="inline" set="null" line="42"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></tracerLine>
		<fillOnlyLine get="inline" set="null" line="45"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillOnlyLine>
		<baseLine set="method" line="47"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></baseLine>
		<crudeLine get="inline" set="null" line="51"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></crudeLine>
		<roundEndLine get="inline" set="null" line="54"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></roundEndLine>
		<mediumLine get="inline" set="null" line="57"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></mediumLine>
		<mediumOverlapLine get="inline" set="null" line="60"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></mediumOverlapLine>
		<fineLine get="inline" set="null" line="63"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fineLine>
		<fineOverlapLine get="inline" set="null" line="66"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fineOverlapLine>
		<line public="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></line>
		<reset public="1" set="method" line="102"><f a=""><x path="Void"/></f></reset>
		<pointsNoEndOverlap public="1" set="method" line="111"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></pointsNoEndOverlap>
		<pointsRewound public="1" set="method" line="165"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></pointsRewound>
		<initDim get="inline" set="null" line="225"><f a=""><t path="trilateral3.drawing.Dim"/></f></initDim>
		<updateDim get="inline" set="null" line="228"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateDim>
		<moveTo public="1" set="method" line="235"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lastClock public="1" get="inline" set="null" line="253"><f a=""><x path="Void"/></f></lastClock>
		<getEdges public="1" get="inline" set="null" line="263"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></getEdges>
		<lineTo public="1" get="inline" set="null" line="291"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" get="inline" set="null" line="308"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<quadThru public="1" get="inline" set="null" line="317"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadThru>
		<curveTo public="1" get="inline" set="null" line="323"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<plotCoord public="1" get="inline" set="null" line="331">
			<f a="arr:?withMove" v=":true">
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ withMove : true }</e></m></meta>
		</plotCoord>
		<aiColorSet set="method" line="344"><f a="colorType:arr">
	<x path="trilateral3.drawing.AIColorType"/>
	<c path="Array"><c path="String"/></c>
	<x path="trilateral3.color.ColorInt"/>
</f></aiColorSet>
		<getColorType set="method" line="361"><f a="arr">
	<c path="Array"><c path="String"/></c>
	<x path="trilateral3.drawing.AIColorType"/>
</f></getColorType>
		<aiStringPart public="1" get="inline" set="null" line="368">
			<f a="str:x:y:?flipY" v=":::0">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ flipY : 0 }</e></m></meta>
		</aiStringPart>
		<new public="1" set="method" line="70">
			<f a="pen_:sketchForm_:?endLine_" v="::no">
				<c path="trilateral3.drawing.Pen"/>
				<x path="trilateral3.drawing.StyleSketch"/>
				<x path="trilateral3.drawing.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLine_ : no }</e></m></meta>
		</new>
	</class>
	<abstract path="trilateral3.drawing.StyleEndLine" params="" file="src/trilateral3/drawing/StyleEndLine.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="trilateral3.drawing._StyleEndLine.StyleEndLine_Impl_" params="" file="src/trilateral3/drawing/StyleEndLine.hx" private="1" module="trilateral3.drawing.StyleEndLine" extern="1" final="1">
	<no public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="trilateral3.drawing.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</no>
	<begin public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="trilateral3.drawing.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</begin>
	<end public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="trilateral3.drawing.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</end>
	<both public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="trilateral3.drawing.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</both>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._StyleEndLine.StyleEndLine_Impl_" params="" file="src/trilateral3/drawing/StyleEndLine.hx" private="1" module="trilateral3.drawing.StyleEndLine" extern="1" final="1">
		<no public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="trilateral3.drawing.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</no>
		<begin public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="trilateral3.drawing.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</begin>
		<end public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="trilateral3.drawing.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</end>
		<both public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="trilateral3.drawing.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</both>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="trilateral3.drawing.StyleFill" params="" file="src/trilateral3/drawing/StyleFill.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="trilateral3.drawing._StyleFill.StyleFill_Impl_" params="" file="src/trilateral3/drawing/StyleFill.hx" private="1" module="trilateral3.drawing.StyleFill" extern="1" final="1">
	<tess2 public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="trilateral3.drawing.StyleFill"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</tess2>
	<polyK public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="trilateral3.drawing.StyleFill"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</polyK>
	<poly2tri public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="trilateral3.drawing.StyleFill"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</poly2tri>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._StyleFill.StyleFill_Impl_" params="" file="src/trilateral3/drawing/StyleFill.hx" private="1" module="trilateral3.drawing.StyleFill" extern="1" final="1">
		<tess2 public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="trilateral3.drawing.StyleFill"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</tess2>
		<polyK public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="trilateral3.drawing.StyleFill"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</polyK>
		<poly2tri public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="trilateral3.drawing.StyleFill"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</poly2tri>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="trilateral3.drawing.StyleSketch" params="" file="src/trilateral3/drawing/StyleSketch.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="trilateral3.drawing._StyleSketch.StyleSketch_Impl_" params="" file="src/trilateral3/drawing/StyleSketch.hx" private="1" module="trilateral3.drawing.StyleSketch" extern="1" final="1">
	<Tracer public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Tracer>
	<Base public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Base>
	<Crude public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Crude>
	<FillOnly public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FillOnly>
	<Fine public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Fine>
	<FineOverlap public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FineOverlap>
	<Medium public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Medium>
	<MediumOverlap public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumOverlap>
	<RoundEnd public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RoundEnd>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._StyleSketch.StyleSketch_Impl_" params="" file="src/trilateral3/drawing/StyleSketch.hx" private="1" module="trilateral3.drawing.StyleSketch" extern="1" final="1">
		<Tracer public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Tracer>
		<Base public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Base>
		<Crude public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Crude>
		<FillOnly public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FillOnly>
		<Fine public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Fine>
		<FineOverlap public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FineOverlap>
		<Medium public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Medium>
		<MediumOverlap public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumOverlap>
		<RoundEnd public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RoundEnd>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="trilateral3.drawing.TriangleAbstract" params="" file="src/trilateral3/drawing/TriangleAbstract.hx">
		<from><icast><t path="trilateral3.drawing.TriangleType"/></icast></from>
		<this><t path="trilateral3.drawing.TriangleType"/></this>
		<to><icast><t path="trilateral3.drawing.TriangleType"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.drawing._TriangleAbstract.TriangleAbstract_Impl_" params="" file="src/trilateral3/drawing/TriangleAbstract.hx" private="1" module="trilateral3.drawing.TriangleAbstract" final="1">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="triangleType">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="trilateral3.drawing.TriangleAbstract"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
	<get_bottom get="inline" set="null" line="9" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
</f></get_bottom>
	<back public="1" get="accessor" set="null" static="1"><x path="Float"/></back>
	<get_back get="inline" set="null" line="13" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
</f></get_back>
	<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
	<get_right get="inline" set="null" line="17" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
</f></get_right>
	<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
	<get_x get="inline" set="null" line="21" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
</f></get_x>
	<set_x get="inline" set="null" line="24" static="1"><f a="this:x_">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
	<get_y get="inline" set="null" line="28" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
</f></get_y>
	<set_y get="inline" set="null" line="31" static="1"><f a="this:y_">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<z public="1" get="accessor" set="accessor" static="1"><x path="Float"/></z>
	<get_z get="inline" set="null" line="35" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
</f></get_z>
	<set_z get="inline" set="null" line="38" static="1"><f a="this:z_">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._TriangleAbstract.TriangleAbstract_Impl_" params="" file="src/trilateral3/drawing/TriangleAbstract.hx" private="1" module="trilateral3.drawing.TriangleAbstract" final="1">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="triangleType">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="trilateral3.drawing.TriangleAbstract"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
		<get_bottom get="inline" set="null" line="9" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
</f></get_bottom>
		<back public="1" get="accessor" set="null" static="1"><x path="Float"/></back>
		<get_back get="inline" set="null" line="13" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
</f></get_back>
		<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
		<get_right get="inline" set="null" line="17" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
</f></get_right>
		<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
		<get_x get="inline" set="null" line="21" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
</f></get_x>
		<set_x get="inline" set="null" line="24" static="1"><f a="this:x_">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
		<get_y get="inline" set="null" line="28" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
</f></get_y>
		<set_y get="inline" set="null" line="31" static="1"><f a="this:y_">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<z public="1" get="accessor" set="accessor" static="1"><x path="Float"/></z>
		<get_z get="inline" set="null" line="35" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
</f></get_z>
		<set_z get="inline" set="null" line="38" static="1"><f a="this:z_">
	<t path="trilateral3.drawing.TriangleType"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
	</class>
	<abstract path="trilateral3.drawing.TriangleAbstractUV" params="" file="src/trilateral3/drawing/TriangleAbstractUV.hx">
		<from><icast><t path="trilateral3.drawing.TriangleTypeUV"/></icast></from>
		<this><t path="trilateral3.drawing.TriangleTypeUV"/></this>
		<to><icast><t path="trilateral3.drawing.TriangleTypeUV"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.drawing._TriangleAbstractUV.TriangleAbstractUV_Impl_" params="" file="src/trilateral3/drawing/TriangleAbstractUV.hx" private="1" module="trilateral3.drawing.TriangleAbstractUV" final="1">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="triangleTypeUV">
			<t path="trilateral3.drawing.TriangleTypeUV"/>
			<x path="trilateral3.drawing.TriangleAbstractUV"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<bottomV public="1" get="accessor" set="null" static="1"><x path="Float"/></bottomV>
	<get_bottomV get="inline" set="null" line="9" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleTypeUV"/>
	<x path="Float"/>
</f></get_bottomV>
	<rightU public="1" get="accessor" set="null" static="1"><x path="Float"/></rightU>
	<get_rightU get="inline" set="null" line="13" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleTypeUV"/>
	<x path="Float"/>
</f></get_rightU>
	<u public="1" get="accessor" set="accessor" static="1"><x path="Float"/></u>
	<get_u get="inline" set="null" line="17" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleTypeUV"/>
	<x path="Float"/>
</f></get_u>
	<set_u get="inline" set="null" line="20" static="1"><f a="this:u_">
	<t path="trilateral3.drawing.TriangleTypeUV"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_u>
	<v public="1" get="accessor" set="accessor" static="1"><x path="Float"/></v>
	<get_v get="inline" set="null" line="24" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleTypeUV"/>
	<x path="Float"/>
</f></get_v>
	<set_v get="inline" set="null" line="27" static="1"><f a="this:v_">
	<t path="trilateral3.drawing.TriangleTypeUV"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_v>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._TriangleAbstractUV.TriangleAbstractUV_Impl_" params="" file="src/trilateral3/drawing/TriangleAbstractUV.hx" private="1" module="trilateral3.drawing.TriangleAbstractUV" final="1">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="triangleTypeUV">
				<t path="trilateral3.drawing.TriangleTypeUV"/>
				<x path="trilateral3.drawing.TriangleAbstractUV"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<bottomV public="1" get="accessor" set="null" static="1"><x path="Float"/></bottomV>
		<get_bottomV get="inline" set="null" line="9" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleTypeUV"/>
	<x path="Float"/>
</f></get_bottomV>
		<rightU public="1" get="accessor" set="null" static="1"><x path="Float"/></rightU>
		<get_rightU get="inline" set="null" line="13" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleTypeUV"/>
	<x path="Float"/>
</f></get_rightU>
		<u public="1" get="accessor" set="accessor" static="1"><x path="Float"/></u>
		<get_u get="inline" set="null" line="17" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleTypeUV"/>
	<x path="Float"/>
</f></get_u>
		<set_u get="inline" set="null" line="20" static="1"><f a="this:u_">
	<t path="trilateral3.drawing.TriangleTypeUV"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_u>
		<v public="1" get="accessor" set="accessor" static="1"><x path="Float"/></v>
		<get_v get="inline" set="null" line="24" static="1"><f a="this">
	<t path="trilateral3.drawing.TriangleTypeUV"/>
	<x path="Float"/>
</f></get_v>
		<set_v get="inline" set="null" line="27" static="1"><f a="this:v_">
	<t path="trilateral3.drawing.TriangleTypeUV"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_v>
	</class>
	<typedef path="trilateral3.drawing.TriangleType" params="" file="src/trilateral3/drawing/TriangleType.hx"><a>
	<triangle><f a="ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></triangle>
	<transform><f a="">
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transform>
	<set_z set="method"><f a="z">
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
	<set_y set="method"><f a="y">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<set_x set="method"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<rotateTrig><f a="x:y:cos:sin">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
	<rotate><f a="x:y:theta">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<moveDelta><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
	<liteHit><f a="px:py">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
	<get_z set="method"><f a=""><x path="Float"/></f></get_z>
	<get_y set="method"><f a=""><x path="Float"/></f></get_y>
	<get_x set="method"><f a=""><x path="Float"/></f></get_x>
	<get_right set="method"><f a=""><x path="Float"/></f></get_right>
	<get_bottom set="method"><f a=""><x path="Float"/></f></get_bottom>
	<get_back set="method"><f a=""><x path="Float"/></f></get_back>
	<getTriangle3D><f a=""><c path="trilateral3.structure.Triangle3D"/></f></getTriangle3D>
	<fullHit><f a="px:py">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
</a></typedef>
	<typedef path="trilateral3.drawing.TriangleTypeUV" params="" file="src/trilateral3/drawing/TriangleTypeUV.hx"><a>
	<triangleUV><f a="au_:av_:bu_:bv_:cu_:cv_:?windAdjust_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></triangleUV>
	<set_v set="method"><f a="v_">
	<x path="Float"/>
	<x path="Float"/>
</f></set_v>
	<set_u set="method"><f a="u_">
	<x path="Float"/>
	<x path="Float"/>
</f></set_u>
	<moveDelta><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
	<get_v set="method"><f a=""><x path="Float"/></f></get_v>
	<get_u set="method"><f a=""><x path="Float"/></f></get_u>
	<get_rightU set="method"><f a=""><x path="Float"/></f></get_rightU>
	<get_bottomV set="method"><f a=""><x path="Float"/></f></get_bottomV>
	<getTriangleUV><f a=""><c path="trilateral3.structure.TriangleUV"/></f></getTriangleUV>
</a></typedef>
	<abstract path="trilateral3.geom.FlatArrayTriangles" params="" file="src/trilateral3/geom/FlatArrayTriangles.hx">
		<this><x path="hyperKitGL.io.ArrayColorTriangles"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="trilateral3.geom._FlatArrayTriangles.FlatArrayTriangles_Impl_" params="" file="src/trilateral3/geom/FlatArrayTriangles.hx" private="1" module="trilateral3.geom.FlatArrayTriangles" final="1">
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a=""><x path="trilateral3.geom.FlatArrayTriangles"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<transform public="1" set="method" line="36" static="1"><f a="this:m">
	<x path="hyperKitGL.io.ArrayColorTriangles"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transform>
	<transformAll public="1" set="method" line="54" static="1"><f a="this:m">
	<x path="hyperKitGL.io.ArrayColorTriangles"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transformAll>
	<transformRange public="1" set="method" line="62" static="1"><f a="this:m:startEnd">
	<x path="hyperKitGL.io.ArrayColorTriangles"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></transformRange>
	<getTriangle3D public="1" get="inline" set="null" line="73" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayColorTriangles"/>
	<c path="trilateral3.structure.Triangle3D"/>
</f></getTriangle3D>
	<getTriInt public="1" get="inline" set="null" line="80" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayColorTriangles"/>
	<c path="trilateral3.structure.TriInt"/>
</f></getTriInt>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.geom._FlatArrayTriangles.FlatArrayTriangles_Impl_" params="" file="src/trilateral3/geom/FlatArrayTriangles.hx" private="1" module="trilateral3.geom.FlatArrayTriangles" final="1">
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a=""><x path="trilateral3.geom.FlatArrayTriangles"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<transform public="1" set="method" line="36" static="1"><f a="this:m">
	<x path="hyperKitGL.io.ArrayColorTriangles"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transform>
		<transformAll public="1" set="method" line="54" static="1"><f a="this:m">
	<x path="hyperKitGL.io.ArrayColorTriangles"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transformAll>
		<transformRange public="1" set="method" line="62" static="1"><f a="this:m:startEnd">
	<x path="hyperKitGL.io.ArrayColorTriangles"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></transformRange>
		<getTriangle3D public="1" get="inline" set="null" line="73" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayColorTriangles"/>
	<c path="trilateral3.structure.Triangle3D"/>
</f></getTriangle3D>
		<getTriInt public="1" get="inline" set="null" line="80" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayColorTriangles"/>
	<c path="trilateral3.structure.TriInt"/>
</f></getTriInt>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.geom.FlatArrayTrianglesUV" params="" file="src/trilateral3/geom/FlatArrayTrianglesUV.hx">
		<from><icast><x path="hyperKitGL.io.ArrayColorTrianglesUV"/></icast></from>
		<this><x path="hyperKitGL.io.ArrayColorTrianglesUV"/></this>
		<to><icast><x path="hyperKitGL.io.ArrayColorTrianglesUV"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="trilateral3.geom._FlatArrayTrianglesUV.FlatArrayTrianglesUV_Impl_" params="" file="src/trilateral3/geom/FlatArrayTrianglesUV.hx" private="1" module="trilateral3.geom.FlatArrayTrianglesUV" final="1">
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a=""><x path="trilateral3.geom.FlatArrayTrianglesUV"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<transform public="1" set="method" line="36" static="1"><f a="this:m">
	<x path="hyperKitGL.io.ArrayColorTrianglesUV"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transform>
	<transformAll public="1" set="method" line="54" static="1"><f a="this:m">
	<x path="hyperKitGL.io.ArrayColorTrianglesUV"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transformAll>
	<transformRange public="1" set="method" line="62" static="1"><f a="this:m:startEnd">
	<x path="hyperKitGL.io.ArrayColorTrianglesUV"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></transformRange>
	<getTriangle3D public="1" get="inline" set="null" line="73" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayColorTrianglesUV"/>
	<c path="trilateral3.structure.Triangle3D"/>
</f></getTriangle3D>
	<getTriangleUV public="1" get="inline" set="null" line="80" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayColorTrianglesUV"/>
	<c path="trilateral3.structure.TriangleUV"/>
</f></getTriangleUV>
	<getTriInt public="1" get="inline" set="null" line="87" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayColorTrianglesUV"/>
	<c path="trilateral3.structure.TriInt"/>
</f></getTriInt>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.geom._FlatArrayTrianglesUV.FlatArrayTrianglesUV_Impl_" params="" file="src/trilateral3/geom/FlatArrayTrianglesUV.hx" private="1" module="trilateral3.geom.FlatArrayTrianglesUV" final="1">
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a=""><x path="trilateral3.geom.FlatArrayTrianglesUV"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<transform public="1" set="method" line="36" static="1"><f a="this:m">
	<x path="hyperKitGL.io.ArrayColorTrianglesUV"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transform>
		<transformAll public="1" set="method" line="54" static="1"><f a="this:m">
	<x path="hyperKitGL.io.ArrayColorTrianglesUV"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transformAll>
		<transformRange public="1" set="method" line="62" static="1"><f a="this:m:startEnd">
	<x path="hyperKitGL.io.ArrayColorTrianglesUV"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></transformRange>
		<getTriangle3D public="1" get="inline" set="null" line="73" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayColorTrianglesUV"/>
	<c path="trilateral3.structure.Triangle3D"/>
</f></getTriangle3D>
		<getTriangleUV public="1" get="inline" set="null" line="80" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayColorTrianglesUV"/>
	<c path="trilateral3.structure.TriangleUV"/>
</f></getTriangleUV>
		<getTriInt public="1" get="inline" set="null" line="87" static="1"><f a="this">
	<x path="hyperKitGL.io.ArrayColorTrianglesUV"/>
	<c path="trilateral3.structure.TriInt"/>
</f></getTriInt>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.geom.FlatColorTriangles" params="" file="src/trilateral3/geom/FlatColorTriangles.hx">
		<this><x path="hyperKitGL.io.FloatColorTriangles"/></this>
		<to><icast field="toArray"><x path="lime.utils.Float32Array"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_" params="" file="src/trilateral3/geom/FlatColorTriangles.hx" private="1" module="trilateral3.geom.FlatColorTriangles" final="1">
	<toArray public="1" get="inline" set="null" line="25" static="1">
		<f a="this">
			<x path="hyperKitGL.io.FloatColorTriangles"/>
			<t path="hyperKitGL.io.Float32Array"/>
		</f>
		<meta><m n=":to"/></meta>
	</toArray>
	<_new public="1" get="inline" set="null" line="29" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="trilateral3.geom.FlatColorTriangles"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<transform public="1" set="method" line="33" static="1"><f a="this:m">
	<x path="hyperKitGL.io.FloatColorTriangles"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transform>
	<transformAll public="1" set="method" line="51" static="1"><f a="this:m">
	<x path="hyperKitGL.io.FloatColorTriangles"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transformAll>
	<transformRange public="1" set="method" line="59" static="1"><f a="this:m:startEnd">
	<x path="hyperKitGL.io.FloatColorTriangles"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></transformRange>
	<getTriangle3D public="1" get="inline" set="null" line="70" static="1"><f a="this">
	<x path="hyperKitGL.io.FloatColorTriangles"/>
	<c path="trilateral3.structure.Triangle3D"/>
</f></getTriangle3D>
	<getTriInt public="1" get="inline" set="null" line="77" static="1"><f a="this">
	<x path="hyperKitGL.io.FloatColorTriangles"/>
	<c path="trilateral3.structure.TriInt"/>
</f></getTriInt>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_" params="" file="src/trilateral3/geom/FlatColorTriangles.hx" private="1" module="trilateral3.geom.FlatColorTriangles" final="1">
		<toArray public="1" get="inline" set="null" line="25" static="1">
			<f a="this">
				<x path="hyperKitGL.io.FloatColorTriangles"/>
				<t path="hyperKitGL.io.Float32Array"/>
			</f>
			<meta><m n=":to"/></meta>
		</toArray>
		<_new public="1" get="inline" set="null" line="29" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="trilateral3.geom.FlatColorTriangles"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<transform public="1" set="method" line="33" static="1"><f a="this:m">
	<x path="hyperKitGL.io.FloatColorTriangles"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transform>
		<transformAll public="1" set="method" line="51" static="1"><f a="this:m">
	<x path="hyperKitGL.io.FloatColorTriangles"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transformAll>
		<transformRange public="1" set="method" line="59" static="1"><f a="this:m:startEnd">
	<x path="hyperKitGL.io.FloatColorTriangles"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></transformRange>
		<getTriangle3D public="1" get="inline" set="null" line="70" static="1"><f a="this">
	<x path="hyperKitGL.io.FloatColorTriangles"/>
	<c path="trilateral3.structure.Triangle3D"/>
</f></getTriangle3D>
		<getTriInt public="1" get="inline" set="null" line="77" static="1"><f a="this">
	<x path="hyperKitGL.io.FloatColorTriangles"/>
	<c path="trilateral3.structure.TriInt"/>
</f></getTriInt>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.geom.FlatColorTrianglesUV" params="" file="src/trilateral3/geom/FlatColorTrianglesUV.hx">
		<from><icast><x path="hyperKitGL.io.FloatColorTrianglesUV"/></icast></from>
		<this><x path="hyperKitGL.io.FloatColorTrianglesUV"/></this>
		<to>
			<icast><x path="hyperKitGL.io.FloatColorTrianglesUV"/></icast>
			<icast field="toArray"><x path="lime.utils.Float32Array"/></icast>
		</to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="trilateral3.geom._FlatColorTrianglesUV.FlatColorTrianglesUV_Impl_" params="" file="src/trilateral3/geom/FlatColorTrianglesUV.hx" private="1" module="trilateral3.geom.FlatColorTrianglesUV" final="1">
	<toArray public="1" get="inline" set="null" line="26" static="1">
		<f a="this">
			<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
			<t path="hyperKitGL.io.Float32Array"/>
		</f>
		<meta><m n=":to"/></meta>
	</toArray>
	<_new public="1" get="inline" set="null" line="30" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="trilateral3.geom.FlatColorTrianglesUV"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<transform public="1" set="method" line="34" static="1"><f a="this:m">
	<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transform>
	<transformAll public="1" set="method" line="52" static="1"><f a="this:m">
	<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transformAll>
	<transformRange public="1" set="method" line="60" static="1"><f a="this:m:startEnd">
	<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></transformRange>
	<getTriangle3D public="1" get="inline" set="null" line="71" static="1"><f a="this">
	<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
	<c path="trilateral3.structure.Triangle3D"/>
</f></getTriangle3D>
	<getTriangleUV public="1" get="inline" set="null" line="78" static="1"><f a="this">
	<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
	<c path="trilateral3.structure.TriangleUV"/>
</f></getTriangleUV>
	<getTriInt public="1" get="inline" set="null" line="85" static="1"><f a="this">
	<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
	<c path="trilateral3.structure.TriInt"/>
</f></getTriInt>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.geom._FlatColorTrianglesUV.FlatColorTrianglesUV_Impl_" params="" file="src/trilateral3/geom/FlatColorTrianglesUV.hx" private="1" module="trilateral3.geom.FlatColorTrianglesUV" final="1">
		<toArray public="1" get="inline" set="null" line="26" static="1">
			<f a="this">
				<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
				<t path="hyperKitGL.io.Float32Array"/>
			</f>
			<meta><m n=":to"/></meta>
		</toArray>
		<_new public="1" get="inline" set="null" line="30" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="trilateral3.geom.FlatColorTrianglesUV"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<transform public="1" set="method" line="34" static="1"><f a="this:m">
	<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transform>
		<transformAll public="1" set="method" line="52" static="1"><f a="this:m">
	<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transformAll>
		<transformRange public="1" set="method" line="60" static="1"><f a="this:m:startEnd">
	<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></transformRange>
		<getTriangle3D public="1" get="inline" set="null" line="71" static="1"><f a="this">
	<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
	<c path="trilateral3.structure.Triangle3D"/>
</f></getTriangle3D>
		<getTriangleUV public="1" get="inline" set="null" line="78" static="1"><f a="this">
	<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
	<c path="trilateral3.structure.TriangleUV"/>
</f></getTriangleUV>
		<getTriInt public="1" get="inline" set="null" line="85" static="1"><f a="this">
	<x path="hyperKitGL.io.FloatColorTrianglesUV"/>
	<c path="trilateral3.structure.TriInt"/>
</f></getTriInt>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="trilateral3.geom._Transformer.Transformer_Fields_" params="" file="src/trilateral3/geom/Transformer.hx" private="1" module="trilateral3.geom.Transformer" final="1">
		<multiplyTransform public="1" get="inline" set="null" line="7" static="1"><f a="r:s">
	<c path="trilateral3.matrix.MatrixDozen"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></multiplyTransform>
		<transformVertex public="1" get="inline" set="null" line="18" static="1"><f a="v:t">
	<c path="trilateral3.matrix.Vertex"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<c path="trilateral3.matrix.Vertex"/>
</f></transformVertex>
		<unitTransform public="1" get="inline" set="null" line="26" static="1"><f a=""><c path="trilateral3.matrix.MatrixDozen"/></f></unitTransform>
	</class>
	<class path="trilateral3.math.Algebra" params="" file="src/trilateral3/math/Algebra.hx">
		<adjustWinding_ public="1" expr="adjustWinding">
			<f a="A_:B_:C_">
				<t path="trilateral3.structure.XY"/>
				<t path="trilateral3.structure.XY"/>
				<t path="trilateral3.structure.XY"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>adjustWinding</e></m></meta>
		</adjustWinding_>
		<minusXY_ public="1" expr="minusXY">
			<f a="a:b">
				<t path="trilateral3.structure.XY"/>
				<t path="trilateral3.structure.XY"/>
				<t path="trilateral3.structure.XY"/>
			</f>
			<meta><m n=":value"><e>minusXY</e></m></meta>
		</minusXY_>
		<sign_ public="1" expr="sign">
			<f a="n">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>sign</e></m></meta>
		</sign_>
		<quadCurve_ public="1" expr="quadCurve">
			<f a="p:ax:ay:bx:by:cx:cy">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>quadCurve</e></m></meta>
		</quadCurve_>
		<cubicCurve_ public="1" expr="cubicCurve">
			<f a="p:ax:ay:bx:by:cx:cy:dx:dy">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>cubicCurve</e></m></meta>
		</cubicCurve_>
		<calculateQuadStep_ public="1" expr="calculateQuadStep">
			<f a="ax:ay:bx:by:cx:cy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>calculateQuadStep</e></m></meta>
		</calculateQuadStep_>
		<calculateCubicStep_ public="1" expr="calculateCubicStep">
			<f a="ax:ay:bx:by:cx:cy:dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>calculateCubicStep</e></m></meta>
		</calculateCubicStep_>
		<lineAB_ public="1" expr="lineAB">
			<f a="A:B:width">
				<t path="trilateral3.structure.XY"/>
				<t path="trilateral3.structure.XY"/>
				<x path="Float"/>
				<c path="trilateral3.structure.Quad2D"/>
			</f>
			<meta><m n=":value"><e>lineAB</e></m></meta>
		</lineAB_>
		<lineABCoord_ public="1" expr="lineABCoord">
			<f a="ax:ay:bx:by:width">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="trilateral3.structure.Quad2D"/>
			</f>
			<meta><m n=":value"><e>lineABCoord</e></m></meta>
		</lineABCoord_>
		<rotateVectorLine_ public="1" expr="rotateVectorLine">
			<f a="pos:dim:omega:pivotX:pivotY">
				<t path="trilateral3.structure.XY"/>
				<t path="trilateral3.structure.XY"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="trilateral3.structure.Quad2D"/>
			</f>
			<meta><m n=":value"><e>rotateVectorLine</e></m></meta>
		</rotateVectorLine_>
		<pivotCheap_ public="1" expr="pivotCheap">
			<f a="p:sin:cos:pivotX:pivotY">
				<t path="trilateral3.structure.XY"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<t path="trilateral3.structure.XY"/>
			</f>
			<meta><m n=":value"><e>pivotCheap</e></m></meta>
		</pivotCheap_>
		<pivot_ public="1" expr="pivot">
			<f a="p:omega:pivotX:pivotY">
				<t path="trilateral3.structure.XY"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<t path="trilateral3.structure.XY"/>
			</f>
			<meta><m n=":value"><e>pivot</e></m></meta>
		</pivot_>
		<thetaCheap_ public="1" expr="thetaCheap">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>thetaCheap</e></m></meta>
		</thetaCheap_>
		<distCheap_ public="1" expr="distCheap">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>distCheap</e></m></meta>
		</distCheap_>
		<distance_ public="1" expr="distance">
			<f a="px:py:qx:qy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>distance</e></m></meta>
		</distance_>
		<quadraticThru_ public="1" expr="quadraticThru">
			<f a="t:s:c:e">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>quadraticThru</e></m></meta>
		</quadraticThru_>
		<quadratic_ public="1" expr="quadratic">
			<f a="t:s:c:e">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>quadratic</e></m></meta>
		</quadratic_>
		<quadSegment_ public="1" expr="quadSegment">
			<f a="t0:t1:s:c:e">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>quadSegment</e></m></meta>
		</quadSegment_>
		<cubic_ public="1" expr="cubic">
			<f a="t:s:c1:c2:e">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>cubic</e></m></meta>
		</cubic_>
		<perp_ public="1" expr="perp">
			<f a="a:b">
				<t path="trilateral3.structure.XY"/>
				<t path="trilateral3.structure.XY"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>perp</e></m></meta>
		</perp_>
		<new public="1" set="method" line="168">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="trilateral3.math._Algebra.Algebra_Fields_" params="" file="src/trilateral3/math/Algebra.hx" private="1" module="trilateral3.math.Algebra" final="1">
		<adjustWinding public="1" get="inline" set="null" line="7" static="1"><f a="A_:B_:C_">
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
	<x path="Bool"/>
</f></adjustWinding>
		<minusXY public="1" get="inline" set="null" line="14" static="1"><f a="a:b">
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
</f></minusXY>
		<sign public="1" get="inline" set="null" line="19" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<quadStep public="1" expr="0.03" line="22" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.03</e></m></meta>
		</quadStep>
		<quadCurve public="1" get="inline" set="null" line="25" static="1"><f a="p:ax:ay:bx:by:cx:cy">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
</f></quadCurve>
		<cubicStep public="1" get="inline" set="null" expr="0.03" line="41" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.03</e></m></meta>
		</cubicStep>
		<cubicCurve public="1" get="inline" set="null" line="44" static="1"><f a="p:ax:ay:bx:by:cx:cy:dx:dy">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
</f></cubicCurve>
		<calculateQuadStep public="1" get="inline" set="null" line="60" static="1"><f a="ax:ay:bx:by:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculateQuadStep>
		<calculateCubicStep public="1" get="inline" set="null" line="66" static="1"><f a="ax:ay:bx:by:cx:cy:dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculateCubicStep>
		<lineAB public="1" get="inline" set="null" line="73" static="1"><f a="A:B:width">
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
	<x path="Float"/>
	<c path="trilateral3.structure.Quad2D"/>
</f></lineAB>
		<lineABCoord public="1" get="inline" set="null" line="83" static="1"><f a="ax:ay:bx:by:width">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="trilateral3.structure.Quad2D"/>
</f></lineABCoord>
		<rotateVectorLine public="1" get="inline" set="null" line="92" static="1"><f a="pos:dim:omega:pivotX:pivotY">
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="trilateral3.structure.Quad2D"/>
</f></rotateVectorLine>
		<pivotCheap public="1" get="inline" set="null" line="114" static="1"><f a="p:sin:cos:pivotX:pivotY">
	<t path="trilateral3.structure.XY"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<t path="trilateral3.structure.XY"/>
</f></pivotCheap>
		<pivot public="1" get="inline" set="null" line="122" static="1"><f a="p:omega:pivotX:pivotY">
	<t path="trilateral3.structure.XY"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<t path="trilateral3.structure.XY"/>
</f></pivot>
		<thetaCheap public="1" get="inline" set="null" line="130" static="1"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaCheap>
		<distCheap public="1" get="inline" set="null" line="134" static="1"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distCheap>
		<distance public="1" get="inline" set="null" line="138" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distance>
		<quadraticThru public="1" get="inline" set="null" line="144" static="1"><f a="t:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadraticThru>
		<quadratic public="1" get="inline" set="null" line="149" static="1"><f a="t:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadratic>
		<quadSegment public="1" get="inline" set="null" line="154" static="1"><f a="t0:t1:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadSegment>
		<cubic public="1" get="inline" set="null" line="159" static="1"><f a="t:s:c1:c2:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cubic>
		<perp public="1" get="inline" set="null" line="164" static="1"><f a="a:b">
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
	<x path="Float"/>
</f></perp>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="trilateral3.matrix.MatrixDozen" params="" file="src/trilateral3/matrix/MatrixDozen.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<d public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</d>
		<e public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</e>
		<f public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</f>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<h public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</h>
		<i public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</i>
		<j public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</j>
		<k public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</k>
		<l public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</l>
		<values public="1" set="method" line="20"><f a=""><c path="String"/></f></values>
		<new set="method" line="12"><f a="a:b:c:d:e:f:g:h:i:j:k:l">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.matrix.UV" params="" file="src/trilateral3/matrix/UV.hx">
		<u public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</u>
		<v public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</v>
		<values public="1" set="method" line="55"><f a=""><c path="String"/></f></values>
		<new set="method" line="50"><f a="u:v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ u, v }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.matrix.Vertex" params="" file="src/trilateral3/matrix/Vertex.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<z public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</z>
		<w public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</w>
		<values public="1" set="method" line="25"><f a=""><c path="String"/></f></values>
		<clone public="1" set="method" line="28"><f a=""><c path="trilateral3.matrix.Vertex"/></f></clone>
		<new set="method" line="18">
			<f a="x:y:z:?w" v=":::1.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1. }</e></m></meta>
		</new>
		<haxe_doc>{ x, y, z, w }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.nodule.PenNodule" params="" file="src/trilateral3/nodule/PenNodule.hx" abstract="1">
		<largeEnough expr="50" line="18" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>50</e></m></meta>
		</largeEnough>
		<pen public="1"><c path="trilateral3.drawing.Pen"/></pen>
		<createPen abstract="1" public="1" set="method"><f a=""><c path="trilateral3.drawing.Pen"/></f></createPen>
		<data public="1" get="accessor" set="null"><t path="hyperKitGL.io.Float32Array"/></data>
		<get_data abstract="1" public="1" set="method"><f a=""><t path="hyperKitGL.io.Float32Array"/></f></get_data>
		<size public="1" get="accessor" set="null"><x path="Int"/></size>
		<get_size abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></get_size>
		<new public="1" set="method" line="20">
			<f a="?useGLScale" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useGLScale : true }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="trilateral3.nodule.PenArrColor" params="" file="src/trilateral3/nodule/PenArrColor.hx">
		<extends path="trilateral3.nodule.PenNodule"/>
		<colorTriangles public="1" expr="new FlatArrayTriangles()">
			<x path="trilateral3.geom.FlatArrayTriangles"/>
			<meta><m n=":value"><e>new FlatArrayTriangles()</e></m></meta>
		</colorTriangles>
		<createPen public="1" set="method" line="22" override="1"><f a=""><c path="trilateral3.drawing.Pen"/></f></createPen>
		<get_data public="1" get="inline" set="null" line="81" override="1"><f a=""><t path="hyperKitGL.io.Float32Array"/></f></get_data>
		<get_size public="1" get="inline" set="null" line="85" override="1"><f a=""><x path="Int"/></f></get_size>
		<new public="1" set="method" line="19">
			<f a="?useGLScale" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useGLScale : true }</e></m></meta>
		</new>
	</class>
	<class path="trilateral3.nodule.PenArrTexture" params="" file="src/trilateral3/nodule/PenArrTexture.hx">
		<extends path="trilateral3.nodule.PenNodule"/>
		<colorTriangles public="1" expr="new FlatArrayTrianglesUV()">
			<x path="trilateral3.geom.FlatArrayTrianglesUV"/>
			<meta><m n=":value"><e>new FlatArrayTrianglesUV()</e></m></meta>
		</colorTriangles>
		<createPen public="1" set="method" line="25" override="1"><f a=""><c path="trilateral3.drawing.Pen"/></f></createPen>
		<get_data public="1" get="inline" set="null" line="99" override="1"><f a=""><t path="hyperKitGL.io.Float32Array"/></f></get_data>
		<get_size public="1" get="inline" set="null" line="103" override="1"><f a=""><x path="Int"/></f></get_size>
		<new public="1" set="method" line="22">
			<f a="?useGLScale" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useGLScale : true }</e></m></meta>
		</new>
	</class>
	<class path="trilateral3.nodule.PenColor" params="" file="src/trilateral3/nodule/PenColor.hx">
		<extends path="trilateral3.nodule.PenNodule"/>
		<colorTriangles public="1" expr="new FlatColorTriangles(PenNodule.largeEnough)">
			<x path="trilateral3.geom.FlatColorTriangles"/>
			<meta><m n=":value"><e>new FlatColorTriangles(PenNodule.largeEnough)</e></m></meta>
		</colorTriangles>
		<createPen public="1" set="method" line="22" override="1"><f a=""><c path="trilateral3.drawing.Pen"/></f></createPen>
		<get_data public="1" get="inline" set="null" line="81" override="1"><f a=""><t path="hyperKitGL.io.Float32Array"/></f></get_data>
		<get_size public="1" get="inline" set="null" line="85" override="1"><f a=""><x path="Int"/></f></get_size>
		<new public="1" set="method" line="19">
			<f a="?useGLScale" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useGLScale : true }</e></m></meta>
		</new>
	</class>
	<class path="trilateral3.nodule.PenTexture" params="" file="src/trilateral3/nodule/PenTexture.hx">
		<extends path="trilateral3.nodule.PenNodule"/>
		<colorTriangles public="1" expr="new FlatColorTrianglesUV(PenNodule.largeEnough)">
			<x path="trilateral3.geom.FlatColorTrianglesUV"/>
			<meta><m n=":value"><e>new FlatColorTrianglesUV(PenNodule.largeEnough)</e></m></meta>
		</colorTriangles>
		<createPen public="1" set="method" line="25" override="1"><f a=""><c path="trilateral3.drawing.Pen"/></f></createPen>
		<get_data public="1" get="inline" set="null" line="99" override="1"><f a=""><t path="hyperKitGL.io.Float32Array"/></f></get_data>
		<get_size public="1" get="inline" set="null" line="103" override="1"><f a=""><x path="Int"/></f></get_size>
		<new public="1" set="method" line="22">
			<f a="?useGLScale" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useGLScale : true }</e></m></meta>
		</new>
	</class>
	<abstract path="trilateral3.reShape.DepthArray" params="T" file="src/trilateral3/reShape/DepthArray.hx">
		<from><icast><c path="Array"><c path="trilateral3.reShape.DepthArray.T"/></c></icast></from>
		<this><c path="Array"><c path="trilateral3.reShape.DepthArray.T"/></c></this>
		<to><icast><c path="Array"><c path="trilateral3.reShape.DepthArray.T"/></c></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.reShape._DepthArray.DepthArray_Impl_" params="" file="src/trilateral3/reShape/DepthArray.hx" private="1" module="trilateral3.reShape.DepthArray" final="1">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="arr">
			<c path="Array"><c path="trilateral3.reShape.DepthArray.T"/></c>
			<x path="trilateral3.reShape.DepthArray"><c path="trilateral3.reShape.DepthArray.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<rangeToEnd public="1" set="method" line="10" static="1"><f a="this:starting:totalLen">
	<c path="Array"><c path="trilateral3.reShape.DepthArray.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToEnd>
	<rangeToStart public="1" get="inline" set="null" line="31" static="1"><f a="this:starting:totalLen">
	<c path="Array"><c path="trilateral3.reShape.DepthArray.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToStart>
	<rangeSwap public="1" get="inline" set="null" line="58" static="1"><f a="this:start0:start1:totalLen">
	<c path="Array"><c path="trilateral3.reShape.DepthArray.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeSwap>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.reShape._DepthArray.DepthArray_Impl_" params="" file="src/trilateral3/reShape/DepthArray.hx" private="1" module="trilateral3.reShape.DepthArray" final="1">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="arr">
				<c path="Array"><c path="trilateral3.reShape.DepthArray.T"/></c>
				<x path="trilateral3.reShape.DepthArray"><c path="trilateral3.reShape.DepthArray.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<rangeToEnd public="1" set="method" line="10" static="1"><f a="this:starting:totalLen">
	<c path="Array"><c path="trilateral3.reShape.DepthArray.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToEnd>
		<rangeToStart public="1" get="inline" set="null" line="31" static="1"><f a="this:starting:totalLen">
	<c path="Array"><c path="trilateral3.reShape.DepthArray.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToStart>
		<rangeSwap public="1" get="inline" set="null" line="58" static="1"><f a="this:start0:start1:totalLen">
	<c path="Array"><c path="trilateral3.reShape.DepthArray.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeSwap>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="trilateral3.reShape.GradientGrid" params="" file="src/trilateral3/reShape/GradientGrid.hx">
		<radAdj public="1" get="inline" set="null" line="22" static="1"><f a="r">
	<x path="Float"/>
	<x path="Float"/>
</f></radAdj>
		<sin01 public="1" get="inline" set="null" line="26" static="1"><f a="r">
	<x path="Float"/>
	<x path="Float"/>
</f></sin01>
		<cos01 public="1" get="inline" set="null" line="30" static="1"><f a="r">
	<x path="Float"/>
	<x path="Float"/>
</f></cos01>
		<genColors public="1" get="inline" set="null" line="89" static="1"><f a="x:y:fRed:fGreen:fBlue">
	<x path="Float"/>
	<x path="Float"/>
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="trilateral3.color.ColorInt"/>
</f></genColors>
		<posMin public="1"><x path="Int"/></posMin>
		<pen public="1"><c path="trilateral3.drawing.Pen"/></pen>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<wid public="1"><x path="Float"/></wid>
		<hi public="1"><x path="Float"/></hi>
		<col public="1"><x path="Int"/></col>
		<row public="1"><x path="Int"/></row>
		<quadRange public="1"><x path="trilateral3.shape.IteratorRange"/></quadRange>
		<arrShaper public="1"><c path="Array"><c path="trilateral3.reShape.QuadShaper"/></c></arrShaper>
		<addGrid public="1" set="method" line="40"><f a="x:y:wid:hi:col:row:dX:dY:fRed:fGreen:fBlue">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="trilateral3.shape.IteratorRange"/>
</f></addGrid>
		<modifyColor public="1" set="method" line="100"><f a="dX:dY:fRed:fGreen:fBlue">
	<x path="Float"/>
	<x path="Float"/>
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="Void"/>
</f></modifyColor>
		<new public="1" set="method" line="18"><f a="pen_">
	<c path="trilateral3.drawing.Pen"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="trilateral3.reShape.NineSlice" params="" file="src/trilateral3/reShape/NineSlice.hx">
		<posMin public="1"><x path="Int"/></posMin>
		<pen public="1"><c path="trilateral3.drawing.Pen"/></pen>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<wid public="1"><x path="Float"/></wid>
		<hi public="1"><x path="Float"/></hi>
		<left public="1"><x path="Float"/></left>
		<top public="1"><x path="Float"/></top>
		<fat public="1"><x path="Float"/></fat>
		<tall public="1"><x path="Float"/></tall>
		<quadRange public="1"><x path="trilateral3.shape.IteratorRange"/></quadRange>
		<arrShaper public="1"><c path="Array"><c path="trilateral3.reShape.QuadShaper"/></c></arrShaper>
		<addSlices public="1" set="method" line="31"><f a="x:y:wid:hi:left:top:fat:tall:color">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addSlices>
		<rightW public="1" get="accessor" set="null"><x path="Float"/></rightW>
		<get_rightW get="inline" set="null" line="56"><f a=""><x path="Float"/></f></get_rightW>
		<bottomH public="1" get="accessor" set="null"><x path="Float"/></bottomH>
		<get_bottomH get="inline" set="null" line="60"><f a=""><x path="Float"/></f></get_bottomH>
		<leftX public="1" get="accessor" set="null"><x path="Float"/></leftX>
		<get_leftX get="inline" set="null" line="64"><f a=""><x path="Float"/></f></get_leftX>
		<topY public="1" get="accessor" set="null"><x path="Float"/></topY>
		<get_topY get="inline" set="null" line="68"><f a=""><x path="Float"/></f></get_topY>
		<rightX public="1" get="accessor" set="null"><x path="Float"/></rightX>
		<get_rightX get="inline" set="null" line="72"><f a=""><x path="Float"/></f></get_rightX>
		<bottomY public="1" get="accessor" set="null"><x path="Float"/></bottomY>
		<get_bottomY get="inline" set="null" line="76"><f a=""><x path="Float"/></f></get_bottomY>
		<update public="1" set="method" line="79"><f a=""><x path="Void"/></f></update>
		<modifyColors public="1" set="method" line="112"><f a="color0:color1:color2:color3:color4:color5:color6:color7:color8:color9:color10:color11:color12:color13:color14:color15">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></modifyColors>
		<dim public="1" set="method" line="149"><f a="w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></dim>
		<addEqualGrid public="1" set="method" line="207"><f a="x:y:wid:hi:color">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addEqualGrid>
		<new public="1" set="method" line="23"><f a="pen_">
	<c path="trilateral3.drawing.Pen"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="trilateral3.reShape.QuadDepth" params="" file="src/trilateral3/reShape/QuadDepth.hx">
		<pen public="1"><c path="trilateral3.drawing.Pen"/></pen>
		<space public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</space>
		<orderCount public="1" expr="new DepthArray(new Array&lt;Int&gt;())">
			<x path="trilateral3.reShape.DepthArray"><x path="Int"/></x>
			<meta><m n=":value"><e><![CDATA[new DepthArray(new Array<Int>())]]></e></m></meta>
		</orderCount>
		<depthPieces public="1" expr="new DepthArray(new Array&lt;QuadShaper&gt;())">
			<x path="trilateral3.reShape.DepthArray"><c path="trilateral3.reShape.QuadShaper"/></x>
			<meta><m n=":value"><e><![CDATA[new DepthArray(new Array<QuadShaper>())]]></e></m></meta>
		</depthPieces>
		<origPos public="1" expr="new Array&lt;XY&gt;()">
			<c path="Array"><t path="trilateral3.structure.XY"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<XY>()]]></e></m></meta>
		</origPos>
		<range public="1"><x path="trilateral3.shape.IteratorRange"/></range>
		<quadRange public="1"><x path="trilateral3.shape.IteratorRange"/></quadRange>
		<topLast public="1"><x path="Int"/></topLast>
		<last public="1"><x path="Int"/></last>
		<traceBegins public="1" set="method" line="22"><f a="w">
	<x path="Int"/>
	<x path="Void"/>
</f></traceBegins>
		<traceOrderCount public="1" set="method" line="36"><f a="w">
	<x path="Int"/>
	<x path="Void"/>
</f></traceOrderCount>
		<addQuad get="inline" set="null" line="54"><f a="dx:dy:w:h:u:v:col:row:count">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addQuad>
		<grid public="1" set="method" line="71"><f a="x:y:dw:dh:nW:nH:?onlyCreate">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></grid>
		<deltaXY public="1" set="method" line="103"><f a="id:dx:dy">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></deltaXY>
		<setXY public="1" set="method" line="110"><f a="id:x:y">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setXY>
		<getXY public="1" set="method" line="113"><f a="id">
	<x path="Int"/>
	<t path="trilateral3.structure.XY"/>
</f></getXY>
		<argbQuad public="1" set="method" line="116"><f a="id:argb">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></argbQuad>
		<alphaQuad public="1" set="method" line="119"><f a="id:alpha">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></alphaQuad>
		<hideQuad public="1" set="method" line="122"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></hideQuad>
		<showQuad public="1" set="method" line="125"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></showQuad>
		<fullHit public="1" set="method" line="129"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Int"/></c>
</f></fullHit>
		<getQuad public="1" set="method" line="144"><f a="countNo">
	<x path="Int"/>
	<c path="trilateral3.reShape.QuadShaper"/>
</f></getQuad>
		<depthIndex public="1" get="inline" set="null" line="148"><f a="countNo">
	<x path="Int"/>
	<x path="Int"/>
</f></depthIndex>
		<toTopCount public="1" set="method" line="152"><f a="countNo">
	<x path="Int"/>
	<x path="Void"/>
</f></toTopCount>
		<getLast public="1" set="method" line="157"><f a=""><x path="Int"/></f></getLast>
		<getPenultimate public="1" set="method" line="161"><f a=""><x path="Int"/></f></getPenultimate>
		<swap public="1" set="method" line="166"><f a="pieceNo0:pieceNo1">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swap>
		<toTop public="1" set="method" line="175"><f a="pieceNo">
	<x path="Int"/>
	<x path="Void"/>
</f></toTop>
		<justLocalTop public="1" set="method" line="184"><f a="countNo">
	<x path="Int"/>
	<x path="Void"/>
</f></justLocalTop>
		<toBottomCount public="1" set="method" line="191"><f a="countNo">
	<x path="Int"/>
	<x path="Void"/>
</f></toBottomCount>
		<toBottom public="1" set="method" line="196"><f a="pieceNo">
	<x path="Int"/>
	<x path="Void"/>
</f></toBottom>
		<setStart get="inline" set="null" line="205"><f a="v:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="trilateral3.shape.IteratorRange"/>
</f></setStart>
		<setEnd get="inline" set="null" line="209"><f a="v:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="trilateral3.shape.IteratorRange"/>
</f></setEnd>
		<swapInternal get="inline" set="null" line="213"><f a="v0:v1:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swapInternal>
		<updateStarts set="method" line="217"><f a=""><x path="Void"/></f></updateStarts>
		<new public="1" set="method" line="17"><f a="pen_">
	<c path="trilateral3.drawing.Pen"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="trilateral3.reShape.QuadShaper" params="" file="src/trilateral3/reShape/QuadShaper.hx">
		<tri><c path="trilateral3.reShape.TrianglesShaper"/></tri>
		<pen><c path="trilateral3.drawing.Pen"/></pen>
		<lastXY public="1"><t path="trilateral3.structure.XY"/></lastXY>
		<lastUV public="1"><t path="trilateral3.structure.XY"/></lastUV>
		<oldStart><x path="Float"/></oldStart>
		<start><x path="Float"/></start>
		<startU public="1"><x path="Float"/></startU>
		<startV public="1"><x path="Float"/></startV>
		<width public="1"><x path="Float"/></width>
		<height public="1"><x path="Float"/></height>
		<name public="1"><c path="String"/></name>
		<drawQuadStart public="1" set="method" line="29"><f a="u:v:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></drawQuadStart>
		<drawQuad public="1" set="method" line="39"><f a="u:v:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></drawQuad>
		<dim public="1" set="method" line="50"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></dim>
		<dim_ public="1" set="method" line="80"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></dim_>
		<rook_90 public="1" set="method" line="165"><f a=""><x path="Void"/></f></rook_90>
		<rook90 public="1" set="method" line="168"><f a=""><x path="Void"/></f></rook90>
		<rotateLockTopLeft public="1" set="method" line="172"><f a="theta">
	<x path="Float"/>
	<x path="Void"/>
</f></rotateLockTopLeft>
		<rotateFromCentre public="1" set="method" line="201"><f a="dx:dy:theta">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateFromCentre>
		<getDeltaAX public="1" set="method" line="212"><f a="ax:ay">
	<x path="Float"/>
	<x path="Float"/>
	<a>
		<y><x path="Float"/></y>
		<x><x path="Float"/></x>
	</a>
</f></getDeltaAX>
		<drawQuadColors public="1" set="method" line="227">
			<f a="u:v:w:h:?colorA:?colorB:?colorC:?colorD" v="::::-1:-1:-1:-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ colorD : -1, colorC : -1, colorB : -1, colorA : -1 }</e></m></meta>
		</drawQuadColors>
		<modifyQuadColors public="1" set="method" line="231">
			<f a="?colorA:?colorB:?colorC:?colorD" v="-1:-1:-1:-1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ colorD : -1, colorC : -1, colorB : -1, colorA : -1 }</e></m></meta>
		</modifyQuadColors>
		<begin public="1" get="accessor" set="accessor"><x path="Int"/></begin>
		<get_begin get="inline" set="null" line="239"><f a=""><x path="Int"/></f></get_begin>
		<set_begin get="inline" set="null" line="243"><f a="val">
	<x path="Int"/>
	<x path="Int"/>
</f></set_begin>
		<fullHit public="1" set="method" line="257"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
		<visible public="1" get="null" set="accessor"><x path="Bool"/></visible>
		<set_visible get="inline" set="null" line="267"><f a="val">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<alpha public="1" get="null" set="accessor"><x path="Float"/></alpha>
		<set_alpha get="inline" set="null" line="283"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
		<argb public="1" get="null" set="accessor"><x path="Int"/></argb>
		<set_argb get="inline" set="null" line="292"><f a="col">
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
		<x public="1" get="accessor" set="accessor"><x path="Float"/></x>
		<get_x get="inline" set="null" line="300"><f a=""><x path="Float"/></f></get_x>
		<set_x get="inline" set="null" line="304"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor"><x path="Float"/></y>
		<get_y get="inline" set="null" line="310"><f a=""><x path="Float"/></f></get_y>
		<set_y get="inline" set="null" line="314"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<xy public="1" get="accessor" set="accessor"><t path="trilateral3.structure.XY"/></xy>
		<get_xy get="inline" set="null" line="320"><f a=""><t path="trilateral3.structure.XY"/></f></get_xy>
		<set_xy get="inline" set="null" line="324"><f a="val">
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
</f></set_xy>
		<xy0 public="1" get="accessor" set="accessor"><c path="trilateral3.structure.XY0"/></xy0>
		<get_xy0 get="inline" set="null" line="339"><f a=""><c path="trilateral3.structure.XY0"/></f></get_xy0>
		<set_xy0 get="inline" set="null" line="343"><f a="val">
	<c path="trilateral3.structure.XY0"/>
	<c path="trilateral3.structure.XY0"/>
</f></set_xy0>
		<xy1 public="1" get="accessor" set="accessor"><t path="trilateral3.structure.XY"/></xy1>
		<get_xy1 get="inline" set="null" line="356"><f a=""><t path="trilateral3.structure.XY"/></f></get_xy1>
		<set_xy1 get="inline" set="null" line="359"><f a="val">
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
</f></set_xy1>
		<xy2 public="1" get="accessor" set="accessor"><t path="trilateral3.structure.XY"/></xy2>
		<get_xy2 get="inline" set="null" line="372"><f a=""><t path="trilateral3.structure.XY"/></f></get_xy2>
		<set_xy2 get="inline" set="null" line="375"><f a="val">
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
</f></set_xy2>
		<uv public="1" get="accessor" set="accessor"><t path="trilateral3.structure.XY"/></uv>
		<get_uv get="inline" set="null" line="388"><f a=""><t path="trilateral3.structure.XY"/></f></get_uv>
		<set_uv get="inline" set="null" line="392"><f a="val">
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
</f></set_uv>
		<updatePos public="1" set="method" line="432"><f a=""><x path="Void"/></f></updatePos>
		<new public="1" set="method" line="23">
			<f a="pen:?start:?wid:?hi" v=":-1.:1000:1000">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ hi : 1000, wid : 1000, start : -1. }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="trilateral3.reShape.RangeShaper" params="" file="src/trilateral3/reShape/RangeShaper.hx">
		<tri><c path="trilateral3.reShape.TrianglesShaper"/></tri>
		<pen><c path="trilateral3.drawing.Pen"/></pen>
		<range public="1"><x path="trilateral3.shape.IteratorRange"/></range>
		<px expr="10000000000">
			<x path="Float"/>
			<meta><m n=":value"><e>10000000000</e></m></meta>
		</px>
		<py expr="10000000000">
			<x path="Float"/>
			<meta><m n=":value"><e>10000000000</e></m></meta>
		</py>
		<pu expr="10000000000">
			<x path="Float"/>
			<meta><m n=":value"><e>10000000000</e></m></meta>
		</pu>
		<pv expr="10000000000">
			<x path="Float"/>
			<meta><m n=":value"><e>10000000000</e></m></meta>
		</pv>
		<lastXY public="1"><t path="trilateral3.structure.XY"/></lastXY>
		<lastUV public="1"><t path="trilateral3.structure.XY"/></lastUV>
		<oldStart><x path="Int"/></oldStart>
		<start><x path="Int"/></start>
		<name public="1"><c path="String"/></name>
		<begin public="1" get="accessor" set="accessor"><x path="Int"/></begin>
		<get_begin get="inline" set="null" line="42"><f a=""><x path="Int"/></f></get_begin>
		<set_begin get="inline" set="null" line="46"><f a="val">
	<x path="Int"/>
	<x path="Int"/>
</f></set_begin>
		<fullHit public="1" set="method" line="54"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Int"/></c>
</f></fullHit>
		<visible public="1" get="null" set="accessor"><x path="Bool"/></visible>
		<set_visible get="inline" set="null" line="68"><f a="val">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<alpha public="1" get="null" set="accessor"><x path="Float"/></alpha>
		<set_alpha get="inline" set="null" line="84"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
		<argb public="1" get="null" set="accessor"><x path="Int"/></argb>
		<set_argb get="inline" set="null" line="93"><f a="col">
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
		<setColor public="1" set="method" line="100"><f a="col">
	<x path="Int"/>
	<x path="Void"/>
</f></setColor>
		<xy public="1" get="accessor" set="accessor"><t path="trilateral3.structure.XY"/></xy>
		<get_xy get="inline" set="null" line="107"><f a=""><t path="trilateral3.structure.XY"/></f></get_xy>
		<set_xy get="inline" set="null" line="110"><f a="xy">
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
</f></set_xy>
		<uv public="1" get="accessor" set="accessor"><t path="trilateral3.structure.XY"/></uv>
		<get_uv get="inline" set="null" line="124"><f a=""><t path="trilateral3.structure.XY"/></f></get_uv>
		<set_uv get="inline" set="null" line="127"><f a="xy">
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
</f></set_uv>
		<rotateAbout public="1" set="method" line="141"><f a="ax:ay:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateAbout>
		<new public="1" set="method" line="24">
			<f a="pen:iteratorRange:?wid:?hi" v="::1000:1000">
				<c path="trilateral3.drawing.Pen"/>
				<x path="trilateral3.shape.IteratorRange"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ hi : 1000, wid : 1000 }</e></m></meta>
		</new>
	</class>
	<class path="trilateral3.reShape.TrianglesShaper" params="" file="src/trilateral3/reShape/TrianglesShaper.hx">
		<pen><c path="trilateral3.drawing.Pen"/></pen>
		<hi><x path="Float"/></hi>
		<wid><x path="Float"/></wid>
		<curr public="1"><x path="trilateral3.drawing.TriangleAbstract"/></curr>
		<currUV public="1"><x path="trilateral3.drawing.TriangleAbstractUV"/></currUV>
		<curr3color public="1"><x path="trilateral3.drawing.Color3Abstract"/></curr3color>
		<start><x path="Int"/></start>
		<fullHit public="1" set="method" line="30"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
		<liteHit public="1" set="method" line="35"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
		<hide public="1" set="method" line="40"><f a=""><x path="Void"/></f></hide>
		<show public="1" set="method" line="43"><f a=""><x path="Void"/></f></show>
		<alpha public="1" get="null" set="accessor"><x path="Float"/></alpha>
		<set_alpha get="inline" set="null" line="48"><f a="val">
	<x path="Float"/>
	<x path="Int"/>
</f></set_alpha>
		<argb public="1" get="accessor" set="accessor"><x path="Int"/></argb>
		<_argb expr="0xFFFFFFFF">
			<x path="Int"/>
			<meta><m n=":value"><e>0xFFFFFFFF</e></m></meta>
		</_argb>
		<set_argb get="inline" set="null" line="57"><f a="col">
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
		<get_argb get="inline" set="null" line="63"><f a=""><x path="Int"/></f></get_argb>
		<rotateCentre2 public="1" set="method" line="67"><f a="vx:vy:ax:ay:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateCentre2>
		<rotateCentre public="1" set="method" line="71"><f a="vx:vy:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateCentre>
		<toGLx get="inline" set="null" line="75"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></toGLx>
		<toGLy get="inline" set="null" line="79"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></toGLy>
		<fromGLx get="inline" set="null" line="83"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></fromGLx>
		<fromGLy get="inline" set="null" line="87"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></fromGLy>
		<xy0 public="1" get="accessor" set="accessor"><c path="trilateral3.structure.XY0"/></xy0>
		<get_xy0 get="inline" set="null" line="92"><f a=""><c path="trilateral3.structure.XY0"/></f></get_xy0>
		<set_xy0 get="inline" set="null" line="96"><f a="val">
	<c path="trilateral3.structure.XY0"/>
	<c path="trilateral3.structure.XY0"/>
</f></set_xy0>
		<xy1 public="1" get="accessor" set="accessor"><t path="trilateral3.structure.XY"/></xy1>
		<get_xy1 get="inline" set="null" line="103"><f a=""><t path="trilateral3.structure.XY"/></f></get_xy1>
		<set_xy1 get="inline" set="null" line="107"><f a="val">
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
</f></set_xy1>
		<xy2 public="1" get="accessor" set="accessor"><t path="trilateral3.structure.XY"/></xy2>
		<get_xy2 get="inline" set="null" line="112"><f a=""><t path="trilateral3.structure.XY"/></f></get_xy2>
		<set_xy2 get="inline" set="null" line="116"><f a="val">
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
</f></set_xy2>
		<xy public="1" get="accessor" set="accessor"><t path="trilateral3.structure.XY"/></xy>
		<get_xy get="inline" set="null" line="121"><f a=""><t path="trilateral3.structure.XY"/></f></get_xy>
		<set_xy get="inline" set="null" line="125"><f a="xy">
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
</f></set_xy>
		<x public="1" get="accessor" set="accessor"><x path="Float"/></x>
		<get_x get="inline" set="null" line="132"><f a=""><x path="Float"/></f></get_x>
		<set_x get="inline" set="null" line="136"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor"><x path="Float"/></y>
		<get_y get="inline" set="null" line="143"><f a=""><x path="Float"/></f></get_y>
		<set_y get="inline" set="null" line="147"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<z public="1" get="accessor" set="accessor"><x path="Float"/></z>
		<get_z get="inline" set="null" line="154"><f a=""><x path="Float"/></f></get_z>
		<set_z get="inline" set="null" line="158"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
		<right public="1" get="accessor" set="null"><x path="Float"/></right>
		<get_right get="inline" set="null" line="164"><f a=""><x path="Float"/></f></get_right>
		<bottom public="1" get="accessor" set="null"><x path="Float"/></bottom>
		<get_bottom get="inline" set="null" line="169"><f a=""><x path="Float"/></f></get_bottom>
		<fromGL public="1" get="inline" set="null" line="173"><f a="v">
	<c path="trilateral3.matrix.Vertex"/>
	<c path="trilateral3.matrix.Vertex"/>
</f></fromGL>
		<toGL public="1" get="inline" set="null" line="180"><f a="v">
	<c path="trilateral3.matrix.Vertex"/>
	<c path="trilateral3.matrix.Vertex"/>
</f></toGL>
		<fromGLTriangle public="1" get="inline" set="null" line="187"><f a="t">
	<c path="trilateral3.structure.Triangle3D"/>
	<c path="trilateral3.structure.Triangle3D"/>
</f></fromGLTriangle>
		<toGLTriangle public="1" get="inline" set="null" line="191"><f a="t">
	<c path="trilateral3.structure.Triangle3D"/>
	<c path="trilateral3.structure.Triangle3D"/>
</f></toGLTriangle>
		<tri3D public="1" get="inline" set="null" line="195"><f a=""><c path="trilateral3.structure.Triangle3D"/></f></tri3D>
		<uv public="1" get="accessor" set="accessor"><t path="trilateral3.structure.XY"/></uv>
		<get_uv get="inline" set="null" line="214"><f a=""><t path="trilateral3.structure.XY"/></f></get_uv>
		<set_uv get="inline" set="null" line="218"><f a="xy">
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
</f></set_uv>
		<u public="1" get="accessor" set="accessor"><x path="Float"/></u>
		<get_u get="inline" set="null" line="225"><f a=""><x path="Float"/></f></get_u>
		<set_u get="inline" set="null" line="229"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_u>
		<v public="1" get="accessor" set="accessor"><x path="Float"/></v>
		<get_v get="inline" set="null" line="236"><f a=""><x path="Float"/></f></get_v>
		<set_v get="inline" set="null" line="240"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_v>
		<new public="1" set="method" line="15">
			<f a="pen:?wid:?hi" v=":1000:1000">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ hi : 1000, wid : 1000 }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.shape.IndexRange" params="" file="src/trilateral3/shape/IndexRange.hx">
		<from><icast><c path="trilateral3.structure.StartEnd"/></icast></from>
		<this><c path="trilateral3.structure.StartEnd"/></this>
		<to><icast><c path="trilateral3.structure.StartEnd"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.shape._IndexRange.IndexRange_Impl_" params="" file="src/trilateral3/shape/IndexRange.hx" private="1" module="trilateral3.shape.IndexRange" final="1">
	<_new public="1" set="method" line="5" static="1">
		<f a="startEnd">
			<c path="trilateral3.structure.StartEnd"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<adding public="1" get="inline" set="null" line="7" static="1">
		<f a="a:b">
			<x path="trilateral3.shape.IndexRange"/>
			<x path="trilateral3.shape.IndexRange"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</adding>
	<add public="1" get="inline" set="null" line="11" static="1"><f a="this:b">
	<c path="trilateral3.structure.StartEnd"/>
	<c path="trilateral3.structure.StartEnd"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></add>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<get_length get="inline" set="null" line="19" static="1"><f a="this">
	<c path="trilateral3.structure.StartEnd"/>
	<x path="Int"/>
</f></get_length>
	<contains public="1" get="inline" set="null" line="23" static="1"><f a="this:v">
	<c path="trilateral3.structure.StartEnd"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
	<isWithin public="1" get="inline" set="null" line="27" static="1"><f a="this:ir">
	<c path="trilateral3.structure.StartEnd"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Bool"/>
</f></isWithin>
	<moveRange public="1" get="inline" set="null" line="31" static="1"><f a="this:v">
	<c path="trilateral3.structure.StartEnd"/>
	<x path="Int"/>
	<x path="Void"/>
</f></moveRange>
	<ifContainMove public="1" get="inline" set="null" line="36" static="1"><f a="this:v:amount">
	<c path="trilateral3.structure.StartEnd"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></ifContainMove>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.shape._IndexRange.IndexRange_Impl_" params="" file="src/trilateral3/shape/IndexRange.hx" private="1" module="trilateral3.shape.IndexRange" final="1">
		<_new public="1" set="method" line="5" static="1">
			<f a="startEnd">
				<c path="trilateral3.structure.StartEnd"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<adding public="1" get="inline" set="null" line="7" static="1">
			<f a="a:b">
				<x path="trilateral3.shape.IndexRange"/>
				<x path="trilateral3.shape.IndexRange"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</adding>
		<add public="1" get="inline" set="null" line="11" static="1"><f a="this:b">
	<c path="trilateral3.structure.StartEnd"/>
	<c path="trilateral3.structure.StartEnd"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></add>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<get_length get="inline" set="null" line="19" static="1"><f a="this">
	<c path="trilateral3.structure.StartEnd"/>
	<x path="Int"/>
</f></get_length>
		<contains public="1" get="inline" set="null" line="23" static="1"><f a="this:v">
	<c path="trilateral3.structure.StartEnd"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
		<isWithin public="1" get="inline" set="null" line="27" static="1"><f a="this:ir">
	<c path="trilateral3.structure.StartEnd"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Bool"/>
</f></isWithin>
		<moveRange public="1" get="inline" set="null" line="31" static="1"><f a="this:v">
	<c path="trilateral3.structure.StartEnd"/>
	<x path="Int"/>
	<x path="Void"/>
</f></moveRange>
		<ifContainMove public="1" get="inline" set="null" line="36" static="1"><f a="this:v:amount">
	<c path="trilateral3.structure.StartEnd"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></ifContainMove>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="trilateral3.shape.IntIterStart" params="" file="src/trilateral3/shape/IteratorRange.hx" module="trilateral3.shape.IteratorRange">
		<start public="1"><x path="Int"/></start>
		<max public="1"><x path="Int"/></max>
		<new public="1" set="method" line="7"><f a="min_:max_">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="trilateral3.shape.IteratorRange" params="" file="src/trilateral3/shape/IteratorRange.hx">
		<from>
			<icast><c path="trilateral3.shape.IntIterStart"/></icast>
			<icast field="fromIterator"><c path="IntIterator"/></icast>
		</from>
		<this><c path="trilateral3.shape.IntIterStart"/></this>
		<to><icast field="toIterStart"><x path="trilateral3.shape.IteratorRange"/></icast></to>
		<meta>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
			<m n=":forward"/>
		</meta>
		<impl><class path="trilateral3.shape._IteratorRange.IteratorRange_Impl_" params="" file="src/trilateral3/shape/IteratorRange.hx" private="1" module="trilateral3.shape.IteratorRange" final="1">
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="min:max">
			<x path="Int"/>
			<x path="Int"/>
			<x path="trilateral3.shape.IteratorRange"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromIterator public="1" get="inline" set="null" line="21" static="1">
		<f a="ii">
			<c path="IntIterator"/>
			<x path="trilateral3.shape.IteratorRange"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromIterator>
	<toIterStart set="method" line="25" static="1">
		<f a="this">
			<c path="trilateral3.shape.IntIterStart"/>
			<x path="trilateral3.shape.IteratorRange"/>
		</f>
		<meta><m n=":to"/></meta>
	</toIterStart>
	<iterator public="1" get="inline" set="null" line="28" static="1"><f a="this">
	<c path="trilateral3.shape.IntIterStart"/>
	<c path="IntIterator"/>
</f></iterator>
	<adding public="1" get="inline" set="null" line="32" static="1">
		<f a="a:b">
			<x path="trilateral3.shape.IteratorRange"/>
			<x path="trilateral3.shape.IteratorRange"/>
			<x path="trilateral3.shape.IteratorRange"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</adding>
	<add public="1" get="inline" set="null" line="36" static="1"><f a="this:b">
	<c path="trilateral3.shape.IntIterStart"/>
	<x path="trilateral3.shape.IteratorRange"/>
	<x path="trilateral3.shape.IteratorRange"/>
</f></add>
	<length public="1" get="accessor" set="accessor" static="1"><x path="Int"/></length>
	<get_length get="inline" set="null" line="44" static="1"><f a="this">
	<c path="trilateral3.shape.IntIterStart"/>
	<x path="Int"/>
</f></get_length>
	<set_length get="inline" set="null" line="48" static="1"><f a="this:l">
	<c path="trilateral3.shape.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_length>
	<contains public="1" get="inline" set="null" line="53" static="1"><f a="this:v">
	<c path="trilateral3.shape.IntIterStart"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
	<isWithin public="1" get="inline" set="null" line="57" static="1"><f a="this:ir">
	<c path="trilateral3.shape.IntIterStart"/>
	<x path="trilateral3.shape.IteratorRange"/>
	<x path="Bool"/>
</f></isWithin>
	<moveRange public="1" get="inline" set="null" line="61" static="1"><f a="this:v">
	<c path="trilateral3.shape.IntIterStart"/>
	<x path="Int"/>
	<x path="Void"/>
</f></moveRange>
	<addAssign public="1" get="inline" set="null" line="67" static="1">
		<f a="a:v">
			<x path="trilateral3.shape.IteratorRange"/>
			<x path="Int"/>
			<x path="trilateral3.shape.IteratorRange"/>
		</f>
		<meta><m n=":op"><e>A += B</e></m></meta>
	</addAssign>
	<minusAssign public="1" get="inline" set="null" line="73" static="1">
		<f a="a:v">
			<x path="trilateral3.shape.IteratorRange"/>
			<x path="Int"/>
			<x path="trilateral3.shape.IteratorRange"/>
		</f>
		<meta><m n=":op"><e>A -= B</e></m></meta>
	</minusAssign>
	<ifContainMove public="1" get="inline" set="null" line="77" static="1"><f a="this:v:amount">
	<c path="trilateral3.shape.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></ifContainMove>
	<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.shape._IteratorRange.IteratorRange_Impl_" params="" file="src/trilateral3/shape/IteratorRange.hx" private="1" module="trilateral3.shape.IteratorRange" final="1">
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="trilateral3.shape.IteratorRange"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromIterator public="1" get="inline" set="null" line="21" static="1">
			<f a="ii">
				<c path="IntIterator"/>
				<x path="trilateral3.shape.IteratorRange"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromIterator>
		<toIterStart set="method" line="25" static="1">
			<f a="this">
				<c path="trilateral3.shape.IntIterStart"/>
				<x path="trilateral3.shape.IteratorRange"/>
			</f>
			<meta><m n=":to"/></meta>
		</toIterStart>
		<iterator public="1" get="inline" set="null" line="28" static="1"><f a="this">
	<c path="trilateral3.shape.IntIterStart"/>
	<c path="IntIterator"/>
</f></iterator>
		<adding public="1" get="inline" set="null" line="32" static="1">
			<f a="a:b">
				<x path="trilateral3.shape.IteratorRange"/>
				<x path="trilateral3.shape.IteratorRange"/>
				<x path="trilateral3.shape.IteratorRange"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</adding>
		<add public="1" get="inline" set="null" line="36" static="1"><f a="this:b">
	<c path="trilateral3.shape.IntIterStart"/>
	<x path="trilateral3.shape.IteratorRange"/>
	<x path="trilateral3.shape.IteratorRange"/>
</f></add>
		<length public="1" get="accessor" set="accessor" static="1"><x path="Int"/></length>
		<get_length get="inline" set="null" line="44" static="1"><f a="this">
	<c path="trilateral3.shape.IntIterStart"/>
	<x path="Int"/>
</f></get_length>
		<set_length get="inline" set="null" line="48" static="1"><f a="this:l">
	<c path="trilateral3.shape.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_length>
		<contains public="1" get="inline" set="null" line="53" static="1"><f a="this:v">
	<c path="trilateral3.shape.IntIterStart"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
		<isWithin public="1" get="inline" set="null" line="57" static="1"><f a="this:ir">
	<c path="trilateral3.shape.IntIterStart"/>
	<x path="trilateral3.shape.IteratorRange"/>
	<x path="Bool"/>
</f></isWithin>
		<moveRange public="1" get="inline" set="null" line="61" static="1"><f a="this:v">
	<c path="trilateral3.shape.IntIterStart"/>
	<x path="Int"/>
	<x path="Void"/>
</f></moveRange>
		<addAssign public="1" get="inline" set="null" line="67" static="1">
			<f a="a:v">
				<x path="trilateral3.shape.IteratorRange"/>
				<x path="Int"/>
				<x path="trilateral3.shape.IteratorRange"/>
			</f>
			<meta><m n=":op"><e>A += B</e></m></meta>
		</addAssign>
		<minusAssign public="1" get="inline" set="null" line="73" static="1">
			<f a="a:v">
				<x path="trilateral3.shape.IteratorRange"/>
				<x path="Int"/>
				<x path="trilateral3.shape.IteratorRange"/>
			</f>
			<meta><m n=":op"><e>A -= B</e></m></meta>
		</minusAssign>
		<ifContainMove public="1" get="inline" set="null" line="77" static="1"><f a="this:v:amount">
	<c path="trilateral3.shape.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></ifContainMove>
		<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
	</class>
	<abstract path="trilateral3.shape.PolyEdge" params="" file="src/trilateral3/shape/PolyEdge.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="trilateral3.shape._PolyEdge.PolyEdge_Impl_" params="" file="src/trilateral3/shape/PolyEdge.hx" private="1" module="trilateral3.shape.PolyEdge" extern="1" final="1">
	<triangle public="1" get="inline" set="null" expr="cast 3" line="3" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</triangle>
	<quadrilateral public="1" get="inline" set="null" expr="cast 4" line="4" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</quadrilateral>
	<tetragon public="1" get="inline" set="null" expr="cast 4" line="6" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</tetragon>
	<pentagon public="1" get="inline" set="null" expr="cast 5" line="7" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</pentagon>
	<hexagon public="1" get="inline" set="null" expr="cast 6" line="8" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</hexagon>
	<heptagon public="1" get="inline" set="null" expr="cast 7" line="9" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</heptagon>
	<septagon public="1" get="inline" set="null" expr="cast 7" line="10" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</septagon>
	<octagon public="1" get="inline" set="null" expr="cast 8" line="11" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</octagon>
	<nonagon public="1" get="inline" set="null" expr="cast 9" line="12" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</nonagon>
	<enneagon public="1" get="inline" set="null" expr="cast 9" line="13" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</enneagon>
	<decagon public="1" get="inline" set="null" expr="cast 10" line="14" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</decagon>
	<hendecagon public="1" get="inline" set="null" expr="cast 11" line="15" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</hendecagon>
	<undecagon public="1" get="inline" set="null" expr="cast 11" line="16" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</undecagon>
	<dodecagon public="1" get="inline" set="null" expr="cast 12" line="17" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</dodecagon>
	<dozen public="1" get="inline" set="null" expr="cast 12" line="18" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</dozen>
	<triskaidecagon public="1" get="inline" set="null" expr="cast 13" line="19" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</triskaidecagon>
	<tetrakaidecagon public="1" get="inline" set="null" expr="cast 14" line="20" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</tetrakaidecagon>
	<pentadecagon public="1" get="inline" set="null" expr="cast 15" line="21" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 15</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</pentadecagon>
	<hexakaidecagon public="1" get="inline" set="null" expr="cast 16" line="22" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</hexakaidecagon>
	<heptadecagon public="1" get="inline" set="null" expr="cast 17" line="23" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 17</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</heptadecagon>
	<octakaidecagon public="1" get="inline" set="null" expr="cast 18" line="24" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 18</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</octakaidecagon>
	<enneadecagon public="1" get="inline" set="null" expr="cast 19" line="25" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 19</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</enneadecagon>
	<icosagon public="1" get="inline" set="null" expr="cast 20" line="26" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 20</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</icosagon>
	<triacontagon public="1" get="inline" set="null" expr="cast 30" line="27" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 30</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</triacontagon>
	<tetracontagon public="1" get="inline" set="null" expr="cast 40" line="28" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 40</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</tetracontagon>
	<pentacontagon public="1" get="inline" set="null" expr="cast 50" line="29" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 50</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</pentacontagon>
	<hexacontagon public="1" get="inline" set="null" expr="cast 60" line="30" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 60</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</hexacontagon>
	<heptacontagon public="1" get="inline" set="null" expr="cast 70" line="31" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 70</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</heptacontagon>
	<octacontagon public="1" get="inline" set="null" expr="cast 80" line="32" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 80</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</octacontagon>
	<enneacontagon public="1" get="inline" set="null" expr="cast 90" line="33" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 90</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</enneacontagon>
	<hectagon public="1" get="inline" set="null" expr="cast 100" line="34" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 100</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</hectagon>
	<chiliagon public="1" get="inline" set="null" expr="cast 1000" line="35" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 1000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</chiliagon>
	<myriagon public="1" get="inline" set="null" expr="cast 10000" line="36" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 10000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</myriagon>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.shape._PolyEdge.PolyEdge_Impl_" params="" file="src/trilateral3/shape/PolyEdge.hx" private="1" module="trilateral3.shape.PolyEdge" extern="1" final="1">
		<triangle public="1" get="inline" set="null" expr="cast 3" line="3" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</triangle>
		<quadrilateral public="1" get="inline" set="null" expr="cast 4" line="4" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</quadrilateral>
		<tetragon public="1" get="inline" set="null" expr="cast 4" line="6" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</tetragon>
		<pentagon public="1" get="inline" set="null" expr="cast 5" line="7" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</pentagon>
		<hexagon public="1" get="inline" set="null" expr="cast 6" line="8" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</hexagon>
		<heptagon public="1" get="inline" set="null" expr="cast 7" line="9" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</heptagon>
		<septagon public="1" get="inline" set="null" expr="cast 7" line="10" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</septagon>
		<octagon public="1" get="inline" set="null" expr="cast 8" line="11" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</octagon>
		<nonagon public="1" get="inline" set="null" expr="cast 9" line="12" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</nonagon>
		<enneagon public="1" get="inline" set="null" expr="cast 9" line="13" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</enneagon>
		<decagon public="1" get="inline" set="null" expr="cast 10" line="14" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</decagon>
		<hendecagon public="1" get="inline" set="null" expr="cast 11" line="15" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</hendecagon>
		<undecagon public="1" get="inline" set="null" expr="cast 11" line="16" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</undecagon>
		<dodecagon public="1" get="inline" set="null" expr="cast 12" line="17" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</dodecagon>
		<dozen public="1" get="inline" set="null" expr="cast 12" line="18" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</dozen>
		<triskaidecagon public="1" get="inline" set="null" expr="cast 13" line="19" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</triskaidecagon>
		<tetrakaidecagon public="1" get="inline" set="null" expr="cast 14" line="20" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</tetrakaidecagon>
		<pentadecagon public="1" get="inline" set="null" expr="cast 15" line="21" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 15</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</pentadecagon>
		<hexakaidecagon public="1" get="inline" set="null" expr="cast 16" line="22" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</hexakaidecagon>
		<heptadecagon public="1" get="inline" set="null" expr="cast 17" line="23" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 17</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</heptadecagon>
		<octakaidecagon public="1" get="inline" set="null" expr="cast 18" line="24" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 18</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</octakaidecagon>
		<enneadecagon public="1" get="inline" set="null" expr="cast 19" line="25" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 19</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</enneadecagon>
		<icosagon public="1" get="inline" set="null" expr="cast 20" line="26" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 20</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</icosagon>
		<triacontagon public="1" get="inline" set="null" expr="cast 30" line="27" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 30</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</triacontagon>
		<tetracontagon public="1" get="inline" set="null" expr="cast 40" line="28" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 40</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</tetracontagon>
		<pentacontagon public="1" get="inline" set="null" expr="cast 50" line="29" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 50</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</pentacontagon>
		<hexacontagon public="1" get="inline" set="null" expr="cast 60" line="30" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 60</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</hexacontagon>
		<heptacontagon public="1" get="inline" set="null" expr="cast 70" line="31" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 70</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</heptacontagon>
		<octacontagon public="1" get="inline" set="null" expr="cast 80" line="32" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 80</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</octacontagon>
		<enneacontagon public="1" get="inline" set="null" expr="cast 90" line="33" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 90</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</enneacontagon>
		<hectagon public="1" get="inline" set="null" expr="cast 100" line="34" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 100</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</hectagon>
		<chiliagon public="1" get="inline" set="null" expr="cast 1000" line="35" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 1000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</chiliagon>
		<myriagon public="1" get="inline" set="null" expr="cast 10000" line="36" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 10000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</myriagon>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="trilateral3.shape.Regular" params="" file="src/trilateral3/shape/Regular.hx">
		<from><icast><c path="trilateral3.drawing.Pen"/></icast></from>
		<this><c path="trilateral3.drawing.Pen"/></this>
		<to><icast><c path="trilateral3.drawing.Pen"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.shape._Regular.Regular_Impl_" params="" file="src/trilateral3/shape/Regular.hx" private="1" module="trilateral3.shape.Regular" final="1">
	<_new public="1" set="method" line="7" static="1">
		<f a="pen_">
			<c path="trilateral3.drawing.Pen"/>
			<x path="trilateral3.shape.Regular"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<addRegular public="1" get="inline" set="null" line="11" static="1"><f a="this:rs:style">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.StyleRegular"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></addRegular>
	<triangle public="1" get="inline" set="null" line="33" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></triangle>
	<triangle2 public="1" get="inline" set="null" line="37" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></triangle2>
	<square public="1" get="inline" set="null" line="44" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></square>
	<square2 public="1" get="inline" set="null" line="48" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></square2>
	<bar public="1" get="inline" set="null" line="55" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></bar>
	<colorTrianglesPos public="1" get="inline" set="null" line="65" static="1"><f a="this:start:col:len">
	<c path="trilateral3.drawing.Pen"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTrianglesPos>
	<bar2 public="1" get="inline" set="null" line="70" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></bar2>
	<pentagon public="1" get="inline" set="null" line="77" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></pentagon>
	<pentagon2 public="1" get="inline" set="null" line="81" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></pentagon2>
	<hexagon public="1" get="inline" set="null" line="88" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></hexagon>
	<hexagon2 public="1" get="inline" set="null" line="92" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></hexagon2>
	<circle public="1" get="inline" set="null" line="99" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></circle>
	<circle2 public="1" get="inline" set="null" line="103" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></circle2>
	<circleRadial public="1" get="inline" set="null" line="110" static="1"><f a="this:rs:colorCentre:rx:ry">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></circleRadial>
	<circleRadial2 public="1" get="inline" set="null" line="114" static="1"><f a="this:rs:colorCentre:rx:ry">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></circleRadial2>
	<roundedSquare public="1" get="inline" set="null" line="121" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></roundedSquare>
	<roundedSquare2 public="1" get="inline" set="null" line="130" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></roundedSquare2>
	<star public="1" get="inline" set="null" line="137" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></star>
	<star2 public="1" get="inline" set="null" line="146" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></star2>
	<polygon public="1" get="inline" set="null" line="153" static="1">
		<f a="this:rs:?sides" v="::36">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Int"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
	</polygon>
	<polygonRadial public="1" get="inline" set="null" line="162" static="1">
		<f a="this:rs:colorCentre:rx:ry:?sides" v=":::::36">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
	</polygonRadial>
	<circleMultiCorners public="1" get="inline" set="null" line="171" static="1">
		<f a="this:rs:arr:?rx:?ry" v=":::0:0">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<c path="Array"><x path="Int"/></c>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":value"><e>{ ry : 0, rx : 0 }</e></m></meta>
	</circleMultiCorners>
	<polygonMultiCorners public="1" get="inline" set="null" line="175" static="1">
		<f a="this:rs:arr:?rx:?ry:?sides" v=":::0:0:36">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<c path="Array"><x path="Int"/></c>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":value"><e>{ sides : 36, ry : 0, rx : 0 }</e></m></meta>
	</polygonMultiCorners>
</class></impl>
	</abstract>
	<class path="trilateral3.shape._Regular.Regular_Impl_" params="" file="src/trilateral3/shape/Regular.hx" private="1" module="trilateral3.shape.Regular" final="1">
		<_new public="1" set="method" line="7" static="1">
			<f a="pen_">
				<c path="trilateral3.drawing.Pen"/>
				<x path="trilateral3.shape.Regular"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<addRegular public="1" get="inline" set="null" line="11" static="1"><f a="this:rs:style">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.StyleRegular"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></addRegular>
		<triangle public="1" get="inline" set="null" line="33" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></triangle>
		<triangle2 public="1" get="inline" set="null" line="37" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></triangle2>
		<square public="1" get="inline" set="null" line="44" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></square>
		<square2 public="1" get="inline" set="null" line="48" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></square2>
		<bar public="1" get="inline" set="null" line="55" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></bar>
		<colorTrianglesPos public="1" get="inline" set="null" line="65" static="1"><f a="this:start:col:len">
	<c path="trilateral3.drawing.Pen"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTrianglesPos>
		<bar2 public="1" get="inline" set="null" line="70" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></bar2>
		<pentagon public="1" get="inline" set="null" line="77" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></pentagon>
		<pentagon2 public="1" get="inline" set="null" line="81" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></pentagon2>
		<hexagon public="1" get="inline" set="null" line="88" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></hexagon>
		<hexagon2 public="1" get="inline" set="null" line="92" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></hexagon2>
		<circle public="1" get="inline" set="null" line="99" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></circle>
		<circle2 public="1" get="inline" set="null" line="103" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></circle2>
		<circleRadial public="1" get="inline" set="null" line="110" static="1"><f a="this:rs:colorCentre:rx:ry">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></circleRadial>
		<circleRadial2 public="1" get="inline" set="null" line="114" static="1"><f a="this:rs:colorCentre:rx:ry">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></circleRadial2>
		<roundedSquare public="1" get="inline" set="null" line="121" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></roundedSquare>
		<roundedSquare2 public="1" get="inline" set="null" line="130" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></roundedSquare2>
		<star public="1" get="inline" set="null" line="137" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></star>
		<star2 public="1" get="inline" set="null" line="146" static="1"><f a="this:rs">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></star2>
		<polygon public="1" get="inline" set="null" line="153" static="1">
			<f a="this:rs:?sides" v="::36">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Int"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</polygon>
		<polygonRadial public="1" get="inline" set="null" line="162" static="1">
			<f a="this:rs:colorCentre:rx:ry:?sides" v=":::::36">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</polygonRadial>
		<circleMultiCorners public="1" get="inline" set="null" line="171" static="1">
			<f a="this:rs:arr:?rx:?ry" v=":::0:0">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":value"><e>{ ry : 0, rx : 0 }</e></m></meta>
		</circleMultiCorners>
		<polygonMultiCorners public="1" get="inline" set="null" line="175" static="1">
			<f a="this:rs:arr:?rx:?ry:?sides" v=":::0:0:36">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, ry : 0, rx : 0 }</e></m></meta>
		</polygonMultiCorners>
	</class>
	<class path="trilateral3.shape.Shaper" params="" file="src/trilateral3/shape/Shaper.hx">
		<add2DTriangle_ public="1" expr="add2DTriangle">
			<f a="paintType:ax:ay:bx:by:cx:cy">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>add2DTriangle</e></m></meta>
		</add2DTriangle_>
		<add2DQuad_ public="1" expr="add2DQuad">
			<f a="paintType:ax:ay:bx:by:cx:cy:dx:dy">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>add2DQuad</e></m></meta>
		</add2DQuad_>
		<quad_ public="1" expr="quad">
			<f a="paintType:q">
				<t path="trilateral3.drawing.PaintType"/>
				<c path="trilateral3.structure.Quad2D"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>quad</e></m></meta>
		</quad_>
		<lineAB_ public="1" expr="lineAB">
			<f a="paintType:A:B:width">
				<t path="trilateral3.drawing.PaintType"/>
				<t path="trilateral3.structure.XY"/>
				<t path="trilateral3.structure.XY"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>lineAB</e></m></meta>
		</lineAB_>
		<lineXY_ public="1" expr="lineXY">
			<f a="paintType:ax:ay:bx:by:width">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>lineXY</e></m></meta>
		</lineXY_>
		<rectangle_ public="1" expr="rectangle">
			<f a="paintType:x:y:w:h">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>rectangle</e></m></meta>
		</rectangle_>
		<squareOutline_ public="1" expr="squareOutline">
			<f a="paintType:px:py:radius:thick:?theta">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>squareOutline</e></m></meta>
		</squareOutline_>
		<square_ public="1" expr="square">
			<f a="paintType:px:py:radius:?theta">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>square</e></m></meta>
		</square_>
		<diamond_ public="1" expr="diamond">
			<f a="paintType:x:y:radius:?theta">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>diamond</e></m></meta>
		</diamond_>
		<diamondOutline_ public="1" expr="diamondOutline">
			<f a="paintType:x:y:thick:radius:?theta">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>diamondOutline</e></m></meta>
		</diamondOutline_>
		<overlapStar_ public="1" expr="overlapStar">
			<f a="paintType:px:py:radius:?theta">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>overlapStar</e></m></meta>
		</overlapStar_>
		<circle_ public="1" expr="circle">
			<f a="paintType:ax:ay:radius:?sides:?omega">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circle</e></m></meta>
		</circle_>
		<circleRadial_ public="1" expr="circleRadial">
			<f a="paintType:ax:ay:rx:ry:radius:?sides:?omega">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circleRadial</e></m></meta>
		</circleRadial_>
		<circleRadialOnSide_ public="1" expr="circleRadialOnSide">
			<f a="paintType:ax:ay:rx:ry:radius:?sides:?omega">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circleRadialOnSide</e></m></meta>
		</circleRadialOnSide_>
		<ellipse_ public="1" expr="ellipse">
			<f a="paintType:ax:ay:rx:ry:sides">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>ellipse</e></m></meta>
		</ellipse_>
		<pie_ public="1" expr="pie">
			<f a="paintType:ax:ay:radius:beta:gamma:prefer:?sides">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>pie</e></m></meta>
		</pie_>
		<pieX_ public="1" expr="pieX">
			<f a="paintType:ax:ay:radius:beta:gamma:prefer:edgePoly:?sides">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>pieX</e></m></meta>
		</pieX_>
		<pieDifX_ public="1" expr="pieDifX">
			<f a="paintType:ax:ay:radius:beta:dif:edgePoly:?sides">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>pieDifX</e></m></meta>
		</pieDifX_>
		<ellpisePie_ public="1" expr="ellipsePie">
			<f a="paintType:ax:ay:rx:ry:beta:gamma:prefer:?sides">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>ellipsePie</e></m></meta>
		</ellpisePie_>
		<pieDif_ public="1" expr="pieDif">
			<f a="paintType:ax:ay:radius:beta:dif:?sides">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>pieDif</e></m></meta>
		</pieDif_>
		<arc_ public="1" expr="arc">
			<f a="paintType:ax:ay:radius:width:beta:gamma:prefer:?sides">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>arc</e></m></meta>
		</arc_>
		<circleOnSide_ public="1" expr="circleOnSide">
			<f a="paintType:ax:ay:radius:?sides:?omega">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circleOnSide</e></m></meta>
		</circleOnSide_>
		<ellipseOnSide_ public="1" expr="ellipseOnSide">
			<f a="paintType:ax:ay:rx:ry:sides">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>ellipseOnSide</e></m></meta>
		</ellipseOnSide_>
		<shape_ public="1" expr="shape">
			<f a="paintType:x:y:radius:p:?omega">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.PolyEdge"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>shape</e></m></meta>
		</shape_>
		<shapeRadial_ public="1" expr="shapeRadial">
			<f a="paintType:x:y:rx:ry:radius:p:?omega">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.PolyEdge"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>shapeRadial</e></m></meta>
		</shapeRadial_>
		<roundedRectangle_ public="1" expr="roundedRectangle">
			<f a="paintType:x:y:width:height:radius">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>roundedRectangle</e></m></meta>
		</roundedRectangle_>
		<roundedRectangleOutline_ public="1" expr="roundedRectangleOutline">
			<f a="paintType:x:y:width:height:thick:radius">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>roundedRectangleOutline</e></m></meta>
		</roundedRectangleOutline_>
		<spiralLines_ public="1" expr="spiralLines">
			<f a="paintType:x:y:radius:nolines:startWid:stepWid">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>spiralLines</e></m></meta>
		</spiralLines_>
		<new public="1" set="method" line="738">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="trilateral3.shape._Shaper.Shaper_Fields_" params="" file="src/trilateral3/shape/Shaper.hx" private="1" module="trilateral3.shape.Shaper" final="1">
		<add2DTriangle public="1" get="inline" set="null" line="21" static="1">
			<f a="paintType:ax:ay:bx:by:cx:cy">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Shaper provides static methods for drawing with triangles.
the methods return the number of triangles added.</haxe_doc>
		</add2DTriangle>
		<add2DQuad public="1" get="inline" set="null" line="34" static="1"><f a="paintType:ax:ay:bx:by:cx:cy:dx:dy">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></add2DQuad>
		<quad public="1" get="inline" set="null" line="40" static="1"><f a="paintType:q">
	<t path="trilateral3.drawing.PaintType"/>
	<c path="trilateral3.structure.Quad2D"/>
	<x path="Int"/>
</f></quad>
		<lineAB public="1" get="inline" set="null" line="46" static="1"><f a="paintType:A:B:width">
	<t path="trilateral3.drawing.PaintType"/>
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
	<x path="Float"/>
	<x path="Int"/>
</f></lineAB>
		<lineXY public="1" get="inline" set="null" line="53" static="1"><f a="paintType:ax:ay:bx:by:width">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></lineXY>
		<rectangle public="1" get="inline" set="null" line="59" static="1"><f a="paintType:x:y:w:h">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></rectangle>
		<squareOutline public="1" get="inline" set="null" line="75" static="1">
			<f a="paintType:px:py:radius:thick:?theta" v=":::::0">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0 }</e></m></meta>
		</squareOutline>
		<square public="1" get="inline" set="null" line="175" static="1">
			<f a="paintType:px:py:radius:?theta" v="::::0">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0 }</e></m></meta>
		</square>
		<diamond public="1" get="inline" set="null" line="222" static="1">
			<f a="paintType:x:y:radius:?theta" v="::::0.">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0. }</e></m></meta>
		</diamond>
		<diamondOutline public="1" get="inline" set="null" line="229" static="1">
			<f a="paintType:x:y:thick:radius:?theta" v=":::::0.">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0. }</e></m></meta>
		</diamondOutline>
		<overlapStar public="1" get="inline" set="null" line="236" static="1">
			<f a="paintType:px:py:radius:?theta" v="::::0">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0 }</e></m></meta>
		</overlapStar>
		<circle public="1" get="inline" set="null" line="267" static="1">
			<f a="paintType:ax:ay:radius:?sides:?omega" v="::::36:0.">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circle>
		<circleRadial public="1" get="inline" set="null" line="290" static="1">
			<f a="paintType:ax:ay:rx:ry:radius:?sides:?omega" v="::::::36:0.">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circleRadial>
		<circleRadialOnSide public="1" get="inline" set="null" line="319" static="1">
			<f a="paintType:ax:ay:rx:ry:radius:?sides:?omega" v="::::::36:0.">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circleRadialOnSide>
		<ellipse public="1" get="inline" set="null" line="352" static="1">
			<f a="paintType:ax:ay:rx:ry:?sides" v=":::::36">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</ellipse>
		<pie public="1" get="inline" set="null" line="379" static="1">
			<f a="paintType:ax:ay:radius:beta:gamma:prefer:?sides" v=":::::::36">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
 * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pie>
		<pieX public="1" get="inline" set="null" line="416" static="1">
			<f a="paintType:ax:ay:radius:beta:gamma:prefer:edgePoly:?sides" v="::::::::36">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
 * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pieX>
		<pieDifX public="1" get="inline" set="null" line="455" static="1">
			<f a="paintType:ax:ay:radius:beta:dif:edgePoly:?sides" v=":::::::36">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
			<haxe_doc>* Optimized Pie used in Contour, with dif pre-calculated
 * External edge also added</haxe_doc>
		</pieDifX>
		<ellipsePie public="1" get="inline" set="null" line="491" static="1">
			<f a="paintType:ax:ay:rx:ry:beta:gamma:prefer:?sides" v="::::::::36">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</ellipsePie>
		<pieDif public="1" get="inline" set="null" line="525" static="1">
			<f a="paintType:ax:ay:radius:beta:dif:?sides" v="::::::36">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
			<haxe_doc>* Optimized Pie used in Contour, with dif pre-calculated</haxe_doc>
		</pieDif>
		<arc public="1" get="inline" set="null" line="554" static="1">
			<f a="paintType:ax:ay:radius:width:beta:gamma:prefer:?sides" v="::::::::36">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</arc>
		<circleOnSide public="1" get="inline" set="null" line="594" static="1">
			<f a="paintType:ax:ay:radius:?sides:?omega" v="::::36:0.">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circleOnSide>
		<ellipseOnSide public="1" get="inline" set="null" line="617" static="1">
			<f a="paintType:ax:ay:rx:ry:?sides" v=":::::36">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</ellipseOnSide>
		<shape public="1" get="inline" set="null" line="639" static="1">
			<f a="paintType:x:y:radius:p:?omega" v=":::::0.">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.PolyEdge"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0. }</e></m></meta>
		</shape>
		<shapeRadial public="1" get="inline" set="null" line="650" static="1">
			<f a="paintType:x:y:rx:ry:radius:p:?omega" v=":::::::0.">
				<t path="trilateral3.drawing.PaintType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.PolyEdge"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0. }</e></m></meta>
		</shapeRadial>
		<roundedRectangle public="1" get="inline" set="null" line="665" static="1"><f a="paintType:x:y:width:height:radius">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></roundedRectangle>
		<roundedRectangleOutline public="1" get="inline" set="null" line="695" static="1"><f a="paintType:x:y:width:height:thick:radius">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></roundedRectangleOutline>
		<spiralLines public="1" get="inline" set="null" line="726" static="1"><f a="paintType:x:y:radius:nolines:startWid:stepWid">
	<t path="trilateral3.drawing.PaintType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></spiralLines>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="trilateral3.shape.ShaperPen" params="" file="src/trilateral3/shape/ShaperPen.hx">
		<add2DTriangle_ public="1" expr="add2DTriangle">
			<f a="pen:ax:ay:bx:by:cx:cy">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>add2DTriangle</e></m></meta>
		</add2DTriangle_>
		<add2DQuad_ public="1" expr="add2DQuad">
			<f a="pen:ax:ay:bx:by:cx:cy:dx:dy">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>add2DQuad</e></m></meta>
		</add2DQuad_>
		<quad_ public="1" expr="quad">
			<f a="pen:q">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.Quad2D"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>quad</e></m></meta>
		</quad_>
		<lineAB_ public="1" expr="lineAB">
			<f a="pen:A:B:width">
				<c path="trilateral3.drawing.Pen"/>
				<t path="trilateral3.structure.XY"/>
				<t path="trilateral3.structure.XY"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>lineAB</e></m></meta>
		</lineAB_>
		<lineXY_ public="1" expr="lineXY">
			<f a="pen:ax:ay:bx:by:width">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>lineXY</e></m></meta>
		</lineXY_>
		<rectangle_ public="1" expr="rectangle">
			<f a="pen:x:y:w:h">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>rectangle</e></m></meta>
		</rectangle_>
		<squareOutline_ public="1" expr="squareOutline">
			<f a="pen:px:py:radius:thick:?theta">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>squareOutline</e></m></meta>
		</squareOutline_>
		<square_ public="1" expr="square">
			<f a="pen:px:py:radius:?theta">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>square</e></m></meta>
		</square_>
		<diamond_ public="1" expr="diamond">
			<f a="pen:x:y:radius:?theta">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>diamond</e></m></meta>
		</diamond_>
		<diamondOutline_ public="1" expr="diamondOutline">
			<f a="pen:x:y:thick:radius:?theta">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>diamondOutline</e></m></meta>
		</diamondOutline_>
		<overlapStar_ public="1" expr="overlapStar">
			<f a="pen:px:py:radius:?theta">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>overlapStar</e></m></meta>
		</overlapStar_>
		<circle_ public="1" expr="circle">
			<f a="pen:ax:ay:radius:?sides:?omega">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circle</e></m></meta>
		</circle_>
		<circleRadial_ public="1" expr="circleRadial">
			<f a="pen:ax:ay:rx:ry:radius:?sides:?omega">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circleRadial</e></m></meta>
		</circleRadial_>
		<circleRadialOnSide_ public="1" expr="circleRadialOnSide">
			<f a="pen:ax:ay:rx:ry:radius:?sides:?omega">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circleRadialOnSide</e></m></meta>
		</circleRadialOnSide_>
		<ellipse_ public="1" expr="ellipse">
			<f a="pen:ax:ay:rx:ry:sides">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>ellipse</e></m></meta>
		</ellipse_>
		<pie_ public="1" expr="pie">
			<f a="pen:ax:ay:radius:beta:gamma:prefer:?sides">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>pie</e></m></meta>
		</pie_>
		<pieX_ public="1" expr="pieX">
			<f a="pen:ax:ay:radius:beta:gamma:prefer:edgePoly:?sides">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>pieX</e></m></meta>
		</pieX_>
		<pieDifX_ public="1" expr="pieDifX">
			<f a="pen:ax:ay:radius:beta:dif:edgePoly:?sides">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>pieDifX</e></m></meta>
		</pieDifX_>
		<ellpisePie_ public="1" expr="ellipsePie">
			<f a="pen:ax:ay:rx:ry:beta:gamma:prefer:?sides">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>ellipsePie</e></m></meta>
		</ellpisePie_>
		<pieDif_ public="1" expr="pieDif">
			<f a="pen:ax:ay:radius:beta:dif:?sides">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>pieDif</e></m></meta>
		</pieDif_>
		<arc_ public="1" expr="arc">
			<f a="pen:ax:ay:radius:width:beta:gamma:prefer:?sides">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>arc</e></m></meta>
		</arc_>
		<circleOnSide_ public="1" expr="circleOnSide">
			<f a="pen:ax:ay:radius:?sides:?omega">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circleOnSide</e></m></meta>
		</circleOnSide_>
		<ellipseOnSide_ public="1" expr="ellipseOnSide">
			<f a="pen:ax:ay:rx:ry:sides">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>ellipseOnSide</e></m></meta>
		</ellipseOnSide_>
		<shape_ public="1" expr="shape">
			<f a="pen:x:y:radius:p:?omega">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.PolyEdge"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>shape</e></m></meta>
		</shape_>
		<shapeRadial_ public="1" expr="shapeRadial">
			<f a="pen:x:y:rx:ry:radius:p:?omega">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.PolyEdge"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>shapeRadial</e></m></meta>
		</shapeRadial_>
		<roundedRectangle_ public="1" expr="roundedRectangle">
			<f a="pen:x:y:width:height:radius">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>roundedRectangle</e></m></meta>
		</roundedRectangle_>
		<roundedRectangleOutline_ public="1" expr="roundedRectangleOutline">
			<f a="pen:x:y:width:height:thick:radius">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>roundedRectangleOutline</e></m></meta>
		</roundedRectangleOutline_>
		<spiralLines_ public="1" expr="spiralLines">
			<f a="pen:x:y:radius:nolines:startWid:stepWid">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>spiralLines</e></m></meta>
		</spiralLines_>
		<new public="1" set="method" line="753">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="trilateral3.shape._ShaperPen.ShaperPen_Fields_" params="" file="src/trilateral3/shape/ShaperPen.hx" private="1" module="trilateral3.shape.ShaperPen" final="1">
		<add2DTriangle public="1" get="inline" set="null" line="21" static="1">
			<f a="pen:ax:ay:bx:by:cx:cy">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Shaper provides static methods for drawing with triangles.
the methods return the number of triangles added.</haxe_doc>
		</add2DTriangle>
		<add2DQuad public="1" get="inline" set="null" line="49" static="1"><f a="pen:ax:ay:bx:by:cx:cy:dx:dy">
	<c path="trilateral3.drawing.Pen"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></add2DQuad>
		<quad public="1" get="inline" set="null" line="55" static="1"><f a="pen:q">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.structure.Quad2D"/>
	<x path="Int"/>
</f></quad>
		<lineAB public="1" get="inline" set="null" line="61" static="1"><f a="pen:A:B:width">
	<c path="trilateral3.drawing.Pen"/>
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
	<x path="Float"/>
	<x path="Int"/>
</f></lineAB>
		<lineXY public="1" get="inline" set="null" line="68" static="1"><f a="pen:ax:ay:bx:by:width">
	<c path="trilateral3.drawing.Pen"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></lineXY>
		<rectangle public="1" get="inline" set="null" line="74" static="1"><f a="pen:x:y:w:h">
	<c path="trilateral3.drawing.Pen"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></rectangle>
		<squareOutline public="1" get="inline" set="null" line="90" static="1">
			<f a="pen:px:py:radius:thick:?theta" v=":::::0">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0 }</e></m></meta>
		</squareOutline>
		<square public="1" get="inline" set="null" line="190" static="1">
			<f a="pen:px:py:radius:?theta" v="::::0">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0 }</e></m></meta>
		</square>
		<diamond public="1" get="inline" set="null" line="237" static="1">
			<f a="pen:x:y:radius:?theta" v="::::0.">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0. }</e></m></meta>
		</diamond>
		<diamondOutline public="1" get="inline" set="null" line="244" static="1">
			<f a="pen:x:y:thick:radius:?theta" v=":::::0.">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0. }</e></m></meta>
		</diamondOutline>
		<overlapStar public="1" get="inline" set="null" line="251" static="1">
			<f a="pen:px:py:radius:?theta" v="::::0">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0 }</e></m></meta>
		</overlapStar>
		<circle public="1" get="inline" set="null" line="282" static="1">
			<f a="pen:ax:ay:radius:?sides:?omega" v="::::36:0.">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circle>
		<circleRadial public="1" get="inline" set="null" line="305" static="1">
			<f a="pen:ax:ay:rx:ry:radius:?sides:?omega" v="::::::36:0.">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circleRadial>
		<circleRadialOnSide public="1" get="inline" set="null" line="334" static="1">
			<f a="pen:ax:ay:rx:ry:radius:?sides:?omega" v="::::::36:0.">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circleRadialOnSide>
		<ellipse public="1" get="inline" set="null" line="367" static="1">
			<f a="pen:ax:ay:rx:ry:?sides" v=":::::36">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</ellipse>
		<pie public="1" get="inline" set="null" line="394" static="1">
			<f a="pen:ax:ay:radius:beta:gamma:prefer:?sides" v=":::::::36">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
 * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pie>
		<pieX public="1" get="inline" set="null" line="431" static="1">
			<f a="pen:ax:ay:radius:beta:gamma:prefer:edgePoly:?sides" v="::::::::36">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
 * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pieX>
		<pieDifX public="1" get="inline" set="null" line="470" static="1">
			<f a="pen:ax:ay:radius:beta:dif:edgePoly:?sides" v=":::::::36">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
			<haxe_doc>* Optimized Pie used in Contour, with dif pre-calculated
 * External edge also added</haxe_doc>
		</pieDifX>
		<ellipsePie public="1" get="inline" set="null" line="506" static="1">
			<f a="pen:ax:ay:rx:ry:beta:gamma:prefer:?sides" v="::::::::36">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</ellipsePie>
		<pieDif public="1" get="inline" set="null" line="540" static="1">
			<f a="pen:ax:ay:radius:beta:dif:?sides" v="::::::36">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
			<haxe_doc>* Optimized Pie used in Contour, with dif pre-calculated</haxe_doc>
		</pieDif>
		<arc public="1" get="inline" set="null" line="569" static="1">
			<f a="pen:ax:ay:radius:width:beta:gamma:prefer:?sides" v="::::::::36">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</arc>
		<circleOnSide public="1" get="inline" set="null" line="609" static="1">
			<f a="pen:ax:ay:radius:?sides:?omega" v="::::36:0.">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circleOnSide>
		<ellipseOnSide public="1" get="inline" set="null" line="632" static="1">
			<f a="pen:ax:ay:rx:ry:?sides" v=":::::36">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</ellipseOnSide>
		<shape public="1" get="inline" set="null" line="654" static="1">
			<f a="pen:x:y:radius:p:?omega" v=":::::0.">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.PolyEdge"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0. }</e></m></meta>
		</shape>
		<shapeRadial public="1" get="inline" set="null" line="665" static="1">
			<f a="pen:x:y:rx:ry:radius:p:?omega" v=":::::::0.">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.PolyEdge"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0. }</e></m></meta>
		</shapeRadial>
		<roundedRectangle public="1" get="inline" set="null" line="680" static="1"><f a="pen:x:y:width:height:radius">
	<c path="trilateral3.drawing.Pen"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></roundedRectangle>
		<roundedRectangleOutline public="1" get="inline" set="null" line="710" static="1"><f a="pen:x:y:width:height:thick:radius">
	<c path="trilateral3.drawing.Pen"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></roundedRectangleOutline>
		<spiralLines public="1" get="inline" set="null" line="741" static="1"><f a="pen:x:y:radius:nolines:startWid:stepWid">
	<c path="trilateral3.drawing.Pen"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></spiralLines>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.shape.StyleRegular" params="" file="src/trilateral3/shape/StyleRegular.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="trilateral3.shape._StyleRegular.StyleRegular_Impl_" params="" file="src/trilateral3/shape/StyleRegular.hx" private="1" module="trilateral3.shape.StyleRegular" extern="1" final="1">
	<TRIANGLE public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TRIANGLE>
	<SQUARE public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SQUARE>
	<BAR public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BAR>
	<PENTAGON public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PENTAGON>
	<HEXAGON public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HEXAGON>
	<CIRCLE public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CIRCLE>
	<ROUNDSQUARE public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ROUNDSQUARE>
	<STAR public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</STAR>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.shape._StyleRegular.StyleRegular_Impl_" params="" file="src/trilateral3/shape/StyleRegular.hx" private="1" module="trilateral3.shape.StyleRegular" extern="1" final="1">
		<TRIANGLE public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TRIANGLE>
		<SQUARE public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SQUARE>
		<BAR public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BAR>
		<PENTAGON public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PENTAGON>
		<HEXAGON public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HEXAGON>
		<CIRCLE public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CIRCLE>
		<ROUNDSQUARE public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ROUNDSQUARE>
		<STAR public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</STAR>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="trilateral3.shape.xtra.DieSpots" params="" file="src/trilateral3/shape/xtra/DieSpots.hx">
		<from><icast><x path="trilateral3.shape.Regular"/></icast></from>
		<this><x path="trilateral3.shape.Regular"/></this>
		<to><icast><x path="trilateral3.shape.Regular"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.shape.xtra._DieSpots.DieSpots_Impl_" params="" file="src/trilateral3/shape/xtra/DieSpots.hx" private="1" module="trilateral3.shape.xtra.DieSpots" final="1">
	<_new public="1" set="method" line="9" static="1">
		<f a="regular">
			<x path="trilateral3.shape.Regular"/>
			<x path="trilateral3.shape.xtra.DieSpots"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<six2 public="1" get="inline" set="null" line="13" static="1">
		<f a="this:rs:?dx:?dy" v="::25:35">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":value"><e>{ dy : 35, dx : 25 }</e></m></meta>
	</six2>
	<colorSix public="1" get="inline" set="null" line="45" static="1">
		<f a="this:rs:?dx:?dy" v="::25:35">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":value"><e>{ dy : 35, dx : 25 }</e></m></meta>
	</colorSix>
	<five2 public="1" get="inline" set="null" line="77" static="1">
		<f a="this:rs:?dx:?dy" v="::30:30">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":value"><e>{ dy : 30, dx : 30 }</e></m></meta>
	</five2>
	<four2 public="1" get="inline" set="null" line="104" static="1">
		<f a="this:rs:?dx:?dy" v="::30:30">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":value"><e>{ dy : 30, dx : 30 }</e></m></meta>
	</four2>
	<three2 public="1" get="inline" set="null" line="128" static="1">
		<f a="this:rs:?dx:?dy" v="::25:25">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":value"><e>{ dy : 25, dx : 25 }</e></m></meta>
	</three2>
	<two2 public="1" get="inline" set="null" line="145" static="1">
		<f a="this:rs:?dx:?dy" v="::20:20">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":value"><e>{ dy : 20, dx : 20 }</e></m></meta>
	</two2>
	<one2 public="1" get="inline" set="null" line="159" static="1"><f a="this:rs">
	<x path="trilateral3.shape.Regular"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></one2>
	<six public="1" get="inline" set="null" line="165" static="1">
		<f a="this:rs:?dx:?dy" v="::25:35">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":value"><e>{ dy : 35, dx : 25 }</e></m></meta>
	</six>
	<five public="1" get="inline" set="null" line="197" static="1">
		<f a="this:rs:?dx:?dy" v="::30:30">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":value"><e>{ dy : 30, dx : 30 }</e></m></meta>
	</five>
	<four public="1" get="inline" set="null" line="224" static="1">
		<f a="this:rs:?dx:?dy" v="::30:30">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":value"><e>{ dy : 30, dx : 30 }</e></m></meta>
	</four>
	<three public="1" get="inline" set="null" line="248" static="1">
		<f a="this:rs:?dx:?dy" v="::25:25">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":value"><e>{ dy : 25, dx : 25 }</e></m></meta>
	</three>
	<two public="1" get="inline" set="null" line="265" static="1">
		<f a="this:rs:?dx:?dy" v="::20:20">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":value"><e>{ dy : 20, dx : 20 }</e></m></meta>
	</two>
	<one public="1" get="inline" set="null" line="279" static="1"><f a="this:rs">
	<x path="trilateral3.shape.Regular"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></one>
	<colorOne public="1" get="inline" set="null" line="285" static="1"><f a="this:rs">
	<x path="trilateral3.shape.Regular"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></colorOne>
	<goldOne public="1" get="inline" set="null" line="291" static="1"><f a="this:rs">
	<x path="trilateral3.shape.Regular"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></goldOne>
</class></impl>
	</abstract>
	<class path="trilateral3.shape.xtra._DieSpots.DieSpots_Impl_" params="" file="src/trilateral3/shape/xtra/DieSpots.hx" private="1" module="trilateral3.shape.xtra.DieSpots" final="1">
		<_new public="1" set="method" line="9" static="1">
			<f a="regular">
				<x path="trilateral3.shape.Regular"/>
				<x path="trilateral3.shape.xtra.DieSpots"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<six2 public="1" get="inline" set="null" line="13" static="1">
			<f a="this:rs:?dx:?dy" v="::25:35">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":value"><e>{ dy : 35, dx : 25 }</e></m></meta>
		</six2>
		<colorSix public="1" get="inline" set="null" line="45" static="1">
			<f a="this:rs:?dx:?dy" v="::25:35">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":value"><e>{ dy : 35, dx : 25 }</e></m></meta>
		</colorSix>
		<five2 public="1" get="inline" set="null" line="77" static="1">
			<f a="this:rs:?dx:?dy" v="::30:30">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":value"><e>{ dy : 30, dx : 30 }</e></m></meta>
		</five2>
		<four2 public="1" get="inline" set="null" line="104" static="1">
			<f a="this:rs:?dx:?dy" v="::30:30">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":value"><e>{ dy : 30, dx : 30 }</e></m></meta>
		</four2>
		<three2 public="1" get="inline" set="null" line="128" static="1">
			<f a="this:rs:?dx:?dy" v="::25:25">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":value"><e>{ dy : 25, dx : 25 }</e></m></meta>
		</three2>
		<two2 public="1" get="inline" set="null" line="145" static="1">
			<f a="this:rs:?dx:?dy" v="::20:20">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":value"><e>{ dy : 20, dx : 20 }</e></m></meta>
		</two2>
		<one2 public="1" get="inline" set="null" line="159" static="1"><f a="this:rs">
	<x path="trilateral3.shape.Regular"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></one2>
		<six public="1" get="inline" set="null" line="165" static="1">
			<f a="this:rs:?dx:?dy" v="::25:35">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":value"><e>{ dy : 35, dx : 25 }</e></m></meta>
		</six>
		<five public="1" get="inline" set="null" line="197" static="1">
			<f a="this:rs:?dx:?dy" v="::30:30">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":value"><e>{ dy : 30, dx : 30 }</e></m></meta>
		</five>
		<four public="1" get="inline" set="null" line="224" static="1">
			<f a="this:rs:?dx:?dy" v="::30:30">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":value"><e>{ dy : 30, dx : 30 }</e></m></meta>
		</four>
		<three public="1" get="inline" set="null" line="248" static="1">
			<f a="this:rs:?dx:?dy" v="::25:25">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":value"><e>{ dy : 25, dx : 25 }</e></m></meta>
		</three>
		<two public="1" get="inline" set="null" line="265" static="1">
			<f a="this:rs:?dx:?dy" v="::20:20">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":value"><e>{ dy : 20, dx : 20 }</e></m></meta>
		</two>
		<one public="1" get="inline" set="null" line="279" static="1"><f a="this:rs">
	<x path="trilateral3.shape.Regular"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></one>
		<colorOne public="1" get="inline" set="null" line="285" static="1"><f a="this:rs">
	<x path="trilateral3.shape.Regular"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></colorOne>
		<goldOne public="1" get="inline" set="null" line="291" static="1"><f a="this:rs">
	<x path="trilateral3.shape.Regular"/>
	<c path="trilateral3.structure.RegularShape"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></goldOne>
	</class>
	<class path="trilateral3.structure.ARGB" params="" file="src/trilateral3/structure/ARGB.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<r public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</r>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<new public="1" set="method" line="11"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ a, r, g, b }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.CYMKA" params="" file="src/trilateral3/structure/CYMKA.hx">
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<m public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</m>
		<k public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</k>
		<a public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</a>
		<new public="1" set="method" line="12"><f a="c:y:m:k:?a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ a, r, g, b }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.Quad2D" params="" file="src/trilateral3/structure/Quad2D.hx">
		<a public="1"><t path="trilateral3.structure.XY"/></a>
		<b public="1"><t path="trilateral3.structure.XY"/></b>
		<c public="1"><t path="trilateral3.structure.XY"/></c>
		<d public="1"><t path="trilateral3.structure.XY"/></d>
		<new set="method" line="9"><f a="a:b:c:d">
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
	<t path="trilateral3.structure.XY"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.RangeEntity" params="" file="src/trilateral3/structure/RangeEntity.hx">
		<textured public="1"><x path="Bool"/></textured>
		<range public="1"><x path="trilateral3.shape.IteratorRange"/></range>
		<bgColor public="1" expr="0xFFFFFFFF">
			<x path="Int"/>
			<meta><m n=":value"><e>0xFFFFFFFF</e></m></meta>
		</bgColor>
		<clone public="1" set="method" line="13"><f a=""><c path="trilateral3.structure.RangeEntity"/></f></clone>
		<new public="1" set="method" line="8">
			<f a="textured:range:?bgColor" v="::0xFFFFFFFF">
				<x path="Bool"/>
				<x path="trilateral3.shape.IteratorRange"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ bgColor : 0xFFFFFFFF }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="trilateral3.structure.RegularShape" params="" file="src/trilateral3/structure/RegularShape.hx">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<radius public="1"><x path="Float"/></radius>
		<color public="1"><x path="Int"/></color>
		<clone public="1" set="method" line="14"><f a=""><c path="trilateral3.structure.RegularShape"/></f></clone>
		<new public="1" set="method" line="8"><f a="x:y:radius:color">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="trilateral3.structure.StartEnd" params="" file="src/trilateral3/structure/StartEnd.hx">
		<start public="1"><x path="Int"/></start>
		<end public="1"><x path="Int"/></end>
		<new public="1" set="method" line="6"><f a="start:end">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.TriInt" params="" file="src/trilateral3/structure/TriInt.hx">
		<a public="1"><x path="Int"/></a>
		<b public="1"><x path="Int"/></b>
		<c public="1"><x path="Int"/></c>
		<new public="1" set="method" line="7"><f a="a:b:c">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.Triangle3D" params="" file="src/trilateral3/structure/Triangle3D.hx">
		<a public="1"><c path="trilateral3.matrix.Vertex"/></a>
		<b public="1"><c path="trilateral3.matrix.Vertex"/></b>
		<c public="1"><c path="trilateral3.matrix.Vertex"/></c>
		<clone public="1" set="method" line="13"><f a=""><c path="trilateral3.structure.Triangle3D"/></f></clone>
		<new set="method" line="8"><f a="a:b:c">
	<c path="trilateral3.matrix.Vertex"/>
	<c path="trilateral3.matrix.Vertex"/>
	<c path="trilateral3.matrix.Vertex"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.TriangleUV" params="" file="src/trilateral3/structure/TriangleUV.hx">
		<a public="1"><c path="trilateral3.matrix.UV"/></a>
		<b public="1"><c path="trilateral3.matrix.UV"/></b>
		<c public="1"><c path="trilateral3.matrix.UV"/></c>
		<new set="method" line="8"><f a="a:b:c">
	<c path="trilateral3.matrix.UV"/>
	<c path="trilateral3.matrix.UV"/>
	<c path="trilateral3.matrix.UV"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.WH_" params="" file="src/trilateral3/structure/WH.hx" module="trilateral3.structure.WH">
		<w public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</w>
		<h public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</h>
		<new public="1" set="method" line="9"><f a="w:h">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ w, h }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="trilateral3.structure.WH" params="" file="src/trilateral3/structure/WH.hx">
		<from><icast><c path="trilateral3.structure.WH_"/></icast></from>
		<this><c path="trilateral3.structure.WH_"/></this>
		<to><icast><c path="trilateral3.structure.WH_"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.structure._WH.WH_Impl_" params="" file="src/trilateral3/structure/WH.hx" private="1" module="trilateral3.structure.WH" final="1">
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a="wh">
			<c path="trilateral3.structure.WH_"/>
			<x path="trilateral3.structure.WH"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<area public="1" get="inline" set="null" line="22" static="1"><f a="this">
	<c path="trilateral3.structure.WH_"/>
	<x path="Int"/>
</f></area>
	<perimeter public="1" get="inline" set="null" line="26" static="1"><f a="this">
	<c path="trilateral3.structure.WH_"/>
	<x path="Int"/>
</f></perimeter>
	<fits public="1" get="inline" set="null" line="30" static="1"><f a="this:r">
	<c path="trilateral3.structure.WH_"/>
	<x path="trilateral3.structure.WH"/>
	<x path="Int"/>
</f></fits>
</class></impl>
	</abstract>
	<class path="trilateral3.structure._WH.WH_Impl_" params="" file="src/trilateral3/structure/WH.hx" private="1" module="trilateral3.structure.WH" final="1">
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a="wh">
				<c path="trilateral3.structure.WH_"/>
				<x path="trilateral3.structure.WH"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<area public="1" get="inline" set="null" line="22" static="1"><f a="this">
	<c path="trilateral3.structure.WH_"/>
	<x path="Int"/>
</f></area>
		<perimeter public="1" get="inline" set="null" line="26" static="1"><f a="this">
	<c path="trilateral3.structure.WH_"/>
	<x path="Int"/>
</f></perimeter>
		<fits public="1" get="inline" set="null" line="30" static="1"><f a="this:r">
	<c path="trilateral3.structure.WH_"/>
	<x path="trilateral3.structure.WH"/>
	<x path="Int"/>
</f></fits>
	</class>
	<typedef path="trilateral3.structure.XY" params="" file="src/trilateral3/structure/XY.hx"><c path="hyperKitGL.XY"/></typedef>
	<class path="trilateral3.structure.XY0" params="" file="src/trilateral3/structure/XY0.hx">
		<x public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</x>
		<y public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</y>
		<w public="1" expr="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>1</e></m>
				<m n=":optional"/>
			</meta>
		</w>
		<clone public="1" set="method" line="14"><f a=""><c path="trilateral3.structure.XY0"/></f></clone>
		<new public="1" set="method" line="10"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ x, y, ?w }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.XYWH_" params="" file="src/trilateral3/structure/XYWH.hx" module="trilateral3.structure.XYWH">
		<extends path="trilateral3.structure.WH_"/>
		<x public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</x>
		<y public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</y>
		<new public="1" set="method" line="10"><f a="x:y:w:h">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ x, y, w, h }</haxe_doc>
		<meta><m n=":structInit"/></meta>
	</class>
	<abstract path="trilateral3.structure.XYWH" params="" file="src/trilateral3/structure/XYWH.hx">
		<from><icast><c path="trilateral3.structure.XYWH_"/></icast></from>
		<this><c path="trilateral3.structure.XYWH_"/></this>
		<to><icast><c path="trilateral3.structure.XYWH_"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.structure._XYWH.XYWH_Impl_" params="" file="src/trilateral3/structure/XYWH.hx" private="1" module="trilateral3.structure.XYWH" final="1">
	<_new public="1" get="inline" set="null" line="19" static="1">
		<f a="xywh">
			<c path="trilateral3.structure.XYWH_"/>
			<x path="trilateral3.structure.XYWH"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<r public="1" get="inline" set="null" line="24" static="1"><f a="this">
	<c path="trilateral3.structure.XYWH_"/>
	<x path="Int"/>
</f></r>
	<b public="1" get="inline" set="null" line="28" static="1"><f a="this">
	<c path="trilateral3.structure.XYWH_"/>
	<x path="Int"/>
</f></b>
	<setR public="1" get="inline" set="null" line="32" static="1"><f a="this:rr">
	<c path="trilateral3.structure.XYWH_"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setR>
	<setB public="1" get="inline" set="null" line="36" static="1"><f a="this:bb">
	<c path="trilateral3.structure.XYWH_"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setB>
	<mother get="inline" set="null" line="40" static="1"><f a="this">
	<c path="trilateral3.structure.XYWH_"/>
	<x path="trilateral3.structure.WH"/>
</f></mother>
	<area public="1" get="inline" set="null" line="45" static="1"><f a="this">
	<c path="trilateral3.structure.XYWH_"/>
	<x path="Int"/>
</f></area>
	<perimeter public="1" get="inline" set="null" line="49" static="1"><f a="this">
	<c path="trilateral3.structure.XYWH_"/>
	<x path="Int"/>
</f></perimeter>
	<fits public="1" get="inline" set="null" line="53" static="1"><f a="this:r">
	<c path="trilateral3.structure.XYWH_"/>
	<x path="trilateral3.structure.WH"/>
	<x path="Int"/>
</f></fits>
</class></impl>
	</abstract>
	<class path="trilateral3.structure._XYWH.XYWH_Impl_" params="" file="src/trilateral3/structure/XYWH.hx" private="1" module="trilateral3.structure.XYWH" final="1">
		<_new public="1" get="inline" set="null" line="19" static="1">
			<f a="xywh">
				<c path="trilateral3.structure.XYWH_"/>
				<x path="trilateral3.structure.XYWH"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<r public="1" get="inline" set="null" line="24" static="1"><f a="this">
	<c path="trilateral3.structure.XYWH_"/>
	<x path="Int"/>
</f></r>
		<b public="1" get="inline" set="null" line="28" static="1"><f a="this">
	<c path="trilateral3.structure.XYWH_"/>
	<x path="Int"/>
</f></b>
		<setR public="1" get="inline" set="null" line="32" static="1"><f a="this:rr">
	<c path="trilateral3.structure.XYWH_"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setR>
		<setB public="1" get="inline" set="null" line="36" static="1"><f a="this:bb">
	<c path="trilateral3.structure.XYWH_"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setB>
		<mother get="inline" set="null" line="40" static="1"><f a="this">
	<c path="trilateral3.structure.XYWH_"/>
	<x path="trilateral3.structure.WH"/>
</f></mother>
		<area public="1" get="inline" set="null" line="45" static="1"><f a="this">
	<c path="trilateral3.structure.XYWH_"/>
	<x path="Int"/>
</f></area>
		<perimeter public="1" get="inline" set="null" line="49" static="1"><f a="this">
	<c path="trilateral3.structure.XYWH_"/>
	<x path="Int"/>
</f></perimeter>
		<fits public="1" get="inline" set="null" line="53" static="1"><f a="this:r">
	<c path="trilateral3.structure.XYWH_"/>
	<x path="trilateral3.structure.WH"/>
	<x path="Int"/>
</f></fits>
	</class>
</haxe>