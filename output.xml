<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/usr/local/lib/haxe/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<impl><class path="_Any.Any_Impl_" params="" file="/usr/local/lib/haxe/std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="35" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<__cast params="T" get="inline" set="null" line="38" static="1">
		<f a="value">
			<c path="__cast.T"/>
			<x path="Any"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":from"/>
		</meta>
	</__cast>
	<toString get="inline" set="null" line="41" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</toString>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/usr/local/lib/haxe/std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="35" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<__cast params="T" get="inline" set="null" line="38" static="1">
			<f a="value">
				<c path="__cast.T"/>
				<x path="Any"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":from"/>
			</meta>
		</__cast>
		<toString get="inline" set="null" line="41" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</toString>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Array" params="T" file="/usr/local/lib/haxe/std/js/_std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<iterator public="1" get="inline" set="null" line="88">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/usr/local/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/usr/local/lib/haxe/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="46" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="50" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="54" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" get="inline" set="null" line="42">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="js.lib.RegExp" params="" file="/usr/local/lib/haxe/std/js/lib/RegExp.hx" extern="1">
		<global public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "g" flag is used with the regular expression.</haxe_doc>
		</global>
		<ignoreCase public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "i" flag is used with the regular expression.</haxe_doc>
		</ignoreCase>
		<multiline public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "m" flag is used with the regular expression.</haxe_doc>
		</multiline>
		<source public="1" set="null">
			<c path="String"/>
			<haxe_doc>The source text of the regexp object, it doesn't contain the two forward slashes on both sides and any flags.</haxe_doc>
		</source>
		<lastIndex public="1">
			<x path="Int"/>
			<haxe_doc>The index at which to start the next match.</haxe_doc>
		</lastIndex>
		<exec public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Null"><c path="js.lib.RegExpMatch"/></x>
			</f>
			<haxe_doc>Execute a search for a match in a specified string.
		Returns a result array, or null.</haxe_doc>
		</exec>
		<test public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Execute a search for a match between a regular expression and a specified string.
		Returns true or false.</haxe_doc>
		</test>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return a string representing the regular expression.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="pattern:?flags">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a regular expression object for matching text with a pattern.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Native JavaScript regular expressions.

	For cross-platform regular expressions, use Haxe `EReg` class or
	[regexp literals](https://haxe.org/manual/std-regex.html).

	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp>]]></haxe_doc>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<class path="_EReg.HaxeRegExp" params="" file="/usr/local/lib/haxe/std/js/_std/EReg.hx" private="1" module="EReg" extern="1">
		<extends path="js.lib.RegExp"/>
		<m public="1"><c path="js.lib.RegExpMatch"/></m>
		<s public="1"><c path="String"/></s>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/local/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/local/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/usr/local/lib/haxe/std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.Syntax" params="" file="/usr/local/lib/haxe/std/js/Syntax.hx" extern="1">
		<code public="1" set="method" static="1">
			<f a="code:args">
				<c path="String"/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.

		`code` must be a string constant.

		Additional `args` are supported to provide code interpolation, for example:
		```haxe
		Syntax.code("console.log({0}, {1})", "hi", 42);
		```
		will generate
		```haxe
		console.log("hi", 42);
		```

		Emits a compilation error if the count of `args` does not match the count of placeholders in `code`.</haxe_doc>
		</code>
		<plainCode public="1" set="method" static="1">
			<f a="code">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.
		The same as `js.Syntax.code` except this one does not provide code interpolation.</haxe_doc>
		</plainCode>
		<construct public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="construct.T"/></x>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="construct.T"/>
			</f>
			<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
			<overloads><construct public="1" set="method">
	<f a="cl:args">
		<c path="String"/>
		<x path="haxe.extern.Rest"><d/></x>
		<d/>
	</f>
	<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
</construct></overloads>
		</construct>
		<instanceof public="1" set="method" static="1">
			<f a="v:cl">
				<d/>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `v instanceof cl` expression.</haxe_doc>
		</instanceof>
		<typeof public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Generate `typeof o` expression.</haxe_doc>
		</typeof>
		<strictEq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a === b` expression.</haxe_doc>
		</strictEq>
		<strictNeq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a !== b` expression.</haxe_doc>
		</strictNeq>
		<delete public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
			<overloads><delete public="1" set="method">
	<f a="o:f">
		<d/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
</delete></overloads>
		</delete>
		<field public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Generate `o.f` expression, if `f` is a constant string,
		or `o[f]` if it's any other expression.</haxe_doc>
		</field>
		<haxe_doc>Generate JavaScript syntax not directly supported by Haxe.
	Use only at low-level when specific target-specific code-generation is required.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noClosure"/>
		</meta>
	</class>
	<class path="js.lib.Date" params="" file="/usr/local/lib/haxe/std/js/lib/Date.hx" extern="1">
		<fromHaxeDate public="1" get="inline" set="null" line="40" static="1">
			<f a="date">
				<t path="_Date.HaxeDate"/>
				<c path="js.lib.Date"/>
			</f>
			<haxe_doc>Cast Haxe's Date to js.lib.Date.</haxe_doc>
		</fromHaxeDate>
		<toHaxeDate public="1" get="inline" set="null" line="47" static="1">
			<f a="date">
				<c path="js.lib.Date"/>
				<t path="_Date.HaxeDate"/>
			</f>
			<haxe_doc>Cast js.lib.Date to Haxe's Date.</haxe_doc>
		</toHaxeDate>
		<now public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value corresponding to the current time - the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC, with leap seconds ignored</haxe_doc>
		</now>
		<parse public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Parses a string representation of a date and returns the number of milliseconds since 1 January, 1970, 00:00:00, UTC, with leap seconds ignored.</haxe_doc>
		</parse>
		<UTC public="1" set="method" static="1">
			<f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the number of milliseconds since January 1, 1970, 00:00:00 UTC, with leap seconds ignored.</haxe_doc>
		</UTC>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the month (1-31) for the specified date according to local time.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) for the specified date according to local time.</haxe_doc>
		</getDay>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) of the specified date according to local time.</haxe_doc>
		</getFullYear>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hour (0-23) in the specified date according to local time.</haxe_doc>
		</getHours>
		<getMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to local time.</haxe_doc>
		</getMilliseconds>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to local time.</haxe_doc>
		</getMinutes>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to local time.</haxe_doc>
		</getMonth>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to local time.</haxe_doc>
		</getSeconds>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).</haxe_doc>
		</getTime>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time-zone offset in minutes for the current locale.</haxe_doc>
		</getTimezoneOffset>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day (date) of the month (1-31) in the specified date according to universal time.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) in the specified date according to universal time.</haxe_doc>
		</getUTCDay>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) in the specified date according to universal time.</haxe_doc>
		</getUTCFullYear>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours (0-23) in the specified date according to universal time.</haxe_doc>
		</getUTCHours>
		<getUTCMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to universal time.</haxe_doc>
		</getUTCMilliseconds>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCMinutes>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to universal time.</haxe_doc>
		</getUTCMonth>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCSeconds>
		<setDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to local time.</haxe_doc>
		</setDate>
		<setFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.</haxe_doc>
		</setFullYear>
		<setHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hours for a specified date according to local time.</haxe_doc>
		</setHours>
		<setMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to local time.</haxe_doc>
		</setMilliseconds>
		<setMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to local time.</haxe_doc>
		</setMinutes>
		<setMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to local time.</haxe_doc>
		</setMonth>
		<setSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to local time.</haxe_doc>
		</setSeconds>
		<setTime public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.</haxe_doc>
		</setTime>
		<setUTCDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to universal time.</haxe_doc>
		</setUTCDate>
		<setUTCFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.</haxe_doc>
		</setUTCFullYear>
		<setUTCHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hour for a specified date according to universal time.</haxe_doc>
		</setUTCHours>
		<setUTCMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to universal time.</haxe_doc>
		</setUTCMilliseconds>
		<setUTCMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to universal time.</haxe_doc>
		</setUTCMinutes>
		<setUTCMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to universal time.</haxe_doc>
		</setUTCMonth>
		<setUTCSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to universal time.</haxe_doc>
		</setUTCSeconds>
		<toDateString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "date" portion of the Date as a human-readable string.</haxe_doc>
		</toDateString>
		<toISOString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string following the ISO 8601 Extended Format.</haxe_doc>
		</toISOString>
		<toJSON public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the Date using toISOString(). Intended for use by JSON.stringify().</haxe_doc>
		</toJSON>
		<toLocaleDateString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleDateString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
</toLocaleDateString></overloads>
		</toLocaleDateString>
		<toLocaleFormat public="1" set="method">
			<f a="format">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a date to a string, using a format string.</haxe_doc>
		</toLocaleFormat>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
			<overloads><toLocaleString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
</toLocaleString></overloads>
		</toLocaleString>
		<toLocaleTimeString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleTimeString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
</toLocaleTimeString></overloads>
		</toLocaleTimeString>
		<toSource public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source for an equivalent Date object; you can use this value to create a new object. Overrides the Object.prototype.toSource() method.</haxe_doc>
		</toSource>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the specified Date object. Overrides the Object.prototype.toString() method.</haxe_doc>
		</toString>
		<toTimeString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "time" portion of the Date as a human-readable string.</haxe_doc>
		</toTimeString>
		<toUTCString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string using the UTC timezone.</haxe_doc>
		</toUTCString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="dateString">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<haxe_doc>Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Date"</e></m>
		</meta>
	</class>
	<typedef path="Map" params="K:V" file="/usr/local/lib/haxe/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="/usr/local/lib/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/usr/local/lib/haxe/std/js/_std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><x path="Float"/></PI>
		<abs public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></abs>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<ceil public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></ceil>
		<cos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></cos>
		<floor public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></floor>
		<max public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></max>
		<min public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></min>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><x path="Float"/></f></random>
		<round public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></round>
		<sin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sin>
		<sqrt public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sqrt>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
		</meta>
	</class>
	<class path="String" params="" file="/usr/local/lib/haxe/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" get="inline" set="null" line="43" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<charCodeAt public="1" get="inline" set="null" line="35">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<substr public="1" get="inline" set="null" line="39">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="/usr/local/lib/haxe/std/js/_std/Std.hx">
		<string public="1" set="method" line="46" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<parseInt public="1" set="method" line="55" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If `x` is null, the result is unspecified.
		If `x` cannot be parsed as integer, the result is `null`.</haxe_doc>
		</parseInt>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="_String.String_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/String.hx" module="String">
		<fromCharCode public="1" set="method" line="43" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromCharCode>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="StringBuf" params="" file="/usr/local/lib/haxe/std/StringBuf.hx">
		<b><c path="String"/></b>
		<new public="1" get="inline" set="null" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="StringTools" params="" file="/usr/local/lib/haxe/std/StringTools.hx">
		<hex public="1" set="method" line="426" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="UInt" params="" file="/usr/local/lib/haxe/std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash and C#.
	Simulate it for other platforms.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/usr/local/lib/haxe/std/UInt.hx" private="1" module="UInt" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="dsHelper.flat.f32.Float32Flat4" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32Flat4.hx">
		<this><x path="dsHelper.flat.io.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32Flat4.Float32Flat4_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32Flat4.hx" private="1" module="dsHelper.flat.f32.Float32Flat4" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32Flat4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32Flat4.Float32Flat4_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32Flat4.hx" private="1" module="dsHelper.flat.f32.Float32Flat4" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32Flat4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.f32.Float32Flat9" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32Flat9.hx">
		<this><x path="dsHelper.flat.io.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32Flat9.Float32Flat9_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32Flat9.hx" private="1" module="dsHelper.flat.f32.Float32Flat9" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32Flat9"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32Flat9.Float32Flat9_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32Flat9.hx" private="1" module="dsHelper.flat.f32.Float32Flat9" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32Flat9"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.f32.Float32FlatRGBA" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32FlatRGBA.hx">
		<this><x path="dsHelper.flat.f32.Float32Flat4"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32FlatRGBA.Float32FlatRGBA_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32FlatRGBA.hx" private="1" module="dsHelper.flat.f32.Float32FlatRGBA" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32FlatRGBA"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<red public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</red>
	<get_red set="method" line="11" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_red>
	<set_red set="method" line="14" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_red>
	<green public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</green>
	<get_green get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_green>
	<set_green get="inline" set="null" line="24" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_green>
	<blue public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blue>
	<get_blue get="inline" set="null" line="30" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blue>
	<set_blue get="inline" set="null" line="34" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blue>
	<alpha public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alpha>
	<get_alpha get="inline" set="null" line="40" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alpha>
	<set_alpha get="inline" set="null" line="44" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alpha>
	<rgb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgb>
	<set_rgb get="inline" set="null" line="50" static="1">
		<f a="this:col">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgb>
	<get_rgb get="inline" set="null" line="58" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgb>
	<argb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argb>
	<set_argb get="inline" set="null" line="65" static="1">
		<f a="this:col">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argb>
	<get_argb get="inline" set="null" line="73" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argb>
	<readItem public="1" get="inline" set="null" line="81" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="86" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<colorTriangles public="1" get="inline" set="null" line="90" static="1">
		<f a="this:color:times">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="94" static="1">
		<f a="this:colorA:colorB:colorC">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cornerColors>
	<hex public="1" get="inline" set="null" line="103" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hex>
	<hexAll public="1" get="inline" set="null" line="107" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexAll>
	<alphaChannel public="1" get="inline" set="null" line="118" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="121" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="124" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="127" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32FlatRGBA.Float32FlatRGBA_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32FlatRGBA.hx" private="1" module="dsHelper.flat.f32.Float32FlatRGBA" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32FlatRGBA"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<red public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</red>
		<get_red set="method" line="11" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_red>
		<set_red set="method" line="14" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_red>
		<green public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</green>
		<get_green get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_green>
		<set_green get="inline" set="null" line="24" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_green>
		<blue public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blue>
		<get_blue get="inline" set="null" line="30" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blue>
		<set_blue get="inline" set="null" line="34" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blue>
		<alpha public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alpha>
		<get_alpha get="inline" set="null" line="40" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alpha>
		<set_alpha get="inline" set="null" line="44" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alpha>
		<rgb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgb>
		<set_rgb get="inline" set="null" line="50" static="1">
			<f a="this:col">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgb>
		<get_rgb get="inline" set="null" line="58" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgb>
		<argb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argb>
		<set_argb get="inline" set="null" line="65" static="1">
			<f a="this:col">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argb>
		<get_argb get="inline" set="null" line="73" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argb>
		<readItem public="1" get="inline" set="null" line="81" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="86" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<colorTriangles public="1" get="inline" set="null" line="90" static="1">
			<f a="this:color:times">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="94" static="1">
			<f a="this:colorA:colorB:colorC">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cornerColors>
		<hex public="1" get="inline" set="null" line="103" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hex>
		<hexAll public="1" get="inline" set="null" line="107" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexAll>
		<alphaChannel public="1" get="inline" set="null" line="118" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="121" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="124" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="127" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="dsHelper.flat.f32.Float32FlatTriangle" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32FlatTriangle.hx">
		<this><x path="dsHelper.flat.f32.Float32Flat9"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32FlatTriangle.Float32FlatTriangle_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32FlatTriangle.hx" private="1" module="dsHelper.flat.f32.Float32FlatTriangle" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<ax public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ax>
	<get_ax set="method" line="11" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ax>
	<set_ax set="method" line="14" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ax>
	<ay public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ay>
	<get_ay set="method" line="19" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ay>
	<set_ay set="method" line="22" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ay>
	<az public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</az>
	<get_az set="method" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_az>
	<set_az set="method" line="30" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_az>
	<bx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bx>
	<get_bx set="method" line="35" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bx>
	<set_bx set="method" line="38" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bx>
	<by public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</by>
	<get_by set="method" line="43" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_by>
	<set_by set="method" line="46" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_by>
	<bz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bz>
	<get_bz set="method" line="51" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bz>
	<set_bz set="method" line="54" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bz>
	<cx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cx>
	<get_cx set="method" line="59" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cx>
	<set_cx set="method" line="62" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cx>
	<cy public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cy>
	<get_cy set="method" line="67" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cy>
	<set_cy set="method" line="70" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cy>
	<cz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cz>
	<get_cz set="method" line="75" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cz>
	<set_cz set="method" line="78" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cz>
	<triangle public="1" set="method" line="83" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangle>
	<adjustWinding public="1" set="method" line="107" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="111" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="115" static="1">
		<f a="this:x">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="124" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="128" static="1">
		<f a="this:y">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</z>
	<get_z get="inline" set="null" line="137" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_z get="inline" set="null" line="141" static="1">
		<f a="this:z">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="150" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="155" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<back public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</back>
	<get_back get="inline" set="null" line="160" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_back>
	<moveDelta set="method" line="164" static="1">
		<f a="this:dx:dy">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDelta>
	<sign public="1" get="inline" set="null" line="172" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<liteHit public="1" get="inline" set="null" line="177" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</liteHit>
	<fullHit public="1" set="method" line="185" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fullHit>
	<rotate public="1" get="inline" set="null" line="190" static="1">
		<f a="this:x:y:theta">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<rotateTrig public="1" get="inline" set="null" line="196" static="1">
		<f a="this:x:y:cos:sin">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateTrig>
	<prettyString public="1" get="inline" set="null" line="225" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyString>
	<prettyAll public="1" get="inline" set="null" line="231" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAll>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32FlatTriangle.Float32FlatTriangle_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32FlatTriangle.hx" private="1" module="dsHelper.flat.f32.Float32FlatTriangle" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<ax public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ax>
		<get_ax set="method" line="11" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ax>
		<set_ax set="method" line="14" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ax>
		<ay public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ay>
		<get_ay set="method" line="19" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ay>
		<set_ay set="method" line="22" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ay>
		<az public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</az>
		<get_az set="method" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_az>
		<set_az set="method" line="30" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_az>
		<bx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bx>
		<get_bx set="method" line="35" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bx>
		<set_bx set="method" line="38" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bx>
		<by public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</by>
		<get_by set="method" line="43" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_by>
		<set_by set="method" line="46" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_by>
		<bz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bz>
		<get_bz set="method" line="51" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bz>
		<set_bz set="method" line="54" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bz>
		<cx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cx>
		<get_cx set="method" line="59" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cx>
		<set_cx set="method" line="62" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cx>
		<cy public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cy>
		<get_cy set="method" line="67" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cy>
		<set_cy set="method" line="70" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cy>
		<cz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cz>
		<get_cz set="method" line="75" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cz>
		<set_cz set="method" line="78" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cz>
		<triangle public="1" set="method" line="83" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangle>
		<adjustWinding public="1" set="method" line="107" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="111" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="115" static="1">
			<f a="this:x">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="124" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="128" static="1">
			<f a="this:y">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</z>
		<get_z get="inline" set="null" line="137" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_z get="inline" set="null" line="141" static="1">
			<f a="this:z">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="150" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="155" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<back public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</back>
		<get_back get="inline" set="null" line="160" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_back>
		<moveDelta set="method" line="164" static="1">
			<f a="this:dx:dy">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDelta>
		<sign public="1" get="inline" set="null" line="172" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<liteHit public="1" get="inline" set="null" line="177" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</liteHit>
		<fullHit public="1" set="method" line="185" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fullHit>
		<rotate public="1" get="inline" set="null" line="190" static="1">
			<f a="this:x:y:theta">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<rotateTrig public="1" get="inline" set="null" line="196" static="1">
			<f a="this:x:y:cos:sin">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateTrig>
		<prettyString public="1" get="inline" set="null" line="225" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyString>
		<prettyAll public="1" get="inline" set="null" line="231" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAll>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="dsHelper.flat.io.Float32Flat" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/io/Float32Flat.hx">
		<from>
			<icast><t path="dsHelper.haxe.io.Float32Array"/></icast>
			<icast field="fromArray"><t path="dsHelper.haxe.io.Float32Array"/></icast>
		</from>
		<this><t path="dsHelper.haxe.io.Float32Array"/></this>
		<to>
			<icast><t path="dsHelper.haxe.io.Float32Array"/></icast>
			<icast field="toArray"><x path="haxe.io.Float32Array"/></icast>
		</to>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.io._Float32Flat.Float32Flat_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/io/Float32Flat.hx" private="1" module="dsHelper.flat.io.Float32Flat" final="1">
	<readItem public="1" get="inline" set="null" line="17" static="1">
		<f a="this:k">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Flat32(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="30" static="1">
		<f a="this:k:v">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Flat32(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
	</writeItem>
	<_new public="1" get="inline" set="null" line="36" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.io.Float32Flat"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<size public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</size>
	<get_size set="method" line="44" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_size>
	<set_size set="method" line="49" static="1">
		<f a="this:id">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_size>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="54" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="58" static="1">
		<f a="this:id">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="68" static="1">
		<f a="this:pos_">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<updateLen get="inline" set="null" line="74" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</updateLen>
	<hasNext public="1" get="inline" set="null" line="79" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hasNext>
	<next public="1" get="inline" set="null" line="81" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</next>
	<increment public="1" get="inline" set="null" line="86" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</increment>
	<toArray public="1" get="inline" set="null" line="91" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<fromArray public="1" get="inline" set="null" line="96" static="1">
		<f a="arr">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="dsHelper.flat.io.Float32Flat"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArray>
	<clone public="1" get="inline" set="null" line="102" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="dsHelper.flat.io.Float32Flat"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clone>
	<fill public="1" get="inline" set="null" line="108" static="1">
		<f a="this:arr">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fill>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.io._Float32Flat.Float32Flat_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/io/Float32Flat.hx" private="1" module="dsHelper.flat.io.Float32Flat" final="1">
		<readItem public="1" get="inline" set="null" line="17" static="1">
			<f a="this:k">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Flat32(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="30" static="1">
			<f a="this:k:v">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Flat32(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
		</writeItem>
		<_new public="1" get="inline" set="null" line="36" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.io.Float32Flat"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<size public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</size>
		<get_size set="method" line="44" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_size>
		<set_size set="method" line="49" static="1">
			<f a="this:id">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_size>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="54" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="58" static="1">
			<f a="this:id">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="68" static="1">
			<f a="this:pos_">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<updateLen get="inline" set="null" line="74" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</updateLen>
		<hasNext public="1" get="inline" set="null" line="79" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="81" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</next>
		<increment public="1" get="inline" set="null" line="86" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</increment>
		<toArray public="1" get="inline" set="null" line="91" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<fromArray public="1" get="inline" set="null" line="96" static="1">
			<f a="arr">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="dsHelper.flat.io.Float32Flat"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArray>
		<clone public="1" get="inline" set="null" line="102" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="dsHelper.flat.io.Float32Flat"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clone>
		<fill public="1" get="inline" set="null" line="108" static="1">
			<f a="this:arr">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fill>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="dsHelper.flatInterleave.FloatColorTriangles" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flatInterleave/FloatColorTriangles.hx">
		<this><x path="dsHelper.flatInterleave.core.Flat3x7"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flatInterleave/FloatColorTriangles.hx" private="1" module="dsHelper.flatInterleave.FloatColorTriangles" final="1">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<create public="1" get="inline" set="null" line="8" static="1"><f a="len">
	<x path="Int"/>
	<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
</f></create>
	<ax public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ax>
	<get_ax set="method" line="13" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ax>
	<set_ax set="method" line="16" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ax>
	<ay public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ay>
	<get_ay set="method" line="21" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ay>
	<set_ay set="method" line="24" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ay>
	<az public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</az>
	<get_az set="method" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_az>
	<set_az set="method" line="32" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_az>
	<redA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</redA>
	<get_redA set="method" line="38" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_redA>
	<set_redA set="method" line="41" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_redA>
	<greenA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</greenA>
	<get_greenA get="inline" set="null" line="47" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_greenA>
	<set_greenA get="inline" set="null" line="51" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_greenA>
	<blueA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blueA>
	<get_blueA get="inline" set="null" line="57" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blueA>
	<set_blueA get="inline" set="null" line="61" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blueA>
	<alphaA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alphaA>
	<get_alphaA get="inline" set="null" line="67" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alphaA>
	<set_alphaA get="inline" set="null" line="71" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alphaA>
	<bx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bx>
	<get_bx set="method" line="78" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bx>
	<set_bx set="method" line="81" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bx>
	<by public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</by>
	<get_by set="method" line="86" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_by>
	<set_by set="method" line="89" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_by>
	<bz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bz>
	<get_bz set="method" line="94" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bz>
	<set_bz set="method" line="97" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bz>
	<redB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</redB>
	<get_redB set="method" line="103" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_redB>
	<set_redB set="method" line="106" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_redB>
	<greenB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</greenB>
	<get_greenB get="inline" set="null" line="112" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_greenB>
	<set_greenB get="inline" set="null" line="116" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_greenB>
	<blueB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blueB>
	<get_blueB get="inline" set="null" line="122" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blueB>
	<set_blueB get="inline" set="null" line="126" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blueB>
	<alphaB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alphaB>
	<get_alphaB get="inline" set="null" line="132" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alphaB>
	<set_alphaB get="inline" set="null" line="136" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alphaB>
	<cx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cx>
	<get_cx set="method" line="143" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cx>
	<set_cx set="method" line="146" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cx>
	<cy public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cy>
	<get_cy set="method" line="151" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cy>
	<set_cy set="method" line="154" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cy>
	<cz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cz>
	<get_cz set="method" line="159" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cz>
	<set_cz set="method" line="162" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cz>
	<redC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</redC>
	<get_redC set="method" line="168" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_redC>
	<set_redC set="method" line="171" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_redC>
	<greenC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</greenC>
	<get_greenC get="inline" set="null" line="177" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_greenC>
	<set_greenC get="inline" set="null" line="181" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_greenC>
	<blueC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blueC>
	<get_blueC get="inline" set="null" line="187" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blueC>
	<set_blueC get="inline" set="null" line="191" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blueC>
	<alphaC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alphaC>
	<get_alphaC get="inline" set="null" line="197" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alphaC>
	<set_alphaC get="inline" set="null" line="201" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alphaC>
	<triangle public="1" set="method" line="207" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangle>
	<adjustWinding public="1" set="method" line="231" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="235" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="239" static="1">
		<f a="this:x">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="248" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="252" static="1">
		<f a="this:y">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</z>
	<get_z get="inline" set="null" line="261" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_z get="inline" set="null" line="265" static="1">
		<f a="this:z">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="274" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="279" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<back public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</back>
	<get_back get="inline" set="null" line="284" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_back>
	<moveDelta set="method" line="288" static="1">
		<f a="this:dx:dy">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDelta>
	<sign public="1" get="inline" set="null" line="296" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<liteHit public="1" get="inline" set="null" line="301" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</liteHit>
	<fullHit public="1" set="method" line="309" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fullHit>
	<rotate public="1" get="inline" set="null" line="314" static="1">
		<f a="this:x:y:theta">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<rotateTrig public="1" get="inline" set="null" line="320" static="1">
		<f a="this:x:y:cos:sin">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateTrig>
	<colorTriangles public="1" get="inline" set="null" line="349" static="1">
		<f a="this:color:times">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="356" static="1">
		<f a="this:colorA:colorB:colorC">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cornerColors>
	<rgb public="1" get="null" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgb>
	<set_rgb get="inline" set="null" line="363" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgb>
	<rgbA public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgbA>
	<set_rgbA get="inline" set="null" line="371" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgbA>
	<get_rgbA get="inline" set="null" line="379" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgbA>
	<rgbB public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgbB>
	<set_rgbB get="inline" set="null" line="386" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgbB>
	<get_rgbB get="inline" set="null" line="394" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgbB>
	<rgbC public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgbC>
	<set_rgbC get="inline" set="null" line="401" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgbC>
	<get_rgbC get="inline" set="null" line="409" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgbC>
	<argb public="1" get="null" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argb>
	<set_argb get="inline" set="null" line="416" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argb>
	<argbA public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbA>
	<set_argbA get="inline" set="null" line="424" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbA>
	<get_argbA get="inline" set="null" line="432" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbA>
	<argbB public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbB>
	<set_argbB get="inline" set="null" line="440" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbB>
	<get_argbB get="inline" set="null" line="448" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbB>
	<argbC public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbC>
	<set_argbC get="inline" set="null" line="456" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbC>
	<get_argbC get="inline" set="null" line="464" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbC>
	<prettyStringVert public="1" get="inline" set="null" line="471" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyStringVert>
	<prettyAllVert public="1" get="inline" set="null" line="477" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAllVert>
	<hex public="1" get="inline" set="null" line="488" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hex>
	<hexA public="1" get="inline" set="null" line="492" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexA>
	<hexB public="1" get="inline" set="null" line="496" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexB>
	<hexC public="1" get="inline" set="null" line="500" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexC>
	<hexAll public="1" get="inline" set="null" line="504" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexAll>
	<alphaChannel public="1" get="inline" set="null" line="515" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="518" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="521" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="524" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flatInterleave/FloatColorTriangles.hx" private="1" module="dsHelper.flatInterleave.FloatColorTriangles" final="1">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<create public="1" get="inline" set="null" line="8" static="1"><f a="len">
	<x path="Int"/>
	<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
</f></create>
		<ax public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ax>
		<get_ax set="method" line="13" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ax>
		<set_ax set="method" line="16" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ax>
		<ay public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ay>
		<get_ay set="method" line="21" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ay>
		<set_ay set="method" line="24" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ay>
		<az public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</az>
		<get_az set="method" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_az>
		<set_az set="method" line="32" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_az>
		<redA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</redA>
		<get_redA set="method" line="38" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_redA>
		<set_redA set="method" line="41" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_redA>
		<greenA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</greenA>
		<get_greenA get="inline" set="null" line="47" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_greenA>
		<set_greenA get="inline" set="null" line="51" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_greenA>
		<blueA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blueA>
		<get_blueA get="inline" set="null" line="57" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blueA>
		<set_blueA get="inline" set="null" line="61" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blueA>
		<alphaA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alphaA>
		<get_alphaA get="inline" set="null" line="67" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alphaA>
		<set_alphaA get="inline" set="null" line="71" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alphaA>
		<bx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bx>
		<get_bx set="method" line="78" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bx>
		<set_bx set="method" line="81" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bx>
		<by public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</by>
		<get_by set="method" line="86" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_by>
		<set_by set="method" line="89" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_by>
		<bz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bz>
		<get_bz set="method" line="94" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bz>
		<set_bz set="method" line="97" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bz>
		<redB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</redB>
		<get_redB set="method" line="103" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_redB>
		<set_redB set="method" line="106" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_redB>
		<greenB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</greenB>
		<get_greenB get="inline" set="null" line="112" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_greenB>
		<set_greenB get="inline" set="null" line="116" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_greenB>
		<blueB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blueB>
		<get_blueB get="inline" set="null" line="122" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blueB>
		<set_blueB get="inline" set="null" line="126" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blueB>
		<alphaB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alphaB>
		<get_alphaB get="inline" set="null" line="132" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alphaB>
		<set_alphaB get="inline" set="null" line="136" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alphaB>
		<cx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cx>
		<get_cx set="method" line="143" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cx>
		<set_cx set="method" line="146" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cx>
		<cy public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cy>
		<get_cy set="method" line="151" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cy>
		<set_cy set="method" line="154" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cy>
		<cz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cz>
		<get_cz set="method" line="159" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cz>
		<set_cz set="method" line="162" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cz>
		<redC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</redC>
		<get_redC set="method" line="168" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_redC>
		<set_redC set="method" line="171" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_redC>
		<greenC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</greenC>
		<get_greenC get="inline" set="null" line="177" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_greenC>
		<set_greenC get="inline" set="null" line="181" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_greenC>
		<blueC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blueC>
		<get_blueC get="inline" set="null" line="187" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blueC>
		<set_blueC get="inline" set="null" line="191" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blueC>
		<alphaC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alphaC>
		<get_alphaC get="inline" set="null" line="197" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alphaC>
		<set_alphaC get="inline" set="null" line="201" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alphaC>
		<triangle public="1" set="method" line="207" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangle>
		<adjustWinding public="1" set="method" line="231" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="235" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="239" static="1">
			<f a="this:x">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="248" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="252" static="1">
			<f a="this:y">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</z>
		<get_z get="inline" set="null" line="261" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_z get="inline" set="null" line="265" static="1">
			<f a="this:z">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="274" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="279" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<back public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</back>
		<get_back get="inline" set="null" line="284" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_back>
		<moveDelta set="method" line="288" static="1">
			<f a="this:dx:dy">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDelta>
		<sign public="1" get="inline" set="null" line="296" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<liteHit public="1" get="inline" set="null" line="301" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</liteHit>
		<fullHit public="1" set="method" line="309" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fullHit>
		<rotate public="1" get="inline" set="null" line="314" static="1">
			<f a="this:x:y:theta">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<rotateTrig public="1" get="inline" set="null" line="320" static="1">
			<f a="this:x:y:cos:sin">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateTrig>
		<colorTriangles public="1" get="inline" set="null" line="349" static="1">
			<f a="this:color:times">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="356" static="1">
			<f a="this:colorA:colorB:colorC">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cornerColors>
		<rgb public="1" get="null" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgb>
		<set_rgb get="inline" set="null" line="363" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgb>
		<rgbA public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgbA>
		<set_rgbA get="inline" set="null" line="371" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgbA>
		<get_rgbA get="inline" set="null" line="379" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgbA>
		<rgbB public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgbB>
		<set_rgbB get="inline" set="null" line="386" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgbB>
		<get_rgbB get="inline" set="null" line="394" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgbB>
		<rgbC public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgbC>
		<set_rgbC get="inline" set="null" line="401" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgbC>
		<get_rgbC get="inline" set="null" line="409" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgbC>
		<argb public="1" get="null" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argb>
		<set_argb get="inline" set="null" line="416" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argb>
		<argbA public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbA>
		<set_argbA get="inline" set="null" line="424" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbA>
		<get_argbA get="inline" set="null" line="432" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbA>
		<argbB public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbB>
		<set_argbB get="inline" set="null" line="440" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbB>
		<get_argbB get="inline" set="null" line="448" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbB>
		<argbC public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbC>
		<set_argbC get="inline" set="null" line="456" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbC>
		<get_argbC get="inline" set="null" line="464" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbC>
		<prettyStringVert public="1" get="inline" set="null" line="471" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyStringVert>
		<prettyAllVert public="1" get="inline" set="null" line="477" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAllVert>
		<hex public="1" get="inline" set="null" line="488" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hex>
		<hexA public="1" get="inline" set="null" line="492" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexA>
		<hexB public="1" get="inline" set="null" line="496" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexB>
		<hexC public="1" get="inline" set="null" line="500" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexC>
		<hexAll public="1" get="inline" set="null" line="504" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexAll>
		<alphaChannel public="1" get="inline" set="null" line="515" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="518" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="521" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="524" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="dsHelper.flatInterleave.core.Flat3x7" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flatInterleave/core/Flat3x7.hx">
		<this><x path="dsHelper.flat.io.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flatInterleave/core/Flat3x7.hx" private="1" module="dsHelper.flatInterleave.core.Flat3x7" final="1">
	<readItem public="1" get="inline" set="null" line="7" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="11" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="16" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="21" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="25" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="30" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flatInterleave/core/Flat3x7.hx" private="1" module="dsHelper.flatInterleave.core.Flat3x7" final="1">
		<readItem public="1" get="inline" set="null" line="7" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="11" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="16" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="21" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="25" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="30" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<typedef path="dsHelper.haxe.io.Float32Array" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/haxe/io/Float32Array.hx">
		<x path="haxe.io.Float32Array"/>
		<haxe_doc>* switches between Lime, NME and haxe.io.Float32Array</haxe_doc>
	</typedef>
	<abstract path="dsHelper.iterArr.ArrayPairs" params="T" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/iterArr/ArrayPairs.hx">
		<this><c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c></this>
		<impl><class path="dsHelper.iterArr._ArrayPairs.ArrayPairs_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/iterArr/ArrayPairs.hx" private="1" module="dsHelper.iterArr.ArrayPairs" final="1">
	<_new public="1" set="method" line="3" static="1">
		<f a="arr">
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			<x path="dsHelper.iterArr.ArrayPairs"><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="5" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<access get="inline" set="null" line="6" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			<x path="Int"/>
			<a>
				<y><c path="dsHelper.iterArr.ArrayPairs.T"/></y>
				<x><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
			</a>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</access>
	<getObj public="1" get="inline" set="null" line="9" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			<x path="Int"/>
			<a>
				<y><c path="dsHelper.iterArr.ArrayPairs.T"/></y>
				<x><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
			</a>
		</f>
		<meta><m n=":impl"/></meta>
	</getObj>
	<reverse public="1" get="inline" set="null" line="14" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="dsHelper.iterArr._ArrayPairs.ArrayPairs_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/iterArr/ArrayPairs.hx" private="1" module="dsHelper.iterArr.ArrayPairs" final="1">
		<_new public="1" set="method" line="3" static="1">
			<f a="arr">
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
				<x path="dsHelper.iterArr.ArrayPairs"><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="5" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<access get="inline" set="null" line="6" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
				<x path="Int"/>
				<a>
					<y><c path="dsHelper.iterArr.ArrayPairs.T"/></y>
					<x><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
				</a>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</access>
		<getObj public="1" get="inline" set="null" line="9" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
				<x path="Int"/>
				<a>
					<y><c path="dsHelper.iterArr.ArrayPairs.T"/></y>
					<x><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
				</a>
			</f>
			<meta><m n=":impl"/></meta>
		</getObj>
		<reverse public="1" get="inline" set="null" line="14" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="dsHelper.iterArr.ArrayTriple" params="T" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/iterArr/ArrayTriple.hx">
		<this><c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c></this>
		<impl><class path="dsHelper.iterArr._ArrayTriple.ArrayTriple_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/iterArr/ArrayTriple.hx" private="1" module="dsHelper.iterArr.ArrayTriple" final="1">
	<_new public="1" set="method" line="3" static="1">
		<f a="arr">
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			<x path="dsHelper.iterArr.ArrayTriple"><c path="dsHelper.iterArr.ArrayTriple.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="5" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<access get="inline" set="null" line="6" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			<x path="Int"/>
			<a>
				<c><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<b><c path="dsHelper.iterArr.ArrayTriple.T"/></b>
				<a><c path="dsHelper.iterArr.ArrayTriple.T"/></a>
			</a>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</access>
	<getObj public="1" get="inline" set="null" line="9" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			<x path="Int"/>
			<a>
				<c><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<b><c path="dsHelper.iterArr.ArrayTriple.T"/></b>
				<a><c path="dsHelper.iterArr.ArrayTriple.T"/></a>
			</a>
		</f>
		<meta><m n=":impl"/></meta>
	</getObj>
	<reverse public="1" get="inline" set="null" line="14" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="dsHelper.iterArr._ArrayTriple.ArrayTriple_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/iterArr/ArrayTriple.hx" private="1" module="dsHelper.iterArr.ArrayTriple" final="1">
		<_new public="1" set="method" line="3" static="1">
			<f a="arr">
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<x path="dsHelper.iterArr.ArrayTriple"><c path="dsHelper.iterArr.ArrayTriple.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="5" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<access get="inline" set="null" line="6" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<x path="Int"/>
				<a>
					<c><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
					<b><c path="dsHelper.iterArr.ArrayTriple.T"/></b>
					<a><c path="dsHelper.iterArr.ArrayTriple.T"/></a>
				</a>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</access>
		<getObj public="1" get="inline" set="null" line="9" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<x path="Int"/>
				<a>
					<c><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
					<b><c path="dsHelper.iterArr.ArrayTriple.T"/></b>
					<a><c path="dsHelper.iterArr.ArrayTriple.T"/></a>
				</a>
			</f>
			<meta><m n=":impl"/></meta>
		</getObj>
		<reverse public="1" get="inline" set="null" line="14" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="dsHelper.splitter.SpaceSplitter" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/splitter/SpaceSplitter.hx"><parse public="1" get="inline" set="null" line="5" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><c path="Array"><c path="String"/></c></c>
</f></parse></class>
	<class path="dsHelper.splitter.StringCodeIterator" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/splitter/StringCodeIterator.hx">
		<str expr="&quot;&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>""</e></m></meta>
		</str>
		<b><c path="StringBuf"/></b>
		<pos public="1"><x path="Int"/></pos>
		<c public="1"><x path="Int"/></c>
		<last2 public="1"><c path="String"/></last2>
		<last public="1"><c path="String"/></last>
		<length public="1"><x path="Int"/></length>
		<addChar public="1" get="inline" set="null" line="17"><f a=""><x path="Void"/></f></addChar>
		<toStr public="1" get="inline" set="null" line="21"><f a=""><c path="String"/></f></toStr>
		<isRepeat public="1" get="inline" set="null" line="27"><f a=""><x path="Bool"/></f></isRepeat>
		<resetBuffer public="1" get="inline" set="null" line="33"><f a=""><x path="Void"/></f></resetBuffer>
		<reset public="1" get="inline" set="null" line="37"><f a=""><x path="Void"/></f></reset>
		<hasNext public="1" get="inline" set="null" line="41"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="45"><f a=""><x path="Int"/></f></next>
		<new public="1" set="method" line="11">
			<f a="str_:?pos_" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ pos_ : 0 }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="flash.Lib" params="" file="/usr/local/lib/haxe/std/flash/Lib.hx">
		<current public="1" static="1"><c path="flash.display.MovieClip"/></current>
		<haxe_doc>Platform-specific Flash Library. Provides some platform-specific
	functions for the Flash target.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="flash.Vector" params="T" file="/usr/local/lib/haxe/std/flash/Vector.hx" extern="1">
		<ofArray public="1" params="T" line="56" static="1">
			<f a="v">
				<c path="Array"><c path="ofArray.T"/></c>
				<c path="flash.Vector"><c path="ofArray.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</ofArray>
		<convert public="1" params="T:U" line="60" static="1">
			<f a="v">
				<c path="flash.Vector"><c path="convert.T"/></c>
				<c path="flash.Vector"><c path="convert.U"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</convert>
		<typeReference public="1" params="T" line="91" static="1">
			<f a=""><x path="Class"><c path="flash.Vector"><c path="typeReference.T"/></c></x></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Get a run-time value referencing the `Vector` class with concrete type parameters.

		Normally in Haxe, for most of the types, type parameters are eliminated at run-time,
		so there is no way to check if a value is of a type with specific type parameters.

		However, on the Flash target, the `flash.Vector<T>` values carry type parameter
		information at run-time all the type-checks (such as `Std.isOfType` and `Std.downcast`) on them
		must be done using a `Class<T>` value that also carries the type parameters. However,
		Haxe syntax does not allow creating such values and this function exists to mitigate
		this limitation.

		It should be used as such:
		```haxe
		var specificVectorType:Class<Vector<Int>> = Vector.typeReference();
		trace(Std.isOfType(vec, specificVectorType));
		```
		or using the type-check syntax:
		```haxe
		trace(Std.isOfType(vec, (Vector.typeReference() : Class<Vector<Int>>)));
		```

		It's also helpful when working with native Flash libraries, that receive Class instances:
		```haxe
		new Signal((Vector.typeReference() : Class<Vector<Int>>));
		```]]></haxe_doc>
		</typeReference>
		<length public="1"><x path="Int"/></length>
		<fixed public="1"><x path="Bool"/></fixed>
		<concat public="1" set="method"><f a="?a">
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></concat>
		<join public="1" set="method"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<pop public="1" set="method"><f a=""><x path="Null"><c path="flash.Vector.T"/></x></f></pop>
		<push public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
</f></push>
		<reverse public="1" set="method"><f a=""><x path="Void"/></f></reverse>
		<shift public="1" set="method"><f a=""><x path="Null"><c path="flash.Vector.T"/></x></f></shift>
		<unshift public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Void"/>
</f></unshift>
		<slice public="1" set="method"><f a="?pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></slice>
		<sort public="1" set="method"><f a="f">
	<f a=":">
		<c path="flash.Vector.T"/>
		<c path="flash.Vector.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></splice>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<indexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<insertAt public="1" get="inline" set="null" line="50"><f a="index:element">
	<x path="Int"/>
	<c path="flash.Vector.T"/>
	<x path="Void"/>
</f></insertAt>
		<removeAt public="1">
			<f a="index">
				<x path="Int"/>
				<c path="flash.Vector.T"/>
			</f>
			<meta><m n=":require"><e>flash19</e></m></meta>
		</removeAt>
		<new public="1"><f a="?length:?fixed">
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The Vector class is very similar to Array but is only supported by the Flash Player 10+</haxe_doc>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.accessibility.AccessibilityImplementation" params="" file="/usr/local/lib/haxe/std/flash/accessibility/AccessibilityImplementation.hx" extern="1">
		<errno public="1"><x path="UInt"/></errno>
		<stub public="1"><x path="Bool"/></stub>
		<accDoDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="Void"/>
</f></accDoDefaultAction>
		<accLocation public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<d/>
</f></accLocation>
		<accSelect public="1" set="method"><f a="operation:childID">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></accSelect>
		<getChildIDArray public="1" set="method"><f a=""><c path="Array"><d/></c></f></getChildIDArray>
		<get_accDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accDefaultAction>
		<get_accFocus public="1" set="method"><f a=""><x path="UInt"/></f></get_accFocus>
		<get_accName public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accName>
		<get_accRole public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accRole>
		<get_accSelection public="1" set="method"><f a=""><c path="Array"><d/></c></f></get_accSelection>
		<get_accState public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accState>
		<get_accValue public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accValue>
		<get_selectionActiveIndex public="1" set="method"><f a=""><d/></f></get_selectionActiveIndex>
		<get_selectionAnchorIndex public="1" set="method"><f a=""><d/></f></get_selectionAnchorIndex>
		<isLabeledBy public="1" set="method"><f a="labelBounds">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></isLabeledBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.accessibility.AccessibilityProperties" params="" file="/usr/local/lib/haxe/std/flash/accessibility/AccessibilityProperties.hx" extern="1">
		<description public="1"><c path="String"/></description>
		<forceSimple public="1"><x path="Bool"/></forceSimple>
		<name public="1"><c path="String"/></name>
		<noAutoLabeling public="1"><x path="Bool"/></noAutoLabeling>
		<shortcut public="1"><c path="String"/></shortcut>
		<silent public="1"><x path="Bool"/></silent>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="flash.display.ActionScriptVersion" params="" file="/usr/local/lib/haxe/std/flash/display/ActionScriptVersion.hx">
		<this><x path="UInt"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.ActionScriptVersion"</e></m>
		</meta>
		<impl><class path="flash.display._ActionScriptVersion.ActionScriptVersion_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/ActionScriptVersion.hx" private="1" module="flash.display.ActionScriptVersion" extern="1" final="1">
	<ACTIONSCRIPT2 public="1" set="null" static="1">
		<x path="flash.display.ActionScriptVersion"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ACTIONSCRIPT2>
	<ACTIONSCRIPT3 public="1" set="null" static="1">
		<x path="flash.display.ActionScriptVersion"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ACTIONSCRIPT3>
	<meta>
		<m n=":native"><e>"flash.display.ActionScriptVersion"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._ActionScriptVersion.ActionScriptVersion_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/ActionScriptVersion.hx" private="1" module="flash.display.ActionScriptVersion" extern="1" final="1">
		<ACTIONSCRIPT2 public="1" set="null" static="1">
			<x path="flash.display.ActionScriptVersion"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ACTIONSCRIPT2>
		<ACTIONSCRIPT3 public="1" set="null" static="1">
			<x path="flash.display.ActionScriptVersion"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ACTIONSCRIPT3>
		<meta>
			<m n=":native"><e>"flash.display.ActionScriptVersion"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.IBitmapDrawable" params="" file="/usr/local/lib/haxe/std/flash/display/IBitmapDrawable.hx" extern="1" interface="1"/>
	<class path="flash.display.BitmapData" params="" file="/usr/local/lib/haxe/std/flash/display/BitmapData.hx" extern="1">
		<implements path="flash.display.IBitmapDrawable"/>
		<height public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</height>
		<rect public="1" get="accessor" set="null">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":flash.property"/></meta>
		</rect>
		<transparent public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</transparent>
		<width public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</width>
		<applyFilter public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:filter">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.filters.BitmapFilter"/>
	<x path="Void"/>
</f></applyFilter>
		<clone public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></clone>
		<colorTransform public="1" set="method"><f a="rect:colorTransform">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></colorTransform>
		<compare public="1" set="method"><f a="otherBitmapData">
	<c path="flash.display.BitmapData"/>
	<x path="flash.utils.Object"/>
</f></compare>
		<copyChannel public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:sourceChannel:destChannel">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></copyChannel>
		<copyPixels public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha" v=":::::false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Point"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mergeAlpha : false }</e></m></meta>
		</copyPixels>
		<copyPixelsToByteArray public="1">
			<f a="rect:data">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyPixelsToByteArray>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<draw public="1" set="method">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing" v=":::::false">
				<c path="flash.display.IBitmapDrawable"/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<x path="flash.display.BlendMode"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smoothing : false }</e></m></meta>
		</draw>
		<drawWithQuality public="1" expr="{ smoothing : false }">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing:?quality">
				<c path="flash.display.IBitmapDrawable"/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<x path="flash.display.BlendMode"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<x path="flash.display.StageQuality"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ smoothing : false }</e></m>
				<m n=":require"><e>flash11_3</e></m>
			</meta>
		</drawWithQuality>
		<encode public="1">
			<f a="rect:compressor:?byteArray">
				<c path="flash.geom.Rectangle"/>
				<x path="flash.utils.Object"/>
				<c path="flash.utils.ByteArray"/>
				<c path="flash.utils.ByteArray"/>
			</f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</encode>
		<fillRect public="1" set="method"><f a="rect:color">
	<c path="flash.geom.Rectangle"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></fillRect>
		<floodFill public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></floodFill>
		<generateFilterRect public="1" set="method"><f a="sourceRect:filter">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"/>
</f></generateFilterRect>
		<getColorBoundsRect public="1" set="method">
			<f a="mask:color:?findColor" v="::true">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
			</f>
			<meta><m n=":value"><e>{ findColor : true }</e></m></meta>
		</getColorBoundsRect>
		<getPixel public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel>
		<getPixel32 public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel32>
		<getPixels public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
</f></getPixels>
		<getVector public="1">
			<f a="rect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getVector>
		<get_height set="method"><f a=""><x path="Int"/></f></get_height>
		<get_rect set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_rect>
		<get_transparent set="method"><f a=""><x path="Bool"/></f></get_transparent>
		<get_width set="method"><f a=""><x path="Int"/></f></get_width>
		<histogram public="1">
			<f a="?hRect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><c path="flash.Vector"><x path="Float"/></c></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</histogram>
		<hitTest public="1" set="method">
			<f a="firstPoint:firstAlphaThreshold:secondObject:?secondBitmapDataPoint:?secondAlphaThreshold" v="::::1">
				<c path="flash.geom.Point"/>
				<x path="UInt"/>
				<x path="flash.utils.Object"/>
				<c path="flash.geom.Point"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ secondAlphaThreshold : 1 }</e></m></meta>
		</hitTest>
		<lock public="1" set="method"><f a=""><x path="Void"/></f></lock>
		<merge public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:redMultiplier:greenMultiplier:blueMultiplier:alphaMultiplier">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></merge>
		<noise public="1" set="method">
			<f a="randomSeed:?low:?high:?channelOptions:?grayScale" v=":0:255:7:false">
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ grayScale : false, channelOptions : 7, high : 255, low : 0 }</e></m></meta>
		</noise>
		<paletteMap public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?redArray:?greenArray:?blueArray:?alphaArray">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></paletteMap>
		<perlinNoise public="1" set="method">
			<f a="baseX:baseY:numOctaves:randomSeed:stitch:fractalNoise:?channelOptions:?grayScale:?offsets" v="::::::7:false:">
				<x path="Float"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<c path="Array"><c path="flash.geom.Point"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ grayScale : false, channelOptions : 7 }</e></m></meta>
		</perlinNoise>
		<pixelDissolve public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:?randomSeed:?numPixels:?fillColor" v=":::0:0:0">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ fillColor : 0, numPixels : 0, randomSeed : 0 }</e></m></meta>
		</pixelDissolve>
		<scroll public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scroll>
		<setPixel public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel>
		<setPixel32 public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel32>
		<setPixels public="1" set="method"><f a="rect:inputByteArray">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></setPixels>
		<setVector public="1">
			<f a="rect:inputVector">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</setVector>
		<threshold public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:operation:threshold:?color:?mask:?copySource" v=":::::0:0xFFFFFFFF:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<c path="String"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":value"><e>{ copySource : false, mask : 0xFFFFFFFF, color : 0 }</e></m></meta>
		</threshold>
		<unlock public="1" set="method"><f a="?changeRect">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></unlock>
		<new public="1" set="method">
			<f a="width:height:?transparent:?fillColor" v="::true:0xFFFFFFFF">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ fillColor : 0xFFFFFFFF, transparent : true }</e></m></meta>
		</new>
	</class>
	<abstract path="flash.display.BlendMode" params="" file="/usr/local/lib/haxe/std/flash/display/BlendMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.BlendMode"</e></m>
		</meta>
		<impl><class path="flash.display._BlendMode.BlendMode_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/BlendMode.hx" private="1" module="flash.display.BlendMode" extern="1" final="1">
	<ADD public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ADD>
	<ALPHA public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ALPHA>
	<DARKEN public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DARKEN>
	<DIFFERENCE public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DIFFERENCE>
	<ERASE public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ERASE>
	<HARDLIGHT public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HARDLIGHT>
	<INVERT public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INVERT>
	<LAYER public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LAYER>
	<LIGHTEN public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LIGHTEN>
	<MULTIPLY public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MULTIPLY>
	<NORMAL public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NORMAL>
	<OVERLAY public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OVERLAY>
	<SCREEN public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SCREEN>
	<SHADER public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHADER>
	<SUBTRACT public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SUBTRACT>
	<meta>
		<m n=":native"><e>"flash.display.BlendMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._BlendMode.BlendMode_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/BlendMode.hx" private="1" module="flash.display.BlendMode" extern="1" final="1">
		<ADD public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ADD>
		<ALPHA public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ALPHA>
		<DARKEN public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DARKEN>
		<DIFFERENCE public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DIFFERENCE>
		<ERASE public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ERASE>
		<HARDLIGHT public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HARDLIGHT>
		<INVERT public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INVERT>
		<LAYER public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LAYER>
		<LIGHTEN public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LIGHTEN>
		<MULTIPLY public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MULTIPLY>
		<NORMAL public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NORMAL>
		<OVERLAY public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OVERLAY>
		<SCREEN public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SCREEN>
		<SHADER public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHADER>
		<SUBTRACT public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SUBTRACT>
		<meta>
			<m n=":native"><e>"flash.display.BlendMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.CapsStyle" params="" file="/usr/local/lib/haxe/std/flash/display/CapsStyle.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.CapsStyle"</e></m>
		</meta>
		<impl><class path="flash.display._CapsStyle.CapsStyle_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/CapsStyle.hx" private="1" module="flash.display.CapsStyle" extern="1" final="1">
	<NONE public="1" set="null" static="1">
		<x path="flash.display.CapsStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<ROUND public="1" set="null" static="1">
		<x path="flash.display.CapsStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ROUND>
	<SQUARE public="1" set="null" static="1">
		<x path="flash.display.CapsStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SQUARE>
	<meta>
		<m n=":native"><e>"flash.display.CapsStyle"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._CapsStyle.CapsStyle_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/CapsStyle.hx" private="1" module="flash.display.CapsStyle" extern="1" final="1">
		<NONE public="1" set="null" static="1">
			<x path="flash.display.CapsStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<ROUND public="1" set="null" static="1">
			<x path="flash.display.CapsStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ROUND>
		<SQUARE public="1" set="null" static="1">
			<x path="flash.display.CapsStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SQUARE>
		<meta>
			<m n=":native"><e>"flash.display.CapsStyle"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.ColorCorrection" params="" file="/usr/local/lib/haxe/std/flash/display/ColorCorrection.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.ColorCorrection"</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
		<impl><class path="flash.display._ColorCorrection.ColorCorrection_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/ColorCorrection.hx" private="1" module="flash.display.ColorCorrection" extern="1" final="1">
	<DEFAULT public="1" set="null" static="1">
		<x path="flash.display.ColorCorrection"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DEFAULT>
	<OFF public="1" set="null" static="1">
		<x path="flash.display.ColorCorrection"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OFF>
	<ON public="1" set="null" static="1">
		<x path="flash.display.ColorCorrection"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ON>
	<meta>
		<m n=":native"><e>"flash.display.ColorCorrection"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._ColorCorrection.ColorCorrection_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/ColorCorrection.hx" private="1" module="flash.display.ColorCorrection" extern="1" final="1">
		<DEFAULT public="1" set="null" static="1">
			<x path="flash.display.ColorCorrection"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DEFAULT>
		<OFF public="1" set="null" static="1">
			<x path="flash.display.ColorCorrection"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OFF>
		<ON public="1" set="null" static="1">
			<x path="flash.display.ColorCorrection"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ON>
		<meta>
			<m n=":native"><e>"flash.display.ColorCorrection"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.ColorCorrectionSupport" params="" file="/usr/local/lib/haxe/std/flash/display/ColorCorrectionSupport.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.ColorCorrectionSupport"</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
		<impl><class path="flash.display._ColorCorrectionSupport.ColorCorrectionSupport_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/ColorCorrectionSupport.hx" private="1" module="flash.display.ColorCorrectionSupport" extern="1" final="1">
	<DEFAULT_OFF public="1" set="null" static="1">
		<x path="flash.display.ColorCorrectionSupport"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DEFAULT_OFF>
	<DEFAULT_ON public="1" set="null" static="1">
		<x path="flash.display.ColorCorrectionSupport"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DEFAULT_ON>
	<UNSUPPORTED public="1" set="null" static="1">
		<x path="flash.display.ColorCorrectionSupport"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UNSUPPORTED>
	<meta>
		<m n=":native"><e>"flash.display.ColorCorrectionSupport"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._ColorCorrectionSupport.ColorCorrectionSupport_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/ColorCorrectionSupport.hx" private="1" module="flash.display.ColorCorrectionSupport" extern="1" final="1">
		<DEFAULT_OFF public="1" set="null" static="1">
			<x path="flash.display.ColorCorrectionSupport"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DEFAULT_OFF>
		<DEFAULT_ON public="1" set="null" static="1">
			<x path="flash.display.ColorCorrectionSupport"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DEFAULT_ON>
		<UNSUPPORTED public="1" set="null" static="1">
			<x path="flash.display.ColorCorrectionSupport"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UNSUPPORTED>
		<meta>
			<m n=":native"><e>"flash.display.ColorCorrectionSupport"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.events.IEventDispatcher" params="" file="/usr/local/lib/haxe/std/flash/events/IEventDispatcher.hx" extern="1" interface="1">
		<addEventListener public="1" set="method">
			<f a="type:listener:?useCapture:?priority:?useWeakReference" v="::false:0:false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useWeakReference : false, priority : 0, useCapture : false }</e></m></meta>
		</addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?useCapture" v="::false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useCapture : false }</e></m></meta>
		</removeEventListener>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
	</class>
	<class path="flash.events.EventDispatcher" params="" file="/usr/local/lib/haxe/std/flash/events/EventDispatcher.hx" extern="1">
		<implements path="flash.events.IEventDispatcher"/>
		<addEventListener public="1" set="method">
			<f a="type:listener:?useCapture:?priority:?useWeakReference" v="::false:0:false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useWeakReference : false, priority : 0, useCapture : false }</e></m></meta>
		</addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?useCapture" v="::false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useCapture : false }</e></m></meta>
		</removeEventListener>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
		<new public="1" set="method"><f a="?target">
	<c path="flash.events.IEventDispatcher"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.DisplayObject" params="" file="/usr/local/lib/haxe/std/flash/display/DisplayObject.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.display.IBitmapDrawable"/>
		<accessibilityProperties public="1" get="accessor" set="accessor">
			<c path="flash.accessibility.AccessibilityProperties"/>
			<meta><m n=":flash.property"/></meta>
		</accessibilityProperties>
		<alpha public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</alpha>
		<blendMode public="1" get="accessor" set="accessor">
			<x path="flash.display.BlendMode"/>
			<meta><m n=":flash.property"/></meta>
		</blendMode>
		<blendShader public="1">
			<c path="flash.display.Shader"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</blendShader>
		<cacheAsBitmap public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</cacheAsBitmap>
		<filters public="1" get="accessor" set="accessor">
			<c path="Array"><c path="flash.filters.BitmapFilter"/></c>
			<meta><m n=":flash.property"/></meta>
		</filters>
		<height public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</height>
		<loaderInfo public="1" get="accessor" set="null">
			<c path="flash.display.LoaderInfo"/>
			<meta><m n=":flash.property"/></meta>
		</loaderInfo>
		<mask public="1" get="accessor" set="accessor">
			<c path="flash.display.DisplayObject"/>
			<meta><m n=":flash.property"/></meta>
		</mask>
		<mouseX public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</mouseX>
		<mouseY public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</mouseY>
		<name public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</name>
		<opaqueBackground public="1" get="accessor" set="accessor">
			<x path="Null"><x path="UInt"/></x>
			<meta><m n=":flash.property"/></meta>
		</opaqueBackground>
		<parent public="1" get="accessor" set="null">
			<c path="flash.display.DisplayObjectContainer"/>
			<meta><m n=":flash.property"/></meta>
		</parent>
		<root public="1" get="accessor" set="null">
			<c path="flash.display.DisplayObject"/>
			<meta><m n=":flash.property"/></meta>
		</root>
		<rotation public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</rotation>
		<rotationX public="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</rotationX>
		<rotationY public="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</rotationY>
		<rotationZ public="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</rotationZ>
		<scale9Grid public="1" get="accessor" set="accessor">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":flash.property"/></meta>
		</scale9Grid>
		<scaleX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</scaleX>
		<scaleY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</scaleY>
		<scaleZ public="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</scaleZ>
		<scrollRect public="1" get="accessor" set="accessor">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":flash.property"/></meta>
		</scrollRect>
		<stage public="1" get="accessor" set="null">
			<c path="flash.display.Stage"/>
			<meta><m n=":flash.property"/></meta>
		</stage>
		<transform public="1" get="accessor" set="accessor">
			<c path="flash.geom.Transform"/>
			<meta><m n=":flash.property"/></meta>
		</transform>
		<visible public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</visible>
		<width public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</width>
		<x public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</x>
		<y public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</y>
		<z public="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</z>
		<getBounds public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getBounds>
		<getRect public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getRect>
		<get_accessibilityProperties set="method"><f a=""><c path="flash.accessibility.AccessibilityProperties"/></f></get_accessibilityProperties>
		<get_alpha set="method"><f a=""><x path="Float"/></f></get_alpha>
		<get_blendMode set="method"><f a=""><x path="flash.display.BlendMode"/></f></get_blendMode>
		<get_cacheAsBitmap set="method"><f a=""><x path="Bool"/></f></get_cacheAsBitmap>
		<get_filters set="method"><f a=""><c path="Array"><c path="flash.filters.BitmapFilter"/></c></f></get_filters>
		<get_height set="method"><f a=""><x path="Float"/></f></get_height>
		<get_loaderInfo set="method"><f a=""><c path="flash.display.LoaderInfo"/></f></get_loaderInfo>
		<get_mask set="method"><f a=""><c path="flash.display.DisplayObject"/></f></get_mask>
		<get_metaData set="method"><f a=""><d/></f></get_metaData>
		<get_mouseX set="method"><f a=""><x path="Float"/></f></get_mouseX>
		<get_mouseY set="method"><f a=""><x path="Float"/></f></get_mouseY>
		<get_name set="method"><f a=""><c path="String"/></f></get_name>
		<get_opaqueBackground set="method"><f a=""><x path="Null"><x path="UInt"/></x></f></get_opaqueBackground>
		<get_parent set="method"><f a=""><c path="flash.display.DisplayObjectContainer"/></f></get_parent>
		<get_root set="method"><f a=""><c path="flash.display.DisplayObject"/></f></get_root>
		<get_rotation set="method"><f a=""><x path="Float"/></f></get_rotation>
		<get_rotationX set="method"><f a=""><x path="Float"/></f></get_rotationX>
		<get_rotationY set="method"><f a=""><x path="Float"/></f></get_rotationY>
		<get_rotationZ set="method"><f a=""><x path="Float"/></f></get_rotationZ>
		<get_scale9Grid set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_scale9Grid>
		<get_scaleX set="method"><f a=""><x path="Float"/></f></get_scaleX>
		<get_scaleY set="method"><f a=""><x path="Float"/></f></get_scaleY>
		<get_scaleZ set="method"><f a=""><x path="Float"/></f></get_scaleZ>
		<get_scrollRect set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_scrollRect>
		<get_stage set="method"><f a=""><c path="flash.display.Stage"/></f></get_stage>
		<get_transform set="method"><f a=""><c path="flash.geom.Transform"/></f></get_transform>
		<get_visible set="method"><f a=""><x path="Bool"/></f></get_visible>
		<get_width set="method"><f a=""><x path="Float"/></f></get_width>
		<get_x set="method"><f a=""><x path="Float"/></f></get_x>
		<get_y set="method"><f a=""><x path="Float"/></f></get_y>
		<get_z set="method"><f a=""><x path="Float"/></f></get_z>
		<globalToLocal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></globalToLocal>
		<globalToLocal3D public="1">
			<f a="point">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Vector3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</globalToLocal3D>
		<hitTestObject public="1" set="method"><f a="obj">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></hitTestObject>
		<hitTestPoint public="1" set="method">
			<f a="x:y:?shapeFlag" v="::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ shapeFlag : false }</e></m></meta>
		</hitTestPoint>
		<local3DToGlobal public="1">
			<f a="point3d">
				<c path="flash.geom.Vector3D"/>
				<c path="flash.geom.Point"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</local3DToGlobal>
		<localToGlobal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></localToGlobal>
		<set_accessibilityProperties set="method"><f a="value">
	<c path="flash.accessibility.AccessibilityProperties"/>
	<c path="flash.accessibility.AccessibilityProperties"/>
</f></set_accessibilityProperties>
		<set_alpha set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
		<set_blendMode set="method"><f a="value">
	<x path="flash.display.BlendMode"/>
	<x path="flash.display.BlendMode"/>
</f></set_blendMode>
		<set_blendShader set="method"><f a="value">
	<c path="flash.display.Shader"/>
	<c path="flash.display.Shader"/>
</f></set_blendShader>
		<set_cacheAsBitmap set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_cacheAsBitmap>
		<set_filters set="method"><f a="value">
	<c path="Array"><c path="flash.filters.BitmapFilter"/></c>
	<c path="Array"><c path="flash.filters.BitmapFilter"/></c>
</f></set_filters>
		<set_height set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_height>
		<set_mask set="method"><f a="value">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></set_mask>
		<set_metaData set="method"><f a="value">
	<d/>
	<d/>
</f></set_metaData>
		<set_name set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_name>
		<set_opaqueBackground set="method"><f a="value">
	<x path="Null"><x path="UInt"/></x>
	<x path="Null"><x path="UInt"/></x>
</f></set_opaqueBackground>
		<set_rotation set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rotation>
		<set_rotationX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rotationX>
		<set_rotationY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rotationY>
		<set_rotationZ set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rotationZ>
		<set_scale9Grid set="method"><f a="value">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></set_scale9Grid>
		<set_scaleX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleX>
		<set_scaleY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleY>
		<set_scaleZ set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleZ>
		<set_scrollRect set="method"><f a="value">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></set_scrollRect>
		<set_transform set="method"><f a="value">
	<c path="flash.geom.Transform"/>
	<c path="flash.geom.Transform"/>
</f></set_transform>
		<set_visible set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<set_width set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_width>
		<set_x set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<set_y set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<set_z set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
	</class>
	<class path="flash.display.InteractiveObject" params="" file="/usr/local/lib/haxe/std/flash/display/InteractiveObject.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<accessibilityImplementation public="1" get="accessor" set="accessor">
			<c path="flash.accessibility.AccessibilityImplementation"/>
			<meta><m n=":flash.property"/></meta>
		</accessibilityImplementation>
		<contextMenu public="1" get="accessor" set="accessor">
			<c path="flash.ui.ContextMenu"/>
			<meta><m n=":flash.property"/></meta>
		</contextMenu>
		<doubleClickEnabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</doubleClickEnabled>
		<focusRect public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</focusRect>
		<mouseEnabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</mouseEnabled>
		<needsSoftKeyboard public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</needsSoftKeyboard>
		<softKeyboardInputAreaOfInterest public="1">
			<c path="flash.geom.Rectangle"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</softKeyboardInputAreaOfInterest>
		<tabEnabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</tabEnabled>
		<tabIndex public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</tabIndex>
		<get_accessibilityImplementation set="method"><f a=""><c path="flash.accessibility.AccessibilityImplementation"/></f></get_accessibilityImplementation>
		<get_contextMenu set="method"><f a=""><c path="flash.ui.ContextMenu"/></f></get_contextMenu>
		<get_doubleClickEnabled set="method"><f a=""><x path="Bool"/></f></get_doubleClickEnabled>
		<get_focusRect set="method"><f a=""><d/></f></get_focusRect>
		<get_mouseEnabled set="method"><f a=""><x path="Bool"/></f></get_mouseEnabled>
		<get_needsSoftKeyboard set="method"><f a=""><x path="Bool"/></f></get_needsSoftKeyboard>
		<get_softKeyboardInputAreaOfInterest set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_softKeyboardInputAreaOfInterest>
		<get_tabEnabled set="method"><f a=""><x path="Bool"/></f></get_tabEnabled>
		<get_tabIndex set="method"><f a=""><x path="Int"/></f></get_tabIndex>
		<requestSoftKeyboard public="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestSoftKeyboard>
		<set_accessibilityImplementation set="method"><f a="value">
	<c path="flash.accessibility.AccessibilityImplementation"/>
	<c path="flash.accessibility.AccessibilityImplementation"/>
</f></set_accessibilityImplementation>
		<set_contextMenu set="method"><f a="value">
	<c path="flash.ui.ContextMenu"/>
	<c path="flash.ui.ContextMenu"/>
</f></set_contextMenu>
		<set_doubleClickEnabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_doubleClickEnabled>
		<set_focusRect set="method"><f a="value">
	<d/>
	<d/>
</f></set_focusRect>
		<set_mouseEnabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_mouseEnabled>
		<set_needsSoftKeyboard set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_needsSoftKeyboard>
		<set_softKeyboardInputAreaOfInterest set="method"><f a="value">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></set_softKeyboardInputAreaOfInterest>
		<set_tabEnabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_tabEnabled>
		<set_tabIndex set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_tabIndex>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.DisplayObjectContainer" params="" file="/usr/local/lib/haxe/std/flash/display/DisplayObjectContainer.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<mouseChildren public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</mouseChildren>
		<numChildren public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</numChildren>
		<tabChildren public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</tabChildren>
		<textSnapshot public="1" get="accessor" set="null">
			<c path="flash.text.TextSnapshot"/>
			<meta><m n=":flash.property"/></meta>
		</textSnapshot>
		<addChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></addChild>
		<addChildAt public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></addChildAt>
		<areInaccessibleObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></areInaccessibleObjectsUnderPoint>
		<contains public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></contains>
		<getChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildAt>
		<getChildByName public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildByName>
		<getChildIndex public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
</f></getChildIndex>
		<getObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="Array"><c path="flash.display.DisplayObject"/></c>
</f></getObjectsUnderPoint>
		<get_mouseChildren set="method"><f a=""><x path="Bool"/></f></get_mouseChildren>
		<get_numChildren set="method"><f a=""><x path="Int"/></f></get_numChildren>
		<get_tabChildren set="method"><f a=""><x path="Bool"/></f></get_tabChildren>
		<get_textSnapshot set="method"><f a=""><c path="flash.text.TextSnapshot"/></f></get_textSnapshot>
		<removeChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChild>
		<removeChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChildAt>
		<removeChildren public="1" expr="{ endIndex : 2147483647, beginIndex : 0 }">
			<f a="?beginIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ endIndex : 2147483647, beginIndex : 0 }</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</removeChildren>
		<setChildIndex public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setChildIndex>
		<set_mouseChildren set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_mouseChildren>
		<set_tabChildren set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_tabChildren>
		<stopAllMovieClips public="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_8</e></m></meta>
		</stopAllMovieClips>
		<swapChildren public="1" set="method"><f a="child1:child2">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></swapChildren>
		<swapChildrenAt public="1" set="method"><f a="index1:index2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swapChildrenAt>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.FrameLabel" params="" file="/usr/local/lib/haxe/std/flash/display/FrameLabel.hx" extern="1" final="1">
		<extends path="flash.events.EventDispatcher"/>
		<frame public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</frame>
		<name public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</name>
		<get_frame set="method"><f a=""><x path="Int"/></f></get_frame>
		<get_name set="method"><f a=""><c path="String"/></f></get_name>
		<new public="1" set="method"><f a="name:frame">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="flash.display.GradientType" params="" file="/usr/local/lib/haxe/std/flash/display/GradientType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.GradientType"</e></m>
		</meta>
		<impl><class path="flash.display._GradientType.GradientType_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/GradientType.hx" private="1" module="flash.display.GradientType" extern="1" final="1">
	<LINEAR public="1" set="null" static="1">
		<x path="flash.display.GradientType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LINEAR>
	<RADIAL public="1" set="null" static="1">
		<x path="flash.display.GradientType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RADIAL>
	<meta>
		<m n=":native"><e>"flash.display.GradientType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._GradientType.GradientType_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/GradientType.hx" private="1" module="flash.display.GradientType" extern="1" final="1">
		<LINEAR public="1" set="null" static="1">
			<x path="flash.display.GradientType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LINEAR>
		<RADIAL public="1" set="null" static="1">
			<x path="flash.display.GradientType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RADIAL>
		<meta>
			<m n=":native"><e>"flash.display.GradientType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.Graphics" params="" file="/usr/local/lib/haxe/std/flash/display/Graphics.hx" extern="1" final="1">
		<beginBitmapFill public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth" v="::true:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : false, repeat : true }</e></m></meta>
		</beginBitmapFill>
		<beginFill public="1" set="method">
			<f a="color:?alpha" v=":1">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1 }</e></m></meta>
		</beginFill>
		<beginGradientFill public="1" set="method">
			<f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio" v=":::::::0">
				<x path="flash.display.GradientType"/>
				<c path="Array"><x path="UInt"/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="flash.geom.Matrix"/>
				<x path="flash.display.SpreadMethod"/>
				<x path="flash.display.InterpolationMethod"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ focalPointRatio : 0 }</e></m></meta>
		</beginGradientFill>
		<beginShaderFill public="1">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</beginShaderFill>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<copyFrom public="1">
			<f a="sourceGraphics">
				<c path="flash.display.Graphics"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</copyFrom>
		<cubicCurveTo public="1">
			<f a="controlX1:controlY1:controlX2:controlY2:anchorX:anchorY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</cubicCurveTo>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<drawCircle public="1" set="method"><f a="x:y:radius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawCircle>
		<drawEllipse public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawEllipse>
		<drawGraphicsData public="1">
			<f a="graphicsData">
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawGraphicsData>
		<drawPath public="1">
			<f a="commands:data:?winding">
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="flash.display.GraphicsPathWinding"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawPath>
		<drawRect public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRect>
		<drawRoundRect public="1" set="method">
			<f a="x:y:width:height:ellipseWidth:?ellipseHeight" v=":::::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ellipseHeight : 0 }</e></m></meta>
		</drawRoundRect>
		<drawRoundRectComplex public="1" set="method"><f a="x:y:width:height:topLeftRadius:topRightRadius:bottomLeftRadius:bottomRightRadius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRoundRectComplex>
		<drawTriangles public="1">
			<f a="vertices:?indices:?uvtData:?culling">
				<c path="flash.Vector"><x path="Float"/></c>
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="flash.display.TriangleCulling"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawTriangles>
		<endFill public="1" set="method"><f a=""><x path="Void"/></f></endFill>
		<lineBitmapStyle public="1" expr="{ smooth : false, repeat : true }">
			<f a="bitmap:?matrix:?repeat:?smooth">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ smooth : false, repeat : true }</e></m>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</lineBitmapStyle>
		<lineGradientStyle public="1" set="method">
			<f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio" v=":::::::0">
				<x path="flash.display.GradientType"/>
				<c path="Array"><x path="UInt"/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="flash.geom.Matrix"/>
				<x path="flash.display.SpreadMethod"/>
				<x path="flash.display.InterpolationMethod"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ focalPointRatio : 0 }</e></m></meta>
		</lineGradientStyle>
		<lineShaderStyle public="1">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</lineShaderStyle>
		<lineStyle public="1" set="method">
			<f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit" v="0:0:1:false::::3">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="flash.display.LineScaleMode"/>
				<x path="flash.display.CapsStyle"/>
				<x path="flash.display.JointStyle"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miterLimit : 3, pixelHinting : false, alpha : 1, color : 0, thickness : 0 }</e></m></meta>
		</lineStyle>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<readGraphicsData public="1" expr="{ recurse : true }">
			<f a="?recurse">
				<x path="Bool"/>
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
			</f>
			<meta>
				<m n=":value"><e>{ recurse : true }</e></m>
				<m n=":require"><e>flash11_6</e></m>
			</meta>
		</readGraphicsData>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="flash.display.GraphicsPathWinding" params="" file="/usr/local/lib/haxe/std/flash/display/GraphicsPathWinding.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.GraphicsPathWinding"</e></m>
		</meta>
		<impl><class path="flash.display._GraphicsPathWinding.GraphicsPathWinding_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/GraphicsPathWinding.hx" private="1" module="flash.display.GraphicsPathWinding" extern="1" final="1">
	<EVEN_ODD public="1" set="null" static="1">
		<x path="flash.display.GraphicsPathWinding"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EVEN_ODD>
	<NON_ZERO public="1" set="null" static="1">
		<x path="flash.display.GraphicsPathWinding"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NON_ZERO>
	<meta>
		<m n=":native"><e>"flash.display.GraphicsPathWinding"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._GraphicsPathWinding.GraphicsPathWinding_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/GraphicsPathWinding.hx" private="1" module="flash.display.GraphicsPathWinding" extern="1" final="1">
		<EVEN_ODD public="1" set="null" static="1">
			<x path="flash.display.GraphicsPathWinding"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EVEN_ODD>
		<NON_ZERO public="1" set="null" static="1">
			<x path="flash.display.GraphicsPathWinding"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NON_ZERO>
		<meta>
			<m n=":native"><e>"flash.display.GraphicsPathWinding"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.IGraphicsData" params="" file="/usr/local/lib/haxe/std/flash/display/IGraphicsData.hx" extern="1" interface="1"/>
	<abstract path="flash.display.InterpolationMethod" params="" file="/usr/local/lib/haxe/std/flash/display/InterpolationMethod.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.InterpolationMethod"</e></m>
		</meta>
		<impl><class path="flash.display._InterpolationMethod.InterpolationMethod_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/InterpolationMethod.hx" private="1" module="flash.display.InterpolationMethod" extern="1" final="1">
	<LINEAR_RGB public="1" set="null" static="1">
		<x path="flash.display.InterpolationMethod"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LINEAR_RGB>
	<RGB public="1" set="null" static="1">
		<x path="flash.display.InterpolationMethod"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RGB>
	<meta>
		<m n=":native"><e>"flash.display.InterpolationMethod"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._InterpolationMethod.InterpolationMethod_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/InterpolationMethod.hx" private="1" module="flash.display.InterpolationMethod" extern="1" final="1">
		<LINEAR_RGB public="1" set="null" static="1">
			<x path="flash.display.InterpolationMethod"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LINEAR_RGB>
		<RGB public="1" set="null" static="1">
			<x path="flash.display.InterpolationMethod"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RGB>
		<meta>
			<m n=":native"><e>"flash.display.InterpolationMethod"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.JointStyle" params="" file="/usr/local/lib/haxe/std/flash/display/JointStyle.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.JointStyle"</e></m>
		</meta>
		<impl><class path="flash.display._JointStyle.JointStyle_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/JointStyle.hx" private="1" module="flash.display.JointStyle" extern="1" final="1">
	<BEVEL public="1" set="null" static="1">
		<x path="flash.display.JointStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BEVEL>
	<MITER public="1" set="null" static="1">
		<x path="flash.display.JointStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MITER>
	<ROUND public="1" set="null" static="1">
		<x path="flash.display.JointStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ROUND>
	<meta>
		<m n=":native"><e>"flash.display.JointStyle"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._JointStyle.JointStyle_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/JointStyle.hx" private="1" module="flash.display.JointStyle" extern="1" final="1">
		<BEVEL public="1" set="null" static="1">
			<x path="flash.display.JointStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BEVEL>
		<MITER public="1" set="null" static="1">
			<x path="flash.display.JointStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MITER>
		<ROUND public="1" set="null" static="1">
			<x path="flash.display.JointStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ROUND>
		<meta>
			<m n=":native"><e>"flash.display.JointStyle"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.LineScaleMode" params="" file="/usr/local/lib/haxe/std/flash/display/LineScaleMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.LineScaleMode"</e></m>
		</meta>
		<impl><class path="flash.display._LineScaleMode.LineScaleMode_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/LineScaleMode.hx" private="1" module="flash.display.LineScaleMode" extern="1" final="1">
	<HORIZONTAL public="1" set="null" static="1">
		<x path="flash.display.LineScaleMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HORIZONTAL>
	<NONE public="1" set="null" static="1">
		<x path="flash.display.LineScaleMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<NORMAL public="1" set="null" static="1">
		<x path="flash.display.LineScaleMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NORMAL>
	<VERTICAL public="1" set="null" static="1">
		<x path="flash.display.LineScaleMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VERTICAL>
	<meta>
		<m n=":native"><e>"flash.display.LineScaleMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._LineScaleMode.LineScaleMode_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/LineScaleMode.hx" private="1" module="flash.display.LineScaleMode" extern="1" final="1">
		<HORIZONTAL public="1" set="null" static="1">
			<x path="flash.display.LineScaleMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HORIZONTAL>
		<NONE public="1" set="null" static="1">
			<x path="flash.display.LineScaleMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<NORMAL public="1" set="null" static="1">
			<x path="flash.display.LineScaleMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NORMAL>
		<VERTICAL public="1" set="null" static="1">
			<x path="flash.display.LineScaleMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VERTICAL>
		<meta>
			<m n=":native"><e>"flash.display.LineScaleMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.Loader" params="" file="/usr/local/lib/haxe/std/flash/display/Loader.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<content public="1" get="accessor" set="null">
			<c path="flash.display.DisplayObject"/>
			<meta><m n=":flash.property"/></meta>
		</content>
		<contentLoaderInfo public="1" get="accessor" set="null">
			<c path="flash.display.LoaderInfo"/>
			<meta><m n=":flash.property"/></meta>
		</contentLoaderInfo>
		<uncaughtErrorEvents public="1">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</uncaughtErrorEvents>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<get_content set="method"><f a=""><c path="flash.display.DisplayObject"/></f></get_content>
		<get_contentLoaderInfo set="method"><f a=""><c path="flash.display.LoaderInfo"/></f></get_contentLoaderInfo>
		<get_uncaughtErrorEvents set="method"><f a=""><c path="flash.events.UncaughtErrorEvents"/></f></get_uncaughtErrorEvents>
		<load public="1" set="method"><f a="request:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></load>
		<loadBytes public="1" set="method"><f a="bytes:?context">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></loadBytes>
		<unload public="1" set="method"><f a=""><x path="Void"/></f></unload>
		<unloadAndStop public="1" expr="{ gc : true }">
			<f a="?gc">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ gc : true }</e></m>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</unloadAndStop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.LoaderInfo" params="" file="/usr/local/lib/haxe/std/flash/display/LoaderInfo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<getLoaderInfoByDefinition public="1" set="method" static="1"><f a="object">
	<d/>
	<c path="flash.display.LoaderInfo"/>
</f></getLoaderInfoByDefinition>
		<actionScriptVersion public="1" get="accessor" set="null">
			<x path="flash.display.ActionScriptVersion"/>
			<meta><m n=":flash.property"/></meta>
		</actionScriptVersion>
		<applicationDomain public="1" get="accessor" set="null">
			<c path="flash.system.ApplicationDomain"/>
			<meta><m n=":flash.property"/></meta>
		</applicationDomain>
		<bytes public="1" get="accessor" set="null">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":flash.property"/></meta>
		</bytes>
		<bytesLoaded public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesLoaded>
		<bytesTotal public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesTotal>
		<childAllowsParent public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</childAllowsParent>
		<childSandboxBridge public="1">
			<d/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_4</e></m>
			</meta>
		</childSandboxBridge>
		<content public="1" get="accessor" set="null">
			<c path="flash.display.DisplayObject"/>
			<meta><m n=":flash.property"/></meta>
		</content>
		<contentType public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</contentType>
		<frameRate public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</frameRate>
		<height public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</height>
		<isURLInaccessible public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</isURLInaccessible>
		<loader public="1" get="accessor" set="null">
			<c path="flash.display.Loader"/>
			<meta><m n=":flash.property"/></meta>
		</loader>
		<loaderURL public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</loaderURL>
		<parameters public="1" get="accessor" set="null">
			<d><c path="String"/></d>
			<meta><m n=":flash.property"/></meta>
		</parameters>
		<parentAllowsChild public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</parentAllowsChild>
		<parentSandboxBridge public="1">
			<d/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_4</e></m>
			</meta>
		</parentSandboxBridge>
		<sameDomain public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</sameDomain>
		<sharedEvents public="1" get="accessor" set="null">
			<c path="flash.events.EventDispatcher"/>
			<meta><m n=":flash.property"/></meta>
		</sharedEvents>
		<swfVersion public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</swfVersion>
		<uncaughtErrorEvents public="1">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</uncaughtErrorEvents>
		<url public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</url>
		<width public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</width>
		<get_actionScriptVersion set="method"><f a=""><x path="flash.display.ActionScriptVersion"/></f></get_actionScriptVersion>
		<get_applicationDomain set="method"><f a=""><c path="flash.system.ApplicationDomain"/></f></get_applicationDomain>
		<get_bytes set="method"><f a=""><c path="flash.utils.ByteArray"/></f></get_bytes>
		<get_bytesLoaded set="method"><f a=""><x path="UInt"/></f></get_bytesLoaded>
		<get_bytesTotal set="method"><f a=""><x path="UInt"/></f></get_bytesTotal>
		<get_childAllowsParent set="method"><f a=""><x path="Bool"/></f></get_childAllowsParent>
		<get_childSandboxBridge set="method"><f a=""><d/></f></get_childSandboxBridge>
		<get_content set="method"><f a=""><c path="flash.display.DisplayObject"/></f></get_content>
		<get_contentType set="method"><f a=""><c path="String"/></f></get_contentType>
		<get_frameRate set="method"><f a=""><x path="Float"/></f></get_frameRate>
		<get_height set="method"><f a=""><x path="Int"/></f></get_height>
		<get_isURLInaccessible set="method"><f a=""><x path="Bool"/></f></get_isURLInaccessible>
		<get_loader set="method"><f a=""><c path="flash.display.Loader"/></f></get_loader>
		<get_loaderURL set="method"><f a=""><c path="String"/></f></get_loaderURL>
		<get_parameters set="method"><f a=""><d><c path="String"/></d></f></get_parameters>
		<get_parentAllowsChild set="method"><f a=""><x path="Bool"/></f></get_parentAllowsChild>
		<get_parentSandboxBridge set="method"><f a=""><d/></f></get_parentSandboxBridge>
		<get_sameDomain set="method"><f a=""><x path="Bool"/></f></get_sameDomain>
		<get_sharedEvents set="method"><f a=""><c path="flash.events.EventDispatcher"/></f></get_sharedEvents>
		<get_swfVersion set="method"><f a=""><x path="UInt"/></f></get_swfVersion>
		<get_uncaughtErrorEvents set="method"><f a=""><c path="flash.events.UncaughtErrorEvents"/></f></get_uncaughtErrorEvents>
		<get_url set="method"><f a=""><c path="String"/></f></get_url>
		<get_width set="method"><f a=""><x path="Int"/></f></get_width>
		<set_childSandboxBridge set="method"><f a="value">
	<d/>
	<d/>
</f></set_childSandboxBridge>
		<set_parentSandboxBridge set="method"><f a="value">
	<d/>
	<d/>
</f></set_parentSandboxBridge>
	</class>
	<class path="flash.display.Sprite" params="" file="/usr/local/lib/haxe/std/flash/display/Sprite.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<buttonMode public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</buttonMode>
		<dropTarget public="1" get="accessor" set="null">
			<c path="flash.display.DisplayObject"/>
			<meta><m n=":flash.property"/></meta>
		</dropTarget>
		<graphics public="1" get="accessor" set="null">
			<c path="flash.display.Graphics"/>
			<meta><m n=":flash.property"/></meta>
		</graphics>
		<hitArea public="1" get="accessor" set="accessor">
			<c path="flash.display.Sprite"/>
			<meta><m n=":flash.property"/></meta>
		</hitArea>
		<soundTransform public="1" get="accessor" set="accessor">
			<c path="flash.media.SoundTransform"/>
			<meta><m n=":flash.property"/></meta>
		</soundTransform>
		<useHandCursor public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</useHandCursor>
		<get_buttonMode set="method"><f a=""><x path="Bool"/></f></get_buttonMode>
		<get_dropTarget set="method"><f a=""><c path="flash.display.DisplayObject"/></f></get_dropTarget>
		<get_graphics set="method"><f a=""><c path="flash.display.Graphics"/></f></get_graphics>
		<get_hitArea set="method"><f a=""><c path="flash.display.Sprite"/></f></get_hitArea>
		<get_soundTransform set="method"><f a=""><c path="flash.media.SoundTransform"/></f></get_soundTransform>
		<get_useHandCursor set="method"><f a=""><x path="Bool"/></f></get_useHandCursor>
		<set_buttonMode set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_buttonMode>
		<set_hitArea set="method"><f a="value">
	<c path="flash.display.Sprite"/>
	<c path="flash.display.Sprite"/>
</f></set_hitArea>
		<set_soundTransform set="method"><f a="value">
	<c path="flash.media.SoundTransform"/>
	<c path="flash.media.SoundTransform"/>
</f></set_soundTransform>
		<set_useHandCursor set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_useHandCursor>
		<startDrag public="1" set="method">
			<f a="?lockCenter:?bounds" v="false:">
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ lockCenter : false }</e></m></meta>
		</startDrag>
		<startTouchDrag public="1" expr="{ lockCenter : false }">
			<f a="touchPointID:?lockCenter:?bounds">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ lockCenter : false }</e></m>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</startTouchDrag>
		<stopDrag public="1" set="method"><f a=""><x path="Void"/></f></stopDrag>
		<stopTouchDrag public="1">
			<f a="touchPointID">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</stopTouchDrag>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="flash.display.MovieClip" params="" file="/usr/local/lib/haxe/std/flash/display/MovieClip.hx" extern="1">
		<extends path="flash.display.Sprite"/>
		<currentFrame public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</currentFrame>
		<currentFrameLabel public="1">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</currentFrameLabel>
		<currentLabel public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</currentLabel>
		<currentLabels public="1" get="accessor" set="null">
			<c path="Array"><c path="flash.display.FrameLabel"/></c>
			<meta><m n=":flash.property"/></meta>
		</currentLabels>
		<currentScene public="1" get="accessor" set="null">
			<c path="flash.display.Scene"/>
			<meta><m n=":flash.property"/></meta>
		</currentScene>
		<enabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</enabled>
		<framesLoaded public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</framesLoaded>
		<isPlaying public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</isPlaying>
		<scenes public="1" get="accessor" set="null">
			<c path="Array"><c path="flash.display.Scene"/></c>
			<meta><m n=":flash.property"/></meta>
		</scenes>
		<totalFrames public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</totalFrames>
		<trackAsMenu public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</trackAsMenu>
		<addFrameScript public="1" set="method"><f a="restArgs">
	<x path="haxe.extern.Rest"><d/></x>
	<x path="Void"/>
</f></addFrameScript>
		<get_currentFrame set="method"><f a=""><x path="Int"/></f></get_currentFrame>
		<get_currentFrameLabel set="method"><f a=""><c path="String"/></f></get_currentFrameLabel>
		<get_currentLabel set="method"><f a=""><c path="String"/></f></get_currentLabel>
		<get_currentLabels set="method"><f a=""><c path="Array"><c path="flash.display.FrameLabel"/></c></f></get_currentLabels>
		<get_currentScene set="method"><f a=""><c path="flash.display.Scene"/></f></get_currentScene>
		<get_enabled set="method"><f a=""><x path="Bool"/></f></get_enabled>
		<get_framesLoaded set="method"><f a=""><x path="Int"/></f></get_framesLoaded>
		<get_isPlaying set="method"><f a=""><x path="Bool"/></f></get_isPlaying>
		<get_scenes set="method"><f a=""><c path="Array"><c path="flash.display.Scene"/></c></f></get_scenes>
		<get_totalFrames set="method"><f a=""><x path="Int"/></f></get_totalFrames>
		<get_trackAsMenu set="method"><f a=""><x path="Bool"/></f></get_trackAsMenu>
		<gotoAndPlay public="1" set="method"><f a="frame:?scene">
	<x path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndPlay>
		<gotoAndStop public="1" set="method"><f a="frame:?scene">
	<x path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndStop>
		<nextFrame public="1" set="method"><f a=""><x path="Void"/></f></nextFrame>
		<nextScene public="1" set="method"><f a=""><x path="Void"/></f></nextScene>
		<play public="1" set="method"><f a=""><x path="Void"/></f></play>
		<prevFrame public="1" set="method"><f a=""><x path="Void"/></f></prevFrame>
		<prevScene public="1" set="method"><f a=""><x path="Void"/></f></prevScene>
		<set_enabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_enabled>
		<set_trackAsMenu set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_trackAsMenu>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.NativeMenu" params="" file="/usr/local/lib/haxe/std/flash/display/NativeMenu.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.display.Scene" params="" file="/usr/local/lib/haxe/std/flash/display/Scene.hx" extern="1" final="1">
		<labels public="1" get="accessor" set="null">
			<c path="Array"><c path="flash.display.FrameLabel"/></c>
			<meta><m n=":flash.property"/></meta>
		</labels>
		<name public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</name>
		<numFrames public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</numFrames>
		<get_labels set="method"><f a=""><c path="Array"><c path="flash.display.FrameLabel"/></c></f></get_labels>
		<get_name set="method"><f a=""><c path="String"/></f></get_name>
		<get_numFrames set="method"><f a=""><x path="Int"/></f></get_numFrames>
		<new public="1" set="method"><f a="name:labels:numFrames">
	<c path="String"/>
	<c path="Array"><c path="flash.display.FrameLabel"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.Shader" params="" file="/usr/local/lib/haxe/std/flash/display/Shader.hx" extern="1">
		<byteCode public="1" get="null" set="accessor">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":flash.property"/></meta>
		</byteCode>
		<data public="1" get="accessor" set="accessor">
			<c path="flash.display.ShaderData"/>
			<meta><m n=":flash.property"/></meta>
		</data>
		<precisionHint public="1" get="accessor" set="accessor">
			<x path="flash.display.ShaderPrecision"/>
			<meta><m n=":flash.property"/></meta>
		</precisionHint>
		<get_data set="method"><f a=""><c path="flash.display.ShaderData"/></f></get_data>
		<get_precisionHint set="method"><f a=""><x path="flash.display.ShaderPrecision"/></f></get_precisionHint>
		<set_byteCode set="method"><f a="value">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
</f></set_byteCode>
		<set_data set="method"><f a="value">
	<c path="flash.display.ShaderData"/>
	<c path="flash.display.ShaderData"/>
</f></set_data>
		<set_precisionHint set="method"><f a="value">
	<x path="flash.display.ShaderPrecision"/>
	<x path="flash.display.ShaderPrecision"/>
</f></set_precisionHint>
		<new public="1"><f a="?code">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.display.ShaderData" params="" file="/usr/local/lib/haxe/std/flash/display/ShaderData.hx" extern="1"><new public="1" set="method"><f a="byteCode">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new></class>
	<abstract path="flash.display.ShaderPrecision" params="" file="/usr/local/lib/haxe/std/flash/display/ShaderPrecision.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.ShaderPrecision"</e></m>
		</meta>
		<impl><class path="flash.display._ShaderPrecision.ShaderPrecision_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/ShaderPrecision.hx" private="1" module="flash.display.ShaderPrecision" extern="1" final="1">
	<FAST public="1" set="null" static="1">
		<x path="flash.display.ShaderPrecision"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FAST>
	<FULL public="1" set="null" static="1">
		<x path="flash.display.ShaderPrecision"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FULL>
	<meta>
		<m n=":native"><e>"flash.display.ShaderPrecision"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._ShaderPrecision.ShaderPrecision_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/ShaderPrecision.hx" private="1" module="flash.display.ShaderPrecision" extern="1" final="1">
		<FAST public="1" set="null" static="1">
			<x path="flash.display.ShaderPrecision"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FAST>
		<FULL public="1" set="null" static="1">
			<x path="flash.display.ShaderPrecision"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FULL>
		<meta>
			<m n=":native"><e>"flash.display.ShaderPrecision"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.SpreadMethod" params="" file="/usr/local/lib/haxe/std/flash/display/SpreadMethod.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.SpreadMethod"</e></m>
		</meta>
		<impl><class path="flash.display._SpreadMethod.SpreadMethod_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/SpreadMethod.hx" private="1" module="flash.display.SpreadMethod" extern="1" final="1">
	<PAD public="1" set="null" static="1">
		<x path="flash.display.SpreadMethod"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PAD>
	<REFLECT public="1" set="null" static="1">
		<x path="flash.display.SpreadMethod"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REFLECT>
	<REPEAT public="1" set="null" static="1">
		<x path="flash.display.SpreadMethod"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REPEAT>
	<meta>
		<m n=":native"><e>"flash.display.SpreadMethod"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._SpreadMethod.SpreadMethod_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/SpreadMethod.hx" private="1" module="flash.display.SpreadMethod" extern="1" final="1">
		<PAD public="1" set="null" static="1">
			<x path="flash.display.SpreadMethod"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PAD>
		<REFLECT public="1" set="null" static="1">
			<x path="flash.display.SpreadMethod"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REFLECT>
		<REPEAT public="1" set="null" static="1">
			<x path="flash.display.SpreadMethod"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REPEAT>
		<meta>
			<m n=":native"><e>"flash.display.SpreadMethod"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.Stage" params="" file="/usr/local/lib/haxe/std/flash/display/Stage.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<align public="1" get="accessor" set="accessor">
			<x path="flash.display.StageAlign"/>
			<meta><m n=":flash.property"/></meta>
		</align>
		<allowsFullScreen public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</allowsFullScreen>
		<allowsFullScreenInteractive public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_3</e></m>
			</meta>
		</allowsFullScreenInteractive>
		<browserZoomFactor public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</browserZoomFactor>
		<color public="1">
			<x path="UInt"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_2</e></m>
			</meta>
		</color>
		<colorCorrection public="1">
			<x path="flash.display.ColorCorrection"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</colorCorrection>
		<colorCorrectionSupport public="1">
			<x path="flash.display.ColorCorrectionSupport"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</colorCorrectionSupport>
		<contentsScaleFactor public="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_4</e></m>
			</meta>
		</contentsScaleFactor>
		<displayContextInfo public="1">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</displayContextInfo>
		<displayState public="1" get="accessor" set="accessor">
			<x path="flash.display.StageDisplayState"/>
			<meta><m n=":flash.property"/></meta>
		</displayState>
		<focus public="1" get="accessor" set="accessor">
			<c path="flash.display.InteractiveObject"/>
			<meta><m n=":flash.property"/></meta>
		</focus>
		<frameRate public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</frameRate>
		<fullScreenHeight public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</fullScreenHeight>
		<fullScreenSourceRect public="1" get="accessor" set="accessor">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":flash.property"/></meta>
		</fullScreenSourceRect>
		<fullScreenWidth public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</fullScreenWidth>
		<mouseLock public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_2</e></m>
			</meta>
		</mouseLock>
		<quality public="1" get="accessor" set="accessor">
			<x path="flash.display.StageQuality"/>
			<meta><m n=":flash.property"/></meta>
		</quality>
		<scaleMode public="1" get="accessor" set="accessor">
			<x path="flash.display.StageScaleMode"/>
			<meta><m n=":flash.property"/></meta>
		</scaleMode>
		<showDefaultContextMenu public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</showDefaultContextMenu>
		<softKeyboardRect public="1">
			<c path="flash.geom.Rectangle"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</softKeyboardRect>
		<stage3Ds public="1">
			<c path="flash.Vector"><c path="flash.display.Stage3D"/></c>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</stage3Ds>
		<stageFocusRect public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</stageFocusRect>
		<stageHeight public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</stageHeight>
		<stageVideos public="1">
			<c path="flash.Vector"><c path="flash.media.StageVideo"/></c>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_2</e></m>
			</meta>
		</stageVideos>
		<stageWidth public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</stageWidth>
		<wmodeGPU public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</wmodeGPU>
		<get_align set="method"><f a=""><x path="flash.display.StageAlign"/></f></get_align>
		<get_allowsFullScreen set="method"><f a=""><x path="Bool"/></f></get_allowsFullScreen>
		<get_allowsFullScreenInteractive set="method"><f a=""><x path="Bool"/></f></get_allowsFullScreenInteractive>
		<get_browserZoomFactor set="method"><f a=""><x path="Float"/></f></get_browserZoomFactor>
		<get_color set="method"><f a=""><x path="UInt"/></f></get_color>
		<get_colorCorrection set="method"><f a=""><x path="flash.display.ColorCorrection"/></f></get_colorCorrection>
		<get_colorCorrectionSupport set="method"><f a=""><x path="flash.display.ColorCorrectionSupport"/></f></get_colorCorrectionSupport>
		<get_constructor set="method"><f a=""><d/></f></get_constructor>
		<get_contentsScaleFactor set="method"><f a=""><x path="Float"/></f></get_contentsScaleFactor>
		<get_displayContextInfo set="method"><f a=""><c path="String"/></f></get_displayContextInfo>
		<get_displayState set="method"><f a=""><x path="flash.display.StageDisplayState"/></f></get_displayState>
		<get_focus set="method"><f a=""><c path="flash.display.InteractiveObject"/></f></get_focus>
		<get_frameRate set="method"><f a=""><x path="Float"/></f></get_frameRate>
		<get_fullScreenHeight set="method"><f a=""><x path="UInt"/></f></get_fullScreenHeight>
		<get_fullScreenSourceRect set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_fullScreenSourceRect>
		<get_fullScreenWidth set="method"><f a=""><x path="UInt"/></f></get_fullScreenWidth>
		<get_mouseLock set="method"><f a=""><x path="Bool"/></f></get_mouseLock>
		<get_quality set="method"><f a=""><x path="flash.display.StageQuality"/></f></get_quality>
		<get_scaleMode set="method"><f a=""><x path="flash.display.StageScaleMode"/></f></get_scaleMode>
		<get_showDefaultContextMenu set="method"><f a=""><x path="Bool"/></f></get_showDefaultContextMenu>
		<get_softKeyboardRect set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_softKeyboardRect>
		<get_stage3Ds set="method"><f a=""><c path="flash.Vector"><c path="flash.display.Stage3D"/></c></f></get_stage3Ds>
		<get_stageFocusRect set="method"><f a=""><x path="Bool"/></f></get_stageFocusRect>
		<get_stageHeight set="method"><f a=""><x path="Int"/></f></get_stageHeight>
		<get_stageVideos set="method"><f a=""><c path="flash.Vector"><c path="flash.media.StageVideo"/></c></f></get_stageVideos>
		<get_stageWidth set="method"><f a=""><x path="Int"/></f></get_stageWidth>
		<get_wmodeGPU set="method"><f a=""><x path="Bool"/></f></get_wmodeGPU>
		<invalidate public="1" set="method"><f a=""><x path="Void"/></f></invalidate>
		<isFocusInaccessible public="1" set="method"><f a=""><x path="Bool"/></f></isFocusInaccessible>
		<set_align set="method"><f a="value">
	<x path="flash.display.StageAlign"/>
	<x path="flash.display.StageAlign"/>
</f></set_align>
		<set_color set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_color>
		<set_colorCorrection set="method"><f a="value">
	<x path="flash.display.ColorCorrection"/>
	<x path="flash.display.ColorCorrection"/>
</f></set_colorCorrection>
		<set_constructor set="method"><f a="value">
	<d/>
	<d/>
</f></set_constructor>
		<set_displayState set="method"><f a="value">
	<x path="flash.display.StageDisplayState"/>
	<x path="flash.display.StageDisplayState"/>
</f></set_displayState>
		<set_focus set="method"><f a="value">
	<c path="flash.display.InteractiveObject"/>
	<c path="flash.display.InteractiveObject"/>
</f></set_focus>
		<set_frameRate set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_frameRate>
		<set_fullScreenSourceRect set="method"><f a="value">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></set_fullScreenSourceRect>
		<set_mouseLock set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_mouseLock>
		<set_quality set="method"><f a="value">
	<x path="flash.display.StageQuality"/>
	<x path="flash.display.StageQuality"/>
</f></set_quality>
		<set_scaleMode set="method"><f a="value">
	<x path="flash.display.StageScaleMode"/>
	<x path="flash.display.StageScaleMode"/>
</f></set_scaleMode>
		<set_showDefaultContextMenu set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_showDefaultContextMenu>
		<set_stageFocusRect set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_stageFocusRect>
		<set_stageHeight set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_stageHeight>
		<set_stageWidth set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_stageWidth>
	</class>
	<class path="flash.display.Stage3D" params="" file="/usr/local/lib/haxe/std/flash/display/Stage3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<context3D public="1" get="accessor" set="null">
			<c path="flash.display3D.Context3D"/>
			<meta><m n=":flash.property"/></meta>
		</context3D>
		<visible public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</visible>
		<x public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</x>
		<y public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</y>
		<get_context3D set="method"><f a=""><c path="flash.display3D.Context3D"/></f></get_context3D>
		<get_visible set="method"><f a=""><x path="Bool"/></f></get_visible>
		<get_x set="method"><f a=""><x path="Float"/></f></get_x>
		<get_y set="method"><f a=""><x path="Float"/></f></get_y>
		<requestContext3D public="1" set="method"><f a="?context3DRenderMode:?profile">
	<c path="String"/>
	<x path="flash.display3D.Context3DProfile"/>
	<x path="Void"/>
</f></requestContext3D>
		<requestContext3DMatchingProfiles public="1">
			<f a="profiles">
				<c path="flash.Vector"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash12</e></m></meta>
		</requestContext3DMatchingProfiles>
		<set_visible set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<set_x set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<set_y set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<meta><m n=":require"><e>flash11</e></m></meta>
	</class>
	<abstract path="flash.display.StageAlign" params="" file="/usr/local/lib/haxe/std/flash/display/StageAlign.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.StageAlign"</e></m>
		</meta>
		<impl><class path="flash.display._StageAlign.StageAlign_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/StageAlign.hx" private="1" module="flash.display.StageAlign" extern="1" final="1">
	<BOTTOM public="1" set="null" static="1">
		<x path="flash.display.StageAlign"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BOTTOM>
	<BOTTOM_LEFT public="1" set="null" static="1">
		<x path="flash.display.StageAlign"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BOTTOM_LEFT>
	<BOTTOM_RIGHT public="1" set="null" static="1">
		<x path="flash.display.StageAlign"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BOTTOM_RIGHT>
	<LEFT public="1" set="null" static="1">
		<x path="flash.display.StageAlign"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LEFT>
	<RIGHT public="1" set="null" static="1">
		<x path="flash.display.StageAlign"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RIGHT>
	<TOP public="1" set="null" static="1">
		<x path="flash.display.StageAlign"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TOP>
	<TOP_LEFT public="1" set="null" static="1">
		<x path="flash.display.StageAlign"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TOP_LEFT>
	<TOP_RIGHT public="1" set="null" static="1">
		<x path="flash.display.StageAlign"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TOP_RIGHT>
	<meta>
		<m n=":native"><e>"flash.display.StageAlign"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._StageAlign.StageAlign_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/StageAlign.hx" private="1" module="flash.display.StageAlign" extern="1" final="1">
		<BOTTOM public="1" set="null" static="1">
			<x path="flash.display.StageAlign"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BOTTOM>
		<BOTTOM_LEFT public="1" set="null" static="1">
			<x path="flash.display.StageAlign"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BOTTOM_LEFT>
		<BOTTOM_RIGHT public="1" set="null" static="1">
			<x path="flash.display.StageAlign"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BOTTOM_RIGHT>
		<LEFT public="1" set="null" static="1">
			<x path="flash.display.StageAlign"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LEFT>
		<RIGHT public="1" set="null" static="1">
			<x path="flash.display.StageAlign"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RIGHT>
		<TOP public="1" set="null" static="1">
			<x path="flash.display.StageAlign"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TOP>
		<TOP_LEFT public="1" set="null" static="1">
			<x path="flash.display.StageAlign"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TOP_LEFT>
		<TOP_RIGHT public="1" set="null" static="1">
			<x path="flash.display.StageAlign"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TOP_RIGHT>
		<meta>
			<m n=":native"><e>"flash.display.StageAlign"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.StageDisplayState" params="" file="/usr/local/lib/haxe/std/flash/display/StageDisplayState.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.StageDisplayState"</e></m>
		</meta>
		<impl><class path="flash.display._StageDisplayState.StageDisplayState_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/StageDisplayState.hx" private="1" module="flash.display.StageDisplayState" extern="1" final="1">
	<FULL_SCREEN public="1" set="null" static="1">
		<x path="flash.display.StageDisplayState"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FULL_SCREEN>
	<FULL_SCREEN_INTERACTIVE public="1" set="null" static="1">
		<x path="flash.display.StageDisplayState"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FULL_SCREEN_INTERACTIVE>
	<NORMAL public="1" set="null" static="1">
		<x path="flash.display.StageDisplayState"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NORMAL>
	<meta>
		<m n=":native"><e>"flash.display.StageDisplayState"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._StageDisplayState.StageDisplayState_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/StageDisplayState.hx" private="1" module="flash.display.StageDisplayState" extern="1" final="1">
		<FULL_SCREEN public="1" set="null" static="1">
			<x path="flash.display.StageDisplayState"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FULL_SCREEN>
		<FULL_SCREEN_INTERACTIVE public="1" set="null" static="1">
			<x path="flash.display.StageDisplayState"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FULL_SCREEN_INTERACTIVE>
		<NORMAL public="1" set="null" static="1">
			<x path="flash.display.StageDisplayState"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NORMAL>
		<meta>
			<m n=":native"><e>"flash.display.StageDisplayState"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.StageQuality" params="" file="/usr/local/lib/haxe/std/flash/display/StageQuality.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.StageQuality"</e></m>
		</meta>
		<impl><class path="flash.display._StageQuality.StageQuality_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/StageQuality.hx" private="1" module="flash.display.StageQuality" extern="1" final="1">
	<BEST public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BEST>
	<HIGH public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGH>
	<HIGH_16X16 public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGH_16X16>
	<HIGH_16X16_LINEAR public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGH_16X16_LINEAR>
	<HIGH_8X8 public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGH_8X8>
	<HIGH_8X8_LINEAR public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGH_8X8_LINEAR>
	<LOW public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOW>
	<MEDIUM public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MEDIUM>
	<meta>
		<m n=":native"><e>"flash.display.StageQuality"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._StageQuality.StageQuality_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/StageQuality.hx" private="1" module="flash.display.StageQuality" extern="1" final="1">
		<BEST public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BEST>
		<HIGH public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGH>
		<HIGH_16X16 public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGH_16X16>
		<HIGH_16X16_LINEAR public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGH_16X16_LINEAR>
		<HIGH_8X8 public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGH_8X8>
		<HIGH_8X8_LINEAR public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGH_8X8_LINEAR>
		<LOW public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOW>
		<MEDIUM public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MEDIUM>
		<meta>
			<m n=":native"><e>"flash.display.StageQuality"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.StageScaleMode" params="" file="/usr/local/lib/haxe/std/flash/display/StageScaleMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.StageScaleMode"</e></m>
		</meta>
		<impl><class path="flash.display._StageScaleMode.StageScaleMode_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/StageScaleMode.hx" private="1" module="flash.display.StageScaleMode" extern="1" final="1">
	<EXACT_FIT public="1" set="null" static="1">
		<x path="flash.display.StageScaleMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EXACT_FIT>
	<NO_BORDER public="1" set="null" static="1">
		<x path="flash.display.StageScaleMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NO_BORDER>
	<NO_SCALE public="1" set="null" static="1">
		<x path="flash.display.StageScaleMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NO_SCALE>
	<SHOW_ALL public="1" set="null" static="1">
		<x path="flash.display.StageScaleMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHOW_ALL>
	<meta>
		<m n=":native"><e>"flash.display.StageScaleMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._StageScaleMode.StageScaleMode_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/StageScaleMode.hx" private="1" module="flash.display.StageScaleMode" extern="1" final="1">
		<EXACT_FIT public="1" set="null" static="1">
			<x path="flash.display.StageScaleMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EXACT_FIT>
		<NO_BORDER public="1" set="null" static="1">
			<x path="flash.display.StageScaleMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NO_BORDER>
		<NO_SCALE public="1" set="null" static="1">
			<x path="flash.display.StageScaleMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NO_SCALE>
		<SHOW_ALL public="1" set="null" static="1">
			<x path="flash.display.StageScaleMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHOW_ALL>
		<meta>
			<m n=":native"><e>"flash.display.StageScaleMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.TriangleCulling" params="" file="/usr/local/lib/haxe/std/flash/display/TriangleCulling.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.TriangleCulling"</e></m>
		</meta>
		<impl><class path="flash.display._TriangleCulling.TriangleCulling_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/TriangleCulling.hx" private="1" module="flash.display.TriangleCulling" extern="1" final="1">
	<NEGATIVE public="1" set="null" static="1">
		<x path="flash.display.TriangleCulling"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NEGATIVE>
	<NONE public="1" set="null" static="1">
		<x path="flash.display.TriangleCulling"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<POSITIVE public="1" set="null" static="1">
		<x path="flash.display.TriangleCulling"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</POSITIVE>
	<meta>
		<m n=":native"><e>"flash.display.TriangleCulling"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._TriangleCulling.TriangleCulling_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/TriangleCulling.hx" private="1" module="flash.display.TriangleCulling" extern="1" final="1">
		<NEGATIVE public="1" set="null" static="1">
			<x path="flash.display.TriangleCulling"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NEGATIVE>
		<NONE public="1" set="null" static="1">
			<x path="flash.display.TriangleCulling"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<POSITIVE public="1" set="null" static="1">
			<x path="flash.display.TriangleCulling"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</POSITIVE>
		<meta>
			<m n=":native"><e>"flash.display.TriangleCulling"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display3D.Context3D" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3D.hx" extern="1" final="1">
		<extends path="flash.events.EventDispatcher"/>
		<supportsVideoTexture public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</supportsVideoTexture>
		<get_supportsVideoTexture set="method" static="1"><f a=""><x path="Bool"/></f></get_supportsVideoTexture>
		<backBufferHeight public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</backBufferHeight>
		<backBufferWidth public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</backBufferWidth>
		<driverInfo public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</driverInfo>
		<enableErrorChecking public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</enableErrorChecking>
		<maxBackBufferHeight public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</maxBackBufferHeight>
		<maxBackBufferWidth public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</maxBackBufferWidth>
		<profile public="1">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash12</e></m>
			</meta>
		</profile>
		<totalGPUMemory public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</totalGPUMemory>
		<clear public="1" set="method">
			<f a="?red:?green:?blue:?alpha:?depth:?stencil:?mask" v="0:0:0:1:1:0:0xFFFFFFFF">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mask : 0xFFFFFFFF, stencil : 0, depth : 1, alpha : 1, blue : 0, green : 0, red : 0 }</e></m></meta>
		</clear>
		<configureBackBuffer public="1" set="method">
			<f a="width:height:antiAlias:?enableDepthAndStencil:?wantsBestResolution:?wantsBestResolutionOnBrowserZoom" v=":::true:false:false">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ wantsBestResolutionOnBrowserZoom : false, wantsBestResolution : false, enableDepthAndStencil : true }</e></m></meta>
		</configureBackBuffer>
		<createCubeTexture public="1" set="method">
			<f a="size:format:optimizeForRenderToTexture:?streamingLevels" v=":::0">
				<x path="Int"/>
				<x path="flash.display3D.Context3DTextureFormat"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="flash.display3D.textures.CubeTexture"/>
			</f>
			<meta><m n=":value"><e>{ streamingLevels : 0 }</e></m></meta>
		</createCubeTexture>
		<createIndexBuffer public="1" set="method"><f a="numIndices:?bufferUsage">
	<x path="Int"/>
	<x path="flash.display3D.Context3DBufferUsage"/>
	<c path="flash.display3D.IndexBuffer3D"/>
</f></createIndexBuffer>
		<createProgram public="1" set="method"><f a=""><c path="flash.display3D.Program3D"/></f></createProgram>
		<createRectangleTexture public="1">
			<f a="width:height:format:optimizeForRenderToTexture">
				<x path="Int"/>
				<x path="Int"/>
				<x path="flash.display3D.Context3DTextureFormat"/>
				<x path="Bool"/>
				<c path="flash.display3D.textures.RectangleTexture"/>
			</f>
			<meta><m n=":require"><e>flash11_8</e></m></meta>
		</createRectangleTexture>
		<createTexture public="1" set="method">
			<f a="width:height:format:optimizeForRenderToTexture:?streamingLevels" v="::::0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="flash.display3D.Context3DTextureFormat"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="flash.display3D.textures.Texture"/>
			</f>
			<meta><m n=":value"><e>{ streamingLevels : 0 }</e></m></meta>
		</createTexture>
		<createVertexBuffer public="1" set="method"><f a="numVertices:data32PerVertex:?bufferUsage">
	<x path="Int"/>
	<x path="Int"/>
	<x path="flash.display3D.Context3DBufferUsage"/>
	<c path="flash.display3D.VertexBuffer3D"/>
</f></createVertexBuffer>
		<createVideoTexture public="1" set="method"><f a=""><c path="flash.display3D.textures.VideoTexture"/></f></createVideoTexture>
		<dispose public="1" set="method">
			<f a="?recreate" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ recreate : true }</e></m></meta>
		</dispose>
		<drawToBitmapData public="1" set="method"><f a="destination">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></drawToBitmapData>
		<drawTriangles public="1" set="method">
			<f a="indexBuffer:?firstIndex:?numTriangles" v=":0:-1">
				<c path="flash.display3D.IndexBuffer3D"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ numTriangles : -1, firstIndex : 0 }</e></m></meta>
		</drawTriangles>
		<get_backBufferHeight set="method"><f a=""><x path="Int"/></f></get_backBufferHeight>
		<get_backBufferWidth set="method"><f a=""><x path="Int"/></f></get_backBufferWidth>
		<get_driverInfo set="method"><f a=""><c path="String"/></f></get_driverInfo>
		<get_enableErrorChecking set="method"><f a=""><x path="Bool"/></f></get_enableErrorChecking>
		<get_maxBackBufferHeight set="method"><f a=""><x path="Int"/></f></get_maxBackBufferHeight>
		<get_maxBackBufferWidth set="method"><f a=""><x path="Int"/></f></get_maxBackBufferWidth>
		<get_profile set="method"><f a=""><c path="String"/></f></get_profile>
		<get_totalGPUMemory set="method"><f a=""><x path="Float"/></f></get_totalGPUMemory>
		<present public="1" set="method"><f a=""><x path="Void"/></f></present>
		<setBlendFactors public="1" set="method"><f a="sourceFactor:destinationFactor">
	<x path="flash.display3D.Context3DBlendFactor"/>
	<x path="flash.display3D.Context3DBlendFactor"/>
	<x path="Void"/>
</f></setBlendFactors>
		<setColorMask public="1" set="method"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setColorMask>
		<setCulling public="1" set="method"><f a="triangleFaceToCull">
	<x path="flash.display3D.Context3DTriangleFace"/>
	<x path="Void"/>
</f></setCulling>
		<setDepthTest public="1" set="method"><f a="depthMask:passCompareMode">
	<x path="Bool"/>
	<x path="flash.display3D.Context3DCompareMode"/>
	<x path="Void"/>
</f></setDepthTest>
		<setProgram public="1" set="method"><f a="program">
	<c path="flash.display3D.Program3D"/>
	<x path="Void"/>
</f></setProgram>
		<setProgramConstantsFromByteArray public="1">
			<f a="programType:firstRegister:numRegisters:data:byteArrayOffset">
				<x path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</setProgramConstantsFromByteArray>
		<setProgramConstantsFromMatrix public="1" set="method">
			<f a="programType:firstRegister:matrix:?transposedMatrix" v=":::false">
				<x path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<c path="flash.geom.Matrix3D"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ transposedMatrix : false }</e></m></meta>
		</setProgramConstantsFromMatrix>
		<setProgramConstantsFromVector public="1" set="method">
			<f a="programType:firstRegister:data:?numRegisters" v=":::-1">
				<x path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ numRegisters : -1 }</e></m></meta>
		</setProgramConstantsFromVector>
		<setRenderToBackBuffer public="1" set="method"><f a=""><x path="Void"/></f></setRenderToBackBuffer>
		<setRenderToTexture public="1" set="method">
			<f a="texture:?enableDepthAndStencil:?antiAlias:?surfaceSelector:?colorOutputIndex" v=":false:0:0:0">
				<c path="flash.display3D.textures.TextureBase"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ colorOutputIndex : 0, surfaceSelector : 0, antiAlias : 0, enableDepthAndStencil : false }</e></m></meta>
		</setRenderToTexture>
		<setSamplerStateAt public="1">
			<f a="sampler:wrap:filter:mipfilter">
				<x path="Int"/>
				<x path="flash.display3D.Context3DWrapMode"/>
				<x path="flash.display3D.Context3DTextureFilter"/>
				<x path="flash.display3D.Context3DMipFilter"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_6</e></m></meta>
		</setSamplerStateAt>
		<setScissorRectangle public="1" set="method"><f a="rectangle">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></setScissorRectangle>
		<setStencilActions public="1" set="method"><f a="?triangleFace:?compareMode:?actionOnBothPass:?actionOnDepthFail:?actionOnDepthPassStencilFail">
	<x path="flash.display3D.Context3DTriangleFace"/>
	<x path="flash.display3D.Context3DCompareMode"/>
	<x path="flash.display3D.Context3DStencilAction"/>
	<x path="flash.display3D.Context3DStencilAction"/>
	<x path="flash.display3D.Context3DStencilAction"/>
	<x path="Void"/>
</f></setStencilActions>
		<setStencilReferenceValue public="1" set="method">
			<f a="referenceValue:?readMask:?writeMask" v=":255:255">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ writeMask : 255, readMask : 255 }</e></m></meta>
		</setStencilReferenceValue>
		<setTextureAt public="1" set="method"><f a="sampler:texture">
	<x path="Int"/>
	<c path="flash.display3D.textures.TextureBase"/>
	<x path="Void"/>
</f></setTextureAt>
		<setVertexBufferAt public="1" set="method">
			<f a="index:buffer:?bufferOffset:?format" v="::0:">
				<x path="Int"/>
				<c path="flash.display3D.VertexBuffer3D"/>
				<x path="Int"/>
				<x path="flash.display3D.Context3DVertexBufferFormat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ bufferOffset : 0 }</e></m></meta>
		</setVertexBufferAt>
		<set_enableErrorChecking set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_enableErrorChecking>
		<set_maxBackBufferHeight set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_maxBackBufferHeight>
		<set_maxBackBufferWidth set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_maxBackBufferWidth>
	</class>
	<abstract path="flash.display3D.Context3DBlendFactor" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DBlendFactor.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DBlendFactor"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DBlendFactor.hx" private="1" module="flash.display3D.Context3DBlendFactor" extern="1" final="1">
	<DESTINATION_ALPHA public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DESTINATION_ALPHA>
	<DESTINATION_COLOR public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DESTINATION_COLOR>
	<ONE public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ONE>
	<ONE_MINUS_DESTINATION_ALPHA public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ONE_MINUS_DESTINATION_ALPHA>
	<ONE_MINUS_DESTINATION_COLOR public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ONE_MINUS_DESTINATION_COLOR>
	<ONE_MINUS_SOURCE_ALPHA public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ONE_MINUS_SOURCE_ALPHA>
	<ONE_MINUS_SOURCE_COLOR public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ONE_MINUS_SOURCE_COLOR>
	<SOURCE_ALPHA public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SOURCE_ALPHA>
	<SOURCE_COLOR public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SOURCE_COLOR>
	<ZERO public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ZERO>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DBlendFactor"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DBlendFactor.hx" private="1" module="flash.display3D.Context3DBlendFactor" extern="1" final="1">
		<DESTINATION_ALPHA public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DESTINATION_ALPHA>
		<DESTINATION_COLOR public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DESTINATION_COLOR>
		<ONE public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ONE>
		<ONE_MINUS_DESTINATION_ALPHA public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ONE_MINUS_DESTINATION_ALPHA>
		<ONE_MINUS_DESTINATION_COLOR public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ONE_MINUS_DESTINATION_COLOR>
		<ONE_MINUS_SOURCE_ALPHA public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ONE_MINUS_SOURCE_ALPHA>
		<ONE_MINUS_SOURCE_COLOR public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ONE_MINUS_SOURCE_COLOR>
		<SOURCE_ALPHA public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SOURCE_ALPHA>
		<SOURCE_COLOR public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SOURCE_COLOR>
		<ZERO public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ZERO>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DBlendFactor"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DBufferUsage" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DBufferUsage.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DBufferUsage"</e></m>
			<m n=":require"><e>flash12</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DBufferUsage.Context3DBufferUsage_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DBufferUsage.hx" private="1" module="flash.display3D.Context3DBufferUsage" extern="1" final="1">
	<DYNAMIC_DRAW public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBufferUsage"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DYNAMIC_DRAW>
	<STATIC_DRAW public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBufferUsage"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</STATIC_DRAW>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DBufferUsage"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DBufferUsage.Context3DBufferUsage_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DBufferUsage.hx" private="1" module="flash.display3D.Context3DBufferUsage" extern="1" final="1">
		<DYNAMIC_DRAW public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBufferUsage"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DYNAMIC_DRAW>
		<STATIC_DRAW public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBufferUsage"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</STATIC_DRAW>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DBufferUsage"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DCompareMode" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DCompareMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DCompareMode"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DCompareMode.Context3DCompareMode_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DCompareMode.hx" private="1" module="flash.display3D.Context3DCompareMode" extern="1" final="1">
	<ALWAYS public="1" set="null" static="1">
		<x path="flash.display3D.Context3DCompareMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ALWAYS>
	<EQUAL public="1" set="null" static="1">
		<x path="flash.display3D.Context3DCompareMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EQUAL>
	<GREATER public="1" set="null" static="1">
		<x path="flash.display3D.Context3DCompareMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GREATER>
	<GREATER_EQUAL public="1" set="null" static="1">
		<x path="flash.display3D.Context3DCompareMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GREATER_EQUAL>
	<LESS public="1" set="null" static="1">
		<x path="flash.display3D.Context3DCompareMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LESS>
	<LESS_EQUAL public="1" set="null" static="1">
		<x path="flash.display3D.Context3DCompareMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LESS_EQUAL>
	<NEVER public="1" set="null" static="1">
		<x path="flash.display3D.Context3DCompareMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NEVER>
	<NOT_EQUAL public="1" set="null" static="1">
		<x path="flash.display3D.Context3DCompareMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NOT_EQUAL>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DCompareMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DCompareMode.Context3DCompareMode_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DCompareMode.hx" private="1" module="flash.display3D.Context3DCompareMode" extern="1" final="1">
		<ALWAYS public="1" set="null" static="1">
			<x path="flash.display3D.Context3DCompareMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ALWAYS>
		<EQUAL public="1" set="null" static="1">
			<x path="flash.display3D.Context3DCompareMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EQUAL>
		<GREATER public="1" set="null" static="1">
			<x path="flash.display3D.Context3DCompareMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GREATER>
		<GREATER_EQUAL public="1" set="null" static="1">
			<x path="flash.display3D.Context3DCompareMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GREATER_EQUAL>
		<LESS public="1" set="null" static="1">
			<x path="flash.display3D.Context3DCompareMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LESS>
		<LESS_EQUAL public="1" set="null" static="1">
			<x path="flash.display3D.Context3DCompareMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LESS_EQUAL>
		<NEVER public="1" set="null" static="1">
			<x path="flash.display3D.Context3DCompareMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NEVER>
		<NOT_EQUAL public="1" set="null" static="1">
			<x path="flash.display3D.Context3DCompareMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NOT_EQUAL>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DCompareMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DMipFilter" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DMipFilter.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DMipFilter"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DMipFilter.Context3DMipFilter_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DMipFilter.hx" private="1" module="flash.display3D.Context3DMipFilter" extern="1" final="1">
	<MIPLINEAR public="1" set="null" static="1">
		<x path="flash.display3D.Context3DMipFilter"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MIPLINEAR>
	<MIPNEAREST public="1" set="null" static="1">
		<x path="flash.display3D.Context3DMipFilter"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MIPNEAREST>
	<MIPNONE public="1" set="null" static="1">
		<x path="flash.display3D.Context3DMipFilter"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MIPNONE>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DMipFilter"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DMipFilter.Context3DMipFilter_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DMipFilter.hx" private="1" module="flash.display3D.Context3DMipFilter" extern="1" final="1">
		<MIPLINEAR public="1" set="null" static="1">
			<x path="flash.display3D.Context3DMipFilter"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MIPLINEAR>
		<MIPNEAREST public="1" set="null" static="1">
			<x path="flash.display3D.Context3DMipFilter"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MIPNEAREST>
		<MIPNONE public="1" set="null" static="1">
			<x path="flash.display3D.Context3DMipFilter"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MIPNONE>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DMipFilter"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DProfile" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DProfile.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DProfile"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DProfile.Context3DProfile_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DProfile.hx" private="1" module="flash.display3D.Context3DProfile" extern="1" final="1">
	<BASELINE public="1" set="null" static="1">
		<x path="flash.display3D.Context3DProfile"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BASELINE>
	<BASELINE_CONSTRAINED public="1" set="null" static="1">
		<x path="flash.display3D.Context3DProfile"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BASELINE_CONSTRAINED>
	<BASELINE_EXTENDED public="1" set="null" static="1">
		<x path="flash.display3D.Context3DProfile"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BASELINE_EXTENDED>
	<STANDARD public="1" set="null" static="1">
		<x path="flash.display3D.Context3DProfile"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</STANDARD>
	<STANDARD_CONSTRAINED public="1" set="null" static="1">
		<x path="flash.display3D.Context3DProfile"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</STANDARD_CONSTRAINED>
	<STANDARD_EXTENDED public="1" set="null" static="1">
		<x path="flash.display3D.Context3DProfile"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</STANDARD_EXTENDED>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DProfile"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DProfile.Context3DProfile_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DProfile.hx" private="1" module="flash.display3D.Context3DProfile" extern="1" final="1">
		<BASELINE public="1" set="null" static="1">
			<x path="flash.display3D.Context3DProfile"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BASELINE>
		<BASELINE_CONSTRAINED public="1" set="null" static="1">
			<x path="flash.display3D.Context3DProfile"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BASELINE_CONSTRAINED>
		<BASELINE_EXTENDED public="1" set="null" static="1">
			<x path="flash.display3D.Context3DProfile"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BASELINE_EXTENDED>
		<STANDARD public="1" set="null" static="1">
			<x path="flash.display3D.Context3DProfile"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</STANDARD>
		<STANDARD_CONSTRAINED public="1" set="null" static="1">
			<x path="flash.display3D.Context3DProfile"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</STANDARD_CONSTRAINED>
		<STANDARD_EXTENDED public="1" set="null" static="1">
			<x path="flash.display3D.Context3DProfile"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</STANDARD_EXTENDED>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DProfile"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DProgramType" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DProgramType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DProgramType"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DProgramType.Context3DProgramType_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DProgramType.hx" private="1" module="flash.display3D.Context3DProgramType" extern="1" final="1">
	<FRAGMENT public="1" set="null" static="1">
		<x path="flash.display3D.Context3DProgramType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FRAGMENT>
	<VERTEX public="1" set="null" static="1">
		<x path="flash.display3D.Context3DProgramType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VERTEX>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DProgramType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DProgramType.Context3DProgramType_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DProgramType.hx" private="1" module="flash.display3D.Context3DProgramType" extern="1" final="1">
		<FRAGMENT public="1" set="null" static="1">
			<x path="flash.display3D.Context3DProgramType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FRAGMENT>
		<VERTEX public="1" set="null" static="1">
			<x path="flash.display3D.Context3DProgramType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VERTEX>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DProgramType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DStencilAction" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DStencilAction.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DStencilAction"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DStencilAction.Context3DStencilAction_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DStencilAction.hx" private="1" module="flash.display3D.Context3DStencilAction" extern="1" final="1">
	<DECREMENT_SATURATE public="1" set="null" static="1">
		<x path="flash.display3D.Context3DStencilAction"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DECREMENT_SATURATE>
	<DECREMENT_WRAP public="1" set="null" static="1">
		<x path="flash.display3D.Context3DStencilAction"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DECREMENT_WRAP>
	<INCREMENT_SATURATE public="1" set="null" static="1">
		<x path="flash.display3D.Context3DStencilAction"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INCREMENT_SATURATE>
	<INCREMENT_WRAP public="1" set="null" static="1">
		<x path="flash.display3D.Context3DStencilAction"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INCREMENT_WRAP>
	<INVERT public="1" set="null" static="1">
		<x path="flash.display3D.Context3DStencilAction"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INVERT>
	<KEEP public="1" set="null" static="1">
		<x path="flash.display3D.Context3DStencilAction"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KEEP>
	<SET public="1" set="null" static="1">
		<x path="flash.display3D.Context3DStencilAction"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SET>
	<ZERO public="1" set="null" static="1">
		<x path="flash.display3D.Context3DStencilAction"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ZERO>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DStencilAction"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DStencilAction.Context3DStencilAction_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DStencilAction.hx" private="1" module="flash.display3D.Context3DStencilAction" extern="1" final="1">
		<DECREMENT_SATURATE public="1" set="null" static="1">
			<x path="flash.display3D.Context3DStencilAction"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DECREMENT_SATURATE>
		<DECREMENT_WRAP public="1" set="null" static="1">
			<x path="flash.display3D.Context3DStencilAction"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DECREMENT_WRAP>
		<INCREMENT_SATURATE public="1" set="null" static="1">
			<x path="flash.display3D.Context3DStencilAction"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INCREMENT_SATURATE>
		<INCREMENT_WRAP public="1" set="null" static="1">
			<x path="flash.display3D.Context3DStencilAction"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INCREMENT_WRAP>
		<INVERT public="1" set="null" static="1">
			<x path="flash.display3D.Context3DStencilAction"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INVERT>
		<KEEP public="1" set="null" static="1">
			<x path="flash.display3D.Context3DStencilAction"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KEEP>
		<SET public="1" set="null" static="1">
			<x path="flash.display3D.Context3DStencilAction"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SET>
		<ZERO public="1" set="null" static="1">
			<x path="flash.display3D.Context3DStencilAction"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ZERO>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DStencilAction"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DTextureFilter" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DTextureFilter.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DTextureFilter"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DTextureFilter.Context3DTextureFilter_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DTextureFilter.hx" private="1" module="flash.display3D.Context3DTextureFilter" extern="1" final="1">
	<ANISOTROPIC16X public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFilter"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ANISOTROPIC16X>
	<ANISOTROPIC2X public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFilter"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ANISOTROPIC2X>
	<ANISOTROPIC4X public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFilter"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ANISOTROPIC4X>
	<ANISOTROPIC8X public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFilter"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ANISOTROPIC8X>
	<LINEAR public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFilter"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LINEAR>
	<NEAREST public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFilter"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NEAREST>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DTextureFilter"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DTextureFilter.Context3DTextureFilter_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DTextureFilter.hx" private="1" module="flash.display3D.Context3DTextureFilter" extern="1" final="1">
		<ANISOTROPIC16X public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFilter"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ANISOTROPIC16X>
		<ANISOTROPIC2X public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFilter"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ANISOTROPIC2X>
		<ANISOTROPIC4X public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFilter"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ANISOTROPIC4X>
		<ANISOTROPIC8X public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFilter"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ANISOTROPIC8X>
		<LINEAR public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFilter"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LINEAR>
		<NEAREST public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFilter"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NEAREST>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DTextureFilter"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DTextureFormat" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DTextureFormat.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DTextureFormat"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DTextureFormat.hx" private="1" module="flash.display3D.Context3DTextureFormat" extern="1" final="1">
	<BGRA public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFormat"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BGRA>
	<BGRA_PACKED public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFormat"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BGRA_PACKED>
	<BGR_PACKED public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFormat"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BGR_PACKED>
	<COMPRESSED public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFormat"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</COMPRESSED>
	<COMPRESSED_ALPHA public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFormat"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</COMPRESSED_ALPHA>
	<RGBA_HALF_FLOAT public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFormat"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RGBA_HALF_FLOAT>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DTextureFormat"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DTextureFormat.hx" private="1" module="flash.display3D.Context3DTextureFormat" extern="1" final="1">
		<BGRA public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFormat"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BGRA>
		<BGRA_PACKED public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFormat"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BGRA_PACKED>
		<BGR_PACKED public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFormat"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BGR_PACKED>
		<COMPRESSED public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFormat"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</COMPRESSED>
		<COMPRESSED_ALPHA public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFormat"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</COMPRESSED_ALPHA>
		<RGBA_HALF_FLOAT public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFormat"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RGBA_HALF_FLOAT>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DTextureFormat"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DTriangleFace" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DTriangleFace.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DTriangleFace"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DTriangleFace.hx" private="1" module="flash.display3D.Context3DTriangleFace" extern="1" final="1">
	<BACK public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTriangleFace"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BACK>
	<FRONT public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTriangleFace"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FRONT>
	<FRONT_AND_BACK public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTriangleFace"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FRONT_AND_BACK>
	<NONE public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTriangleFace"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DTriangleFace"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DTriangleFace.hx" private="1" module="flash.display3D.Context3DTriangleFace" extern="1" final="1">
		<BACK public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTriangleFace"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BACK>
		<FRONT public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTriangleFace"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FRONT>
		<FRONT_AND_BACK public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTriangleFace"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FRONT_AND_BACK>
		<NONE public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTriangleFace"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DTriangleFace"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DVertexBufferFormat" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DVertexBufferFormat.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DVertexBufferFormat"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DVertexBufferFormat.Context3DVertexBufferFormat_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DVertexBufferFormat.hx" private="1" module="flash.display3D.Context3DVertexBufferFormat" extern="1" final="1">
	<BYTES_4 public="1" set="null" static="1">
		<x path="flash.display3D.Context3DVertexBufferFormat"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BYTES_4>
	<FLOAT_1 public="1" set="null" static="1">
		<x path="flash.display3D.Context3DVertexBufferFormat"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FLOAT_1>
	<FLOAT_2 public="1" set="null" static="1">
		<x path="flash.display3D.Context3DVertexBufferFormat"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FLOAT_2>
	<FLOAT_3 public="1" set="null" static="1">
		<x path="flash.display3D.Context3DVertexBufferFormat"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FLOAT_3>
	<FLOAT_4 public="1" set="null" static="1">
		<x path="flash.display3D.Context3DVertexBufferFormat"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FLOAT_4>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DVertexBufferFormat"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DVertexBufferFormat.Context3DVertexBufferFormat_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DVertexBufferFormat.hx" private="1" module="flash.display3D.Context3DVertexBufferFormat" extern="1" final="1">
		<BYTES_4 public="1" set="null" static="1">
			<x path="flash.display3D.Context3DVertexBufferFormat"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BYTES_4>
		<FLOAT_1 public="1" set="null" static="1">
			<x path="flash.display3D.Context3DVertexBufferFormat"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FLOAT_1>
		<FLOAT_2 public="1" set="null" static="1">
			<x path="flash.display3D.Context3DVertexBufferFormat"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FLOAT_2>
		<FLOAT_3 public="1" set="null" static="1">
			<x path="flash.display3D.Context3DVertexBufferFormat"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FLOAT_3>
		<FLOAT_4 public="1" set="null" static="1">
			<x path="flash.display3D.Context3DVertexBufferFormat"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FLOAT_4>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DVertexBufferFormat"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DWrapMode" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DWrapMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DWrapMode"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DWrapMode.Context3DWrapMode_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DWrapMode.hx" private="1" module="flash.display3D.Context3DWrapMode" extern="1" final="1">
	<CLAMP public="1" set="null" static="1">
		<x path="flash.display3D.Context3DWrapMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLAMP>
	<CLAMP_U_REPEAT_V public="1" set="null" static="1">
		<x path="flash.display3D.Context3DWrapMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLAMP_U_REPEAT_V>
	<REPEAT public="1" set="null" static="1">
		<x path="flash.display3D.Context3DWrapMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REPEAT>
	<REPEAT_U_CLAMP_V public="1" set="null" static="1">
		<x path="flash.display3D.Context3DWrapMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REPEAT_U_CLAMP_V>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DWrapMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DWrapMode.Context3DWrapMode_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display3D/Context3DWrapMode.hx" private="1" module="flash.display3D.Context3DWrapMode" extern="1" final="1">
		<CLAMP public="1" set="null" static="1">
			<x path="flash.display3D.Context3DWrapMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLAMP>
		<CLAMP_U_REPEAT_V public="1" set="null" static="1">
			<x path="flash.display3D.Context3DWrapMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLAMP_U_REPEAT_V>
		<REPEAT public="1" set="null" static="1">
			<x path="flash.display3D.Context3DWrapMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REPEAT>
		<REPEAT_U_CLAMP_V public="1" set="null" static="1">
			<x path="flash.display3D.Context3DWrapMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REPEAT_U_CLAMP_V>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DWrapMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display3D.IndexBuffer3D" params="" file="/usr/local/lib/haxe/std/flash/display3D/IndexBuffer3D.hx" extern="1" final="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startOffset:count">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromVector public="1" set="method"><f a="data:startOffset:count">
	<c path="flash.Vector"><x path="UInt"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
	</class>
	<class path="flash.display3D.Program3D" params="" file="/usr/local/lib/haxe/std/flash/display3D/Program3D.hx" extern="1" final="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<upload public="1" set="method"><f a="vertexProgram:fragmentProgram">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></upload>
	</class>
	<class path="flash.display3D.VertexBuffer3D" params="" file="/usr/local/lib/haxe/std/flash/display3D/VertexBuffer3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startVertex:numVertices">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromVector public="1" set="method"><f a="data:startVertex:numVertices">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
	</class>
	<class path="flash.display3D.textures.TextureBase" params="" file="/usr/local/lib/haxe/std/flash/display3D/textures/TextureBase.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
	</class>
	<class path="flash.display3D.textures.CubeTexture" params="" file="/usr/local/lib/haxe/std/flash/display3D/textures/CubeTexture.hx" extern="1" final="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadCompressedTextureFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:?async" v="::false">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ async : false }</e></m></meta>
		</uploadCompressedTextureFromByteArray>
		<uploadFromBitmapData public="1" set="method">
			<f a="source:side:?miplevel" v="::0">
				<c path="flash.display.BitmapData"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miplevel : 0 }</e></m></meta>
		</uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:side:?miplevel" v=":::0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miplevel : 0 }</e></m></meta>
		</uploadFromByteArray>
	</class>
	<class path="flash.display3D.textures.RectangleTexture" params="" file="/usr/local/lib/haxe/std/flash/display3D/textures/RectangleTexture.hx" extern="1" final="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadFromBitmapData public="1" set="method"><f a="source">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display3D.textures.Texture" params="" file="/usr/local/lib/haxe/std/flash/display3D/textures/Texture.hx" extern="1" final="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadCompressedTextureFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:?async" v="::false">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ async : false }</e></m></meta>
		</uploadCompressedTextureFromByteArray>
		<uploadFromBitmapData public="1" set="method">
			<f a="source:?miplevel" v=":0">
				<c path="flash.display.BitmapData"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miplevel : 0 }</e></m></meta>
		</uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:?miplevel" v="::0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miplevel : 0 }</e></m></meta>
		</uploadFromByteArray>
	</class>
	<class path="flash.display3D.textures.VideoTexture" params="" file="/usr/local/lib/haxe/std/flash/display3D/textures/VideoTexture.hx" extern="1" final="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<videoHeight public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</videoHeight>
		<videoWidth public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</videoWidth>
		<attachCamera public="1" set="method"><f a="theCamera">
	<c path="flash.media.Camera"/>
	<x path="Void"/>
</f></attachCamera>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<x path="Void"/>
</f></attachNetStream>
		<get_videoHeight set="method"><f a=""><x path="Int"/></f></get_videoHeight>
		<get_videoWidth set="method"><f a=""><x path="Int"/></f></get_videoWidth>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.events.Event" params="" file="/usr/local/lib/haxe/std/flash/events/Event.hx" extern="1">
		<ACTIVATE final="1" public="1" set="null" static="1"><c path="String"/></ACTIVATE>
		<ADDED final="1" public="1" set="null" static="1"><c path="String"/></ADDED>
		<ADDED_TO_STAGE final="1" public="1" set="null" static="1"><c path="String"/></ADDED_TO_STAGE>
		<BROWSER_ZOOM_CHANGE final="1" public="1" set="null" static="1"><c path="String"/></BROWSER_ZOOM_CHANGE>
		<CANCEL final="1" public="1" set="null" static="1"><c path="String"/></CANCEL>
		<CHANGE final="1" public="1" set="null" static="1"><c path="String"/></CHANGE>
		<CHANNEL_MESSAGE final="1" public="1" set="null" static="1"><c path="String"/></CHANNEL_MESSAGE>
		<CHANNEL_STATE final="1" public="1" set="null" static="1"><c path="String"/></CHANNEL_STATE>
		<CLEAR final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CLEAR>
		<CLOSE final="1" public="1" set="null" static="1"><c path="String"/></CLOSE>
		<COMPLETE final="1" public="1" set="null" static="1"><c path="String"/></COMPLETE>
		<CONNECT final="1" public="1" set="null" static="1"><c path="String"/></CONNECT>
		<CONTEXT3D_CREATE final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</CONTEXT3D_CREATE>
		<COPY final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</COPY>
		<CUT final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CUT>
		<DEACTIVATE final="1" public="1" set="null" static="1"><c path="String"/></DEACTIVATE>
		<ENTER_FRAME final="1" public="1" set="null" static="1"><c path="String"/></ENTER_FRAME>
		<EXIT_FRAME final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</EXIT_FRAME>
		<FRAME_CONSTRUCTED final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</FRAME_CONSTRUCTED>
		<FRAME_LABEL final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</FRAME_LABEL>
		<FULLSCREEN final="1" public="1" set="null" static="1"><c path="String"/></FULLSCREEN>
		<ID3 final="1" public="1" set="null" static="1"><c path="String"/></ID3>
		<INIT final="1" public="1" set="null" static="1"><c path="String"/></INIT>
		<MOUSE_LEAVE final="1" public="1" set="null" static="1"><c path="String"/></MOUSE_LEAVE>
		<OPEN final="1" public="1" set="null" static="1"><c path="String"/></OPEN>
		<PASTE final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</PASTE>
		<REMOVED final="1" public="1" set="null" static="1"><c path="String"/></REMOVED>
		<REMOVED_FROM_STAGE final="1" public="1" set="null" static="1"><c path="String"/></REMOVED_FROM_STAGE>
		<RENDER final="1" public="1" set="null" static="1"><c path="String"/></RENDER>
		<RESIZE final="1" public="1" set="null" static="1"><c path="String"/></RESIZE>
		<SCROLL final="1" public="1" set="null" static="1"><c path="String"/></SCROLL>
		<SELECT final="1" public="1" set="null" static="1"><c path="String"/></SELECT>
		<SELECT_ALL final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</SELECT_ALL>
		<SOUND_COMPLETE final="1" public="1" set="null" static="1"><c path="String"/></SOUND_COMPLETE>
		<SUSPEND final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</SUSPEND>
		<TAB_CHILDREN_CHANGE final="1" public="1" set="null" static="1"><c path="String"/></TAB_CHILDREN_CHANGE>
		<TAB_ENABLED_CHANGE final="1" public="1" set="null" static="1"><c path="String"/></TAB_ENABLED_CHANGE>
		<TAB_INDEX_CHANGE final="1" public="1" set="null" static="1"><c path="String"/></TAB_INDEX_CHANGE>
		<TEXTURE_READY final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</TEXTURE_READY>
		<TEXT_INTERACTION_MODE_CHANGE final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</TEXT_INTERACTION_MODE_CHANGE>
		<UNLOAD final="1" public="1" set="null" static="1"><c path="String"/></UNLOAD>
		<VIDEO_FRAME final="1" public="1" set="null" static="1"><c path="String"/></VIDEO_FRAME>
		<WORKER_STATE final="1" public="1" set="null" static="1"><c path="String"/></WORKER_STATE>
		<bubbles public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</bubbles>
		<cancelable public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</cancelable>
		<currentTarget public="1" get="accessor" set="null">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</currentTarget>
		<eventPhase public="1" get="accessor" set="null">
			<x path="flash.events.EventPhase"/>
			<meta><m n=":flash.property"/></meta>
		</eventPhase>
		<target public="1" get="accessor" set="null">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</target>
		<type public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</type>
		<clone public="1" set="method"><f a=""><c path="flash.events.Event"/></f></clone>
		<formatToString public="1" set="method"><f a="className:restArgs">
	<c path="String"/>
	<x path="haxe.extern.Rest"><d/></x>
	<c path="String"/>
</f></formatToString>
		<get_bubbles set="method"><f a=""><x path="Bool"/></f></get_bubbles>
		<get_cancelable set="method"><f a=""><x path="Bool"/></f></get_cancelable>
		<get_currentTarget set="method"><f a=""><d/></f></get_currentTarget>
		<get_eventPhase set="method"><f a=""><x path="flash.events.EventPhase"/></f></get_eventPhase>
		<get_target set="method"><f a=""><d/></f></get_target>
		<get_type set="method"><f a=""><c path="String"/></f></get_type>
		<isDefaultPrevented public="1" set="method"><f a=""><x path="Bool"/></f></isDefaultPrevented>
		<preventDefault public="1" set="method"><f a=""><x path="Void"/></f></preventDefault>
		<stopImmediatePropagation public="1" set="method"><f a=""><x path="Void"/></f></stopImmediatePropagation>
		<stopPropagation public="1" set="method"><f a=""><x path="Void"/></f></stopPropagation>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable" v=":false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="flash.events.EventPhase" params="" file="/usr/local/lib/haxe/std/flash/events/EventPhase.hx">
		<this><x path="UInt"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.events.EventPhase"</e></m>
		</meta>
		<impl><class path="flash.events._EventPhase.EventPhase_Impl_" params="" file="/usr/local/lib/haxe/std/flash/events/EventPhase.hx" private="1" module="flash.events.EventPhase" extern="1" final="1">
	<AT_TARGET public="1" set="null" static="1">
		<x path="flash.events.EventPhase"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AT_TARGET>
	<BUBBLING_PHASE public="1" set="null" static="1">
		<x path="flash.events.EventPhase"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BUBBLING_PHASE>
	<CAPTURING_PHASE public="1" set="null" static="1">
		<x path="flash.events.EventPhase"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CAPTURING_PHASE>
	<meta>
		<m n=":native"><e>"flash.events.EventPhase"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.events._EventPhase.EventPhase_Impl_" params="" file="/usr/local/lib/haxe/std/flash/events/EventPhase.hx" private="1" module="flash.events.EventPhase" extern="1" final="1">
		<AT_TARGET public="1" set="null" static="1">
			<x path="flash.events.EventPhase"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AT_TARGET>
		<BUBBLING_PHASE public="1" set="null" static="1">
			<x path="flash.events.EventPhase"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BUBBLING_PHASE>
		<CAPTURING_PHASE public="1" set="null" static="1">
			<x path="flash.events.EventPhase"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CAPTURING_PHASE>
		<meta>
			<m n=":native"><e>"flash.events.EventPhase"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.events.KeyboardEvent" params="" file="/usr/local/lib/haxe/std/flash/events/KeyboardEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<KEY_DOWN final="1" public="1" set="null" static="1"><c path="String"/></KEY_DOWN>
		<KEY_UP final="1" public="1" set="null" static="1"><c path="String"/></KEY_UP>
		<altKey public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</altKey>
		<charCode public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</charCode>
		<ctrlKey public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ctrlKey>
		<keyCode public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</keyCode>
		<keyLocation public="1" get="accessor" set="accessor">
			<x path="flash.ui.KeyLocation"/>
			<meta><m n=":flash.property"/></meta>
		</keyLocation>
		<shiftKey public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</shiftKey>
		<get_altKey set="method"><f a=""><x path="Bool"/></f></get_altKey>
		<get_charCode set="method"><f a=""><x path="UInt"/></f></get_charCode>
		<get_ctrlKey set="method"><f a=""><x path="Bool"/></f></get_ctrlKey>
		<get_keyCode set="method"><f a=""><x path="UInt"/></f></get_keyCode>
		<get_keyLocation set="method"><f a=""><x path="flash.ui.KeyLocation"/></f></get_keyLocation>
		<get_shiftKey set="method"><f a=""><x path="Bool"/></f></get_shiftKey>
		<set_altKey set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_altKey>
		<set_charCode set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_charCode>
		<set_ctrlKey set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ctrlKey>
		<set_keyCode set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_keyCode>
		<set_keyLocation set="method"><f a="value">
	<x path="flash.ui.KeyLocation"/>
	<x path="flash.ui.KeyLocation"/>
</f></set_keyLocation>
		<set_shiftKey set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_shiftKey>
		<updateAfterEvent public="1" set="method"><f a=""><x path="Void"/></f></updateAfterEvent>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?charCodeValue:?keyCodeValue:?keyLocationValue:?ctrlKeyValue:?altKeyValue:?shiftKeyValue" v=":true:false:0:0:0:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="flash.ui.KeyLocation"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ shiftKeyValue : false, altKeyValue : false, ctrlKeyValue : false, keyLocationValue : 0, keyCodeValue : 0, charCodeValue : 0, cancelable : false, bubbles : true }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.UncaughtErrorEvents" params="" file="/usr/local/lib/haxe/std/flash/events/UncaughtErrorEvents.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.external.ExternalInterface" params="" file="/usr/local/lib/haxe/std/flash/external/ExternalInterface.hx" extern="1">
		<available public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</available>
		<marshallExceptions public="1" static="1"><x path="Bool"/></marshallExceptions>
		<objectID public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</objectID>
		<addCallback public="1" set="method" static="1"><f a="functionName:closure">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></addCallback>
		<call public="1" set="method" static="1"><f a="functionName:restArgs">
	<c path="String"/>
	<x path="haxe.extern.Rest"><d/></x>
	<d/>
</f></call>
		<get_available set="method" static="1"><f a=""><x path="Bool"/></f></get_available>
		<get_objectID set="method" static="1"><f a=""><c path="String"/></f></get_objectID>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="/usr/local/lib/haxe/std/flash/filters/BitmapFilter.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.filters.BitmapFilter"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="/usr/local/lib/haxe/std/flash/geom/ColorTransform.hx" extern="1">
		<alphaMultiplier public="1"><x path="Float"/></alphaMultiplier>
		<alphaOffset public="1"><x path="Float"/></alphaOffset>
		<blueMultiplier public="1"><x path="Float"/></blueMultiplier>
		<blueOffset public="1"><x path="Float"/></blueOffset>
		<color public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</color>
		<greenMultiplier public="1"><x path="Float"/></greenMultiplier>
		<greenOffset public="1"><x path="Float"/></greenOffset>
		<redMultiplier public="1"><x path="Float"/></redMultiplier>
		<redOffset public="1"><x path="Float"/></redOffset>
		<concat public="1" set="method"><f a="second">
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></concat>
		<get_color set="method"><f a=""><x path="UInt"/></f></get_color>
		<set_color set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_color>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="?redMultiplier:?greenMultiplier:?blueMultiplier:?alphaMultiplier:?redOffset:?greenOffset:?blueOffset:?alphaOffset" v="1:1:1:1:0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alphaOffset : 0, blueOffset : 0, greenOffset : 0, redOffset : 0, alphaMultiplier : 1, blueMultiplier : 1, greenMultiplier : 1, redMultiplier : 1 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Matrix" params="" file="/usr/local/lib/haxe/std/flash/geom/Matrix.hx" extern="1">
		<a public="1"><x path="Float"/></a>
		<b public="1"><x path="Float"/></b>
		<c public="1"><x path="Float"/></c>
		<d public="1"><x path="Float"/></d>
		<tx public="1"><x path="Float"/></tx>
		<ty public="1"><x path="Float"/></ty>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix"/></f></clone>
		<concat public="1" set="method"><f a="m">
	<c path="flash.geom.Matrix"/>
	<x path="Void"/>
</f></concat>
		<copyColumnFrom public="1">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<copyColumnTo public="1">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyFrom public="1">
			<f a="sourceMatrix">
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyRowFrom public="1">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRowTo public="1">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<createBox public="1" set="method">
			<f a="scaleX:scaleY:?rotation:?tx:?ty" v="::0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, rotation : 0 }</e></m></meta>
		</createBox>
		<createGradientBox public="1" set="method">
			<f a="width:height:?rotation:?tx:?ty" v="::0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, rotation : 0 }</e></m></meta>
		</createGradientBox>
		<deltaTransformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></deltaTransformPoint>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<invert public="1" set="method"><f a=""><x path="Void"/></f></invert>
		<rotate public="1" set="method"><f a="angle">
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<scale public="1" set="method"><f a="sx:sy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<setTo public="1">
			<f a="aa:ba:ca:da:txa:tya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<transformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></transformPoint>
		<translate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<new public="1" set="method">
			<f a="?a:?b:?c:?d:?tx:?ty" v="1:0:0:1:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, d : 1, c : 0, b : 0, a : 1 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Matrix3D" params="" file="/usr/local/lib/haxe/std/flash/geom/Matrix3D.hx" extern="1">
		<interpolate public="1" static="1"><f a="thisMat:toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<c path="flash.geom.Matrix3D"/>
</f></interpolate>
		<determinant public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</determinant>
		<position public="1" get="accessor" set="accessor">
			<c path="flash.geom.Vector3D"/>
			<meta><m n=":flash.property"/></meta>
		</position>
		<rawData public="1" get="accessor" set="accessor">
			<c path="flash.Vector"><x path="Float"/></c>
			<meta><m n=":flash.property"/></meta>
		</rawData>
		<append public="1" set="method"><f a="lhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></append>
		<appendRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></appendRotation>
		<appendScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendScale>
		<appendTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendTranslation>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></clone>
		<copyColumnFrom public="1">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<copyColumnTo public="1">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyFrom public="1">
			<f a="sourceMatrix3D">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyRawDataFrom public="1" expr="{ transpose : false, index : 0 }">
			<f a="vector:?index:?transpose">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ transpose : false, index : 0 }</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</copyRawDataFrom>
		<copyRawDataTo public="1" expr="{ transpose : false, index : 0 }">
			<f a="vector:?index:?transpose">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ transpose : false, index : 0 }</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</copyRawDataTo>
		<copyRowFrom public="1">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRowTo public="1">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<copyToMatrix3D public="1">
			<f a="dest">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyToMatrix3D>
		<decompose public="1" set="method"><f a="?orientationStyle">
	<x path="flash.geom.Orientation3D"/>
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
</f></decompose>
		<deltaTransformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></deltaTransformVector>
		<get_determinant set="method"><f a=""><x path="Float"/></f></get_determinant>
		<get_position set="method"><f a=""><c path="flash.geom.Vector3D"/></f></get_position>
		<get_rawData set="method"><f a=""><c path="flash.Vector"><x path="Float"/></c></f></get_rawData>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<interpolateTo public="1" set="method"><f a="toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<x path="Void"/>
</f></interpolateTo>
		<invert public="1" set="method"><f a=""><x path="Bool"/></f></invert>
		<pointAt public="1" set="method"><f a="pos:?at:?up">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></pointAt>
		<prepend public="1" set="method"><f a="rhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></prepend>
		<prependRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></prependRotation>
		<prependScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependScale>
		<prependTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependTranslation>
		<recompose public="1" set="method"><f a="components:?orientationStyle">
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
	<x path="flash.geom.Orientation3D"/>
	<x path="Bool"/>
</f></recompose>
		<set_position set="method"><f a="value">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></set_position>
		<set_rawData set="method"><f a="value">
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
</f></set_rawData>
		<transformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></transformVector>
		<transformVectors public="1" set="method"><f a="vin:vout">
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></transformVectors>
		<transpose public="1" set="method"><f a=""><x path="Void"/></f></transpose>
		<new public="1"><f a="?v">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<abstract path="flash.geom.Orientation3D" params="" file="/usr/local/lib/haxe/std/flash/geom/Orientation3D.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.geom.Orientation3D"</e></m>
		</meta>
		<impl><class path="flash.geom._Orientation3D.Orientation3D_Impl_" params="" file="/usr/local/lib/haxe/std/flash/geom/Orientation3D.hx" private="1" module="flash.geom.Orientation3D" extern="1" final="1">
	<AXIS_ANGLE public="1" set="null" static="1">
		<x path="flash.geom.Orientation3D"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AXIS_ANGLE>
	<EULER_ANGLES public="1" set="null" static="1">
		<x path="flash.geom.Orientation3D"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EULER_ANGLES>
	<QUATERNION public="1" set="null" static="1">
		<x path="flash.geom.Orientation3D"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</QUATERNION>
	<meta>
		<m n=":native"><e>"flash.geom.Orientation3D"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.geom._Orientation3D.Orientation3D_Impl_" params="" file="/usr/local/lib/haxe/std/flash/geom/Orientation3D.hx" private="1" module="flash.geom.Orientation3D" extern="1" final="1">
		<AXIS_ANGLE public="1" set="null" static="1">
			<x path="flash.geom.Orientation3D"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AXIS_ANGLE>
		<EULER_ANGLES public="1" set="null" static="1">
			<x path="flash.geom.Orientation3D"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EULER_ANGLES>
		<QUATERNION public="1" set="null" static="1">
			<x path="flash.geom.Orientation3D"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</QUATERNION>
		<meta>
			<m n=":native"><e>"flash.geom.Orientation3D"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.geom.PerspectiveProjection" params="" file="/usr/local/lib/haxe/std/flash/geom/PerspectiveProjection.hx" extern="1">
		<fieldOfView public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fieldOfView>
		<focalLength public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</focalLength>
		<projectionCenter public="1" get="accessor" set="accessor">
			<c path="flash.geom.Point"/>
			<meta><m n=":flash.property"/></meta>
		</projectionCenter>
		<get_fieldOfView set="method"><f a=""><x path="Float"/></f></get_fieldOfView>
		<get_focalLength set="method"><f a=""><x path="Float"/></f></get_focalLength>
		<get_projectionCenter set="method"><f a=""><c path="flash.geom.Point"/></f></get_projectionCenter>
		<set_fieldOfView set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_fieldOfView>
		<set_focalLength set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_focalLength>
		<set_projectionCenter set="method"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_projectionCenter>
		<toMatrix3D public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></toMatrix3D>
		<new public="1"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.geom.Point" params="" file="/usr/local/lib/haxe/std/flash/geom/Point.hx" extern="1">
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
</f></distance>
		<interpolate public="1" set="method" static="1"><f a="pt1:pt2:f">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></interpolate>
		<polar public="1" set="method" static="1"><f a="len:angle">
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></polar>
		<length public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</length>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<add public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Point"/></f></clone>
		<copyFrom public="1">
			<f a="sourcePoint">
				<c path="flash.geom.Point"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></equals>
		<get_length set="method"><f a=""><x path="Float"/></f></get_length>
		<normalize public="1" set="method"><f a="thickness">
	<x path="Float"/>
	<x path="Void"/>
</f></normalize>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<setTo public="1">
			<f a="xa:ya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<subtract public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="?x:?y" v="0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Rectangle" params="" file="/usr/local/lib/haxe/std/flash/geom/Rectangle.hx" extern="1">
		<bottom public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bottom>
		<bottomRight public="1" get="accessor" set="accessor">
			<c path="flash.geom.Point"/>
			<meta><m n=":flash.property"/></meta>
		</bottomRight>
		<height public="1"><x path="Float"/></height>
		<left public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</left>
		<right public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</right>
		<size public="1" get="accessor" set="accessor">
			<c path="flash.geom.Point"/>
			<meta><m n=":flash.property"/></meta>
		</size>
		<top public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</top>
		<topLeft public="1" get="accessor" set="accessor">
			<c path="flash.geom.Point"/>
			<meta><m n=":flash.property"/></meta>
		</topLeft>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Rectangle"/></f></clone>
		<contains public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></contains>
		<containsPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></containsPoint>
		<containsRect public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></containsRect>
		<copyFrom public="1">
			<f a="sourceRect">
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></equals>
		<get_bottom set="method"><f a=""><x path="Float"/></f></get_bottom>
		<get_bottomRight set="method"><f a=""><c path="flash.geom.Point"/></f></get_bottomRight>
		<get_left set="method"><f a=""><x path="Float"/></f></get_left>
		<get_right set="method"><f a=""><x path="Float"/></f></get_right>
		<get_size set="method"><f a=""><c path="flash.geom.Point"/></f></get_size>
		<get_top set="method"><f a=""><x path="Float"/></f></get_top>
		<get_topLeft set="method"><f a=""><c path="flash.geom.Point"/></f></get_topLeft>
		<inflate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></inflate>
		<inflatePoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></inflatePoint>
		<intersection public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></intersection>
		<intersects public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></intersects>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<offsetPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></offsetPoint>
		<setEmpty public="1" set="method"><f a=""><x path="Void"/></f></setEmpty>
		<setTo public="1">
			<f a="xa:ya:widtha:heighta">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<set_bottom set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_bottom>
		<set_bottomRight set="method"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_bottomRight>
		<set_left set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_left>
		<set_right set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_right>
		<set_size set="method"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_size>
		<set_top set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_top>
		<set_topLeft set="method"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_topLeft>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<union public="1" set="method"><f a="toUnion">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></union>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height" v="0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0, width : 0, y : 0, x : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Transform" params="" file="/usr/local/lib/haxe/std/flash/geom/Transform.hx" extern="1">
		<colorTransform public="1" get="accessor" set="accessor">
			<c path="flash.geom.ColorTransform"/>
			<meta><m n=":flash.property"/></meta>
		</colorTransform>
		<concatenatedColorTransform public="1" get="accessor" set="null">
			<c path="flash.geom.ColorTransform"/>
			<meta><m n=":flash.property"/></meta>
		</concatenatedColorTransform>
		<concatenatedMatrix public="1" get="accessor" set="null">
			<c path="flash.geom.Matrix"/>
			<meta><m n=":flash.property"/></meta>
		</concatenatedMatrix>
		<matrix public="1" get="accessor" set="accessor">
			<c path="flash.geom.Matrix"/>
			<meta><m n=":flash.property"/></meta>
		</matrix>
		<matrix3D public="1">
			<c path="flash.geom.Matrix3D"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</matrix3D>
		<perspectiveProjection public="1">
			<c path="flash.geom.PerspectiveProjection"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</perspectiveProjection>
		<pixelBounds public="1" get="accessor" set="null">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":flash.property"/></meta>
		</pixelBounds>
		<getRelativeMatrix3D public="1">
			<f a="relativeTo">
				<c path="flash.display.DisplayObject"/>
				<c path="flash.geom.Matrix3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getRelativeMatrix3D>
		<get_colorTransform set="method"><f a=""><c path="flash.geom.ColorTransform"/></f></get_colorTransform>
		<get_concatenatedColorTransform set="method"><f a=""><c path="flash.geom.ColorTransform"/></f></get_concatenatedColorTransform>
		<get_concatenatedMatrix set="method"><f a=""><c path="flash.geom.Matrix"/></f></get_concatenatedMatrix>
		<get_matrix set="method"><f a=""><c path="flash.geom.Matrix"/></f></get_matrix>
		<get_matrix3D set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></get_matrix3D>
		<get_perspectiveProjection set="method"><f a=""><c path="flash.geom.PerspectiveProjection"/></f></get_perspectiveProjection>
		<get_pixelBounds set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_pixelBounds>
		<set_colorTransform set="method"><f a="value">
	<c path="flash.geom.ColorTransform"/>
	<c path="flash.geom.ColorTransform"/>
</f></set_colorTransform>
		<set_matrix set="method"><f a="value">
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.Matrix"/>
</f></set_matrix>
		<set_matrix3D set="method"><f a="value">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Matrix3D"/>
</f></set_matrix3D>
		<set_perspectiveProjection set="method"><f a="value">
	<c path="flash.geom.PerspectiveProjection"/>
	<c path="flash.geom.PerspectiveProjection"/>
</f></set_perspectiveProjection>
		<new public="1" set="method"><f a="displayObject">
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Vector3D" params="" file="/usr/local/lib/haxe/std/flash/geom/Vector3D.hx" extern="1">
		<X_AXIS final="1" public="1" static="1"><c path="flash.geom.Vector3D"/></X_AXIS>
		<Y_AXIS final="1" public="1" static="1"><c path="flash.geom.Vector3D"/></Y_AXIS>
		<Z_AXIS final="1" public="1" static="1"><c path="flash.geom.Vector3D"/></Z_AXIS>
		<angleBetween public="1" static="1"><f a="a:b">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></angleBetween>
		<distance public="1" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></distance>
		<length public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</length>
		<lengthSquared public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</lengthSquared>
		<w public="1"><x path="Float"/></w>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<add public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Vector3D"/></f></clone>
		<copyFrom public="1">
			<f a="sourceVector3D">
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<crossProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></crossProduct>
		<decrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></decrementBy>
		<dotProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></dotProduct>
		<equals public="1" set="method">
			<f a="toCompare:?allFour" v=":false">
				<c path="flash.geom.Vector3D"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ allFour : false }</e></m></meta>
		</equals>
		<get_length set="method"><f a=""><x path="Float"/></f></get_length>
		<get_lengthSquared set="method"><f a=""><x path="Float"/></f></get_lengthSquared>
		<incrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></incrementBy>
		<nearEquals public="1" set="method">
			<f a="toCompare:tolerance:?allFour" v="::false">
				<c path="flash.geom.Vector3D"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ allFour : false }</e></m></meta>
		</nearEquals>
		<negate public="1" set="method"><f a=""><x path="Void"/></f></negate>
		<normalize public="1" set="method"><f a=""><x path="Float"/></f></normalize>
		<project public="1" set="method"><f a=""><x path="Void"/></f></project>
		<scaleBy public="1" set="method"><f a="s">
	<x path="Float"/>
	<x path="Void"/>
</f></scaleBy>
		<setTo public="1">
			<f a="xa:ya:za">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<subtract public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" expr="{ w : 0, z : 0, y : 0, x : 0 }">
			<f a="?x:?y:?z:?w">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 0, z : 0, y : 0, x : 0 }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.media.AVCaptionStyle" params="" file="/usr/local/lib/haxe/std/flash/media/AVCaptionStyle.hx" extern="1">
		<BLACK final="1" public="1" set="null" static="1"><c path="String"/></BLACK>
		<BLUE final="1" public="1" set="null" static="1"><c path="String"/></BLUE>
		<BRIGHT_BLUE final="1" public="1" set="null" static="1"><c path="String"/></BRIGHT_BLUE>
		<BRIGHT_CYAN final="1" public="1" set="null" static="1"><c path="String"/></BRIGHT_CYAN>
		<BRIGHT_GREEN final="1" public="1" set="null" static="1"><c path="String"/></BRIGHT_GREEN>
		<BRIGHT_MAGENTA final="1" public="1" set="null" static="1"><c path="String"/></BRIGHT_MAGENTA>
		<BRIGHT_RED final="1" public="1" set="null" static="1"><c path="String"/></BRIGHT_RED>
		<BRIGHT_WHITE final="1" public="1" set="null" static="1"><c path="String"/></BRIGHT_WHITE>
		<BRIGHT_YELLOW final="1" public="1" set="null" static="1"><c path="String"/></BRIGHT_YELLOW>
		<CASUAL final="1" public="1" set="null" static="1"><c path="String"/></CASUAL>
		<CURSIVE final="1" public="1" set="null" static="1"><c path="String"/></CURSIVE>
		<CYAN final="1" public="1" set="null" static="1"><c path="String"/></CYAN>
		<DARK_BLUE final="1" public="1" set="null" static="1"><c path="String"/></DARK_BLUE>
		<DARK_CYAN final="1" public="1" set="null" static="1"><c path="String"/></DARK_CYAN>
		<DARK_GREEN final="1" public="1" set="null" static="1"><c path="String"/></DARK_GREEN>
		<DARK_MAGENTA final="1" public="1" set="null" static="1"><c path="String"/></DARK_MAGENTA>
		<DARK_RED final="1" public="1" set="null" static="1"><c path="String"/></DARK_RED>
		<DARK_YELLOW final="1" public="1" set="null" static="1"><c path="String"/></DARK_YELLOW>
		<DEFAULT final="1" public="1" set="null" static="1"><c path="String"/></DEFAULT>
		<DEPRESSED final="1" public="1" set="null" static="1"><c path="String"/></DEPRESSED>
		<GRAY final="1" public="1" set="null" static="1"><c path="String"/></GRAY>
		<GREEN final="1" public="1" set="null" static="1"><c path="String"/></GREEN>
		<LARGE final="1" public="1" set="null" static="1"><c path="String"/></LARGE>
		<LEFT_DROP_SHADOW final="1" public="1" set="null" static="1"><c path="String"/></LEFT_DROP_SHADOW>
		<MAGENTA final="1" public="1" set="null" static="1"><c path="String"/></MAGENTA>
		<MEDIUM final="1" public="1" set="null" static="1"><c path="String"/></MEDIUM>
		<MONOSPACED_WITHOUT_SERIFS final="1" public="1" set="null" static="1"><c path="String"/></MONOSPACED_WITHOUT_SERIFS>
		<MONOSPACE_WITH_SERIFS final="1" public="1" set="null" static="1"><c path="String"/></MONOSPACE_WITH_SERIFS>
		<NONE final="1" public="1" set="null" static="1"><c path="String"/></NONE>
		<PROPORTIONAL_WITHOUT_SERIFS final="1" public="1" set="null" static="1"><c path="String"/></PROPORTIONAL_WITHOUT_SERIFS>
		<PROPORTIONAL_WITH_SERIFS final="1" public="1" set="null" static="1"><c path="String"/></PROPORTIONAL_WITH_SERIFS>
		<RAISED final="1" public="1" set="null" static="1"><c path="String"/></RAISED>
		<RED final="1" public="1" set="null" static="1"><c path="String"/></RED>
		<RIGHT_DROP_SHADOW final="1" public="1" set="null" static="1"><c path="String"/></RIGHT_DROP_SHADOW>
		<SMALL final="1" public="1" set="null" static="1"><c path="String"/></SMALL>
		<SMALL_CAPITALS final="1" public="1" set="null" static="1"><c path="String"/></SMALL_CAPITALS>
		<UNIFORM final="1" public="1" set="null" static="1"><c path="String"/></UNIFORM>
		<WHITE final="1" public="1" set="null" static="1"><c path="String"/></WHITE>
		<YELLOW final="1" public="1" set="null" static="1"><c path="String"/></YELLOW>
		<backgroundColor public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</backgroundColor>
		<backgroundOpacity public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</backgroundOpacity>
		<bottomInset public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</bottomInset>
		<edgeColor public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</edgeColor>
		<fillColor public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</fillColor>
		<fillOpacity public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</fillOpacity>
		<font public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</font>
		<fontColor public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</fontColor>
		<fontEdge public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</fontEdge>
		<fontOpacity public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</fontOpacity>
		<size public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</size>
		<get_backgroundColor set="method"><f a=""><c path="String"/></f></get_backgroundColor>
		<get_backgroundOpacity set="method"><f a=""><c path="String"/></f></get_backgroundOpacity>
		<get_bottomInset set="method"><f a=""><c path="String"/></f></get_bottomInset>
		<get_edgeColor set="method"><f a=""><c path="String"/></f></get_edgeColor>
		<get_fillColor set="method"><f a=""><c path="String"/></f></get_fillColor>
		<get_fillOpacity set="method"><f a=""><c path="String"/></f></get_fillOpacity>
		<get_font set="method"><f a=""><c path="String"/></f></get_font>
		<get_fontColor set="method"><f a=""><c path="String"/></f></get_fontColor>
		<get_fontEdge set="method"><f a=""><c path="String"/></f></get_fontEdge>
		<get_fontOpacity set="method"><f a=""><c path="String"/></f></get_fontOpacity>
		<get_size set="method"><f a=""><c path="String"/></f></get_size>
		<set_backgroundColor set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_backgroundColor>
		<set_backgroundOpacity set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_backgroundOpacity>
		<set_bottomInset set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_bottomInset>
		<set_edgeColor set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_edgeColor>
		<set_fillColor set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_fillColor>
		<set_fillOpacity set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_fillOpacity>
		<set_font set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_font>
		<set_fontColor set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_fontColor>
		<set_fontEdge set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_fontEdge>
		<set_fontOpacity set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_fontOpacity>
		<set_size set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_size>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVPlayState" params="" file="/usr/local/lib/haxe/std/flash/media/AVPlayState.hx" extern="1">
		<BUFFERING final="1" public="1" set="null" static="1"><x path="Int"/></BUFFERING>
		<EOF final="1" public="1" set="null" static="1"><x path="Int"/></EOF>
		<PAUSED final="1" public="1" set="null" static="1"><x path="Int"/></PAUSED>
		<PLAYING final="1" public="1" set="null" static="1"><x path="Int"/></PLAYING>
		<READY final="1" public="1" set="null" static="1"><x path="Int"/></READY>
		<SUSPENDED final="1" public="1" set="null" static="1"><x path="Int"/></SUSPENDED>
		<TRICK_PLAY final="1" public="1" set="null" static="1"><x path="Int"/></TRICK_PLAY>
		<UNINITIALIZED final="1" public="1" set="null" static="1"><x path="Int"/></UNINITIALIZED>
		<UNRECOVERABLE_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></UNRECOVERABLE_ERROR>
		<state public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</state>
		<get_state set="method"><f a=""><x path="Int"/></f></get_state>
		<new public="1" set="method"><f a="state">
	<x path="UInt"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVResult" params="" file="/usr/local/lib/haxe/std/flash/media/AVResult.hx" extern="1">
		<ASYNC_OPERATION_IN_PROGRESS final="1" public="1" set="null" static="1"><x path="Int"/></ASYNC_OPERATION_IN_PROGRESS>
		<AUDIO_ONLY_STREAM_END final="1" public="1" set="null" static="1"><x path="Int"/></AUDIO_ONLY_STREAM_END>
		<AUDIO_ONLY_STREAM_START final="1" public="1" set="null" static="1"><x path="Int"/></AUDIO_ONLY_STREAM_START>
		<AUDIO_START_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></AUDIO_START_ERROR>
		<BAD_MANIFEST_SIGNATURE final="1" public="1" set="null" static="1"><x path="Int"/></BAD_MANIFEST_SIGNATURE>
		<BAD_MEDIASAMPLE_FOUND final="1" public="1" set="null" static="1"><x path="Int"/></BAD_MEDIASAMPLE_FOUND>
		<BAD_MEDIA_INTERLEAVING final="1" public="1" set="null" static="1"><x path="Int"/></BAD_MEDIA_INTERLEAVING>
		<CALLED_FROM_WRONG_THREAD final="1" public="1" set="null" static="1"><x path="Int"/></CALLED_FROM_WRONG_THREAD>
		<CANNOT_ERASE_TIMELINE final="1" public="1" set="null" static="1"><x path="Int"/></CANNOT_ERASE_TIMELINE>
		<CANNOT_FAIL_OVER final="1" public="1" set="null" static="1"><x path="Int"/></CANNOT_FAIL_OVER>
		<CANNOT_HANDLE_MAIN_MANIFEST_UPDATE final="1" public="1" set="null" static="1"><x path="Int"/></CANNOT_HANDLE_MAIN_MANIFEST_UPDATE>
		<CANNOT_LOAD_PLAY_LIST final="1" public="1" set="null" static="1"><x path="Int"/></CANNOT_LOAD_PLAY_LIST>
		<CANNOT_SPLIT_TIMELINE final="1" public="1" set="null" static="1"><x path="Int"/></CANNOT_SPLIT_TIMELINE>
		<CODEC_NOT_SUPPORTED final="1" public="1" set="null" static="1"><x path="Int"/></CODEC_NOT_SUPPORTED>
		<COMPONENT_CREATION_FAILURE final="1" public="1" set="null" static="1"><x path="Int"/></COMPONENT_CREATION_FAILURE>
		<CONTAINER_NOT_SUPPORTED final="1" public="1" set="null" static="1"><x path="Int"/></CONTAINER_NOT_SUPPORTED>
		<CONTENT_LENGTH_MISMATCH final="1" public="1" set="null" static="1"><x path="Int"/></CONTENT_LENGTH_MISMATCH>
		<CRYPTO_ALGORITHM_NOT_SUPPORTED final="1" public="1" set="null" static="1"><x path="Int"/></CRYPTO_ALGORITHM_NOT_SUPPORTED>
		<CRYPTO_ERROR_BAD_CERTIFICATE final="1" public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_BAD_CERTIFICATE>
		<CRYPTO_ERROR_BAD_PARAMETER final="1" public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_BAD_PARAMETER>
		<CRYPTO_ERROR_BUFFER_TOO_SMALL final="1" public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_BUFFER_TOO_SMALL>
		<CRYPTO_ERROR_CORRUPTED_DATA final="1" public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_CORRUPTED_DATA>
		<CRYPTO_ERROR_DIGEST_FINISH final="1" public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_DIGEST_FINISH>
		<CRYPTO_ERROR_DIGEST_UPDATE final="1" public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_DIGEST_UPDATE>
		<CRYPTO_ERROR_UNKNOWN final="1" public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_UNKNOWN>
		<CURRENT_PERIOD_EXPIRED final="1" public="1" set="null" static="1"><x path="Int"/></CURRENT_PERIOD_EXPIRED>
		<DECODER_FAILED final="1" public="1" set="null" static="1"><x path="Int"/></DECODER_FAILED>
		<DEVICE_OPEN_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></DEVICE_OPEN_ERROR>
		<DID_NOT_GET_NEXT_FRAGMENT final="1" public="1" set="null" static="1"><x path="Int"/></DID_NOT_GET_NEXT_FRAGMENT>
		<DRM_INIT_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></DRM_INIT_ERROR>
		<DRM_NOT_AVAILABLE final="1" public="1" set="null" static="1"><x path="Int"/></DRM_NOT_AVAILABLE>
		<END_OF_PERIOD final="1" public="1" set="null" static="1"><x path="Int"/></END_OF_PERIOD>
		<EOF final="1" public="1" set="null" static="1"><x path="Int"/></EOF>
		<FILE_NOT_FOUND final="1" public="1" set="null" static="1"><x path="Int"/></FILE_NOT_FOUND>
		<FILE_OPEN_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></FILE_OPEN_ERROR>
		<FILE_READ_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></FILE_READ_ERROR>
		<FILE_STRUCTURE_INVALID final="1" public="1" set="null" static="1"><x path="Int"/></FILE_STRUCTURE_INVALID>
		<FILE_WRITE_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></FILE_WRITE_ERROR>
		<FRAGMENT_READ_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></FRAGMENT_READ_ERROR>
		<GENERIC_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></GENERIC_ERROR>
		<HTTP_TIME_OUT final="1" public="1" set="null" static="1"><x path="Int"/></HTTP_TIME_OUT>
		<ID3_PARSE_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></ID3_PARSE_ERROR>
		<INCOMPATIBLE_RENDER_MODE final="1" public="1" set="null" static="1"><x path="Int"/></INCOMPATIBLE_RENDER_MODE>
		<INCOMPATIBLE_VERSION final="1" public="1" set="null" static="1"><x path="Int"/></INCOMPATIBLE_VERSION>
		<INTERNAL_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></INTERNAL_ERROR>
		<INVALID_KEY final="1" public="1" set="null" static="1"><x path="Int"/></INVALID_KEY>
		<INVALID_OPERATION final="1" public="1" set="null" static="1"><x path="Int"/></INVALID_OPERATION>
		<INVALID_PARAMETER final="1" public="1" set="null" static="1"><x path="Int"/></INVALID_PARAMETER>
		<INVALID_REPLACE_DURATION final="1" public="1" set="null" static="1"><x path="Int"/></INVALID_REPLACE_DURATION>
		<INVALID_SEEK_TIME final="1" public="1" set="null" static="1"><x path="Int"/></INVALID_SEEK_TIME>
		<INVALID_WITH_AUDIO_ONLY_FILE final="1" public="1" set="null" static="1"><x path="Int"/></INVALID_WITH_AUDIO_ONLY_FILE>
		<IRRECOVERABLE_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></IRRECOVERABLE_ERROR>
		<KEY_NOT_FOUND final="1" public="1" set="null" static="1"><x path="Int"/></KEY_NOT_FOUND>
		<KEY_SERVER_NOT_FOUND final="1" public="1" set="null" static="1"><x path="Int"/></KEY_SERVER_NOT_FOUND>
		<LISTENER_NOT_FOUND final="1" public="1" set="null" static="1"><x path="Int"/></LISTENER_NOT_FOUND>
		<LIVE_HOLD final="1" public="1" set="null" static="1"><x path="Int"/></LIVE_HOLD>
		<LIVE_WINDOW_MOVED_BACKWARD final="1" public="1" set="null" static="1"><x path="Int"/></LIVE_WINDOW_MOVED_BACKWARD>
		<LOST_CONNECTION_RECOVERABLE final="1" public="1" set="null" static="1"><x path="Int"/></LOST_CONNECTION_RECOVERABLE>
		<MAIN_MANIFEST_UPDATE_TO_BE_HANDLED final="1" public="1" set="null" static="1"><x path="Int"/></MAIN_MANIFEST_UPDATE_TO_BE_HANDLED>
		<MANIFEST_FILE_UNEXPECTEDLY_CHANGED final="1" public="1" set="null" static="1"><x path="Int"/></MANIFEST_FILE_UNEXPECTEDLY_CHANGED>
		<NETWORK_DOWN final="1" public="1" set="null" static="1"><x path="Int"/></NETWORK_DOWN>
		<NETWORK_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></NETWORK_ERROR>
		<NETWORK_UNAVAILABLE final="1" public="1" set="null" static="1"><x path="Int"/></NETWORK_UNAVAILABLE>
		<NOT_IMPLEMENTED final="1" public="1" set="null" static="1"><x path="Int"/></NOT_IMPLEMENTED>
		<NO_AUDIO_SINK final="1" public="1" set="null" static="1"><x path="Int"/></NO_AUDIO_SINK>
		<NO_FIXED_SIZE final="1" public="1" set="null" static="1"><x path="Int"/></NO_FIXED_SIZE>
		<NO_TIMELINE final="1" public="1" set="null" static="1"><x path="Int"/></NO_TIMELINE>
		<NO_USEABLE_BITRATE_PROFILE final="1" public="1" set="null" static="1"><x path="Int"/></NO_USEABLE_BITRATE_PROFILE>
		<NULL_OPERATION final="1" public="1" set="null" static="1"><x path="Int"/></NULL_OPERATION>
		<ONLY_ALLOWED_IN_PAUSED_STATE final="1" public="1" set="null" static="1"><x path="Int"/></ONLY_ALLOWED_IN_PAUSED_STATE>
		<OPERATION_ABORTED final="1" public="1" set="null" static="1"><x path="Int"/></OPERATION_ABORTED>
		<OUT_OF_MEMORY final="1" public="1" set="null" static="1"><x path="Int"/></OUT_OF_MEMORY>
		<OVERFLOW final="1" public="1" set="null" static="1"><x path="Int"/></OVERFLOW>
		<PARSE_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></PARSE_ERROR>
		<PARTIAL_REPLACEMENT final="1" public="1" set="null" static="1"><x path="Int"/></PARTIAL_REPLACEMENT>
		<PERIOD_HOLD final="1" public="1" set="null" static="1"><x path="Int"/></PERIOD_HOLD>
		<PERIOD_NOT_LOADED final="1" public="1" set="null" static="1"><x path="Int"/></PERIOD_NOT_LOADED>
		<PLAYBACK_NOT_ENABLED final="1" public="1" set="null" static="1"><x path="Int"/></PLAYBACK_NOT_ENABLED>
		<POSTROLL_WITH_LIVE_NOT_ALLOWED final="1" public="1" set="null" static="1"><x path="Int"/></POSTROLL_WITH_LIVE_NOT_ALLOWED>
		<PREVIOUS_STEP_SEEK_IN_PROGRESS final="1" public="1" set="null" static="1"><x path="Int"/></PREVIOUS_STEP_SEEK_IN_PROGRESS>
		<PROTOCOL_NOT_SUPPORTED final="1" public="1" set="null" static="1"><x path="Int"/></PROTOCOL_NOT_SUPPORTED>
		<RANGE_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></RANGE_ERROR>
		<RANGE_SPANS_READHEAD final="1" public="1" set="null" static="1"><x path="Int"/></RANGE_SPANS_READHEAD>
		<RENDITION_M3U8_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></RENDITION_M3U8_ERROR>
		<REPLACEMENT_FAILED final="1" public="1" set="null" static="1"><x path="Int"/></REPLACEMENT_FAILED>
		<RESOURCE_NOT_SPECIFIED final="1" public="1" set="null" static="1"><x path="Int"/></RESOURCE_NOT_SPECIFIED>
		<SECURITY_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></SECURITY_ERROR>
		<SEEK_FAILED final="1" public="1" set="null" static="1"><x path="Int"/></SEEK_FAILED>
		<SEGMENT_SKIPPED_ON_FAILURE final="1" public="1" set="null" static="1"><x path="Int"/></SEGMENT_SKIPPED_ON_FAILURE>
		<SIZE_UNKNOWN final="1" public="1" set="null" static="1"><x path="Int"/></SIZE_UNKNOWN>
		<SPS_PPS_FOUND_OUTSIDE_AVCC final="1" public="1" set="null" static="1"><x path="Int"/></SPS_PPS_FOUND_OUTSIDE_AVCC>
		<SUCCESS final="1" public="1" set="null" static="1"><x path="Int"/></SUCCESS>
		<SWITCH_TO_ASYMMETRIC_PROFILE final="1" public="1" set="null" static="1"><x path="Int"/></SWITCH_TO_ASYMMETRIC_PROFILE>
		<TIMELINE_TOO_SHORT final="1" public="1" set="null" static="1"><x path="Int"/></TIMELINE_TOO_SHORT>
		<UNDERFLOW final="1" public="1" set="null" static="1"><x path="Int"/></UNDERFLOW>
		<UNREPORTED_TIME_DISCONTINUITY_FOUND final="1" public="1" set="null" static="1"><x path="Int"/></UNREPORTED_TIME_DISCONTINUITY_FOUND>
		<UNSUPPORTED_CONFIGURATION final="1" public="1" set="null" static="1"><x path="Int"/></UNSUPPORTED_CONFIGURATION>
		<UNSUPPORTED_HLS_VERSION final="1" public="1" set="null" static="1"><x path="Int"/></UNSUPPORTED_HLS_VERSION>
		<UNSUPPORTED_OPERATION final="1" public="1" set="null" static="1"><x path="Int"/></UNSUPPORTED_OPERATION>
		<VIDEO_PROFILE_NOT_SUPPORTED final="1" public="1" set="null" static="1"><x path="Int"/></VIDEO_PROFILE_NOT_SUPPORTED>
		<WAITING_FOR_INIT final="1" public="1" set="null" static="1"><x path="Int"/></WAITING_FOR_INIT>
		<result public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</result>
		<get_result set="method"><f a=""><x path="Int"/></f></get_result>
		<new public="1" set="method"><f a="inResult">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVSource" params="" file="/usr/local/lib/haxe/std/flash/media/AVSource.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVStream" params="" file="/usr/local/lib/haxe/std/flash/media/AVStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<HARDWARE final="1" public="1" set="null" static="1"><c path="String"/></HARDWARE>
		<SOFTWARE final="1" public="1" set="null" static="1"><c path="String"/></SOFTWARE>
		<UNDEFINED final="1" public="1" set="null" static="1"><c path="String"/></UNDEFINED>
		<backBufferLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</backBufferLength>
		<backBufferTime public="1" get="null" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</backBufferTime>
		<bufferLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bufferLength>
		<bufferTime public="1" get="null" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bufferTime>
		<captionStyle public="1" get="null" set="accessor">
			<c path="flash.media.AVCaptionStyle"/>
			<meta><m n=":flash.property"/></meta>
		</captionStyle>
		<captionsEnabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</captionsEnabled>
		<clientLivePoint public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</clientLivePoint>
		<currentFPS public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</currentFPS>
		<decoderType public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</decoderType>
		<droppedFrames public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</droppedFrames>
		<frameTime public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</frameTime>
		<initialBufferTime public="1" get="null" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</initialBufferTime>
		<playState public="1" get="accessor" set="null">
			<c path="flash.media.AVPlayState"/>
			<meta><m n=":flash.property"/></meta>
		</playState>
		<renderType public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</renderType>
		<time public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</time>
		<useHardwareDecoder public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</useHardwareDecoder>
		<volume public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</volume>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<fastForward public="1" set="method"><f a="rate">
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></fastForward>
		<get_backBufferLength set="method"><f a=""><x path="Float"/></f></get_backBufferLength>
		<get_bufferLength set="method"><f a=""><x path="Float"/></f></get_bufferLength>
		<get_captionsEnabled set="method"><f a=""><x path="Bool"/></f></get_captionsEnabled>
		<get_clientLivePoint set="method"><f a=""><x path="Float"/></f></get_clientLivePoint>
		<get_currentFPS set="method"><f a=""><x path="Float"/></f></get_currentFPS>
		<get_decoderType set="method"><f a=""><c path="String"/></f></get_decoderType>
		<get_droppedFrames set="method"><f a=""><x path="Int"/></f></get_droppedFrames>
		<get_frameTime set="method"><f a=""><x path="Float"/></f></get_frameTime>
		<get_playState set="method"><f a=""><c path="flash.media.AVPlayState"/></f></get_playState>
		<get_renderType set="method"><f a=""><c path="String"/></f></get_renderType>
		<get_time set="method"><f a=""><x path="Float"/></f></get_time>
		<get_useHardwareDecoder set="method"><f a=""><x path="Bool"/></f></get_useHardwareDecoder>
		<get_volume set="method"><f a=""><x path="Float"/></f></get_volume>
		<pause public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></pause>
		<play public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></play>
		<resume public="1" set="method"><f a=""><x path="Bool"/></f></resume>
		<rewind public="1" set="method"><f a="rate">
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></rewind>
		<seek public="1" set="method">
			<f a="offset:?inBufferSeek" v=":true">
				<x path="Float"/>
				<x path="Bool"/>
				<c path="flash.media.AVResult"/>
			</f>
			<meta><m n=":value"><e>{ inBufferSeek : true }</e></m></meta>
		</seek>
		<seekToKeyFrame public="1" set="method">
			<f a="offset:?inBufferSeek" v=":true">
				<x path="Float"/>
				<x path="Bool"/>
				<c path="flash.media.AVResult"/>
			</f>
			<meta><m n=":value"><e>{ inBufferSeek : true }</e></m></meta>
		</seekToKeyFrame>
		<seekToLivePoint public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></seekToLivePoint>
		<seekToLocalTime public="1" set="method"><f a="periodIndex:time">
	<x path="Int"/>
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></seekToLocalTime>
		<setPlaySpeed public="1" set="method"><f a="speed:reserved">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setPlaySpeed>
		<set_backBufferTime set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_backBufferTime>
		<set_bufferTime set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_bufferTime>
		<set_captionStyle set="method"><f a="value">
	<c path="flash.media.AVCaptionStyle"/>
	<c path="flash.media.AVCaptionStyle"/>
</f></set_captionStyle>
		<set_captionsEnabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_captionsEnabled>
		<set_initialBufferTime set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_initialBufferTime>
		<set_useHardwareDecoder set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_useHardwareDecoder>
		<set_volume set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_volume>
		<step public="1" set="method"><f a="frames">
	<x path="Int"/>
	<c path="flash.media.AVResult"/>
</f></step>
		<new public="1" set="method"><f a="source">
	<c path="flash.media.AVSource"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.Camera" params="" file="/usr/local/lib/haxe/std/flash/media/Camera.hx" extern="1" final="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" static="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</isSupported>
		<names public="1" get="accessor" set="null" static="1">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</names>
		<_scanHardware public="1" static="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":ns">
					<e>"flash.media"</e>
					<e>internal</e>
				</m>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</_scanHardware>
		<getCamera public="1" set="method" static="1"><f a="?name">
	<c path="String"/>
	<c path="flash.media.Camera"/>
</f></getCamera>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<get_names set="method" static="1"><f a=""><c path="Array"><d/></c></f></get_names>
		<activityLevel public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</activityLevel>
		<bandwidth public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</bandwidth>
		<currentFPS public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</currentFPS>
		<fps public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fps>
		<height public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</height>
		<index public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</index>
		<keyFrameInterval public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</keyFrameInterval>
		<loopback public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</loopback>
		<motionLevel public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</motionLevel>
		<motionTimeout public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</motionTimeout>
		<muted public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</muted>
		<name public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</name>
		<position public="1">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_2</e></m>
			</meta>
		</position>
		<quality public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</quality>
		<width public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</width>
		<copyToByteArray public="1">
			<f a="rect:destination">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyToByteArray>
		<copyToVector public="1">
			<f a="rect:destination">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyToVector>
		<drawToBitmapData public="1">
			<f a="destination">
				<c path="flash.display.BitmapData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</drawToBitmapData>
		<get_activityLevel set="method"><f a=""><x path="Float"/></f></get_activityLevel>
		<get_bandwidth set="method"><f a=""><x path="Int"/></f></get_bandwidth>
		<get_currentFPS set="method"><f a=""><x path="Float"/></f></get_currentFPS>
		<get_fps set="method"><f a=""><x path="Float"/></f></get_fps>
		<get_height set="method"><f a=""><x path="Int"/></f></get_height>
		<get_index set="method"><f a=""><x path="Int"/></f></get_index>
		<get_keyFrameInterval set="method"><f a=""><x path="Int"/></f></get_keyFrameInterval>
		<get_loopback set="method"><f a=""><x path="Bool"/></f></get_loopback>
		<get_motionLevel set="method"><f a=""><x path="Int"/></f></get_motionLevel>
		<get_motionTimeout set="method"><f a=""><x path="Int"/></f></get_motionTimeout>
		<get_muted set="method"><f a=""><x path="Bool"/></f></get_muted>
		<get_name set="method"><f a=""><c path="String"/></f></get_name>
		<get_position set="method"><f a=""><c path="String"/></f></get_position>
		<get_quality set="method"><f a=""><x path="Int"/></f></get_quality>
		<get_width set="method"><f a=""><x path="Int"/></f></get_width>
		<setCursor public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></setCursor>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<setLoopback public="1" set="method">
			<f a="?compress" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ compress : false }</e></m></meta>
		</setLoopback>
		<setMode public="1" set="method">
			<f a="width:height:fps:?favorArea" v=":::true">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ favorArea : true }</e></m></meta>
		</setMode>
		<setMotionLevel public="1" set="method">
			<f a="motionLevel:?timeout" v=":2000">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 2000 }</e></m></meta>
		</setMotionLevel>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.Microphone" params="" file="/usr/local/lib/haxe/std/flash/media/Microphone.hx" extern="1" final="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" static="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</isSupported>
		<names public="1" get="accessor" set="null" static="1">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</names>
		<getEnhancedMicrophone public="1" expr="{ index : -1 }" static="1">
			<f a="?index">
				<x path="Int"/>
				<c path="flash.media.Microphone"/>
			</f>
			<meta>
				<m n=":value"><e>{ index : -1 }</e></m>
				<m n=":require"><e>flash10_2</e></m>
			</meta>
		</getEnhancedMicrophone>
		<getMicrophone public="1" set="method" static="1">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="flash.media.Microphone"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
		</getMicrophone>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<get_names set="method" static="1"><f a=""><c path="Array"><d/></c></f></get_names>
		<activityLevel public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</activityLevel>
		<codec public="1">
			<x path="flash.media.SoundCodec"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</codec>
		<enableVAD public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</enableVAD>
		<encodeQuality public="1">
			<x path="Int"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</encodeQuality>
		<enhancedOptions public="1">
			<c path="flash.media.MicrophoneEnhancedOptions"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_2</e></m>
			</meta>
		</enhancedOptions>
		<framesPerPacket public="1">
			<x path="Int"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</framesPerPacket>
		<gain public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</gain>
		<index public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</index>
		<muted public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</muted>
		<name public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</name>
		<noiseSuppressionLevel public="1">
			<x path="Int"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</noiseSuppressionLevel>
		<rate public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</rate>
		<silenceLevel public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</silenceLevel>
		<silenceTimeout public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</silenceTimeout>
		<soundTransform public="1" get="accessor" set="accessor">
			<c path="flash.media.SoundTransform"/>
			<meta><m n=":flash.property"/></meta>
		</soundTransform>
		<useEchoSuppression public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</useEchoSuppression>
		<get_activityLevel set="method"><f a=""><x path="Float"/></f></get_activityLevel>
		<get_codec set="method"><f a=""><x path="flash.media.SoundCodec"/></f></get_codec>
		<get_enableVAD set="method"><f a=""><x path="Bool"/></f></get_enableVAD>
		<get_encodeQuality set="method"><f a=""><x path="Int"/></f></get_encodeQuality>
		<get_enhancedOptions set="method"><f a=""><c path="flash.media.MicrophoneEnhancedOptions"/></f></get_enhancedOptions>
		<get_framesPerPacket set="method"><f a=""><x path="Int"/></f></get_framesPerPacket>
		<get_gain set="method"><f a=""><x path="Float"/></f></get_gain>
		<get_index set="method"><f a=""><x path="Int"/></f></get_index>
		<get_muted set="method"><f a=""><x path="Bool"/></f></get_muted>
		<get_name set="method"><f a=""><c path="String"/></f></get_name>
		<get_noiseSuppressionLevel set="method"><f a=""><x path="Int"/></f></get_noiseSuppressionLevel>
		<get_rate set="method"><f a=""><x path="Int"/></f></get_rate>
		<get_silenceLevel set="method"><f a=""><x path="Float"/></f></get_silenceLevel>
		<get_silenceTimeout set="method"><f a=""><x path="Int"/></f></get_silenceTimeout>
		<get_soundTransform set="method"><f a=""><c path="flash.media.SoundTransform"/></f></get_soundTransform>
		<get_useEchoSuppression set="method"><f a=""><x path="Bool"/></f></get_useEchoSuppression>
		<setLoopBack public="1" set="method">
			<f a="?state" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ state : true }</e></m></meta>
		</setLoopBack>
		<setSilenceLevel public="1" set="method">
			<f a="silenceLevel:?timeout" v=":-1">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ timeout : -1 }</e></m></meta>
		</setSilenceLevel>
		<setUseEchoSuppression public="1" set="method"><f a="useEchoSuppression">
	<x path="Bool"/>
	<x path="Void"/>
</f></setUseEchoSuppression>
		<set_codec set="method"><f a="value">
	<x path="flash.media.SoundCodec"/>
	<x path="flash.media.SoundCodec"/>
</f></set_codec>
		<set_enableVAD set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_enableVAD>
		<set_encodeQuality set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_encodeQuality>
		<set_enhancedOptions set="method"><f a="value">
	<c path="flash.media.MicrophoneEnhancedOptions"/>
	<c path="flash.media.MicrophoneEnhancedOptions"/>
</f></set_enhancedOptions>
		<set_framesPerPacket set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_framesPerPacket>
		<set_gain set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_gain>
		<set_noiseSuppressionLevel set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_noiseSuppressionLevel>
		<set_rate set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_rate>
		<set_soundTransform set="method"><f a="value">
	<c path="flash.media.SoundTransform"/>
	<c path="flash.media.SoundTransform"/>
</f></set_soundTransform>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="flash.media.MicrophoneEnhancedMode" params="" file="/usr/local/lib/haxe/std/flash/media/MicrophoneEnhancedMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.media.MicrophoneEnhancedMode"</e></m>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
		<impl><class path="flash.media._MicrophoneEnhancedMode.MicrophoneEnhancedMode_Impl_" params="" file="/usr/local/lib/haxe/std/flash/media/MicrophoneEnhancedMode.hx" private="1" module="flash.media.MicrophoneEnhancedMode" extern="1" final="1">
	<FULL_DUPLEX public="1" set="null" static="1">
		<x path="flash.media.MicrophoneEnhancedMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FULL_DUPLEX>
	<HALF_DUPLEX public="1" set="null" static="1">
		<x path="flash.media.MicrophoneEnhancedMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HALF_DUPLEX>
	<HEADSET public="1" set="null" static="1">
		<x path="flash.media.MicrophoneEnhancedMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HEADSET>
	<OFF public="1" set="null" static="1">
		<x path="flash.media.MicrophoneEnhancedMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OFF>
	<SPEAKER_MUTE public="1" set="null" static="1">
		<x path="flash.media.MicrophoneEnhancedMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SPEAKER_MUTE>
	<meta>
		<m n=":native"><e>"flash.media.MicrophoneEnhancedMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.media._MicrophoneEnhancedMode.MicrophoneEnhancedMode_Impl_" params="" file="/usr/local/lib/haxe/std/flash/media/MicrophoneEnhancedMode.hx" private="1" module="flash.media.MicrophoneEnhancedMode" extern="1" final="1">
		<FULL_DUPLEX public="1" set="null" static="1">
			<x path="flash.media.MicrophoneEnhancedMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FULL_DUPLEX>
		<HALF_DUPLEX public="1" set="null" static="1">
			<x path="flash.media.MicrophoneEnhancedMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HALF_DUPLEX>
		<HEADSET public="1" set="null" static="1">
			<x path="flash.media.MicrophoneEnhancedMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HEADSET>
		<OFF public="1" set="null" static="1">
			<x path="flash.media.MicrophoneEnhancedMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OFF>
		<SPEAKER_MUTE public="1" set="null" static="1">
			<x path="flash.media.MicrophoneEnhancedMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SPEAKER_MUTE>
		<meta>
			<m n=":native"><e>"flash.media.MicrophoneEnhancedMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.media.MicrophoneEnhancedOptions" params="" file="/usr/local/lib/haxe/std/flash/media/MicrophoneEnhancedOptions.hx" extern="1" final="1">
		<autoGain public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</autoGain>
		<echoPath public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</echoPath>
		<isVoiceDetected public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</isVoiceDetected>
		<mode public="1" get="accessor" set="accessor">
			<x path="flash.media.MicrophoneEnhancedMode"/>
			<meta><m n=":flash.property"/></meta>
		</mode>
		<nonLinearProcessing public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</nonLinearProcessing>
		<get_autoGain set="method"><f a=""><x path="Bool"/></f></get_autoGain>
		<get_echoPath set="method"><f a=""><x path="Int"/></f></get_echoPath>
		<get_isVoiceDetected set="method"><f a=""><x path="Int"/></f></get_isVoiceDetected>
		<get_mode set="method"><f a=""><x path="flash.media.MicrophoneEnhancedMode"/></f></get_mode>
		<get_nonLinearProcessing set="method"><f a=""><x path="Bool"/></f></get_nonLinearProcessing>
		<set_autoGain set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_autoGain>
		<set_echoPath set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_echoPath>
		<set_isVoiceDetected set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_isVoiceDetected>
		<set_mode set="method"><f a="value">
	<x path="flash.media.MicrophoneEnhancedMode"/>
	<x path="flash.media.MicrophoneEnhancedMode"/>
</f></set_mode>
		<set_nonLinearProcessing set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_nonLinearProcessing>
		<new public="1"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_2</e></m></meta>
	</class>
	<abstract path="flash.media.SoundCodec" params="" file="/usr/local/lib/haxe/std/flash/media/SoundCodec.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.media.SoundCodec"</e></m>
		</meta>
		<impl><class path="flash.media._SoundCodec.SoundCodec_Impl_" params="" file="/usr/local/lib/haxe/std/flash/media/SoundCodec.hx" private="1" module="flash.media.SoundCodec" extern="1" final="1">
	<NELLYMOSER public="1" set="null" static="1">
		<x path="flash.media.SoundCodec"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NELLYMOSER>
	<PCMA public="1" set="null" static="1">
		<x path="flash.media.SoundCodec"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PCMA>
	<PCMU public="1" set="null" static="1">
		<x path="flash.media.SoundCodec"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PCMU>
	<SPEEX public="1" set="null" static="1">
		<x path="flash.media.SoundCodec"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SPEEX>
	<meta>
		<m n=":native"><e>"flash.media.SoundCodec"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.media._SoundCodec.SoundCodec_Impl_" params="" file="/usr/local/lib/haxe/std/flash/media/SoundCodec.hx" private="1" module="flash.media.SoundCodec" extern="1" final="1">
		<NELLYMOSER public="1" set="null" static="1">
			<x path="flash.media.SoundCodec"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NELLYMOSER>
		<PCMA public="1" set="null" static="1">
			<x path="flash.media.SoundCodec"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PCMA>
		<PCMU public="1" set="null" static="1">
			<x path="flash.media.SoundCodec"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PCMU>
		<SPEEX public="1" set="null" static="1">
			<x path="flash.media.SoundCodec"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SPEEX>
		<meta>
			<m n=":native"><e>"flash.media.SoundCodec"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.media.SoundTransform" params="" file="/usr/local/lib/haxe/std/flash/media/SoundTransform.hx" extern="1" final="1">
		<leftToLeft public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</leftToLeft>
		<leftToRight public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</leftToRight>
		<pan public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</pan>
		<rightToLeft public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</rightToLeft>
		<rightToRight public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</rightToRight>
		<volume public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</volume>
		<get_leftToLeft set="method"><f a=""><x path="Float"/></f></get_leftToLeft>
		<get_leftToRight set="method"><f a=""><x path="Float"/></f></get_leftToRight>
		<get_pan set="method"><f a=""><x path="Float"/></f></get_pan>
		<get_rightToLeft set="method"><f a=""><x path="Float"/></f></get_rightToLeft>
		<get_rightToRight set="method"><f a=""><x path="Float"/></f></get_rightToRight>
		<get_volume set="method"><f a=""><x path="Float"/></f></get_volume>
		<set_leftToLeft set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_leftToLeft>
		<set_leftToRight set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_leftToRight>
		<set_pan set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pan>
		<set_rightToLeft set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rightToLeft>
		<set_rightToRight set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rightToRight>
		<set_volume set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_volume>
		<new public="1" set="method">
			<f a="?vol:?panning" v="1:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ panning : 0, vol : 1 }</e></m></meta>
		</new>
	</class>
	<class path="flash.media.StageVideo" params="" file="/usr/local/lib/haxe/std/flash/media/StageVideo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<colorSpaces public="1" get="accessor" set="null">
			<c path="flash.Vector"><c path="String"/></c>
			<meta><m n=":flash.property"/></meta>
		</colorSpaces>
		<depth public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</depth>
		<pan public="1" get="accessor" set="accessor">
			<c path="flash.geom.Point"/>
			<meta><m n=":flash.property"/></meta>
		</pan>
		<videoHeight public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</videoHeight>
		<videoWidth public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</videoWidth>
		<viewPort public="1" get="accessor" set="accessor">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":flash.property"/></meta>
		</viewPort>
		<zoom public="1" get="accessor" set="accessor">
			<c path="flash.geom.Point"/>
			<meta><m n=":flash.property"/></meta>
		</zoom>
		<attachAVStream public="1">
			<f a="avStream">
				<c path="flash.media.AVStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_7</e></m></meta>
		</attachAVStream>
		<attachCamera public="1">
			<f a="theCamera">
				<c path="flash.media.Camera"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</attachCamera>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<x path="Void"/>
</f></attachNetStream>
		<get_colorSpaces set="method"><f a=""><c path="flash.Vector"><c path="String"/></c></f></get_colorSpaces>
		<get_depth set="method"><f a=""><x path="Int"/></f></get_depth>
		<get_pan set="method"><f a=""><c path="flash.geom.Point"/></f></get_pan>
		<get_videoHeight set="method"><f a=""><x path="Int"/></f></get_videoHeight>
		<get_videoWidth set="method"><f a=""><x path="Int"/></f></get_videoWidth>
		<get_viewPort set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_viewPort>
		<get_zoom set="method"><f a=""><c path="flash.geom.Point"/></f></get_zoom>
		<set_depth set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_depth>
		<set_pan set="method"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_pan>
		<set_viewPort set="method"><f a="value">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></set_viewPort>
		<set_zoom set="method"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_zoom>
		<new public="1"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_2</e></m></meta>
	</class>
	<class path="flash.media.VideoStreamSettings" params="" file="/usr/local/lib/haxe/std/flash/media/VideoStreamSettings.hx" extern="1">
		<bandwidth public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</bandwidth>
		<codec public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</codec>
		<fps public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fps>
		<height public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</height>
		<keyFrameInterval public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</keyFrameInterval>
		<quality public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</quality>
		<width public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</width>
		<get_bandwidth set="method"><f a=""><x path="Int"/></f></get_bandwidth>
		<get_codec set="method"><f a=""><c path="String"/></f></get_codec>
		<get_fps set="method"><f a=""><x path="Float"/></f></get_fps>
		<get_height set="method"><f a=""><x path="Int"/></f></get_height>
		<get_keyFrameInterval set="method"><f a=""><x path="Int"/></f></get_keyFrameInterval>
		<get_quality set="method"><f a=""><x path="Int"/></f></get_quality>
		<get_width set="method"><f a=""><x path="Int"/></f></get_width>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<setMode public="1" set="method"><f a="width:height:fps">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setMode>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetConnection" params="" file="/usr/local/lib/haxe/std/flash/net/NetConnection.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<defaultObjectEncoding public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</defaultObjectEncoding>
		<get_defaultObjectEncoding set="method" static="1"><f a=""><x path="UInt"/></f></get_defaultObjectEncoding>
		<set_defaultObjectEncoding set="method" static="1"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_defaultObjectEncoding>
		<client public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</client>
		<connected public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</connected>
		<connectedProxyType public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</connectedProxyType>
		<farID public="1">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</farID>
		<farNonce public="1">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</farNonce>
		<maxPeerConnections public="1">
			<x path="UInt"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</maxPeerConnections>
		<nearID public="1">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</nearID>
		<nearNonce public="1">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</nearNonce>
		<objectEncoding public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<protocol public="1">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</protocol>
		<proxyType public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</proxyType>
		<unconnectedPeerStreams public="1">
			<c path="Array"><d/></c>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</unconnectedPeerStreams>
		<uri public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</uri>
		<usingTLS public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</usingTLS>
		<addHeader public="1" set="method">
			<f a="operation:?mustUnderstand:?param" v=":false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="flash.utils.Object"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mustUnderstand : false }</e></m></meta>
		</addHeader>
		<call public="1" set="method"><f a="command:responder:restArgs">
	<c path="String"/>
	<c path="flash.net.Responder"/>
	<x path="haxe.extern.Rest"><d/></x>
	<x path="Void"/>
</f></call>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<connect public="1" set="method"><f a="command:restArgs">
	<c path="String"/>
	<x path="haxe.extern.Rest"><d/></x>
	<x path="Void"/>
</f></connect>
		<get_client set="method"><f a=""><d/></f></get_client>
		<get_connected set="method"><f a=""><x path="Bool"/></f></get_connected>
		<get_connectedProxyType set="method"><f a=""><c path="String"/></f></get_connectedProxyType>
		<get_farID set="method"><f a=""><c path="String"/></f></get_farID>
		<get_farNonce set="method"><f a=""><c path="String"/></f></get_farNonce>
		<get_maxPeerConnections set="method"><f a=""><x path="UInt"/></f></get_maxPeerConnections>
		<get_nearID set="method"><f a=""><c path="String"/></f></get_nearID>
		<get_nearNonce set="method"><f a=""><c path="String"/></f></get_nearNonce>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<get_protocol set="method"><f a=""><c path="String"/></f></get_protocol>
		<get_proxyType set="method"><f a=""><c path="String"/></f></get_proxyType>
		<get_unconnectedPeerStreams set="method"><f a=""><c path="Array"><d/></c></f></get_unconnectedPeerStreams>
		<get_uri set="method"><f a=""><c path="String"/></f></get_uri>
		<get_usingTLS set="method"><f a=""><x path="Bool"/></f></get_usingTLS>
		<set_client set="method"><f a="value">
	<d/>
	<d/>
</f></set_client>
		<set_maxPeerConnections set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_maxPeerConnections>
		<set_objectEncoding set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_objectEncoding>
		<set_proxyType set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_proxyType>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetStream" params="" file="/usr/local/lib/haxe/std/flash/net/NetStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<CONNECT_TO_FMS final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CONNECT_TO_FMS>
		<DIRECT_CONNECTIONS final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</DIRECT_CONNECTIONS>
		<resetDRMVouchers public="1" set="method" static="1"><f a=""><x path="Void"/></f></resetDRMVouchers>
		<audioCodec public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</audioCodec>
		<audioReliable public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</audioReliable>
		<audioSampleAccess public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</audioSampleAccess>
		<backBufferLength public="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</backBufferLength>
		<backBufferTime public="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</backBufferTime>
		<bufferLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bufferLength>
		<bufferTime public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bufferTime>
		<bufferTimeMax public="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</bufferTimeMax>
		<bytesLoaded public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesLoaded>
		<bytesTotal public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesTotal>
		<checkPolicyFile public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</checkPolicyFile>
		<client public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</client>
		<currentFPS public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</currentFPS>
		<dataReliable public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</dataReliable>
		<decodedFrames public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</decodedFrames>
		<farID public="1">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</farID>
		<farNonce public="1">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</farNonce>
		<inBufferSeek public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</inBufferSeek>
		<info public="1">
			<c path="flash.net.NetStreamInfo"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</info>
		<liveDelay public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</liveDelay>
		<maxPauseBufferTime public="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</maxPauseBufferTime>
		<multicastAvailabilitySendToAll public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</multicastAvailabilitySendToAll>
		<multicastAvailabilityUpdatePeriod public="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</multicastAvailabilityUpdatePeriod>
		<multicastFetchPeriod public="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</multicastFetchPeriod>
		<multicastInfo public="1">
			<c path="flash.net.NetStreamMulticastInfo"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</multicastInfo>
		<multicastPushNeighborLimit public="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</multicastPushNeighborLimit>
		<multicastRelayMarginDuration public="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</multicastRelayMarginDuration>
		<multicastWindowDuration public="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</multicastWindowDuration>
		<nearNonce public="1">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</nearNonce>
		<objectEncoding public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<peerStreams public="1">
			<c path="Array"><d/></c>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</peerStreams>
		<soundTransform public="1" get="accessor" set="accessor">
			<c path="flash.media.SoundTransform"/>
			<meta><m n=":flash.property"/></meta>
		</soundTransform>
		<time public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</time>
		<useHardwareDecoder public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</useHardwareDecoder>
		<useJitterBuffer public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_3</e></m>
			</meta>
		</useJitterBuffer>
		<videoCodec public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</videoCodec>
		<videoReliable public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</videoReliable>
		<videoSampleAccess public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</videoSampleAccess>
		<videoStreamSettings public="1">
			<c path="flash.media.VideoStreamSettings"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</videoStreamSettings>
		<appendBytes public="1">
			<f a="bytes">
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytes>
		<appendBytesAction public="1">
			<f a="netStreamAppendBytesAction">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytesAction>
		<attach public="1">
			<f a="connection">
				<c path="flash.net.NetConnection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</attach>
		<attachAudio public="1" set="method"><f a="microphone">
	<c path="flash.media.Microphone"/>
	<x path="Void"/>
</f></attachAudio>
		<attachCamera public="1" set="method">
			<f a="theCamera:?snapshotMilliseconds" v=":-1">
				<c path="flash.media.Camera"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ snapshotMilliseconds : -1 }</e></m></meta>
		</attachCamera>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<dispose public="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</dispose>
		<get_audioCodec set="method"><f a=""><x path="UInt"/></f></get_audioCodec>
		<get_audioReliable set="method"><f a=""><x path="Bool"/></f></get_audioReliable>
		<get_audioSampleAccess set="method"><f a=""><x path="Bool"/></f></get_audioSampleAccess>
		<get_backBufferLength set="method"><f a=""><x path="Float"/></f></get_backBufferLength>
		<get_backBufferTime set="method"><f a=""><x path="Float"/></f></get_backBufferTime>
		<get_bufferLength set="method"><f a=""><x path="Float"/></f></get_bufferLength>
		<get_bufferTime set="method"><f a=""><x path="Float"/></f></get_bufferTime>
		<get_bufferTimeMax set="method"><f a=""><x path="Float"/></f></get_bufferTimeMax>
		<get_bytesLoaded set="method"><f a=""><x path="UInt"/></f></get_bytesLoaded>
		<get_bytesTotal set="method"><f a=""><x path="UInt"/></f></get_bytesTotal>
		<get_checkPolicyFile set="method"><f a=""><x path="Bool"/></f></get_checkPolicyFile>
		<get_client set="method"><f a=""><d/></f></get_client>
		<get_currentFPS set="method"><f a=""><x path="Float"/></f></get_currentFPS>
		<get_dataReliable set="method"><f a=""><x path="Bool"/></f></get_dataReliable>
		<get_decodedFrames set="method"><f a=""><x path="UInt"/></f></get_decodedFrames>
		<get_farID set="method"><f a=""><c path="String"/></f></get_farID>
		<get_farNonce set="method"><f a=""><c path="String"/></f></get_farNonce>
		<get_inBufferSeek set="method"><f a=""><x path="Bool"/></f></get_inBufferSeek>
		<get_info set="method"><f a=""><c path="flash.net.NetStreamInfo"/></f></get_info>
		<get_liveDelay set="method"><f a=""><x path="Float"/></f></get_liveDelay>
		<get_maxPauseBufferTime set="method"><f a=""><x path="Float"/></f></get_maxPauseBufferTime>
		<get_multicastAvailabilitySendToAll set="method"><f a=""><x path="Bool"/></f></get_multicastAvailabilitySendToAll>
		<get_multicastAvailabilityUpdatePeriod set="method"><f a=""><x path="Float"/></f></get_multicastAvailabilityUpdatePeriod>
		<get_multicastFetchPeriod set="method"><f a=""><x path="Float"/></f></get_multicastFetchPeriod>
		<get_multicastInfo set="method"><f a=""><c path="flash.net.NetStreamMulticastInfo"/></f></get_multicastInfo>
		<get_multicastPushNeighborLimit set="method"><f a=""><x path="Float"/></f></get_multicastPushNeighborLimit>
		<get_multicastRelayMarginDuration set="method"><f a=""><x path="Float"/></f></get_multicastRelayMarginDuration>
		<get_multicastWindowDuration set="method"><f a=""><x path="Float"/></f></get_multicastWindowDuration>
		<get_nearNonce set="method"><f a=""><c path="String"/></f></get_nearNonce>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<get_peerStreams set="method"><f a=""><c path="Array"><d/></c></f></get_peerStreams>
		<get_soundTransform set="method"><f a=""><c path="flash.media.SoundTransform"/></f></get_soundTransform>
		<get_time set="method"><f a=""><x path="Float"/></f></get_time>
		<get_useHardwareDecoder set="method"><f a=""><x path="Bool"/></f></get_useHardwareDecoder>
		<get_useJitterBuffer set="method"><f a=""><x path="Bool"/></f></get_useJitterBuffer>
		<get_videoCodec set="method"><f a=""><x path="UInt"/></f></get_videoCodec>
		<get_videoReliable set="method"><f a=""><x path="Bool"/></f></get_videoReliable>
		<get_videoSampleAccess set="method"><f a=""><x path="Bool"/></f></get_videoSampleAccess>
		<get_videoStreamSettings set="method"><f a=""><c path="flash.media.VideoStreamSettings"/></f></get_videoStreamSettings>
		<onPeerConnect public="1">
			<f a="subscriber">
				<c path="flash.net.NetStream"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</onPeerConnect>
		<pause public="1" set="method"><f a=""><x path="Void"/></f></pause>
		<play public="1" set="method"><f a="restArgs">
	<x path="haxe.extern.Rest"><d/></x>
	<x path="Void"/>
</f></play>
		<play2 public="1">
			<f a="param">
				<c path="flash.net.NetStreamPlayOptions"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</play2>
		<publish public="1" set="method"><f a="?name:?type">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></publish>
		<receiveAudio public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveAudio>
		<receiveVideo public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveVideo>
		<receiveVideoFPS public="1" set="method"><f a="FPS">
	<x path="Float"/>
	<x path="Void"/>
</f></receiveVideoFPS>
		<resume public="1" set="method"><f a=""><x path="Void"/></f></resume>
		<seek public="1" set="method"><f a="offset">
	<x path="Float"/>
	<x path="Void"/>
</f></seek>
		<send public="1" set="method"><f a="handlerName:restArgs">
	<c path="String"/>
	<x path="haxe.extern.Rest"><d/></x>
	<x path="Void"/>
</f></send>
		<set_audioReliable set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_audioReliable>
		<set_audioSampleAccess set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_audioSampleAccess>
		<set_backBufferTime set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_backBufferTime>
		<set_bufferTime set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_bufferTime>
		<set_bufferTimeMax set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_bufferTimeMax>
		<set_checkPolicyFile set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_checkPolicyFile>
		<set_client set="method"><f a="value">
	<d/>
	<d/>
</f></set_client>
		<set_dataReliable set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_dataReliable>
		<set_inBufferSeek set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_inBufferSeek>
		<set_maxPauseBufferTime set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_maxPauseBufferTime>
		<set_multicastAvailabilitySendToAll set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_multicastAvailabilitySendToAll>
		<set_multicastAvailabilityUpdatePeriod set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_multicastAvailabilityUpdatePeriod>
		<set_multicastFetchPeriod set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_multicastFetchPeriod>
		<set_multicastPushNeighborLimit set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_multicastPushNeighborLimit>
		<set_multicastRelayMarginDuration set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_multicastRelayMarginDuration>
		<set_multicastWindowDuration set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_multicastWindowDuration>
		<set_soundTransform set="method"><f a="value">
	<c path="flash.media.SoundTransform"/>
	<c path="flash.media.SoundTransform"/>
</f></set_soundTransform>
		<set_useHardwareDecoder set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_useHardwareDecoder>
		<set_useJitterBuffer set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_useJitterBuffer>
		<set_videoReliable set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_videoReliable>
		<set_videoSampleAccess set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_videoSampleAccess>
		<set_videoStreamSettings set="method"><f a="value">
	<c path="flash.media.VideoStreamSettings"/>
	<c path="flash.media.VideoStreamSettings"/>
</f></set_videoStreamSettings>
		<step public="1">
			<f a="frames">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</step>
		<togglePause public="1" set="method"><f a=""><x path="Void"/></f></togglePause>
		<new public="1" set="method"><f a="connection:?peerID">
	<c path="flash.net.NetConnection"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.NetStreamInfo" params="" file="/usr/local/lib/haxe/std/flash/net/NetStreamInfo.hx" extern="1" final="1">
		<SRTT public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</SRTT>
		<audioBufferByteLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</audioBufferByteLength>
		<audioBufferLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</audioBufferLength>
		<audioByteCount public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</audioByteCount>
		<audioBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</audioBytesPerSecond>
		<audioLossRate public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</audioLossRate>
		<byteCount public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</byteCount>
		<currentBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</currentBytesPerSecond>
		<dataBufferByteLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</dataBufferByteLength>
		<dataBufferLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</dataBufferLength>
		<dataByteCount public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</dataByteCount>
		<dataBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</dataBytesPerSecond>
		<droppedFrames public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</droppedFrames>
		<isLive public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isLive>
		<maxBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</maxBytesPerSecond>
		<metaData public="1" get="accessor" set="null">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</metaData>
		<playbackBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</playbackBytesPerSecond>
		<resourceName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</resourceName>
		<uri public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</uri>
		<videoBufferByteLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</videoBufferByteLength>
		<videoBufferLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</videoBufferLength>
		<videoByteCount public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</videoByteCount>
		<videoBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</videoBytesPerSecond>
		<videoLossRate public="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</videoLossRate>
		<xmpData public="1" get="accessor" set="null">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</xmpData>
		<get_SRTT set="method"><f a=""><x path="Float"/></f></get_SRTT>
		<get_audioBufferByteLength set="method"><f a=""><x path="Float"/></f></get_audioBufferByteLength>
		<get_audioBufferLength set="method"><f a=""><x path="Float"/></f></get_audioBufferLength>
		<get_audioByteCount set="method"><f a=""><x path="Float"/></f></get_audioByteCount>
		<get_audioBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_audioBytesPerSecond>
		<get_audioLossRate set="method"><f a=""><x path="Float"/></f></get_audioLossRate>
		<get_byteCount set="method"><f a=""><x path="Float"/></f></get_byteCount>
		<get_currentBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_currentBytesPerSecond>
		<get_dataBufferByteLength set="method"><f a=""><x path="Float"/></f></get_dataBufferByteLength>
		<get_dataBufferLength set="method"><f a=""><x path="Float"/></f></get_dataBufferLength>
		<get_dataByteCount set="method"><f a=""><x path="Float"/></f></get_dataByteCount>
		<get_dataBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_dataBytesPerSecond>
		<get_droppedFrames set="method"><f a=""><x path="Float"/></f></get_droppedFrames>
		<get_isLive set="method"><f a=""><x path="Bool"/></f></get_isLive>
		<get_maxBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_maxBytesPerSecond>
		<get_metaData set="method"><f a=""><d/></f></get_metaData>
		<get_playbackBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_playbackBytesPerSecond>
		<get_resourceName set="method"><f a=""><c path="String"/></f></get_resourceName>
		<get_uri set="method"><f a=""><c path="String"/></f></get_uri>
		<get_videoBufferByteLength set="method"><f a=""><x path="Float"/></f></get_videoBufferByteLength>
		<get_videoBufferLength set="method"><f a=""><x path="Float"/></f></get_videoBufferLength>
		<get_videoByteCount set="method"><f a=""><x path="Float"/></f></get_videoByteCount>
		<get_videoBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_videoBytesPerSecond>
		<get_videoLossRate set="method"><f a=""><x path="Float"/></f></get_videoLossRate>
		<get_xmpData set="method"><f a=""><d/></f></get_xmpData>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="curBPS:byteCount:maxBPS:audioBPS:audioByteCount:videoBPS:videoByteCount:dataBPS:dataByteCount:playbackBPS:droppedFrames:audioBufferByteLength:videoBufferByteLength:dataBufferByteLength:audioBufferLength:videoBufferLength:dataBufferLength:srtt:audioLossRate:videoLossRate:?metaData:?xmpData:?uri:?resourceName:?isLive" v="::::::::::::::::::::::::true">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ isLive : true }</e></m></meta>
		</new>
	</class>
	<class path="flash.net.NetStreamMulticastInfo" params="" file="/usr/local/lib/haxe/std/flash/net/NetStreamMulticastInfo.hx" extern="1" final="1">
		<bytesPushedFromPeers public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bytesPushedFromPeers>
		<bytesPushedToPeers public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bytesPushedToPeers>
		<bytesReceivedFromIPMulticast public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bytesReceivedFromIPMulticast>
		<bytesReceivedFromServer public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bytesReceivedFromServer>
		<bytesRequestedByPeers public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bytesRequestedByPeers>
		<bytesRequestedFromPeers public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bytesRequestedFromPeers>
		<fragmentsPushedFromPeers public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fragmentsPushedFromPeers>
		<fragmentsPushedToPeers public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fragmentsPushedToPeers>
		<fragmentsReceivedFromIPMulticast public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fragmentsReceivedFromIPMulticast>
		<fragmentsReceivedFromServer public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fragmentsReceivedFromServer>
		<fragmentsRequestedByPeers public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fragmentsRequestedByPeers>
		<fragmentsRequestedFromPeers public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fragmentsRequestedFromPeers>
		<receiveControlBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</receiveControlBytesPerSecond>
		<receiveDataBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</receiveDataBytesPerSecond>
		<receiveDataBytesPerSecondFromIPMulticast public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</receiveDataBytesPerSecondFromIPMulticast>
		<receiveDataBytesPerSecondFromServer public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</receiveDataBytesPerSecondFromServer>
		<sendControlBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</sendControlBytesPerSecond>
		<sendControlBytesPerSecondToServer public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</sendControlBytesPerSecondToServer>
		<sendDataBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</sendDataBytesPerSecond>
		<get_bytesPushedFromPeers set="method"><f a=""><x path="Float"/></f></get_bytesPushedFromPeers>
		<get_bytesPushedToPeers set="method"><f a=""><x path="Float"/></f></get_bytesPushedToPeers>
		<get_bytesReceivedFromIPMulticast set="method"><f a=""><x path="Float"/></f></get_bytesReceivedFromIPMulticast>
		<get_bytesReceivedFromServer set="method"><f a=""><x path="Float"/></f></get_bytesReceivedFromServer>
		<get_bytesRequestedByPeers set="method"><f a=""><x path="Float"/></f></get_bytesRequestedByPeers>
		<get_bytesRequestedFromPeers set="method"><f a=""><x path="Float"/></f></get_bytesRequestedFromPeers>
		<get_fragmentsPushedFromPeers set="method"><f a=""><x path="Float"/></f></get_fragmentsPushedFromPeers>
		<get_fragmentsPushedToPeers set="method"><f a=""><x path="Float"/></f></get_fragmentsPushedToPeers>
		<get_fragmentsReceivedFromIPMulticast set="method"><f a=""><x path="Float"/></f></get_fragmentsReceivedFromIPMulticast>
		<get_fragmentsReceivedFromServer set="method"><f a=""><x path="Float"/></f></get_fragmentsReceivedFromServer>
		<get_fragmentsRequestedByPeers set="method"><f a=""><x path="Float"/></f></get_fragmentsRequestedByPeers>
		<get_fragmentsRequestedFromPeers set="method"><f a=""><x path="Float"/></f></get_fragmentsRequestedFromPeers>
		<get_receiveControlBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_receiveControlBytesPerSecond>
		<get_receiveDataBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_receiveDataBytesPerSecond>
		<get_receiveDataBytesPerSecondFromIPMulticast set="method"><f a=""><x path="Float"/></f></get_receiveDataBytesPerSecondFromIPMulticast>
		<get_receiveDataBytesPerSecondFromServer set="method"><f a=""><x path="Float"/></f></get_receiveDataBytesPerSecondFromServer>
		<get_sendControlBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_sendControlBytesPerSecond>
		<get_sendControlBytesPerSecondToServer set="method"><f a=""><x path="Float"/></f></get_sendControlBytesPerSecondToServer>
		<get_sendDataBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_sendDataBytesPerSecond>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1"><f a="sendDataBytesPerSecond:sendControlBytesPerSecond:receiveDataBytesPerSecond:receiveControlBytesPerSecond:bytesPushedToPeers:fragmentsPushedToPeers:bytesRequestedByPeers:fragmentsRequestedByPeers:bytesPushedFromPeers:fragmentsPushedFromPeers:bytesRequestedFromPeers:fragmentsRequestedFromPeers:sendControlBytesPerSecondToServer:receiveDataBytesPerSecondFromServer:bytesReceivedFromServer:fragmentsReceivedFromServer:receiveDataBytesPerSecondFromIPMulticast:bytesReceivedFromIPMulticast:fragmentsReceivedFromIPMulticast">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.net.NetStreamPlayOptions" params="" file="/usr/local/lib/haxe/std/flash/net/NetStreamPlayOptions.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<len public="1"><x path="Float"/></len>
		<offset public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</offset>
		<oldStreamName public="1"><c path="String"/></oldStreamName>
		<start public="1"><x path="Float"/></start>
		<streamName public="1"><c path="String"/></streamName>
		<transition public="1"><c path="String"/></transition>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.Responder" params="" file="/usr/local/lib/haxe/std/flash/net/Responder.hx" extern="1"><new public="1" set="method"><f a="result:?status">
	<d/>
	<d/>
	<x path="Void"/>
</f></new></class>
	<class path="flash.net.URLRequest" params="" file="/usr/local/lib/haxe/std/flash/net/URLRequest.hx" extern="1" final="1">
		<contentType public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</contentType>
		<data public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</data>
		<digest public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</digest>
		<method public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</method>
		<requestHeaders public="1" get="accessor" set="accessor">
			<c path="Array"><c path="flash.net.URLRequestHeader"/></c>
			<meta><m n=":flash.property"/></meta>
		</requestHeaders>
		<url public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</url>
		<get_contentType set="method"><f a=""><c path="String"/></f></get_contentType>
		<get_data set="method"><f a=""><d/></f></get_data>
		<get_digest set="method"><f a=""><c path="String"/></f></get_digest>
		<get_method set="method"><f a=""><c path="String"/></f></get_method>
		<get_requestHeaders set="method"><f a=""><c path="Array"><c path="flash.net.URLRequestHeader"/></c></f></get_requestHeaders>
		<get_url set="method"><f a=""><c path="String"/></f></get_url>
		<set_contentType set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_contentType>
		<set_data set="method"><f a="value">
	<d/>
	<d/>
</f></set_data>
		<set_digest set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_digest>
		<set_method set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_method>
		<set_requestHeaders set="method"><f a="value">
	<c path="Array"><c path="flash.net.URLRequestHeader"/></c>
	<c path="Array"><c path="flash.net.URLRequestHeader"/></c>
</f></set_requestHeaders>
		<set_url set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_url>
		<useRedirectedURL public="1" set="method">
			<f a="sourceRequest:?wholeURL:?pattern:?replace" v=":false::">
				<c path="flash.net.URLRequest"/>
				<x path="Bool"/>
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ wholeURL : false }</e></m></meta>
		</useRedirectedURL>
		<new public="1" set="method"><f a="?url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.URLRequestHeader" params="" file="/usr/local/lib/haxe/std/flash/net/URLRequestHeader.hx" extern="1" final="1">
		<name public="1"><c path="String"/></name>
		<value public="1"><c path="String"/></value>
		<new public="1" set="method"><f a="?name:?value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.system.ApplicationDomain" params="" file="/usr/local/lib/haxe/std/flash/system/ApplicationDomain.hx" extern="1" final="1">
		<MIN_DOMAIN_MEMORY_LENGTH public="1" static="1">
			<x path="UInt"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</MIN_DOMAIN_MEMORY_LENGTH>
		<currentDomain public="1" get="accessor" set="null" static="1">
			<c path="flash.system.ApplicationDomain"/>
			<meta><m n=":flash.property"/></meta>
		</currentDomain>
		<get_MIN_DOMAIN_MEMORY_LENGTH set="method" static="1"><f a=""><x path="UInt"/></f></get_MIN_DOMAIN_MEMORY_LENGTH>
		<get_currentDomain set="method" static="1"><f a=""><c path="flash.system.ApplicationDomain"/></f></get_currentDomain>
		<domainMemory public="1">
			<c path="flash.utils.ByteArray"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</domainMemory>
		<parentDomain public="1" get="accessor" set="null">
			<c path="flash.system.ApplicationDomain"/>
			<meta><m n=":flash.property"/></meta>
		</parentDomain>
		<getDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="flash.utils.Object"/>
</f></getDefinition>
		<getQualifiedDefinitionNames public="1">
			<f a=""><c path="flash.Vector"><c path="String"/></c></f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</getQualifiedDefinitionNames>
		<get_domainMemory set="method"><f a=""><c path="flash.utils.ByteArray"/></f></get_domainMemory>
		<get_parentDomain set="method"><f a=""><c path="flash.system.ApplicationDomain"/></f></get_parentDomain>
		<hasDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></hasDefinition>
		<set_domainMemory set="method"><f a="value">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
</f></set_domainMemory>
		<new public="1" set="method"><f a="?parentDomain">
	<c path="flash.system.ApplicationDomain"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="flash.system.ImageDecodingPolicy" params="" file="/usr/local/lib/haxe/std/flash/system/ImageDecodingPolicy.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.system.ImageDecodingPolicy"</e></m>
		</meta>
		<impl><class path="flash.system._ImageDecodingPolicy.ImageDecodingPolicy_Impl_" params="" file="/usr/local/lib/haxe/std/flash/system/ImageDecodingPolicy.hx" private="1" module="flash.system.ImageDecodingPolicy" extern="1" final="1">
	<ON_DEMAND public="1" set="null" static="1">
		<x path="flash.system.ImageDecodingPolicy"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ON_DEMAND>
	<ON_LOAD public="1" set="null" static="1">
		<x path="flash.system.ImageDecodingPolicy"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ON_LOAD>
	<meta>
		<m n=":native"><e>"flash.system.ImageDecodingPolicy"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.system._ImageDecodingPolicy.ImageDecodingPolicy_Impl_" params="" file="/usr/local/lib/haxe/std/flash/system/ImageDecodingPolicy.hx" private="1" module="flash.system.ImageDecodingPolicy" extern="1" final="1">
		<ON_DEMAND public="1" set="null" static="1">
			<x path="flash.system.ImageDecodingPolicy"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ON_DEMAND>
		<ON_LOAD public="1" set="null" static="1">
			<x path="flash.system.ImageDecodingPolicy"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ON_LOAD>
		<meta>
			<m n=":native"><e>"flash.system.ImageDecodingPolicy"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.system.LoaderContext" params="" file="/usr/local/lib/haxe/std/flash/system/LoaderContext.hx" extern="1">
		<allowCodeImport public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowCodeImport>
		<allowLoadBytesCodeExecution public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</allowLoadBytesCodeExecution>
		<applicationDomain public="1"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<imageDecodingPolicy public="1">
			<x path="flash.system.ImageDecodingPolicy"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</imageDecodingPolicy>
		<parameters public="1">
			<d/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</parameters>
		<requestedContentParent public="1">
			<c path="flash.display.DisplayObjectContainer"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestedContentParent>
		<securityDomain public="1"><c path="flash.system.SecurityDomain"/></securityDomain>
		<get_allowLoadBytesCodeExecution set="method"><f a=""><x path="Bool"/></f></get_allowLoadBytesCodeExecution>
		<set_allowLoadBytesCodeExecution set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_allowLoadBytesCodeExecution>
		<new public="1" set="method">
			<f a="?checkPolicyFile:?applicationDomain:?securityDomain" v="false::">
				<x path="Bool"/>
				<c path="flash.system.ApplicationDomain"/>
				<c path="flash.system.SecurityDomain"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ checkPolicyFile : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.system.SecurityDomain" params="" file="/usr/local/lib/haxe/std/flash/system/SecurityDomain.hx" extern="1">
		<currentDomain public="1" get="accessor" set="null" static="1">
			<c path="flash.system.SecurityDomain"/>
			<meta><m n=":flash.property"/></meta>
		</currentDomain>
		<get_currentDomain set="method" static="1"><f a=""><c path="flash.system.SecurityDomain"/></f></get_currentDomain>
		<domainID public="1">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_3</e></m>
			</meta>
		</domainID>
		<get_domainID set="method"><f a=""><c path="String"/></f></get_domainID>
	</class>
	<class path="flash.text.TextSnapshot" params="" file="/usr/local/lib/haxe/std/flash/text/TextSnapshot.hx" extern="1">
		<charCount public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</charCount>
		<findText public="1" set="method"><f a="beginIndex:textToFind:caseSensitive">
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></findText>
		<getSelected public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></getSelected>
		<getSelectedText public="1" set="method">
			<f a="?includeLineEndings" v="false">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ includeLineEndings : false }</e></m></meta>
		</getSelectedText>
		<getText public="1" set="method">
			<f a="beginIndex:endIndex:?includeLineEndings" v="::false">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ includeLineEndings : false }</e></m></meta>
		</getText>
		<getTextRunInfo public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRunInfo>
		<get_charCount set="method"><f a=""><x path="Int"/></f></get_charCount>
		<hitTestTextNearPos public="1" set="method">
			<f a="x:y:?maxDistance" v="::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ maxDistance : 0 }</e></m></meta>
		</hitTestTextNearPos>
		<setSelectColor public="1" set="method">
			<f a="?hexColor" v="16776960">
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ hexColor : 16776960 }</e></m></meta>
		</setSelectColor>
		<setSelected public="1" set="method"><f a="beginIndex:endIndex:select">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setSelected>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.ui.ContextMenu" params="" file="/usr/local/lib/haxe/std/flash/ui/ContextMenu.hx" extern="1" final="1">
		<extends path="flash.display.NativeMenu"/>
		<isSupported public="1" static="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</isSupported>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<builtInItems public="1" get="accessor" set="accessor">
			<c path="flash.ui.ContextMenuBuiltInItems"/>
			<meta><m n=":flash.property"/></meta>
		</builtInItems>
		<clipboardItems public="1">
			<c path="flash.ui.ContextMenuClipboardItems"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</clipboardItems>
		<clipboardMenu public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</clipboardMenu>
		<customItems public="1" get="accessor" set="accessor">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</customItems>
		<link public="1">
			<c path="flash.net.URLRequest"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</link>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenu"/></f></clone>
		<get_builtInItems set="method"><f a=""><c path="flash.ui.ContextMenuBuiltInItems"/></f></get_builtInItems>
		<get_clipboardItems set="method"><f a=""><c path="flash.ui.ContextMenuClipboardItems"/></f></get_clipboardItems>
		<get_clipboardMenu set="method"><f a=""><x path="Bool"/></f></get_clipboardMenu>
		<get_customItems set="method"><f a=""><c path="Array"><d/></c></f></get_customItems>
		<get_link set="method"><f a=""><c path="flash.net.URLRequest"/></f></get_link>
		<hideBuiltInItems public="1" set="method"><f a=""><x path="Void"/></f></hideBuiltInItems>
		<set_builtInItems set="method"><f a="value">
	<c path="flash.ui.ContextMenuBuiltInItems"/>
	<c path="flash.ui.ContextMenuBuiltInItems"/>
</f></set_builtInItems>
		<set_clipboardItems set="method"><f a="value">
	<c path="flash.ui.ContextMenuClipboardItems"/>
	<c path="flash.ui.ContextMenuClipboardItems"/>
</f></set_clipboardItems>
		<set_clipboardMenu set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_clipboardMenu>
		<set_customItems set="method"><f a="value">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></set_customItems>
		<set_link set="method"><f a="value">
	<c path="flash.net.URLRequest"/>
	<c path="flash.net.URLRequest"/>
</f></set_link>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.ui.ContextMenuBuiltInItems" params="" file="/usr/local/lib/haxe/std/flash/ui/ContextMenuBuiltInItems.hx" extern="1" final="1">
		<forwardAndBack public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</forwardAndBack>
		<loop public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</loop>
		<play public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</play>
		<print public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</print>
		<quality public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</quality>
		<rewind public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</rewind>
		<save public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</save>
		<zoom public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</zoom>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuBuiltInItems"/></f></clone>
		<get_forwardAndBack set="method"><f a=""><x path="Bool"/></f></get_forwardAndBack>
		<get_loop set="method"><f a=""><x path="Bool"/></f></get_loop>
		<get_play set="method"><f a=""><x path="Bool"/></f></get_play>
		<get_print set="method"><f a=""><x path="Bool"/></f></get_print>
		<get_quality set="method"><f a=""><x path="Bool"/></f></get_quality>
		<get_rewind set="method"><f a=""><x path="Bool"/></f></get_rewind>
		<get_save set="method"><f a=""><x path="Bool"/></f></get_save>
		<get_zoom set="method"><f a=""><x path="Bool"/></f></get_zoom>
		<set_forwardAndBack set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_forwardAndBack>
		<set_loop set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_loop>
		<set_play set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_play>
		<set_print set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_print>
		<set_quality set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_quality>
		<set_rewind set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_rewind>
		<set_save set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_save>
		<set_zoom set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_zoom>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.ui.ContextMenuClipboardItems" params="" file="/usr/local/lib/haxe/std/flash/ui/ContextMenuClipboardItems.hx" extern="1" final="1">
		<clear public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</clear>
		<copy public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</copy>
		<cut public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</cut>
		<paste public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</paste>
		<selectAll public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</selectAll>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuClipboardItems"/></f></clone>
		<get_clear set="method"><f a=""><x path="Bool"/></f></get_clear>
		<get_copy set="method"><f a=""><x path="Bool"/></f></get_copy>
		<get_cut set="method"><f a=""><x path="Bool"/></f></get_cut>
		<get_paste set="method"><f a=""><x path="Bool"/></f></get_paste>
		<get_selectAll set="method"><f a=""><x path="Bool"/></f></get_selectAll>
		<set_clear set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_clear>
		<set_copy set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_copy>
		<set_cut set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_cut>
		<set_paste set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_paste>
		<set_selectAll set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_selectAll>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="flash.ui.KeyLocation" params="" file="/usr/local/lib/haxe/std/flash/ui/KeyLocation.hx">
		<from><icast><x path="UInt"/></icast></from>
		<this><x path="UInt"/></this>
		<to><icast><x path="UInt"/></icast></to>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.ui.KeyLocation"</e></m>
		</meta>
		<impl><class path="flash.ui._KeyLocation.KeyLocation_Impl_" params="" file="/usr/local/lib/haxe/std/flash/ui/KeyLocation.hx" private="1" module="flash.ui.KeyLocation" extern="1" final="1">
	<D_PAD public="1" set="null" static="1">
		<x path="flash.ui.KeyLocation"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</D_PAD>
	<LEFT public="1" set="null" static="1">
		<x path="flash.ui.KeyLocation"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LEFT>
	<NUM_PAD public="1" set="null" static="1">
		<x path="flash.ui.KeyLocation"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NUM_PAD>
	<RIGHT public="1" set="null" static="1">
		<x path="flash.ui.KeyLocation"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RIGHT>
	<STANDARD public="1" set="null" static="1">
		<x path="flash.ui.KeyLocation"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</STANDARD>
	<meta>
		<m n=":native"><e>"flash.ui.KeyLocation"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.ui._KeyLocation.KeyLocation_Impl_" params="" file="/usr/local/lib/haxe/std/flash/ui/KeyLocation.hx" private="1" module="flash.ui.KeyLocation" extern="1" final="1">
		<D_PAD public="1" set="null" static="1">
			<x path="flash.ui.KeyLocation"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</D_PAD>
		<LEFT public="1" set="null" static="1">
			<x path="flash.ui.KeyLocation"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LEFT>
		<NUM_PAD public="1" set="null" static="1">
			<x path="flash.ui.KeyLocation"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NUM_PAD>
		<RIGHT public="1" set="null" static="1">
			<x path="flash.ui.KeyLocation"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RIGHT>
		<STANDARD public="1" set="null" static="1">
			<x path="flash.ui.KeyLocation"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</STANDARD>
		<meta>
			<m n=":native"><e>"flash.ui.KeyLocation"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.ui.Keyboard" params="" file="/usr/local/lib/haxe/std/flash/ui/Keyboard.hx" extern="1">
		<A final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</A>
		<ALTERNATE final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</ALTERNATE>
		<AUDIO final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</AUDIO>
		<B final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</B>
		<BACK final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</BACK>
		<BACKQUOTE final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</BACKQUOTE>
		<BACKSLASH final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</BACKSLASH>
		<BACKSPACE final="1" public="1" set="null" static="1"><x path="UInt"/></BACKSPACE>
		<BLUE final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</BLUE>
		<C final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</C>
		<CAPS_LOCK final="1" public="1" set="null" static="1"><x path="UInt"/></CAPS_LOCK>
		<CHANNEL_DOWN final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</CHANNEL_DOWN>
		<CHANNEL_UP final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</CHANNEL_UP>
		<COMMA final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</COMMA>
		<COMMAND final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</COMMAND>
		<CONTROL final="1" public="1" set="null" static="1"><x path="UInt"/></CONTROL>
		<CharCodeStrings final="1" public="1" static="1">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</CharCodeStrings>
		<D final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</D>
		<DELETE final="1" public="1" set="null" static="1"><x path="UInt"/></DELETE>
		<DOWN final="1" public="1" set="null" static="1"><x path="UInt"/></DOWN>
		<DVR final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</DVR>
		<E final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</E>
		<END final="1" public="1" set="null" static="1"><x path="UInt"/></END>
		<ENTER final="1" public="1" set="null" static="1"><x path="UInt"/></ENTER>
		<EQUAL final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</EQUAL>
		<ESCAPE final="1" public="1" set="null" static="1"><x path="UInt"/></ESCAPE>
		<EXIT final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</EXIT>
		<F final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</F>
		<F1 final="1" public="1" set="null" static="1"><x path="UInt"/></F1>
		<F10 final="1" public="1" set="null" static="1"><x path="UInt"/></F10>
		<F11 final="1" public="1" set="null" static="1"><x path="UInt"/></F11>
		<F12 final="1" public="1" set="null" static="1"><x path="UInt"/></F12>
		<F13 final="1" public="1" set="null" static="1"><x path="UInt"/></F13>
		<F14 final="1" public="1" set="null" static="1"><x path="UInt"/></F14>
		<F15 final="1" public="1" set="null" static="1"><x path="UInt"/></F15>
		<F2 final="1" public="1" set="null" static="1"><x path="UInt"/></F2>
		<F3 final="1" public="1" set="null" static="1"><x path="UInt"/></F3>
		<F4 final="1" public="1" set="null" static="1"><x path="UInt"/></F4>
		<F5 final="1" public="1" set="null" static="1"><x path="UInt"/></F5>
		<F6 final="1" public="1" set="null" static="1"><x path="UInt"/></F6>
		<F7 final="1" public="1" set="null" static="1"><x path="UInt"/></F7>
		<F8 final="1" public="1" set="null" static="1"><x path="UInt"/></F8>
		<F9 final="1" public="1" set="null" static="1"><x path="UInt"/></F9>
		<FAST_FORWARD final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</FAST_FORWARD>
		<G final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</G>
		<GREEN final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</GREEN>
		<GUIDE final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</GUIDE>
		<H final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</H>
		<HELP final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</HELP>
		<HOME final="1" public="1" set="null" static="1"><x path="UInt"/></HOME>
		<I final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</I>
		<INFO final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</INFO>
		<INPUT final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</INPUT>
		<INSERT final="1" public="1" set="null" static="1"><x path="UInt"/></INSERT>
		<J final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</J>
		<K final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</K>
		<KEYNAME_BEGIN final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_BEGIN>
		<KEYNAME_BREAK final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_BREAK>
		<KEYNAME_CLEARDISPLAY final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_CLEARDISPLAY>
		<KEYNAME_CLEARLINE final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_CLEARLINE>
		<KEYNAME_DELETE final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_DELETE>
		<KEYNAME_DELETECHAR final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_DELETECHAR>
		<KEYNAME_DELETELINE final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_DELETELINE>
		<KEYNAME_DOWNARROW final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_DOWNARROW>
		<KEYNAME_END final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_END>
		<KEYNAME_EXECUTE final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_EXECUTE>
		<KEYNAME_F1 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F1>
		<KEYNAME_F10 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F10>
		<KEYNAME_F11 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F11>
		<KEYNAME_F12 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F12>
		<KEYNAME_F13 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F13>
		<KEYNAME_F14 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F14>
		<KEYNAME_F15 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F15>
		<KEYNAME_F16 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F16>
		<KEYNAME_F17 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F17>
		<KEYNAME_F18 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F18>
		<KEYNAME_F19 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F19>
		<KEYNAME_F2 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F2>
		<KEYNAME_F20 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F20>
		<KEYNAME_F21 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F21>
		<KEYNAME_F22 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F22>
		<KEYNAME_F23 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F23>
		<KEYNAME_F24 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F24>
		<KEYNAME_F25 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F25>
		<KEYNAME_F26 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F26>
		<KEYNAME_F27 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F27>
		<KEYNAME_F28 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F28>
		<KEYNAME_F29 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F29>
		<KEYNAME_F3 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F3>
		<KEYNAME_F30 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F30>
		<KEYNAME_F31 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F31>
		<KEYNAME_F32 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F32>
		<KEYNAME_F33 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F33>
		<KEYNAME_F34 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F34>
		<KEYNAME_F35 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F35>
		<KEYNAME_F4 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F4>
		<KEYNAME_F5 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F5>
		<KEYNAME_F6 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F6>
		<KEYNAME_F7 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F7>
		<KEYNAME_F8 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F8>
		<KEYNAME_F9 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F9>
		<KEYNAME_FIND final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_FIND>
		<KEYNAME_HELP final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_HELP>
		<KEYNAME_HOME final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_HOME>
		<KEYNAME_INSERT final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_INSERT>
		<KEYNAME_INSERTCHAR final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_INSERTCHAR>
		<KEYNAME_INSERTLINE final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_INSERTLINE>
		<KEYNAME_LEFTARROW final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_LEFTARROW>
		<KEYNAME_MENU final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_MENU>
		<KEYNAME_MODESWITCH final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_MODESWITCH>
		<KEYNAME_NEXT final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_NEXT>
		<KEYNAME_PAGEDOWN final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PAGEDOWN>
		<KEYNAME_PAGEUP final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PAGEUP>
		<KEYNAME_PAUSE final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PAUSE>
		<KEYNAME_PLAYPAUSE final="1" public="1" set="null" static="1"><c path="String"/></KEYNAME_PLAYPAUSE>
		<KEYNAME_PREV final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PREV>
		<KEYNAME_PRINT final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PRINT>
		<KEYNAME_PRINTSCREEN final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PRINTSCREEN>
		<KEYNAME_REDO final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_REDO>
		<KEYNAME_RESET final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_RESET>
		<KEYNAME_RIGHTARROW final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_RIGHTARROW>
		<KEYNAME_SCROLLLOCK final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_SCROLLLOCK>
		<KEYNAME_SELECT final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_SELECT>
		<KEYNAME_STOP final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_STOP>
		<KEYNAME_SYSREQ final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_SYSREQ>
		<KEYNAME_SYSTEM final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_SYSTEM>
		<KEYNAME_UNDO final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_UNDO>
		<KEYNAME_UPARROW final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_UPARROW>
		<KEYNAME_USER final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_USER>
		<L final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</L>
		<LAST final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</LAST>
		<LEFT final="1" public="1" set="null" static="1"><x path="UInt"/></LEFT>
		<LEFTBRACKET final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</LEFTBRACKET>
		<LIVE final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</LIVE>
		<M final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</M>
		<MASTER_SHELL final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</MASTER_SHELL>
		<MENU final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</MENU>
		<MINUS final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</MINUS>
		<N final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</N>
		<NEXT final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</NEXT>
		<NUMBER_0 final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_0>
		<NUMBER_1 final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_1>
		<NUMBER_2 final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_2>
		<NUMBER_3 final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_3>
		<NUMBER_4 final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_4>
		<NUMBER_5 final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_5>
		<NUMBER_6 final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_6>
		<NUMBER_7 final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_7>
		<NUMBER_8 final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_8>
		<NUMBER_9 final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_9>
		<NUMPAD final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMPAD>
		<NUMPAD_0 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_0>
		<NUMPAD_1 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_1>
		<NUMPAD_2 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_2>
		<NUMPAD_3 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_3>
		<NUMPAD_4 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_4>
		<NUMPAD_5 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_5>
		<NUMPAD_6 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_6>
		<NUMPAD_7 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_7>
		<NUMPAD_8 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_8>
		<NUMPAD_9 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_9>
		<NUMPAD_ADD final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_ADD>
		<NUMPAD_DECIMAL final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_DECIMAL>
		<NUMPAD_DIVIDE final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_DIVIDE>
		<NUMPAD_ENTER final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_ENTER>
		<NUMPAD_MULTIPLY final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_MULTIPLY>
		<NUMPAD_SUBTRACT final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_SUBTRACT>
		<O final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</O>
		<P final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</P>
		<PAGE_DOWN final="1" public="1" set="null" static="1"><x path="UInt"/></PAGE_DOWN>
		<PAGE_UP final="1" public="1" set="null" static="1"><x path="UInt"/></PAGE_UP>
		<PAUSE final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</PAUSE>
		<PERIOD final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</PERIOD>
		<PLAY final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</PLAY>
		<PLAY_PAUSE final="1" public="1" set="null" static="1"><x path="UInt"/></PLAY_PAUSE>
		<PREVIOUS final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</PREVIOUS>
		<Q final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</Q>
		<QUOTE final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</QUOTE>
		<R final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</R>
		<RECORD final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</RECORD>
		<RED final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</RED>
		<REWIND final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</REWIND>
		<RIGHT final="1" public="1" set="null" static="1"><x path="UInt"/></RIGHT>
		<RIGHTBRACKET final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</RIGHTBRACKET>
		<S final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</S>
		<SEARCH final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SEARCH>
		<SEMICOLON final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</SEMICOLON>
		<SETUP final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SETUP>
		<SHIFT final="1" public="1" set="null" static="1"><x path="UInt"/></SHIFT>
		<SKIP_BACKWARD final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SKIP_BACKWARD>
		<SKIP_FORWARD final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SKIP_FORWARD>
		<SLASH final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</SLASH>
		<SPACE final="1" public="1" set="null" static="1"><x path="UInt"/></SPACE>
		<STOP final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</STOP>
		<STRING_BEGIN final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_BEGIN>
		<STRING_BREAK final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_BREAK>
		<STRING_CLEARDISPLAY final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_CLEARDISPLAY>
		<STRING_CLEARLINE final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_CLEARLINE>
		<STRING_DELETE final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_DELETE>
		<STRING_DELETECHAR final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_DELETECHAR>
		<STRING_DELETELINE final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_DELETELINE>
		<STRING_DOWNARROW final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_DOWNARROW>
		<STRING_END final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_END>
		<STRING_EXECUTE final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_EXECUTE>
		<STRING_F1 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F1>
		<STRING_F10 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F10>
		<STRING_F11 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F11>
		<STRING_F12 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F12>
		<STRING_F13 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F13>
		<STRING_F14 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F14>
		<STRING_F15 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F15>
		<STRING_F16 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F16>
		<STRING_F17 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F17>
		<STRING_F18 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F18>
		<STRING_F19 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F19>
		<STRING_F2 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F2>
		<STRING_F20 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F20>
		<STRING_F21 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F21>
		<STRING_F22 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F22>
		<STRING_F23 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F23>
		<STRING_F24 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F24>
		<STRING_F25 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F25>
		<STRING_F26 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F26>
		<STRING_F27 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F27>
		<STRING_F28 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F28>
		<STRING_F29 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F29>
		<STRING_F3 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F3>
		<STRING_F30 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F30>
		<STRING_F31 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F31>
		<STRING_F32 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F32>
		<STRING_F33 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F33>
		<STRING_F34 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F34>
		<STRING_F35 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F35>
		<STRING_F4 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F4>
		<STRING_F5 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F5>
		<STRING_F6 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F6>
		<STRING_F7 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F7>
		<STRING_F8 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F8>
		<STRING_F9 final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F9>
		<STRING_FIND final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_FIND>
		<STRING_HELP final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_HELP>
		<STRING_HOME final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_HOME>
		<STRING_INSERT final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_INSERT>
		<STRING_INSERTCHAR final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_INSERTCHAR>
		<STRING_INSERTLINE final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_INSERTLINE>
		<STRING_LEFTARROW final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_LEFTARROW>
		<STRING_MENU final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_MENU>
		<STRING_MODESWITCH final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_MODESWITCH>
		<STRING_NEXT final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_NEXT>
		<STRING_PAGEDOWN final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PAGEDOWN>
		<STRING_PAGEUP final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PAGEUP>
		<STRING_PAUSE final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PAUSE>
		<STRING_PREV final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PREV>
		<STRING_PRINT final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PRINT>
		<STRING_PRINTSCREEN final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PRINTSCREEN>
		<STRING_REDO final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_REDO>
		<STRING_RESET final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_RESET>
		<STRING_RIGHTARROW final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_RIGHTARROW>
		<STRING_SCROLLLOCK final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_SCROLLLOCK>
		<STRING_SELECT final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_SELECT>
		<STRING_STOP final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_STOP>
		<STRING_SYSREQ final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_SYSREQ>
		<STRING_SYSTEM final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_SYSTEM>
		<STRING_UNDO final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_UNDO>
		<STRING_UPARROW final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_UPARROW>
		<STRING_USER final="1" public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_USER>
		<SUBTITLE final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SUBTITLE>
		<T final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</T>
		<TAB final="1" public="1" set="null" static="1"><x path="UInt"/></TAB>
		<U final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</U>
		<UP final="1" public="1" set="null" static="1"><x path="UInt"/></UP>
		<V final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</V>
		<VOD final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</VOD>
		<W final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</W>
		<X final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</X>
		<Y final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</Y>
		<YELLOW final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</YELLOW>
		<Z final="1" public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</Z>
		<capsLock public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</capsLock>
		<hasVirtualKeyboard public="1" static="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</hasVirtualKeyboard>
		<numLock public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</numLock>
		<physicalKeyboardType public="1" static="1">
			<x path="flash.ui.KeyboardType"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</physicalKeyboardType>
		<get_capsLock set="method" static="1"><f a=""><x path="Bool"/></f></get_capsLock>
		<get_hasVirtualKeyboard set="method" static="1"><f a=""><x path="Bool"/></f></get_hasVirtualKeyboard>
		<get_numLock set="method" static="1"><f a=""><x path="Bool"/></f></get_numLock>
		<get_physicalKeyboardType set="method" static="1"><f a=""><x path="flash.ui.KeyboardType"/></f></get_physicalKeyboardType>
		<isAccessible public="1" set="method" static="1"><f a=""><x path="Bool"/></f></isAccessible>
	</class>
	<abstract path="flash.ui.KeyboardType" params="" file="/usr/local/lib/haxe/std/flash/ui/KeyboardType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.ui.KeyboardType"</e></m>
		</meta>
		<impl><class path="flash.ui._KeyboardType.KeyboardType_Impl_" params="" file="/usr/local/lib/haxe/std/flash/ui/KeyboardType.hx" private="1" module="flash.ui.KeyboardType" extern="1" final="1">
	<ALPHANUMERIC public="1" set="null" static="1">
		<x path="flash.ui.KeyboardType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ALPHANUMERIC>
	<KEYPAD public="1" set="null" static="1">
		<x path="flash.ui.KeyboardType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KEYPAD>
	<NONE public="1" set="null" static="1">
		<x path="flash.ui.KeyboardType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<meta>
		<m n=":native"><e>"flash.ui.KeyboardType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.ui._KeyboardType.KeyboardType_Impl_" params="" file="/usr/local/lib/haxe/std/flash/ui/KeyboardType.hx" private="1" module="flash.ui.KeyboardType" extern="1" final="1">
		<ALPHANUMERIC public="1" set="null" static="1">
			<x path="flash.ui.KeyboardType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ALPHANUMERIC>
		<KEYPAD public="1" set="null" static="1">
			<x path="flash.ui.KeyboardType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KEYPAD>
		<NONE public="1" set="null" static="1">
			<x path="flash.ui.KeyboardType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<meta>
			<m n=":native"><e>"flash.ui.KeyboardType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.utils.IDataInput" params="" file="/usr/local/lib/haxe/std/flash/utils/IDataInput.hx" extern="1" interface="1">
		<bytesAvailable public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesAvailable>
		<endian public="1" get="accessor" set="accessor">
			<x path="flash.utils.Endian"/>
			<meta><m n=":flash.property"/></meta>
		</endian>
		<objectEncoding public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<get_bytesAvailable set="method"><f a=""><x path="UInt"/></f></get_bytesAvailable>
		<get_endian set="method"><f a=""><x path="flash.utils.Endian"/></f></get_endian>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<set_endian set="method"><f a="value">
	<x path="flash.utils.Endian"/>
	<x path="flash.utils.Endian"/>
</f></set_endian>
		<set_objectEncoding set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_objectEncoding>
	</class>
	<class path="flash.utils.IDataInput2" params="" file="/usr/local/lib/haxe/std/flash/utils/IDataInput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataInput"/></class>
	<class path="flash.utils.IDataOutput" params="" file="/usr/local/lib/haxe/std/flash/utils/IDataOutput.hx" extern="1" interface="1">
		<endian public="1" get="accessor" set="accessor">
			<x path="flash.utils.Endian"/>
			<meta><m n=":flash.property"/></meta>
		</endian>
		<objectEncoding public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<get_endian set="method"><f a=""><x path="flash.utils.Endian"/></f></get_endian>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<set_endian set="method"><f a="value">
	<x path="flash.utils.Endian"/>
	<x path="flash.utils.Endian"/>
</f></set_endian>
		<set_objectEncoding set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_objectEncoding>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
	</class>
	<class path="flash.utils.IDataOutput2" params="" file="/usr/local/lib/haxe/std/flash/utils/IDataOutput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataOutput"/></class>
	<class path="flash.utils.ByteArray" params="" file="/usr/local/lib/haxe/std/flash/utils/ByteArray.hx" extern="1">
		<implements path="flash.utils.IDataInput2"/>
		<implements path="flash.utils.IDataOutput2"/>
		<defaultObjectEncoding public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</defaultObjectEncoding>
		<get_defaultObjectEncoding set="method" static="1"><f a=""><x path="UInt"/></f></get_defaultObjectEncoding>
		<set_defaultObjectEncoding set="method" static="1"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_defaultObjectEncoding>
		<bytesAvailable public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesAvailable>
		<endian public="1" get="accessor" set="accessor">
			<x path="flash.utils.Endian"/>
			<meta><m n=":flash.property"/></meta>
		</endian>
		<length public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</length>
		<objectEncoding public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<position public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</position>
		<shareable public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_4</e></m>
			</meta>
		</shareable>
		<atomicCompareAndSwapIntAt public="1">
			<f a="byteIndex:expectedValue:newValue">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapIntAt>
		<atomicCompareAndSwapLength public="1">
			<f a="expectedLength:newLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapLength>
		<clear public="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clear>
		<compress public="1" set="method"><f a="?algorithm">
	<x path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></compress>
		<deflate public="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</deflate>
		<get_bytesAvailable set="method"><f a=""><x path="UInt"/></f></get_bytesAvailable>
		<get_endian set="method"><f a=""><x path="flash.utils.Endian"/></f></get_endian>
		<get_length set="method"><f a=""><x path="UInt"/></f></get_length>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<get_position set="method"><f a=""><x path="UInt"/></f></get_position>
		<get_shareable set="method"><f a=""><x path="Bool"/></f></get_shareable>
		<inflate public="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</inflate>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<set_endian set="method"><f a="value">
	<x path="flash.utils.Endian"/>
	<x path="flash.utils.Endian"/>
</f></set_endian>
		<set_length set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_length>
		<set_objectEncoding set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_objectEncoding>
		<set_position set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_position>
		<set_shareable set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_shareable>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<uncompress public="1" set="method"><f a="?algorithm">
	<x path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></uncompress>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="flash.utils.CompressionAlgorithm" params="" file="/usr/local/lib/haxe/std/flash/utils/CompressionAlgorithm.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.utils.CompressionAlgorithm"</e></m>
			<m n=":require"><e>flash11</e></m>
		</meta>
		<impl><class path="flash.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_" params="" file="/usr/local/lib/haxe/std/flash/utils/CompressionAlgorithm.hx" private="1" module="flash.utils.CompressionAlgorithm" extern="1" final="1">
	<DEFLATE public="1" set="null" static="1">
		<x path="flash.utils.CompressionAlgorithm"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DEFLATE>
	<LZMA public="1" set="null" static="1">
		<x path="flash.utils.CompressionAlgorithm"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LZMA>
	<ZLIB public="1" set="null" static="1">
		<x path="flash.utils.CompressionAlgorithm"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ZLIB>
	<meta>
		<m n=":native"><e>"flash.utils.CompressionAlgorithm"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_" params="" file="/usr/local/lib/haxe/std/flash/utils/CompressionAlgorithm.hx" private="1" module="flash.utils.CompressionAlgorithm" extern="1" final="1">
		<DEFLATE public="1" set="null" static="1">
			<x path="flash.utils.CompressionAlgorithm"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DEFLATE>
		<LZMA public="1" set="null" static="1">
			<x path="flash.utils.CompressionAlgorithm"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LZMA>
		<ZLIB public="1" set="null" static="1">
			<x path="flash.utils.CompressionAlgorithm"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ZLIB>
		<meta>
			<m n=":native"><e>"flash.utils.CompressionAlgorithm"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.utils.Endian" params="" file="/usr/local/lib/haxe/std/flash/utils/Endian.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.utils.Endian"</e></m>
		</meta>
		<impl><class path="flash.utils._Endian.Endian_Impl_" params="" file="/usr/local/lib/haxe/std/flash/utils/Endian.hx" private="1" module="flash.utils.Endian" extern="1" final="1">
	<BIG_ENDIAN public="1" set="null" static="1">
		<x path="flash.utils.Endian"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BIG_ENDIAN>
	<LITTLE_ENDIAN public="1" set="null" static="1">
		<x path="flash.utils.Endian"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LITTLE_ENDIAN>
	<meta>
		<m n=":native"><e>"flash.utils.Endian"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.utils._Endian.Endian_Impl_" params="" file="/usr/local/lib/haxe/std/flash/utils/Endian.hx" private="1" module="flash.utils.Endian" extern="1" final="1">
		<BIG_ENDIAN public="1" set="null" static="1">
			<x path="flash.utils.Endian"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BIG_ENDIAN>
		<LITTLE_ENDIAN public="1" set="null" static="1">
			<x path="flash.utils.Endian"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LITTLE_ENDIAN>
		<meta>
			<m n=":native"><e>"flash.utils.Endian"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="flash.utils.Function" params="" file="/usr/local/lib/haxe/std/flash/utils/Function.hx"><d/></typedef>
	<class path="flash.utils.Namespace" params="" file="/usr/local/lib/haxe/std/flash/utils/Namespace.hx" extern="1" final="1">
		<prefix public="1" get="accessor" set="null">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</prefix>
		<uri public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</uri>
		<get_prefix set="method"><f a=""><d/></f></get_prefix>
		<get_uri set="method"><f a=""><c path="String"/></f></get_uri>
		<new public="1" set="method"><f a="?prefix:?uri">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="flash.utils.Object" params="" file="/usr/local/lib/haxe/std/flash/utils/Object.hx">
		<from><icast><d/></icast></from>
		<this><x path="flash.utils.Object"/></this>
		<to><icast><d/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="flash.xml.XML" params="" file="/usr/local/lib/haxe/std/flash/xml/XML.hx" extern="1" final="1">
		<ignoreComments public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ignoreComments>
		<ignoreProcessingInstructions public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ignoreProcessingInstructions>
		<ignoreWhitespace public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ignoreWhitespace>
		<prettyIndent public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</prettyIndent>
		<prettyPrinting public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</prettyPrinting>
		<defaultSettings public="1" set="method" static="1"><f a=""><d/></f></defaultSettings>
		<get_ignoreComments set="method" static="1"><f a=""><x path="Bool"/></f></get_ignoreComments>
		<get_ignoreProcessingInstructions set="method" static="1"><f a=""><x path="Bool"/></f></get_ignoreProcessingInstructions>
		<get_ignoreWhitespace set="method" static="1"><f a=""><x path="Bool"/></f></get_ignoreWhitespace>
		<get_prettyIndent set="method" static="1"><f a=""><x path="Int"/></f></get_prettyIndent>
		<get_prettyPrinting set="method" static="1"><f a=""><x path="Bool"/></f></get_prettyPrinting>
		<setSettings public="1" set="method" static="1"><f a="?o">
	<d/>
	<x path="Void"/>
</f></setSettings>
		<set_ignoreComments set="method" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ignoreComments>
		<set_ignoreProcessingInstructions set="method" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ignoreProcessingInstructions>
		<set_ignoreWhitespace set="method" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ignoreWhitespace>
		<set_prettyIndent set="method" static="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_prettyIndent>
		<set_prettyPrinting set="method" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_prettyPrinting>
		<settings public="1" set="method" static="1"><f a=""><d/></f></settings>
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></copy>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<localName public="1" set="method"><f a=""><x path="flash.utils.Object"/></f></localName>
		<name public="1" set="method"><f a=""><x path="flash.utils.Object"/></f></name>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></normalize>
		<notification public="1" set="method"><f a=""><t path="flash.utils.Function"/></f></notification>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<setNotification public="1" set="method"><f a="f">
	<t path="flash.utils.Function"/>
	<d/>
</f></setNotification>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<toJSON public="1">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></valueOf>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.xml.XMLList" params="" file="/usr/local/lib/haxe/std/flash/xml/XMLList.hx" extern="1" final="1">
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></copy>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<localName public="1" set="method"><f a=""><x path="flash.utils.Object"/></f></localName>
		<name public="1" set="method"><f a=""><x path="flash.utils.Object"/></f></name>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></normalize>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<toJSON public="1">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></valueOf>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="fracs.DifferencePreference" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Angles.hx" module="fracs.Angles">
		<CLOCKWISE/>
		<ANTICLOCKWISE/>
		<SMALL/>
		<LARGE/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="fracs.Angles" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Angles.hx">
		<pi2pi public="1" get="inline" set="null" line="11" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></pi2pi>
		<zeroto2pi public="1" get="inline" set="null" line="19" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zeroto2pi>
		<zerotoMinus2pi public="1" get="inline" set="null" line="27" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zerotoMinus2pi>
		<differencePrefer public="1" get="inline" set="null" line="36" static="1"><f a="a:b:prefer">
	<x path="Float"/>
	<x path="Float"/>
	<e path="fracs.DifferencePreference"/>
	<x path="Float"/>
</f></differencePrefer>
		<difference public="1" get="inline" set="null" line="48" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></difference>
		<differenceClockWise public="1" get="inline" set="null" line="57" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceClockWise>
		<differenceAntiClockwise public="1" get="inline" set="null" line="61" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceAntiClockwise>
		<differenceSmall public="1" get="inline" set="null" line="65" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceSmall>
		<differenceLarge public="1" get="inline" set="null" line="80" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceLarge>
		<differenceSmallLarge public="1" get="inline" set="null" line="95" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<a>
		<small><x path="Float"/></small>
		<large><x path="Float"/></large>
	</a>
</f></differenceSmallLarge>
	</class>
	<typedef path="fracs.Fractional" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Fraction.hx" module="fracs.Fraction"><a>
	<value><x path="Null"><x path="Float"/></x></value>
	<positive><x path="Bool"/></positive>
	<numerator><x path="Int"/></numerator>
	<denominator><x path="Int"/></denominator>
</a></typedef>
	<abstract path="fracs.FractionArray" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Fraction.hx" module="fracs.Fraction">
		<from><icast><c path="Array"><x path="fracs.Fraction"/></c></icast></from>
		<this><c path="Array"><x path="fracs.Fraction"/></c></this>
		<to>
			<icast><c path="Array"><x path="fracs.Fraction"/></c></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta>
			<m n=":arrayAccess"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="fracs._Fraction.FractionArray_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="?val">
			<c path="Array"><x path="fracs.Fraction"/></c>
			<x path="fracs.FractionArray"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<add public="1" get="inline" set="null" line="17" static="1">
		<f a="this:val">
			<c path="Array"><x path="fracs.Fraction"/></c>
			<x path="fracs.Fraction"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</add>
	<toString public="1" get="inline" set="null" line="22" static="1">
		<f a="this">
			<c path="Array"><x path="fracs.Fraction"/></c>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toString>
</class></impl>
	</abstract>
	<class path="fracs._Fraction.FractionArray_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="?val">
				<c path="Array"><x path="fracs.Fraction"/></c>
				<x path="fracs.FractionArray"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<add public="1" get="inline" set="null" line="17" static="1">
			<f a="this:val">
				<c path="Array"><x path="fracs.Fraction"/></c>
				<x path="fracs.Fraction"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</add>
		<toString public="1" get="inline" set="null" line="22" static="1">
			<f a="this">
				<c path="Array"><x path="fracs.Fraction"/></c>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toString>
	</class>
	<abstract path="fracs.Fraction" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Fraction.hx">
		<from>
			<icast><t path="fracs.Fractional"/></icast>
			<icast field="fromString"><c path="String"/></icast>
			<icast field="fromFloat"><x path="Float"/></icast>
		</from>
		<this><t path="fracs.Fractional"/></this>
		<to>
			<icast><t path="fracs.Fractional"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="fracs._Fraction.Fraction_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="numerator:denominator:?positive:?value" v="::true:null">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta>
			<m n=":value"><e>{ value : null, positive : true }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<optimize get="inline" set="null" line="44" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":impl"/></meta>
	</optimize>
	<optimizeFraction get="inline" set="null" line="48" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":impl"/></meta>
	</optimizeFraction>
	<toFloat public="1" get="inline" set="null" line="53" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
	<float public="1" get="inline" set="null" line="61" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</float>
	<verbose public="1" get="inline" set="null" line="65" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</verbose>
	<fromString public="1" get="inline" set="null" line="70" static="1">
		<f a="val">
			<c path="String"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="81" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toString>
	<fromFloat public="1" get="inline" set="null" line="97" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<firstFloat public="1" get="inline" set="null" line="118" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.Fraction"/>
</f></firstFloat>
	<byDenominator public="1" get="inline" set="null" line="125" static="1">
		<f a="this:val">
			<t path="fracs.Fractional"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</byDenominator>
	<all public="1" get="inline" set="null" line="136" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.FractionArray"/>
</f></all>
	<similarToFraction public="1" get="inline" set="null" line="140" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<x path="fracs.FractionArray"/>
		</f>
		<meta><m n=":impl"/></meta>
	</similarToFraction>
	<similarToValue public="1" get="inline" set="null" line="145" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<x path="fracs.FractionArray"/>
		</f>
		<meta><m n=":impl"/></meta>
	</similarToValue>
</class></impl>
	</abstract>
	<class path="fracs._Fraction.Fraction_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="numerator:denominator:?positive:?value" v="::true:null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta>
				<m n=":value"><e>{ value : null, positive : true }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<optimize get="inline" set="null" line="44" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":impl"/></meta>
		</optimize>
		<optimizeFraction get="inline" set="null" line="48" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":impl"/></meta>
		</optimizeFraction>
		<toFloat public="1" get="inline" set="null" line="53" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
		<float public="1" get="inline" set="null" line="61" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</float>
		<verbose public="1" get="inline" set="null" line="65" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</verbose>
		<fromString public="1" get="inline" set="null" line="70" static="1">
			<f a="val">
				<c path="String"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="81" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toString>
		<fromFloat public="1" get="inline" set="null" line="97" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<firstFloat public="1" get="inline" set="null" line="118" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.Fraction"/>
</f></firstFloat>
		<byDenominator public="1" get="inline" set="null" line="125" static="1">
			<f a="this:val">
				<t path="fracs.Fractional"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</byDenominator>
		<all public="1" get="inline" set="null" line="136" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.FractionArray"/>
</f></all>
		<similarToFraction public="1" get="inline" set="null" line="140" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<x path="fracs.FractionArray"/>
			</f>
			<meta><m n=":impl"/></meta>
		</similarToFraction>
		<similarToValue public="1" get="inline" set="null" line="145" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<x path="fracs.FractionArray"/>
			</f>
			<meta><m n=":impl"/></meta>
		</similarToValue>
	</class>
	<class path="fracs.Fracs" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Fraction.hx" module="fracs.Fraction">
		<grabDecimalInput get="inline" set="null" line="153" static="1"><f a="decimalVal">
	<c path="String"/>
	<x path="Float"/>
</f></grabDecimalInput>
		<approximateFractions set="method" line="159" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.FractionArray"/>
			</f>
			<meta><m n=":allow"><e>fracs.Fraction</e></m></meta>
		</approximateFractions>
		<getMaxNumerator get="inline" set="null" line="185" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></getMaxNumerator>
		<extractDigitStr get="inline" set="null" line="218" static="1"><f a="fStr">
	<c path="String"/>
	<c path="String"/>
</f></extractDigitStr>
		<getMaxNumeratorStr get="inline" set="null" line="239" static="1"><f a="fStr">
	<c path="String"/>
	<x path="Float"/>
</f></getMaxNumeratorStr>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="fracs.Pi2pi" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Pi2pi.hx">
		<from>
			<icast field="fromFloat"><x path="Float"/></icast>
			<icast field="fromFraction"><x path="fracs.Fraction"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to>
			<icast><x path="Float"/></icast>
			<icast field="tofraction"><x path="fracs.Fraction"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta><m n="forward"/></meta>
		<impl><class path="fracs._Pi2pi.Pi2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Pi2pi.hx" private="1" module="fracs.Pi2pi" final="1">
	<_new get="inline" set="null" line="5" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<fromFloat public="1" get="inline" set="null" line="10" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<additionPi public="1" set="method" line="20" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</additionPi>
	<subtractionPi public="1" set="method" line="24" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subtractionPi>
	<dividePi public="1" set="method" line="28" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</dividePi>
	<timesPi public="1" set="method" line="32" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</timesPi>
	<addition public="1" set="method" line="36" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addition>
	<subtraction public="1" set="method" line="40" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subtraction>
	<divide public="1" set="method" line="44" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divide>
	<times public="1" set="method" line="48" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</times>
	<degrees public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</degrees>
	<get_degrees public="1" get="inline" set="null" line="52" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_degrees>
	<set_degrees public="1" get="inline" set="null" line="56" static="1">
		<f a="this:val">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_degrees>
	<fromFraction get="inline" set="null" line="62" static="1">
		<f a="val">
			<x path="fracs.Fraction"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFraction>
	<tofraction get="inline" set="null" line="67" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</tofraction>
	<fromString get="inline" set="null" line="71" static="1">
		<f a="val">
			<c path="String"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="77" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toString>
</class></impl>
	</abstract>
	<class path="fracs._Pi2pi.Pi2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Pi2pi.hx" private="1" module="fracs.Pi2pi" final="1">
		<_new get="inline" set="null" line="5" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<fromFloat public="1" get="inline" set="null" line="10" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<additionPi public="1" set="method" line="20" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</additionPi>
		<subtractionPi public="1" set="method" line="24" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subtractionPi>
		<dividePi public="1" set="method" line="28" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</dividePi>
		<timesPi public="1" set="method" line="32" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</timesPi>
		<addition public="1" set="method" line="36" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addition>
		<subtraction public="1" set="method" line="40" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subtraction>
		<divide public="1" set="method" line="44" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divide>
		<times public="1" set="method" line="48" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</times>
		<degrees public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</degrees>
		<get_degrees public="1" get="inline" set="null" line="52" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_degrees>
		<set_degrees public="1" get="inline" set="null" line="56" static="1">
			<f a="this:val">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_degrees>
		<fromFraction get="inline" set="null" line="62" static="1">
			<f a="val">
				<x path="fracs.Fraction"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFraction>
		<tofraction get="inline" set="null" line="67" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</tofraction>
		<fromString get="inline" set="null" line="71" static="1">
			<f a="val">
				<c path="String"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="77" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toString>
	</class>
	<abstract path="fracs.ZeroTo2pi" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/ZeroTo2pi.hx">
		<from>
			<icast field="fromFloat"><x path="Float"/></icast>
			<icast field="fromFraction"><x path="fracs.Fraction"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to>
			<icast><x path="Float"/></icast>
			<icast field="tofraction"><x path="fracs.Fraction"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta><m n="forward"/></meta>
		<impl><class path="fracs._ZeroTo2pi.ZeroTo2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/ZeroTo2pi.hx" private="1" module="fracs.ZeroTo2pi" final="1">
	<_new get="inline" set="null" line="5" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<fromFloat public="1" get="inline" set="null" line="10" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<additionPi public="1" set="method" line="20" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</additionPi>
	<subtractionPi public="1" set="method" line="24" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subtractionPi>
	<dividePi public="1" set="method" line="28" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</dividePi>
	<timesPi public="1" set="method" line="32" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</timesPi>
	<addition public="1" set="method" line="36" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addition>
	<subtraction public="1" set="method" line="40" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subtraction>
	<divide public="1" set="method" line="44" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divide>
	<times public="1" set="method" line="48" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</times>
	<degrees public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</degrees>
	<get_degrees public="1" get="inline" set="null" line="52" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_degrees>
	<set_degrees public="1" get="inline" set="null" line="56" static="1">
		<f a="this:val">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_degrees>
	<fromFraction get="inline" set="null" line="62" static="1">
		<f a="val">
			<x path="fracs.Fraction"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFraction>
	<tofraction get="inline" set="null" line="67" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</tofraction>
	<fromString get="inline" set="null" line="71" static="1">
		<f a="val">
			<c path="String"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="77" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toString>
</class></impl>
	</abstract>
	<class path="fracs._ZeroTo2pi.ZeroTo2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/ZeroTo2pi.hx" private="1" module="fracs.ZeroTo2pi" final="1">
		<_new get="inline" set="null" line="5" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<fromFloat public="1" get="inline" set="null" line="10" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<additionPi public="1" set="method" line="20" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</additionPi>
		<subtractionPi public="1" set="method" line="24" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subtractionPi>
		<dividePi public="1" set="method" line="28" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</dividePi>
		<timesPi public="1" set="method" line="32" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</timesPi>
		<addition public="1" set="method" line="36" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addition>
		<subtraction public="1" set="method" line="40" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subtraction>
		<divide public="1" set="method" line="44" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divide>
		<times public="1" set="method" line="48" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</times>
		<degrees public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</degrees>
		<get_degrees public="1" get="inline" set="null" line="52" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_degrees>
		<set_degrees public="1" get="inline" set="null" line="56" static="1">
			<f a="this:val">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_degrees>
		<fromFraction get="inline" set="null" line="62" static="1">
			<f a="val">
				<x path="fracs.Fraction"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFraction>
		<tofraction get="inline" set="null" line="67" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</tofraction>
		<fromString get="inline" set="null" line="71" static="1">
			<f a="val">
				<c path="String"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="77" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toString>
	</class>
	<abstract path="haxe.CallStack" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1"><meta><m n=":keep"/></meta></class>
	<abstract path="haxe.DynamicAccess" params="T" file="/usr/local/lib/haxe/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe._Exception.NativeException" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/Exception.hx" private="1" module="haxe.Exception" extern="1">
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="haxe.Exception" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/Exception.hx">
		<extends path="haxe._Exception.NativeException"/>
		<caught set="method" line="18" static="1"><f a="value">
	<x path="Any"/>
	<c path="haxe.Exception"/>
</f></caught>
		<thrown set="method" line="28" static="1">
			<f a="value">
				<x path="Any"/>
				<x path="Any"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</thrown>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<__skipStack>
			<x path="Int"/>
			<meta>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</__skipStack>
		<__nativeException>
			<x path="Any"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeException>
		<__previousException>
			<x path="Null"><c path="haxe.Exception"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__previousException>
		<unwrap set="method" line="70"><f a=""><x path="Any"/></f></unwrap>
		<get_native final="1" set="method" line="96"><f a=""><x path="Any"/></f></get_native>
		<new public="1" set="method" line="40">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="haxe.Int32" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe._Int64.__Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>This typedef will fool `@:coreApi` into thinking that we are using
	the same underlying type, even though it might be different on
	specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe._Int64.___Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<high public="1"><x path="haxe.Int32"/></high>
		<low public="1"><x path="haxe.Int32"/></low>
		<new public="1" get="inline" set="null" line="472"><f a="high:low">
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe._NativeStackTrace.V8Error" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/NativeStackTrace.hx" private="1" module="haxe.NativeStackTrace" extern="1">
		<prepareStackTrace public="1" static="1"><f a="error:structuredStackTrace">
	<c path="js.lib.Error"/>
	<c path="Array"><t path="haxe.V8CallSite"/></c>
	<x path="Any"/>
</f></prepareStackTrace>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<typedef path="haxe.V8CallSite" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/NativeStackTrace.hx" module="haxe.NativeStackTrace"><a>
	<getLineNumber set="method"><f a=""><x path="Int"/></f></getLineNumber>
	<getFunctionName set="method"><f a=""><c path="String"/></f></getFunctionName>
	<getFileName set="method"><f a=""><c path="String"/></f></getFileName>
	<getColumnNumber set="method"><f a=""><x path="Int"/></f></getColumnNumber>
</a></typedef>
	<typedef path="haxe.PosInfos" params="" file="/usr/local/lib/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.ValueException" params="" file="/usr/local/lib/haxe/std/haxe/ValueException.hx">
		<extends path="haxe.Exception"/>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>Thrown value.</haxe_doc>
		</value>
		<unwrap set="method" line="35" override="1">
			<f a=""><x path="Any"/></f>
			<haxe_doc>Extract an originally thrown value.

		This method must return the same value on subsequent calls.
		Used internally for catching non-native exceptions.
		Do _not_ override unless you know what you are doing.</haxe_doc>
		</unwrap>
		<new public="1" set="method" line="23"><f a="value:?previous:?native">
	<x path="Any"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception containing arbitrary value.

	This class is automatically used for throwing values, which don't extend `haxe.Exception`
	or native exception type.
	For example:
	```haxe
	throw "Terrible error";
	```
	will be compiled to
	```haxe
	throw new ValueException("Terrible error");
	```</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="263"><f a=""><x path="Int"/></f></get_height>
		<new public="1" set="method" line="252">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.ds.Map" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta><m n=":multiType"><e>@:followWithAbstracts K</e></m></meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
	<_new public="1" set="method" static="1">
		<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
	</_new>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Map.Map_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
		<_new public="1" set="method" static="1">
			<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
		</_new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>concat</e>
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.StringMap" params="T" file="/usr/local/lib/haxe/std/js/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h><d/></h>
		<new public="1" get="inline" set="null" line="33">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/usr/local/lib/haxe/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.extern.Rest" params="T" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc><![CDATA[A special abstract type that represents "rest" function argument.

	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="js.lib.ArrayBufferView"/></typedef>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.io.Bytes" params="" file="/projects/May2019/May2020/lime/src/haxe/io/Bytes.hx">
		<alloc public="1" get="inline" set="null" line="864" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="869" static="1"><f a="s:?encoding">
	<c path="String"/>
	<e path="haxe.io.Encoding"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="902" static="1">
			<f a="b">
				<t path="haxe.io.BytesData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</ofData>
		<ofHex public="1" set="method" line="909" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofHex>
		<fastGet public="1" get="inline" set="null" line="928" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><c path="js.lib.Uint8Array"/></b>
		<data><c path="js.lib.DataView"/></data>
		<get public="1" get="inline" set="null" line="691"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<set public="1" get="inline" set="null" line="696"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<blit public="1" set="method" line="701"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<fill public="1" set="method" line="709"><f a="pos:len:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fill>
		<sub public="1" set="method" line="715"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="721"><f a="other">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></compare>
		<initData get="inline" set="null" line="731"><f a=""><x path="Void"/></f></initData>
		<getDouble public="1" set="method" line="736"><f a="pos">
	<x path="Int"/>
	<x path="Float"/>
</f></getDouble>
		<getFloat public="1" set="method" line="742"><f a="pos">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloat>
		<setDouble public="1" set="method" line="748"><f a="pos:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setDouble>
		<setFloat public="1" set="method" line="754"><f a="pos:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setFloat>
		<getUInt16 public="1" set="method" line="760"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></getUInt16>
		<setUInt16 public="1" set="method" line="766"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUInt16>
		<getInt32 public="1" set="method" line="772"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt32>
		<setInt32 public="1" set="method" line="778"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt32>
		<getInt64 public="1" set="method" line="784"><f a="pos">
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></getInt64>
		<setInt64 public="1" set="method" line="789"><f a="pos:v">
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></setInt64>
		<getString public="1" set="method" line="795"><f a="pos:len:?encoding">
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.io.Encoding"/>
	<c path="String"/>
</f></getString>
		<readString public="1" get="inline" set="null" line="833">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"readString is deprecated, use getString instead"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</readString>
		<toString public="1" set="method" line="838"><f a=""><c path="String"/></f></toString>
		<toHex public="1" set="method" line="843"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="859">
			<f a=""><t path="haxe.io.BytesData"/></f>
			<meta><m n=":has_untyped"/></meta>
		</getData>
		<new set="method" line="679">
			<f a="data">
				<t path="haxe.io.BytesData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta><m n=":autoBuild"><e>lime._internal.macros.AssetsMacro.embedBytes()</e></m></meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/usr/local/lib/haxe/std/haxe/io/BytesData.hx"><c path="js.lib.ArrayBuffer"/></typedef>
	<enum path="haxe.io.Encoding" params="" file="/usr/local/lib/haxe/std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.io.Error" params="" file="/usr/local/lib/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="haxe.io.Float32ArrayData" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array"><c path="js.lib.Float32Array"/></typedef>
	<abstract path="haxe.io.Float32Array" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/usr/local/lib/haxe/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="43">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="51">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="hxPolyK.Rectangle" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<width><x path="Float"/></width>
	<height><x path="Float"/></height>
</a></typedef>
	<typedef path="hxPolyK.PointK" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<flag><x path="Bool"/></flag>
</a></typedef>
	<typedef path="hxPolyK.Ray" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK"><a>
	<refl><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></refl>
	<norm><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></norm>
	<edge><x path="Float"/></edge>
	<dist><x path="Float"/></dist>
</a></typedef>
	<typedef path="hxPolyK.Edge" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK"><a>
	<point><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></point>
	<norm><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></norm>
	<edge><x path="Float"/></edge>
	<dist><x path="Float"/></dist>
</a></typedef>
	<abstract path="hxPolyK.ArrayPairs" params="T" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK">
		<this><c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c></this>
		<impl><class path="hxPolyK._PolyK.ArrayPairs_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" private="1" module="hxPolyK.PolyK" final="1">
	<_new public="1" set="method" line="68" static="1">
		<f a="arr">
			<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
			<x path="hxPolyK.ArrayPairs"><c path="hxPolyK.ArrayPairs.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="70" static="1">
		<f a="this">
			<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<access get="inline" set="null" line="71" static="1">
		<f a="this:key">
			<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
			<x path="Int"/>
			<a>
				<y><c path="hxPolyK.ArrayPairs.T"/></y>
				<x><c path="hxPolyK.ArrayPairs.T"/></x>
			</a>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</access>
	<reverse public="1" get="inline" set="null" line="75" static="1">
		<f a="this">
			<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
			<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="hxPolyK._PolyK.ArrayPairs_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" private="1" module="hxPolyK.PolyK" final="1">
		<_new public="1" set="method" line="68" static="1">
			<f a="arr">
				<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
				<x path="hxPolyK.ArrayPairs"><c path="hxPolyK.ArrayPairs.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="70" static="1">
			<f a="this">
				<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<access get="inline" set="null" line="71" static="1">
			<f a="this:key">
				<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
				<x path="Int"/>
				<a>
					<y><c path="hxPolyK.ArrayPairs.T"/></y>
					<x><c path="hxPolyK.ArrayPairs.T"/></x>
				</a>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</access>
		<reverse public="1" get="inline" set="null" line="75" static="1">
			<f a="this">
				<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
				<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxPolyK.ArrayTriple" params="T" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK">
		<this><c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c></this>
		<impl><class path="hxPolyK._PolyK.ArrayTriple_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" private="1" module="hxPolyK.PolyK" final="1">
	<_new public="1" set="method" line="86" static="1">
		<f a="arr">
			<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
			<x path="hxPolyK.ArrayTriple"><c path="hxPolyK.ArrayTriple.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="88" static="1">
		<f a="this">
			<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<access get="inline" set="null" line="89" static="1">
		<f a="this:key">
			<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
			<x path="Int"/>
			<a>
				<c><c path="hxPolyK.ArrayTriple.T"/></c>
				<b><c path="hxPolyK.ArrayTriple.T"/></b>
				<a><c path="hxPolyK.ArrayTriple.T"/></a>
			</a>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</access>
	<reverse public="1" get="inline" set="null" line="93" static="1">
		<f a="this">
			<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
			<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
</class></impl>
	</abstract>
	<class path="hxPolyK._PolyK.ArrayTriple_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" private="1" module="hxPolyK.PolyK" final="1">
		<_new public="1" set="method" line="86" static="1">
			<f a="arr">
				<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
				<x path="hxPolyK.ArrayTriple"><c path="hxPolyK.ArrayTriple.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="88" static="1">
			<f a="this">
				<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<access get="inline" set="null" line="89" static="1">
			<f a="this:key">
				<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
				<x path="Int"/>
				<a>
					<c><c path="hxPolyK.ArrayTriple.T"/></c>
					<b><c path="hxPolyK.ArrayTriple.T"/></b>
					<a><c path="hxPolyK.ArrayTriple.T"/></a>
				</a>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</access>
		<reverse public="1" get="inline" set="null" line="93" static="1">
			<f a="this">
				<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
				<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
	</class>
	<class path="hxPolyK.PolyK" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx">
		<small public="1" get="inline" set="null" expr="0.0000000001" line="105" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0000000001</e></m></meta>
		</small>
		<isSimple public="1" get="inline" set="null" line="109" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<x path="Bool"/>
</f></isSimple>
		<isConvex public="1" get="inline" set="null" line="151" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<x path="Bool"/>
</f></isConvex>
		<getArea public="1" get="inline" set="null" line="166" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></getArea>
		<getAABB public="1" get="inline" set="null" line="181" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<t path="hxPolyK.Rectangle"/>
</f></getAABB>
		<reverse public="1" get="inline" set="null" line="195" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
</f></reverse>
		<triangulate public="1" get="inline" set="null" line="201" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
</f></triangulate>
		<containsPoint public="1" set="method" line="262" static="1"><f a="p:px:py">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></containsPoint>
		<slice public="1" set="method" line="305" static="1"><f a="p:ax:ay:bx:by">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><c path="Array"><x path="Float"/></c></c>
</f></slice>
		<raycast public="1" get="inline" set="null" line="396" static="1"><f a="p:x:y:dx:dy:isc">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<t path="hxPolyK.Ray"/>
	<t path="hxPolyK.Ray"/>
</f></raycast>
		<closestEdge public="1" get="inline" set="null" line="432" static="1"><f a="p:x:y:isc">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<t path="hxPolyK.Edge"/>
	<t path="hxPolyK.Edge"/>
</f></closestEdge>
		<pointLineDist get="inline" set="null" line="465" static="1"><f a="p:a:b:edge:isc">
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<x path="Float"/>
	<t path="hxPolyK.Edge"/>
	<x path="Void"/>
</f></pointLineDist>
		<updateISC get="inline" set="null" line="502" static="1"><f a="dx:dy:a1:b1:b2:c:edge:isc">
	<x path="Float"/>
	<x path="Float"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<x path="Float"/>
	<t path="hxPolyK.Ray"/>
	<x path="Void"/>
</f></updateISC>
		<getPoints get="inline" set="null" line="518" static="1"><f a="ps:ind0:ind1">
	<c path="Array"><t path="hxPolyK.PointK"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><t path="hxPolyK.PointK"/></c>
</f></getPoints>
		<firstWithFlag set="method" line="528" static="1"><f a="ps:ind">
	<c path="Array"><t path="hxPolyK.PointK"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></firstWithFlag>
		<pointInTriangle get="inline" set="null" line="536" static="1"><f a="px:py:ax:ay:bx:by:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></pointInTriangle>
		<rayLineIntersection get="inline" set="null" line="555" static="1"><f a="a1:a2:b1:b2:c">
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
</f></rayLineIntersection>
		<getLineIntersection get="inline" set="null" line="574" static="1"><f a="a1:a2:b1:b2">
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
</f></getLineIntersection>
		<inRect get="inline" set="null" line="586" static="1"><f a="a:b:c">
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<x path="Bool"/>
</f></inRect>
		<convex get="inline" set="null" line="597" static="1"><f a="ax:ay:bx:by:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></convex>
		<dist get="inline" set="null" line="602" static="1"><f a="a:b">
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<x path="Float"/>
</f></dist>
		<new public="1" set="method" line="106"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="js.Boot" params="" file="/usr/local/lib/haxe/std/js/Boot.hx">
		<getClass set="method" line="41" static="1">
			<f a="o">
				<x path="Null"><d/></x>
				<x path="Null"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getClass>
		<__string_rec set="method" line="58" static="1">
			<f a="o:s">
				<unknown/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"has_enum"</e></m>
			</meta>
		</__string_rec>
		<__interfLoop set="method" line="143" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<x path="Bool"/>
</f></__interfLoop>
		<__instanceof set="method" line="162" static="1">
			<f a="o:cl">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__instanceof>
		<__downcastCheck set="method" line="206" static="1"><f a="o:cl">
	<d/>
	<x path="Class"><d/></x>
	<x path="Bool"/>
</f></__downcastCheck>
		<__cast set="method" line="214" static="1">
			<f a="o:t">
				<d/>
				<d/>
				<unknown/>
			</f>
			<meta><m n=":ifFeature"><e>"typed_cast"</e></m></meta>
		</__cast>
		<__toStr static="1"><c path="js.lib.Function"/></__toStr>
		<__nativeClassName set="method" line="228" static="1"><f a="o">
	<d/>
	<c path="String"/>
</f></__nativeClassName>
		<__isNativeObj set="method" line="238" static="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></__isNativeObj>
		<__resolveNativeClass set="method" line="243" static="1"><f a="name">
	<c path="String"/>
	<x path="Null"><d/></x>
</f></__resolveNativeClass>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="js.Lib" params="" file="/usr/local/lib/haxe/std/js/Lib.hx">
		<require public="1" get="inline" set="null" line="57" static="1">
			<f a="module">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inserts a `require` expression that loads JavaScript object from
		a module or file specified in the `module` argument.

		This is only supported in environments where `require` function
		is available, such as Node.js or RequireJS.</haxe_doc>
		</require>
		<parseInt public="1" get="accessor" set="null" static="1">
			<f a="string:?radix">
				<c path="String"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Native JavaScript `parseInt` function.

		Its specification is different from `Std.parseInt`, so one
		might want to access the native one.</haxe_doc>
		</parseInt>
		<get_parseInt get="inline" set="null" line="69" static="1"><f a=""><f a="string:?radix">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
</f></f></get_parseInt>
		<nativeThis public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>`nativeThis` is the JavaScript `this`, which is semantically different
		from the Haxe `this`. Use `nativeThis` only when working with external
		JavaScript code.

		In Haxe, `this` is always bound to a class instance.
		In JavaScript, `this` in a function can be bound to an arbitrary
		variable when the function is called using `func.call(thisObj, ...)` or
		`func.apply(thisObj, [...])`.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</haxe_doc>
		</nativeThis>
		<get_nativeThis get="inline" set="null" line="100" static="1"><f a=""><d/></f></get_nativeThis>
		<typeof public="1" get="inline" set="null" line="110" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Call JavaScript `typeof` operator on the `o` value
		and return a string representing the JavaScript type of a value.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof</haxe_doc>
		</typeof>
		<global public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>An alias of the JS "global" object.

		Concretely, it is set as the first defined value in the list of
		`window`, `global`, `self`, and `this` in the top-level of the compiled output.</haxe_doc>
		</global>
		<get_global get="inline" set="null" line="122" static="1">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_global>
		<haxe_doc>Platform-specific JavaScript Library. Provides some platform-specific functions
	for the JavaScript target.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="js.lib.ArrayBuffer" params="" file="/usr/local/lib/haxe/std/js/lib/ArrayBuffer.hx" extern="1">
		<isView public="1" set="method" static="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></isView>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<slice public="1" set="method"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.ArrayBuffer"/>
</f></slice>
		<new public="1" set="method">
			<f a="length">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"ArrayBuffer"</e></m>
		</meta>
	</class>
	<class path="js.lib.ArrayBufferView" params="" file="/usr/local/lib/haxe/std/js/lib/ArrayBufferView.hx" extern="1" interface="1">
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<haxe_doc><![CDATA[`ArrayBufferView` is a helper type representing any of the following JavaScript `TypedArray` types:

	Documentation [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView>]]></haxe_doc>
	</class>
	<class path="js.lib.Uint8Array" params="" file="/usr/local/lib/haxe/std/js/lib/Uint8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8Array"/>
	</f>
	<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8Array` typed array represents an array of 8-bit unsigned integers. The contents
	are initialized to 0. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Uint8Array"</e></m>
		</meta>
	</class>
	<class path="js.lib._ArrayBuffer.ArrayBufferCompat" params="" file="/usr/local/lib/haxe/std/js/lib/ArrayBuffer.hx" private="1" module="js.lib.ArrayBuffer">
		<sliceImpl set="method" line="40" static="1"><f a="begin:?end">
	<x path="Null"><x path="Int"/></x>
	<x path="Int"/>
	<c path="js.lib.ArrayBuffer"/>
</f></sliceImpl>
		<meta>
			<m n=":keep"/>
			<m n=":ifFeature"><e>"js.lib.ArrayBuffer.slice"</e></m>
		</meta>
	</class>
	<class path="js.lib.DataView" params="" file="/usr/local/lib/haxe/std/js/lib/DataView.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<getInt8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt8>
		<getUint8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getUint8>
		<getInt16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt16>
		<getUint16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint16>
		<getInt32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt32>
		<getUint32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint32>
		<getFloat32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat32>
		<getFloat64 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat64>
		<setInt8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt8>
		<setUint8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUint8>
		<setInt16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt16>
		<setUint16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint16>
		<setInt32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt32>
		<setUint32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint32>
		<setFloat32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat32>
		<setFloat64 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat64>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?byteLength">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"DataView"</e></m>
		</meta>
	</class>
	<class path="js.lib.Error" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" extern="1">
		<message public="1"><c path="String"/></message>
		<name public="1"><c path="String"/></name>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="js.lib.EvalError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="js.lib.RangeError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="js.lib.ReferenceError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="js.lib.SyntaxError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="js.lib.TypeError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="js.lib.URIError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<class path="js.lib.Float32Array" params="" file="/usr/local/lib/haxe/std/js/lib/Float32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Float32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float32Array"/>
	</f>
	<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Float"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float32Array` typed array represents an array of 32-bit floating point numbers
	(corresponding to the C float data type) in the platform byte order. If control over byte order is
	needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation)

	Documentation [Float32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Float32Array"</e></m>
		</meta>
	</class>
	<class path="js.lib.Float64Array" params="" file="/usr/local/lib/haxe/std/js/lib/Float64Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 8 in the case of an `Float64Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float64Array"/>
	</f>
	<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float64Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float64Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Float"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float64Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float64Array` typed array represents an array of 64-bit floating point numbers
	(corresponding to the C double data type) in the platform byte order. If control over byte order
	is needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation).

	Documentation [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Float64Array"</e></m></meta>
	</class>
	<class path="js.lib.Function" params="" file="/usr/local/lib/haxe/std/js/lib/Function.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Specifies the number of arguments expected by the function.</haxe_doc>
		</length>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of the function.</haxe_doc>
		</name>
		<apply public="1" set="method">
			<f a="thisArg:argsArray">
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Calls a function and sets its this to the provided value, arguments can be passed as an Array object.</haxe_doc>
		</apply>
		<call public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are.</haxe_doc>
		</call>
		<bind public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Function"/>
			</f>
			<haxe_doc>Creates a new function which, when called, has its this set to the provided value,
		with a given sequence of arguments preceding any provided when the new function was called.</haxe_doc>
		</bind>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source code of the function.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="arg:rest">
				<c path="String"/>
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Function object.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Function"</e></m></meta>
	</class>
	<class path="js.lib.Int16Array" params="" file="/usr/local/lib/haxe/std/js/lib/Int16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Int16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int16Array"/>
	</f>
	<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int16Array` typed array represents an array of twos-complement 16-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int16Array"</e></m></meta>
	</class>
	<class path="js.lib.Int32Array" params="" file="/usr/local/lib/haxe/std/js/lib/Int32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Int32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int32Array"/>
	</f>
	<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int32Array` typed array represents an array of twos-complement 32-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to `0`. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int32Array"</e></m></meta>
	</class>
	<class path="js.lib.Int8Array" params="" file="/usr/local/lib/haxe/std/js/lib/Int8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Int8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int8Array"/>
	</f>
	<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int8Array` typed array represents an array of twos-complement 8-bit signed integers. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int8Array"</e></m></meta>
	</class>
	<typedef path="js.lib.Iterator" params="T" file="/usr/local/lib/haxe/std/js/lib/Iterator.hx">
		<a><next set="method"><f a=""><t path="js.lib.IteratorStep"><c path="js.lib.Iterator.T"/></t></f></next></a>
		<haxe_doc>Native JavaScript iterator structure. To enable haxe for-in iteration, use `js.lib.HaxeIterator`, for example `for (v in new js.lib.HaxeIterator(jsIterator))` or add `using js.lib.HaxeIterator;` to your module

	See [Iteration Protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)</haxe_doc>
	</typedef>
	<typedef path="js.lib.AsyncIterator" params="T" file="/usr/local/lib/haxe/std/js/lib/Iterator.hx" module="js.lib.Iterator">
		<a><next set="method"><f a=""><c path="js.lib.Promise"><t path="js.lib.IteratorStep"><c path="js.lib.AsyncIterator.T"/></t></c></f></next></a>
		<haxe_doc>Native JavaScript async iterator structure. 

	See [for await...of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of)</haxe_doc>
	</typedef>
	<typedef path="js.lib.IteratorStep" params="T" file="/usr/local/lib/haxe/std/js/lib/Iterator.hx" module="js.lib.Iterator"><a>
	<value>
		<x path="Null"><c path="js.lib.IteratorStep.T"/></x>
		<meta><m n=":optional"/></meta>
	</value>
	<done><x path="Bool"/></done>
</a></typedef>
	<abstract path="js.lib.KeyValue" params="K:V" file="/usr/local/lib/haxe/std/js/lib/KeyValue.hx">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper.</haxe_doc>
		<impl><class path="js.lib._KeyValue.KeyValue_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/KeyValue.hx" private="1" module="js.lib.KeyValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.Object" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" extern="1">
		<assign public="1" params="T" set="method" static="1">
			<f a="target:sources">
				<c path="assign.T"/>
				<x path="haxe.extern.Rest"><a/></x>
				<c path="assign.T"/>
			</f>
			<haxe_doc>Copies the values of all enumerable own properties from one or more
		source objects to a target object.</haxe_doc>
		</assign>
		<create public="1" params="T" set="method" static="1">
			<f a="proto:?propertiesObject">
				<a/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="create.T"/>
			</f>
			<haxe_doc>Creates a new object with the specified prototype object and properties.</haxe_doc>
		</create>
		<defineProperties public="1" params="T" set="method" static="1">
			<f a="obj:props">
				<c path="defineProperties.T"/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="defineProperties.T"/>
			</f>
			<haxe_doc>Adds the named properties described by the given descriptors to an object.</haxe_doc>
		</defineProperties>
		<defineProperty public="1" params="T" set="method" static="1">
			<f a="obj:prop:descriptor">
				<c path="defineProperty.T"/>
				<c path="String"/>
				<t path="js.lib.ObjectPropertyDescriptor"/>
				<c path="defineProperty.T"/>
			</f>
			<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
			<overloads><defineProperty public="1" params="T" set="method">
	<f a="obj:prop:descriptor">
		<c path="defineProperty.T"/>
		<c path="js.lib.Symbol"/>
		<t path="js.lib.ObjectPropertyDescriptor"/>
		<c path="defineProperty.T"/>
	</f>
	<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
</defineProperty></overloads>
		</defineProperty>
		<entries public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="js.lib.ObjectEntry"/></c>
			</f>
			<haxe_doc>Returns an array containing all of the [key, value] pairs of a given
		object's own enumerable string properties.</haxe_doc>
		</entries>
		<freeze public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="freeze.T"/>
				<c path="freeze.T"/>
			</f>
			<haxe_doc>Freezes an object: other code can't delete or change any properties.</haxe_doc>
		</freeze>
		<fromEntries public="1" params="T" set="method" static="1">
			<f a="iterable">
				<x path="Any"/>
				<c path="fromEntries.T"/>
			</f>
			<haxe_doc>Returns a new object from an iterable of key-value pairs
		(reverses Object.entries).</haxe_doc>
		</fromEntries>
		<getOwnPropertyDescriptor public="1" set="method" static="1">
			<f a="obj:prop">
				<a/>
				<c path="String"/>
				<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
			</f>
			<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
			<overloads>
				<getOwnPropertyDescriptor public="1" params="T" set="method">
					<f a="target:propertyKey">
						<c path="Array"><c path="getOwnPropertyDescriptor.T"/></c>
						<x path="Int"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
					</f>
					<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
				</getOwnPropertyDescriptor>
				<getOwnPropertyDescriptor public="1" set="method">
					<f a="obj:prop">
						<a/>
						<c path="js.lib.Symbol"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
					</f>
					<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
				</getOwnPropertyDescriptor>
			</overloads>
		</getOwnPropertyDescriptor>
		<getOwnPropertyNames public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable and non-enumerable properties.</haxe_doc>
		</getOwnPropertyNames>
		<getOwnPropertySymbols public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="js.lib.Symbol"/></c>
			</f>
			<haxe_doc>Returns an array of all symbol properties found directly upon a given object.</haxe_doc>
		</getOwnPropertySymbols>
		<getPrototypeOf public="1" params="TProto" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Null"><c path="getPrototypeOf.TProto"/></x>
			</f>
			<haxe_doc>Returns the prototype of the specified object.</haxe_doc>
		</getPrototypeOf>
		<is public="1" params="T" set="method" static="1">
			<f a="value1:value2">
				<c path="is.T"/>
				<c path="is.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares if two values are the same value. Equates all NaN values
		(which differs from both Abstract Equality Comparison and
		Strict Equality Comparison).</haxe_doc>
		</is>
		<isExtensible public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if extending of an object is allowed.</haxe_doc>
		</isExtensible>
		<isFrozen public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object was frozen.</haxe_doc>
		</isFrozen>
		<isSealed public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object is sealed.</haxe_doc>
		</isSealed>
		<keys public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable string properties.</haxe_doc>
		</keys>
		<preventExtensions public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="preventExtensions.T"/>
				<c path="preventExtensions.T"/>
			</f>
			<haxe_doc>Prevents any extensions of an object.</haxe_doc>
		</preventExtensions>
		<seal public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="seal.T"/>
				<c path="seal.T"/>
			</f>
			<haxe_doc>Prevents other code from deleting properties of an object.</haxe_doc>
		</seal>
		<setPrototypeOf public="1" params="T" set="method" static="1">
			<f a="obj:prototype">
				<c path="setPrototypeOf.T"/>
				<x path="Null"><a/></x>
				<c path="setPrototypeOf.T"/>
			</f>
			<haxe_doc>Sets the prototype (i.e., the internal Prototype property).</haxe_doc>
		</setPrototypeOf>
		<values public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="Any"/></c>
			</f>
			<haxe_doc>Returns an array containing the values that correspond to all of
		a given object's own enumerable string properties.</haxe_doc>
		</values>
		<prototype public="1" set="null" static="1">
			<t path="js.lib.ObjectPrototype"/>
			<haxe_doc>Allows the addition of properties to all objects of type Object.</haxe_doc>
		</prototype>
		<new public="1" set="method">
			<f a="?value">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The Object constructor creates an object wrapper.</haxe_doc>
		</new>
		<haxe_doc>The `js.lib.Object` constructor creates an object wrapper.

	Documentation [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Object"</e></m>
		</meta>
	</class>
	<typedef path="js.lib.ObjectPrototype" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<valueOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns the primitive value of the specified object.</haxe_doc>
			</valueOf>
			<toString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a string representation of the object.</haxe_doc>
			</toString>
			<toLocaleString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Calls `toString()`.</haxe_doc>
			</toLocaleString>
			<propertyIsEnumerable set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating if the internal enumerable attribute is set.</haxe_doc>
			</propertyIsEnumerable>
			<isPrototypeOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether the object this method is called
		upon is in the prototype chain of the specified object.</haxe_doc>
			</isPrototypeOf>
			<hasOwnProperty set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether an object contains the specified
		property as a direct property of that object and not inherited through
		the prototype chain.</haxe_doc>
			</hasOwnProperty>
		</a>
		<haxe_doc><![CDATA[Type for
	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object>]]></haxe_doc>
	</typedef>
	<typedef path="js.lib.ObjectPropertyDescriptor" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<writable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the value associated with the property may be
		changed with an assignment operator.

		Defaults to `false`.</haxe_doc>
			</writable>
			<value>
				<x path="Null"><x path="Any"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The value associated with the property.
		Can be any valid JavaScript value (number, object, function, etc).</haxe_doc>
			</value>
			<set>
				<x path="Null"><f a="">
	<x path="Any"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a setter for the property, or undefined if
		there is no setter. When the property is assigned to, this function
		is called with one argument (the value being assigned to the property)
		and with `this` set to the object through which the property is assigned.</haxe_doc>
			</set>
			<get>
				<x path="Null"><f a=""><x path="Any"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a getter for the property, or `undefined` if
		there is no getter. When the property is accessed, this function is
		called without arguments and with `this` set to the object through which
		the property is accessed (this may not be the object on which the
		property is defined due to inheritance).
		The return value will be used as the value of the property.</haxe_doc>
			</get>
			<enumerable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if this property shows up during enumeration of the
		properties on the corresponding object.

		Defaults to `false`.</haxe_doc>
			</enumerable>
			<configurable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the type of this property descriptor may be
		changed and if the property may be deleted from the corresponding object.

		Defaults to `false`.</haxe_doc>
			</configurable>
		</a>
		<haxe_doc><![CDATA[@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty>]]></haxe_doc>
	</typedef>
	<abstract path="js.lib.ObjectEntry" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper for `js.lib.Object.entries()`.</haxe_doc>
		<impl><class path="js.lib._Object.ObjectEntry_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" private="1" module="js.lib.Object" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.Promise" params="T" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" extern="1">
		<resolve public="1" params="T" set="method" static="1">
			<f a="thenable">
				<x path="js.lib.Thenable"><c path="resolve.T"/></x>
				<c path="js.lib.Promise"><c path="resolve.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
			<overloads><resolve public="1" params="T" set="method">
	<f a="?value">
		<c path="resolve.T"/>
		<c path="js.lib.Promise"><c path="resolve.T"/></c>
	</f>
	<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
</resolve></overloads>
		</resolve>
		<reject public="1" params="T" set="method" static="1">
			<f a="?reason">
				<d/>
				<c path="js.lib.Promise"><c path="reject.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is rejected with the given reason.</haxe_doc>
		</reject>
		<all public="1" set="method" static="1">
			<f a="iterable">
				<c path="Array"><d/></c>
				<c path="js.lib.Promise"><c path="Array"><d/></c></c>
			</f>
			<haxe_doc>Returns a promise that either fulfills when all of the promises in the
		iterable argument have fulfilled or rejects as soon as one of the
		promises in the iterable argument rejects. If the returned promise
		fulfills, it is fulfilled with an array of the values from the
		fulfilled promises in the same order as defined in the iterable.
		If the returned promise rejects, it is rejected with the reason from
		the first promise in the iterable that rejected. This method can be
		useful for aggregating results of multiple promises.</haxe_doc>
		</all>
		<race public="1" set="method" static="1">
			<f a="iterable">
				<c path="Array"><d/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a promise that fulfills or rejects as soon as one of the
		promises in the iterable fulfills or rejects, with the value or reason
		from that promise.</haxe_doc>
		</race>
		<then public="1" params="TOut" set="method">
			<f a="onFulfilled:?onRejected">
				<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.Promise.T"/>
	<c path="then.TOut"/>
</x></x>
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="then.TOut"/>
				</x>
				<c path="js.lib.Promise"><c path="then.TOut"/></c>
			</f>
			<haxe_doc>Appends fulfillment and rejection handlers to the promise and returns a
		new promise resolving to the return value of the called handler, or to
		its original settled value if the promise was not handled
		(i.e. if the relevant handler onFulfilled or onRejected is not a function).</haxe_doc>
		</then>
		<catchError public="1" set="method">
			<f a="onRejected">
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="js.lib.Promise.T"/>
				</x>
				<c path="js.lib.Promise"><c path="js.lib.Promise.T"/></c>
			</f>
			<meta><m n=":native"><e>"catch"</e></m></meta>
			<haxe_doc>Appends a rejection handler callback to the promise, and returns a new
		promise resolving to the return value of the callback if it is called,
		or to its original fulfillment value if the promise is instead fulfilled.</haxe_doc>
			<overloads><catch public="1" params="TOut" set="method">
	<f a="onRejected">
		<x path="js.lib.PromiseHandler">
			<d/>
			<c path="catchError.TOut"/>
		</x>
		<c path="js.lib.Promise"><x path="haxe.extern.EitherType">
	<c path="js.lib.Promise.T"/>
	<c path="catchError.TOut"/>
</x></c>
	</f>
	<meta><m n=":native"><e>"catch"</e></m></meta>
	<haxe_doc>Appends a rejection handler callback to the promise, and returns a new
		promise resolving to the return value of the callback if it is called,
		or to its original fulfillment value if the promise is instead fulfilled.</haxe_doc>
</catch></overloads>
		</catchError>
		<finally public="1" set="method">
			<f a="onFinally">
				<f a=""><x path="Void"/></f>
				<c path="js.lib.Promise"><c path="js.lib.Promise.T"/></c>
			</f>
			<haxe_doc>Returns a Promise. When the promise is settled, i.e either fulfilled or rejected,
		the specified callback function is executed. This provides a way for code to be run
		whether the promise was fulfilled successfully or rejected once the Promise has been dealt with.</haxe_doc>
		</finally>
		<new public="1" set="method">
			<f a="init">
				<f a="resolve:reject">
					<f a="value">
						<c path="js.lib.Promise.T"/>
						<x path="Void"/>
					</f>
					<f a="reason">
						<d/>
						<x path="Void"/>
					</f>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc>The Promise object represents the eventual completion (or failure) of an
	asynchronous operation and its resulting value.

	Documentation [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Promise"</e></m></meta>
	</class>
	<abstract path="js.lib.PromiseHandler" params="T:TOut" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.Promise"><c path="js.lib.PromiseHandler.TOut"/></c>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<x path="js.lib.Thenable"><c path="js.lib.PromiseHandler.TOut"/></x>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.PromiseHandler.TOut"/>
</f></icast>
		</from>
		<this><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<d/>
</f></this>
		<haxe_doc>Handler type for the Promise object.</haxe_doc>
		<impl><class path="js.lib._Promise.PromiseHandler_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="js.lib.Thenable" params="T" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from><icast><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></icast></from>
		<this><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></this>
		<haxe_doc>A value with a `then` method.</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="js.lib._Promise.Thenable_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="js.lib.ThenableStruct" params="T" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" module="js.lib.Promise"><a><then params="TOut" set="method"><f a="onFulfilled:?onRejected">
	<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.ThenableStruct.T"/>
	<c path="then.TOut"/>
</x></x>
	<x path="js.lib.PromiseHandler">
		<d/>
		<c path="then.TOut"/>
	</x>
	<x path="js.lib.Thenable"><c path="then.TOut"/></x>
</f></then></a></typedef>
	<class path="js.lib.RegExpMatch" params="" file="/usr/local/lib/haxe/std/js/lib/RegExp.hx" module="js.lib.RegExp" extern="1">
		<extends path="Array"><c path="String"/></extends>
		<index public="1">
			<x path="Int"/>
			<haxe_doc>The index of the search at which the result was found.</haxe_doc>
		</index>
		<input public="1">
			<c path="String"/>
			<haxe_doc>A copy of the search string.</haxe_doc>
		</input>
		<groups public="1">
			<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
			<haxe_doc>Named capturing groups or undefined if no named capturing groups were defined.
		See [Groups and Ranges](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges) for more information.

		Note: Not all browsers support this feature; refer to the [compatibility table](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Browser_compatibility).</haxe_doc>
		</groups>
		<haxe_doc>A return value of the `RegExp.exec` method.</haxe_doc>
	</class>
	<class path="js.lib.Symbol" params="" file="/usr/local/lib/haxe/std/js/lib/Symbol.hx" extern="1">
		<for_ public="1" set="method" static="1">
			<f a="key">
				<c path="String"/>
				<c path="js.lib.Symbol"/>
			</f>
			<meta><m n=":native"><e>"for"</e></m></meta>
			<haxe_doc>Searches for existing symbols with the given key and returns it if found.
		Otherwise a new symbol gets created in the global symbol registry with this key.</haxe_doc>
		</for_>
		<keyFor public="1" set="method" static="1">
			<f a="sym">
				<c path="js.lib.Symbol"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<haxe_doc>Retrieves a shared symbol key from the global symbol registry for the given symbol.</haxe_doc>
		</keyFor>
		<iterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method returning the default iterator for an object.</haxe_doc>
		</iterator>
		<asyncIterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method that returns the default AsyncIterator for an object.</haxe_doc>
		</asyncIterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string containing the description of the Symbol.</haxe_doc>
		</toString>
		<ofObject public="1" params="T" get="inline" set="null" line="66">
			<f a="object">
				<a/>
				<x path="Null"><c path="ofObject.T"/></x>
			</f>
			<haxe_doc>Retrieve symbol from a given `object`.

		NOTE: This is a Haxe-specific method that generates an `object[symbol]` expression.</haxe_doc>
		</ofObject>
		<new public="1" set="method">
			<f a="?description">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
			<haxe_doc>To create a new primitive symbol, use `new Symbol()` with an optional string as its `description`.

		NOTE: Unlike in plain JavaScript, `new Symbol()` syntax is used in Haxe. This generates a `Symbol(...)`
		expression as required by the JavaScript specification.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Symbol"</e></m></meta>
	</class>
	<class path="js.lib.Uint16Array" params="" file="/usr/local/lib/haxe/std/js/lib/Uint16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Uint16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint16Array"/>
	</f>
	<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint16Array` typed array represents an array of 16-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint16Array"</e></m></meta>
	</class>
	<class path="js.lib.Uint32Array" params="" file="/usr/local/lib/haxe/std/js/lib/Uint32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Uint32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint32Array"/>
	</f>
	<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint32Array` typed array represents an array of 32-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint32Array"</e></m></meta>
	</class>
	<class path="js.lib.Uint8ClampedArray" params="" file="/usr/local/lib/haxe/std/js/lib/Uint8ClampedArray.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8ClampedArray`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8ClampedArray"/>
	</f>
	<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8ClampedArray` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8ClampedArray`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8ClampedArray"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8ClampedArray` typed array represents an array of 8-bit unsigned integers clamped
	to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead;
	if you specify a non-integer, the nearest integer will be set. The contents are initialized to `0`.
	Once established, you can reference elements in the array using the object's methods, or using
	standard array index syntax (that is, using bracket notation).

	Documentation [Uint8ClampedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint8ClampedArray"</e></m></meta>
	</class>
	<abstract path="js.lib.intl.LocaleMatcher" params="" file="/usr/local/lib/haxe/std/js/lib/intl/LocaleMatcher.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._LocaleMatcher.LocaleMatcher_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/LocaleMatcher.hx" private="1" module="js.lib.intl.LocaleMatcher" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.lib.intl.NumberFormat" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" extern="1">
		<supportedLocalesOf public="1" set="method" static="1">
			<f a="locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
			<overloads><supportedLocalesOf public="1" set="method">
	<f a="locales:?options">
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/></x>
		<c path="Array"><c path="String"/></c>
	</f>
	<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
</supportedLocalesOf></overloads>
		</supportedLocalesOf>
		<format public="1" set="method">
			<f a="number">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<haxe_doc>Getter function that formats a number according to the locale
		and formatting options of this `NumberFormat` object.</haxe_doc>
		</format>
		<formatToParts public="1" set="method">
			<f a="?number">
				<x path="Float"/>
				<c path="Array"><t path="js.lib.intl.NumberFormatPart"/></c>
			</f>
			<haxe_doc>Returns an `Array` of objects representing the number string in parts
		that can be used for custom locale-aware formatting.</haxe_doc>
		</formatToParts>
		<resolvedOptions public="1" set="method">
			<f a=""><t path="js.lib.intl.NumberFormatResolvedOption"/></f>
			<haxe_doc>Returns a new object with properties reflecting the locale and collation options
		computed during initialization of the object.</haxe_doc>
		</resolvedOptions>
		<new public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="?locales:?options">
	<c path="Array"><c path="String"/></c>
	<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<haxe_doc>The `NumberFormat` object is a constructor for objects that enable language sensitive number formatting.

	Documentation [NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Intl.NumberFormat"</e></m></meta>
	</class>
	<typedef path="js.lib.intl.NumberFormatOptions" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.
		The default is `true`.</haxe_doc>
	</useGrouping>
	<style>
		<x path="Null"><x path="js.lib.intl.NumberFormatStyle"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The formatting style to use.
		The default is `Decimal`.</haxe_doc>
	</style>
	<minimumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of significant digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumSignificantDigits>
	<minimumIntegerDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of integer digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumIntegerDigits>
	<minimumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number and percent formatting is 0;
		the default for currency formatting is the number of minor unit digits provided by the
		[ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information).</haxe_doc>
	</minimumFractionDigits>
	<maximumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of significant digits to use.
		Possible values are from 1 to 21; the default is 21.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number formatting is the larger of
		minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits
		and the number of minor unit digits provided by the [ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information); the default for percent formatting is the larger of
		minimumFractionDigits and 0.</haxe_doc>
	</maximumFractionDigits>
	<localeMatcher>
		<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.
		For information about this option, see the [Intl page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).</haxe_doc>
	</localeMatcher>
	<currencyDisplay>
		<x path="Null"><x path="js.lib.intl.CurrencyDisplay"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>How to display the currency in currency formatting.
		The default is `Symbol`.</haxe_doc>
	</currencyDisplay>
	<currency>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc><![CDATA[The currency to use in currency formatting. Possible values are the ISO 4217 currency codes,
		such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB — see the
		[Current currency & funds code list](https://www.currency-iso.org/en/home/tables/table-a1.html).
		There is no default value; if the style is "currency", the currency property must be provided.]]></haxe_doc>
	</currency>
</a></typedef>
	<typedef path="js.lib.intl.NumberFormatResolvedOption" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.</haxe_doc>
	</useGrouping>
	<style final="1" set="null"><x path="js.lib.intl.NumberFormatStyle"/></style>
	<numberingSystem final="1" set="null">
		<c path="String"/>
		<haxe_doc>The value requested using the Unicode extension key `"nu"` or filled in as a default.</haxe_doc>
	</numberingSystem>
	<minimumSignificantDigits final="1" set="null"><x path="Int"/></minimumSignificantDigits>
	<minimumIntegerDigits final="1" set="null"><x path="Int"/></minimumIntegerDigits>
	<minimumFractionDigits final="1" set="null"><x path="Int"/></minimumFractionDigits>
	<maximumSignificantDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if at least one of them was provided in the `options` argument.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if neither m`inimumSignificantDigits` nor `maximumSignificantDigits`
		was provided in the `options` argument.</haxe_doc>
	</maximumFractionDigits>
	<locale final="1" set="null">
		<c path="String"/>
		<haxe_doc>The BCP 47 language tag for the locale actually used. If any Unicode extension values were
		requested in the input BCP 47 language tag that led to this locale, the key-value pairs that
		were requested and are supported for this locale are included in `locale`.</haxe_doc>
	</locale>
	<currencyDisplay final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are only present if `style` is `"currency"`.</haxe_doc>
	</currencyDisplay>
	<currency final="1" set="null"><c path="String"/></currency>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatStyle" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatStyle_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.lib.intl.CurrencyDisplay" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.CurrencyDisplay_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatPart" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<value final="1" set="null"><c path="String"/></value>
	<type final="1" set="null"><x path="js.lib.intl.NumberFormatPartType"/></type>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatPartType" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatPartType_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatSupportedLocalesOfOptions" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a><localeMatcher>
	<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.</haxe_doc>
</localeMatcher></a></typedef>
	<class path="justPath.IPathContext" params="" file="/usr/local/lib/haxeLibrary/justPath/git/justPath/IPathContext.hx" interface="1">
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" set="method"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" set="method"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
	</class>
	<class path="org.poly2tri.AdvancingFront" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/AdvancingFront.hx">
		<head public="1"><c path="org.poly2tri.Node"/></head>
		<tail public="1"><c path="org.poly2tri.Node"/></tail>
		<search_node public="1"><c path="org.poly2tri.Node"/></search_node>
		<locateNode public="1" set="method" line="15"><f a="x">
	<x path="Float"/>
	<c path="org.poly2tri.Node"/>
</f></locateNode>
		<locatePoint public="1" set="method" line="45"><f a="point">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Node"/>
</f></locatePoint>
		<new public="1" set="method" line="9"><f a="head:tail">
	<c path="org.poly2tri.Node"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Basin" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Basin.hx">
		<left_node public="1"><c path="org.poly2tri.Node"/></left_node>
		<bottom_node public="1"><c path="org.poly2tri.Node"/></bottom_node>
		<right_node public="1"><c path="org.poly2tri.Node"/></right_node>
		<width public="1"><x path="Float"/></width>
		<left_highest public="1"><x path="Bool"/></left_highest>
		<clear public="1" set="method" line="17"><f a=""><x path="Void"/></f></clear>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Constants" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Constants.hx">
		<kAlpha public="1" expr="0.3" line="8" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.3</e></m></meta>
		</kAlpha>
		<EPSILON public="1" expr="1e-12" line="9" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1e-12</e></m></meta>
		</EPSILON>
		<PI_2 public="1" expr="Math.PI / 2" line="10" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>Math.PI / 2</e></m></meta>
		</PI_2>
		<PI_3div4 public="1" expr="3 * Math.PI / 4" line="11" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>3 * Math.PI / 4</e></m></meta>
		</PI_3div4>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Edge" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Edge.hx">
		<p public="1"><c path="org.poly2tri.Point"/></p>
		<q public="1"><c path="org.poly2tri.Point"/></q>
		<toString public="1" set="method" line="42"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="8"><f a="p1:p2">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.EdgeEvent" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/EdgeEvent.hx">
		<constrained_edge public="1"><c path="org.poly2tri.Edge"/></constrained_edge>
		<right public="1"><x path="Bool"/></right>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Node" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Node.hx">
		<point public="1"><c path="org.poly2tri.Point"/></point>
		<triangle public="1"><c path="org.poly2tri.Triangle"/></triangle>
		<prev public="1"><c path="org.poly2tri.Node"/></prev>
		<next public="1"><c path="org.poly2tri.Node"/></next>
		<value public="1"><x path="Float"/></value>
		<getHoleAngle public="1" set="method" line="26">
			<f a=""><x path="Float"/></f>
			<haxe_doc>*
	 * @param node - middle node
	 * @return the angle between 3 front nodes</haxe_doc>
		</getHoleAngle>
		<getBasinAngle public="1" set="method" line="46"><f a=""><x path="Float"/></f></getBasinAngle>
		<new public="1" set="method" line="13">
			<f a="?point:?triangle" v="null:null">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Triangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ triangle : null, point : null }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Orientation" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Orientation.hx">
		<CW public="1" get="inline" set="null" expr="1" line="5" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</CW>
		<CCW public="1" get="inline" set="null" expr="-1" line="6" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</CCW>
		<COLLINEAR public="1" get="inline" set="null" expr="0" line="7" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</COLLINEAR>
		<orient2d public="1" set="method" line="9" static="1"><f a="pa:pb:pc">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Int"/>
</f></orient2d>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Point" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Point.hx">
		<sortPoints public="1" set="method" line="41" static="1"><f a="points">
	<c path="Array"><c path="org.poly2tri.Point"/></c>
	<x path="Void"/>
</f></sortPoints>
		<cmpPoints public="1" set="method" line="46" static="1"><f a="l:r">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Int"/>
</f></cmpPoints>
		<C_ID public="1" expr="0" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</C_ID>
		<id public="1"><x path="Int"/></id>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<edge_list public="1" get="accessor" set="null"><c path="Array"><c path="org.poly2tri.Edge"/></c></edge_list>
		<get_edge_list set="method" line="28"><f a=""><c path="Array"><c path="org.poly2tri.Edge"/></c></f></get_edge_list>
		<equals public="1" set="method" line="36"><f a="that">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="55"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="17"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Sweep" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Sweep.hx">
		<nextFlipPoint public="1" set="method" line="598" static="1"><f a="ep:eq:ot:op">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
</f></nextFlipPoint>
		<context><c path="org.poly2tri.SweepContext"/></context>
		<triangulate public="1" set="method" line="12"><f a=""><x path="Void"/></f></triangulate>
		<sweepPoints public="1" set="method" line="20"><f a=""><x path="Void"/></f></sweepPoints>
		<finalizationPolygon public="1" set="method" line="35"><f a=""><x path="Void"/></f></finalizationPolygon>
		<pointEvent public="1" set="method" line="51">
			<f a="point">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Node"/>
			</f>
			<haxe_doc>* Find closes node to the left of the new point and
	 * create a new triangle. If needed new holes and basins
	 * will be filled to.</haxe_doc>
		</pointEvent>
		<edgeEventByEdge public="1" set="method" line="66"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></edgeEventByEdge>
		<edgeEventByPoints public="1" set="method" line="81"><f a="ep:eq:triangle:point">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<x path="Void"/>
</f></edgeEventByPoints>
		<newFrontTriangle public="1" set="method" line="112"><f a="point:node">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Node"/>
	<c path="org.poly2tri.Node"/>
</f></newFrontTriangle>
		<fill public="1" set="method" line="139">
			<f a="node">
				<c path="org.poly2tri.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds a triangle to the advancing front to fill a hole.
	 * @param tcx
	 * @param node - middle node, that is the bottom of the hole</haxe_doc>
		</fill>
		<fillAdvancingFront public="1" set="method" line="166">
			<f a="n">
				<c path="org.poly2tri.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fills holes in the Advancing Front</haxe_doc>
		</fillAdvancingFront>
		<legalize public="1" set="method" line="203">
			<f a="t">
				<c path="org.poly2tri.Triangle"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if triangle was legalized</haxe_doc>
		</legalize>
		<fillBasin public="1" set="method" line="273">
			<f a="node">
				<c path="org.poly2tri.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Fills a basin that has formed on the Advancing Front to the right
	 * of given node.<br>
	 * First we decide a left,bottom and right node that forms the
	 * boundaries of the basin. Then we do a reqursive fill.
	 *
	 * @param tcx
	 * @param node - starting node, this or next node will be left node]]></haxe_doc>
		</fillBasin>
		<fillBasinReq public="1" set="method" line="311">
			<f a="node">
				<c path="org.poly2tri.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Recursive algorithm to fill a Basin with triangles
	 *
	 * @param tcx
	 * @param node - bottom_node</haxe_doc>
		</fillBasinReq>
		<isShallow public="1" set="method" line="345"><f a="node">
	<c path="org.poly2tri.Node"/>
	<x path="Bool"/>
</f></isShallow>
		<fillEdgeEvent public="1" set="method" line="356"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillEdgeEvent>
		<fillRightAboveEdgeEvent public="1" set="method" line="368"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillRightAboveEdgeEvent>
		<fillRightBelowEdgeEvent public="1" set="method" line="384"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillRightBelowEdgeEvent>
		<fillRightConcaveEdgeEvent public="1" set="method" line="399"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillRightConcaveEdgeEvent>
		<fillRightConvexEdgeEvent public="1" set="method" line="421"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillRightConvexEdgeEvent>
		<fillLeftAboveEdgeEvent public="1" set="method" line="445"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillLeftAboveEdgeEvent>
		<fillLeftBelowEdgeEvent public="1" set="method" line="461"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillLeftBelowEdgeEvent>
		<fillLeftConvexEdgeEvent public="1" set="method" line="480"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillLeftConvexEdgeEvent>
		<fillLeftConcaveEdgeEvent public="1" set="method" line="504"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillLeftConcaveEdgeEvent>
		<flipEdgeEvent public="1" set="method" line="528"><f a="ep:eq:t:p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<x path="Void"/>
</f></flipEdgeEvent>
		<nextFlipTriangle public="1" set="method" line="577"><f a="o:t:ot:p:op">
	<x path="Int"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
</f></nextFlipTriangle>
		<flipScanEdgeEvent public="1" set="method" line="617"><f a="ep:eq:flip_triangle:t:p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<x path="Void"/>
</f></flipScanEdgeEvent>
		<new public="1" set="method" line="7"><f a="context">
	<c path="org.poly2tri.SweepContext"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.SweepContext" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/SweepContext.hx">
		<triangles public="1"><c path="Array"><c path="org.poly2tri.Triangle"/></c></triangles>
		<points public="1"><c path="Array"><c path="org.poly2tri.Point"/></c></points>
		<edge_list public="1"><c path="Array"><c path="org.poly2tri.Edge"/></c></edge_list>
		<map public="1"><t path="Map">
	<c path="String"/>
	<c path="org.poly2tri.Triangle"/>
</t></map>
		<front public="1"><c path="org.poly2tri.AdvancingFront"/></front>
		<head public="1"><c path="org.poly2tri.Point"/></head>
		<tail public="1"><c path="org.poly2tri.Point"/></tail>
		<basin public="1"><c path="org.poly2tri.Basin"/></basin>
		<edge_event public="1"><c path="org.poly2tri.EdgeEvent"/></edge_event>
		<addPoints set="method" line="42"><f a="points">
	<c path="Array"><c path="org.poly2tri.Point"/></c>
	<x path="Void"/>
</f></addPoints>
		<addPolyline public="1" set="method" line="53"><f a="polyline">
	<c path="Array"><c path="org.poly2tri.Point"/></c>
	<x path="Void"/>
</f></addPolyline>
		<initEdges set="method" line="62"><f a="polyline">
	<c path="Array"><c path="org.poly2tri.Point"/></c>
	<x path="Void"/>
</f></initEdges>
		<addToMap public="1" set="method" line="75"><f a="triangle">
	<c path="org.poly2tri.Triangle"/>
	<x path="Void"/>
</f></addToMap>
		<initTriangulation public="1" set="method" line="81"><f a=""><x path="Void"/></f></initTriangulation>
		<locateNode public="1" set="method" line="110"><f a="point">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Node"/>
</f></locateNode>
		<createAdvancingFront public="1" set="method" line="115"><f a=""><x path="Void"/></f></createAdvancingFront>
		<removeNode public="1" set="method" line="135"><f a="node">
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></removeNode>
		<mapTriangleToNodes public="1" set="method" line="140"><f a="triangle">
	<c path="org.poly2tri.Triangle"/>
	<x path="Void"/>
</f></mapTriangleToNodes>
		<meshClean public="1" set="method" line="152"><f a="t">
	<c path="org.poly2tri.Triangle"/>
	<x path="Void"/>
</f></meshClean>
		<new public="1" set="method" line="24"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Triangle" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Triangle.hx">
		<CW_OFFSET get="inline" set="null" expr="1" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
			<haxe_doc>* Return the point clockwise to the given point.
	 * Return the point counter-clockwise to the given point.
	 *
	 * Return the neighbor clockwise to given point.
	 * Return the neighbor counter-clockwise to given point.</haxe_doc>
		</CW_OFFSET>
		<CCW_OFFSET get="inline" set="null" expr="-1" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</CCW_OFFSET>
		<rotateTrianglePair public="1" set="method" line="331" static="1">
			<f a="t:p:ot:op">
				<c path="org.poly2tri.Triangle"/>
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Triangle"/>
				<c path="org.poly2tri.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Rotates a triangle pair one vertex CW
	 *<pre>
	 *       n2                    n2
	 *  P +-----+             P +-----+
	 *    | t  /|               |\  t |
	 *    |   / |               | \   |
	 *  n1|  /  |n3           n1|  \  |n3
	 *    | /   |    after CW   |   \ |
	 *    |/ oT |               | oT \|
	 *    +-----+ oP            +-----+
	 *       n4                    n4
	 * </pre>]]></haxe_doc>
		</rotateTrianglePair>
		<points public="1"><c path="Array"><c path="org.poly2tri.Point"/></c></points>
		<neighbors public="1"><c path="Array"><c path="org.poly2tri.Triangle"/></c></neighbors>
		<interior public="1"><x path="Bool"/></interior>
		<constrained_edge public="1"><c path="Array"><x path="Bool"/></c></constrained_edge>
		<delaunay_edge public="1"><c path="Array"><x path="Bool"/></c></delaunay_edge>
		<containsPoint public="1" set="method" line="52">
			<f a="point">
				<c path="org.poly2tri.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Test if this Triangle contains the Point object given as parameter as its vertices.
	 *
	 * @return <code>True</code> if the Point objects are of the Triangle's vertices,
	 *         <code>false</code> otherwise.]]></haxe_doc>
		</containsPoint>
		<containsEdgePoints public="1" set="method" line="57"><f a="p1:p2">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></containsEdgePoints>
		<markNeighbor public="1" set="method" line="72">
			<f a="t:p1:p2">
				<c path="org.poly2tri.Triangle"/>
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Update neighbor pointers.<br>
	 * This method takes either 3 parameters (<code>p1</code>, <code>p2</code> and
	 * <code>t</code>) or 1 parameter (<code>t</code>).
	 * @param   t   Triangle object.
	 * @param   p1  Point object.
	 * @param   p2  Point object.]]></haxe_doc>
		</markNeighbor>
		<markNeighborTriangle public="1" set="method" line="90"><f a="that">
	<c path="org.poly2tri.Triangle"/>
	<x path="Void"/>
</f></markNeighborTriangle>
		<getPointIndexOffset public="1" set="method" line="116">
			<f a="p:?offset" v=":0">
				<c path="org.poly2tri.Point"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
		</getPointIndexOffset>
		<pointCW public="1" set="method" line="150"><f a="p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
</f></pointCW>
		<pointCCW public="1" set="method" line="155"><f a="p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
</f></pointCCW>
		<neighborCW public="1" set="method" line="160"><f a="p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
</f></neighborCW>
		<neighborCCW public="1" set="method" line="165"><f a="p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
</f></neighborCCW>
		<getConstrainedEdgeCW public="1" set="method" line="170"><f a="p">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></getConstrainedEdgeCW>
		<setConstrainedEdgeCW public="1" set="method" line="171"><f a="p:ce">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></setConstrainedEdgeCW>
		<getConstrainedEdgeCCW public="1" set="method" line="173"><f a="p">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></getConstrainedEdgeCCW>
		<setConstrainedEdgeCCW public="1" set="method" line="174"><f a="p:ce">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></setConstrainedEdgeCCW>
		<getDelaunayEdgeCW public="1" set="method" line="176"><f a="p">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></getDelaunayEdgeCW>
		<setDelaunayEdgeCW public="1" set="method" line="177"><f a="p:e">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></setDelaunayEdgeCW>
		<getDelaunayEdgeCCW public="1" set="method" line="179"><f a="p">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></getDelaunayEdgeCCW>
		<setDelaunayEdgeCCW public="1" set="method" line="180"><f a="p:e">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></setDelaunayEdgeCCW>
		<neighborAcross public="1" set="method" line="186">
			<f a="p">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Triangle"/>
			</f>
			<haxe_doc>* The neighbor across to given point.</haxe_doc>
		</neighborAcross>
		<oppositePoint public="1" set="method" line="188"><f a="t:p">
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
</f></oppositePoint>
		<legalize public="1" set="method" line="199">
			<f a="opoint:?npoint" v=":null">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ npoint : null }</e></m></meta>
			<haxe_doc><![CDATA[* Legalize triangle by rotating clockwise.<br>
	 * This method takes either 1 parameter (then the triangle is rotated around
	 * points(0)) or 2 parameters (then the triangle is rotated around the first
	 * parameter).]]></haxe_doc>
		</legalize>
		<index public="1" set="method" line="230">
			<f a="p">
				<c path="org.poly2tri.Point"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Alias for getPointIndexOffset
	 *
	 * @param	p</haxe_doc>
		</index>
		<edgeIndex public="1" set="method" line="241"><f a="p1:p2">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Int"/>
</f></edgeIndex>
		<markConstrainedEdgeByIndex public="1" set="method" line="267">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Mark an edge of this triangle as constrained.<br>
	 * This method takes either 1 parameter (an edge index or an Edge instance) or
	 * 2 parameters (two Point instances defining the edge of the triangle).]]></haxe_doc>
		</markConstrainedEdgeByIndex>
		<markConstrainedEdgeByEdge public="1" set="method" line="272"><f a="edge">
	<c path="org.poly2tri.Edge"/>
	<x path="Void"/>
</f></markConstrainedEdgeByEdge>
		<markConstrainedEdgeByPoints public="1" set="method" line="277"><f a="p:q">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Void"/>
</f></markConstrainedEdgeByPoints>
		<isEdgeSide public="1" set="method" line="305">
			<f a="ep:eq">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if a side from this triangle is an edge side.
	 * If sides are not marked they will be marked.
	 *
	 * @param	ep
	 * @param	eq
	 * @return</haxe_doc>
		</isEdgeSide>
		<clearNeigbors public="1" set="method" line="377"><f a=""><x path="Void"/></f></clearNeigbors>
		<clearDelunayEdges public="1" set="method" line="384"><f a=""><x path="Void"/></f></clearDelunayEdges>
		<toString public="1" set="method" line="392"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="21">
			<f a="p1:p2:p3:?fixOrientation:?checkOrientation" v=":::false:true">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ checkOrientation : true, fixOrientation : false }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Utils" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Utils.hx">
		<insideIncircle public="1" set="method" line="29" static="1">
			<f a="pa:pb:pc:pd">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* <b>Requirement</b>:<br>
	 * 1. a, b and c form a triangle.<br>
	 * 2. a and d is know to be on opposite side of bc<br>
	 * <pre>
	 *                a
	 *                +
	 *               / \
	 *              /   \
	 *            b/     \c
	 *            +-------+
	 *           /    d    \
	 *          /           \
	 * </pre>
	 * <b>Fact</b>: d has to be in area B to have a chance to be inside the circle formed by
	 *  a,b and c<br>
	 *  d is outside B if orient2d(a,b,d) or orient2d(c,a,d) is CW<br>
	 *  This preknowledge gives us a way to optimize the incircle test
	 * @param pa - triangle point, opposite d
	 * @param pb - triangle point
	 * @param pc - triangle point
	 * @param pd - point opposite a
	 * @return true if d is inside circle, false if on circle edge]]></haxe_doc>
		</insideIncircle>
		<inScanArea public="1" set="method" line="62" static="1"><f a="pa:pb:pc:pd">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></inScanArea>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.VisiblePolygon" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/VisiblePolygon.hx">
		<sweepContext><c path="org.poly2tri.SweepContext"/></sweepContext>
		<sweep><c path="org.poly2tri.Sweep"/></sweep>
		<triangulated><x path="Bool"/></triangulated>
		<addPolyline public="1" set="method" line="17"><f a="polyline">
	<c path="Array"><c path="org.poly2tri.Point"/></c>
	<x path="Void"/>
</f></addPolyline>
		<addPolylineFromFloats public="1" set="method" line="22"><f a="pos">
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></addPolylineFromFloats>
		<reset public="1" set="method" line="33"><f a=""><x path="Void"/></f></reset>
		<performTriangulationOnce public="1" set="method" line="40"><f a=""><x path="Void"/></f></performTriangulationOnce>
		<getVerticesAndTriangles public="1" set="method" line="48"><f a=""><a>
	<vertices><c path="Array"><x path="Float"/></c></vertices>
	<triangles><c path="Array"><x path="Int"/></c></triangles>
</a></f></getVerticesAndTriangles>
		<getNumTriangles public="1" set="method" line="77"><f a=""><x path="Int"/></f></getNumTriangles>
		<drawShape public="1" set="method" line="84"><f a="g">
	<c path="flash.display.Graphics"/>
	<x path="Void"/>
</f></drawShape>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pallette.utils.ARGB" params="" file="/usr/local/lib/haxeLibrary/pallette/git/src/pallette/utils/ARGB.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<r public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</r>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<new public="1" set="method" line="11"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ a, r, g, b }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="pallette.utils.CYMK" params="" file="/usr/local/lib/haxeLibrary/pallette/git/src/pallette/utils/CYMK.hx">
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<m public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</m>
		<k public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</k>
		<new public="1" set="method" line="11"><f a="c:y:m:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ c, y, m, k }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="pallette.utils.CYMKA" params="" file="/usr/local/lib/haxeLibrary/pallette/git/src/pallette/utils/CYMKA.hx">
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<m public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</m>
		<k public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</k>
		<a public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</a>
		<new public="1" set="method" line="12"><f a="c:y:m:k:?a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ c, y, m, k, ?a }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="pallette.utils.ColorHelper" params="" file="/usr/local/lib/haxeLibrary/pallette/git/src/pallette/utils/ColorHelper.hx">
		<htmlRGBA_ public="1" expr="htmlRGBA">
			<f a="r_:g_:b_:a_">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>htmlRGBA</e></m></meta>
		</htmlRGBA_>
		<htmlHex_ public="1" expr="htmlHex">
			<f a="r:g:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>htmlHex</e></m></meta>
		</htmlHex_>
		<getBlack_ public="1" expr="getBlack">
			<f a="r:g:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>getBlack</e></m></meta>
		</getBlack_>
		<from_cymka_ public="1" expr="from_cymka">
			<f a="c:y:m:k:a">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>from_cymka</e></m></meta>
		</from_cymka_>
		<from_argb_ public="1" expr="from_argb">
			<f a="a:r:g:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>from_argb</e></m></meta>
		</from_argb_>
		<toHexInt_ public="1" expr="toHexInt">
			<f a="c">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>toHexInt</e></m></meta>
		</toHexInt_>
		<rgbConvert_ public="1" expr="rgbConvert">
			<f a="color:k">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>rgbConvert</e></m></meta>
		</rgbConvert_>
		<cymkConvert_ public="1" expr="cymkConvert">
			<f a="color:black">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>cymkConvert</e></m></meta>
		</cymkConvert_>
		<alphaChannel_ public="1" expr="alphaChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>alphaChannel</e></m></meta>
		</alphaChannel_>
		<redChannel_ public="1" expr="redChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>redChannel</e></m></meta>
		</redChannel_>
		<greenChannel_ public="1" expr="greenChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>greenChannel</e></m></meta>
		</greenChannel_>
		<blueChannel_ public="1" expr="blueChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>blueChannel</e></m></meta>
		</blueChannel_>
		<new public="1" set="method" line="60">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="pallette.utils._ColorHelper.ColorHelper_Fields_" params="" file="/usr/local/lib/haxeLibrary/pallette/git/src/pallette/utils/ColorHelper.hx" private="1" module="pallette.utils.ColorHelper" final="1">
		<htmlRGBA public="1" get="inline" set="null" line="3" static="1"><f a="r_:g_:b_:a_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="String"/>
</f></htmlRGBA>
		<htmlHex public="1" get="inline" set="null" line="11" static="1"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="String"/>
</f></htmlHex>
		<getBlack public="1" get="inline" set="null" line="14" static="1"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></getBlack>
		<from_cymka public="1" get="inline" set="null" line="18" static="1"><f a="c:y:m:k:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_cymka>
		<from_cymk public="1" get="inline" set="null" line="24" static="1"><f a="c:y:m:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_cymk>
		<from_argb public="1" get="inline" set="null" line="29" static="1"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_argb>
		<from_rgb public="1" get="inline" set="null" line="35" static="1"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_rgb>
		<toHexInt public="1" get="inline" set="null" line="40" static="1"><f a="c">
	<x path="Float"/>
	<x path="Int"/>
</f></toHexInt>
		<rgbConvert public="1" get="inline" set="null" line="43" static="1"><f a="color:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></rgbConvert>
		<cymkConvert public="1" get="inline" set="null" line="46" static="1"><f a="color:black">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cymkConvert>
		<alphaChannel public="1" get="inline" set="null" line="49" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="52" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="55" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="58" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="pallette.utils.ColorInt" params="" file="/usr/local/lib/haxeLibrary/pallette/git/src/pallette/utils/ColorInt.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast field="fromARGB"><c path="pallette.utils.ARGB"/></icast>
			<icast field="fromRGB"><c path="pallette.utils.RGB"/></icast>
			<icast field="fromCYMKA"><c path="pallette.utils.CYMKA"/></icast>
			<icast field="fromCYMK"><c path="pallette.utils.CYMK"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="htmlStyleRGBA"><c path="String"/></icast>
			<icast field="htmlStyleHex"><c path="String"/></icast>
			<icast field="toARGB"><c path="pallette.utils.ARGB"/></icast>
			<icast field="toRGB"><c path="pallette.utils.RGB"/></icast>
			<icast field="toCYMKA"><c path="pallette.utils.CYMKA"/></icast>
			<icast field="toCYMK"><c path="pallette.utils.CYMK"/></icast>
		</to>
		<impl><class path="pallette.utils._ColorInt.ColorInt_Impl_" params="" file="/usr/local/lib/haxeLibrary/pallette/git/src/pallette/utils/ColorInt.hx" private="1" module="pallette.utils.ColorInt" final="1">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="v">
			<x path="Int"/>
			<x path="pallette.utils.ColorInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<fromARGB public="1" get="inline" set="null" line="15" static="1">
		<f a="argb">
			<c path="pallette.utils.ARGB"/>
			<x path="pallette.utils.ColorInt"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromARGB>
	<fromRGB public="1" get="inline" set="null" line="20" static="1">
		<f a="argb">
			<c path="pallette.utils.RGB"/>
			<x path="pallette.utils.ColorInt"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromRGB>
	<htmlStyleRGBA public="1" get="inline" set="null" line="25" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</htmlStyleRGBA>
	<htmlStyleHex public="1" get="inline" set="null" line="30" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</htmlStyleHex>
	<toARGB public="1" get="inline" set="null" line="35" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="pallette.utils.ARGB"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toARGB>
	<toRGB public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="pallette.utils.RGB"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toRGB>
	<fromCYMKA public="1" get="inline" set="null" line="45" static="1">
		<f a="c">
			<c path="pallette.utils.CYMKA"/>
			<x path="pallette.utils.ColorInt"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromCYMKA>
	<fromCYMK public="1" get="inline" set="null" line="50" static="1">
		<f a="c">
			<c path="pallette.utils.CYMK"/>
			<x path="pallette.utils.ColorInt"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromCYMK>
	<toCYMKA public="1" get="inline" set="null" line="55" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="pallette.utils.CYMKA"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toCYMKA>
	<toCYMK public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="pallette.utils.CYMK"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toCYMK>
	<cyan public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cyan>
	<get_cyan get="inline" set="null" line="73" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cyan>
	<set_cyan get="inline" set="null" line="77" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cyan>
	<yellow public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</yellow>
	<get_yellow get="inline" set="null" line="86" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_yellow>
	<set_yellow get="inline" set="null" line="90" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_yellow>
	<magenta public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</magenta>
	<get_magenta get="inline" set="null" line="99" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_magenta>
	<set_magenta get="inline" set="null" line="103" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_magenta>
	<black public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</black>
	<get_black get="inline" set="null" line="112" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_black>
	<set_black get="inline" set="null" line="115" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_black>
	<alpha public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alpha>
	<get_alpha get="inline" set="null" line="124" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alpha>
	<set_alpha get="inline" set="null" line="128" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alpha>
	<red public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</red>
	<get_red get="inline" set="null" line="134" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_red>
	<set_red get="inline" set="null" line="138" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_red>
	<green public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</green>
	<get_green get="inline" set="null" line="144" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_green>
	<set_green get="inline" set="null" line="148" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_green>
	<blue public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blue>
	<get_blue get="inline" set="null" line="154" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blue>
	<set_blue get="inline" set="null" line="158" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blue>
	<aiCYMKA public="1" get="inline" set="null" line="164" static="1">
		<f a="arr:?alpha" v=":1.0">
			<c path="Array"><c path="String"/></c>
			<x path="Float"/>
			<x path="pallette.utils.ColorInt"/>
		</f>
		<meta><m n=":value"><e>{ alpha : 1.0 }</e></m></meta>
	</aiCYMKA>
	<ARGB_CYMKA public="1" get="inline" set="null" line="173" static="1"><f a="v">
	<c path="pallette.utils.ARGB"/>
	<c path="pallette.utils.CYMKA"/>
</f></ARGB_CYMKA>
	<CYMKA_ARGB public="1" get="inline" set="null" line="183" static="1"><f a="v">
	<c path="pallette.utils.CYMKA"/>
	<c path="pallette.utils.ARGB"/>
</f></CYMKA_ARGB>
	<luminosityGrey public="1" get="inline" set="null" line="190" static="1">
		<f a="this:?scale" v=":1.">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":value"><e>{ scale : 1. }</e></m>
			<m n=":impl"/>
		</meta>
	</luminosityGrey>
	<blendARGB public="1" get="inline" set="null" line="194" static="1">
		<f a="this:colB:t">
			<x path="Int"/>
			<x path="pallette.utils.ColorInt"/>
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</blendARGB>
	<blendRGB public="1" get="inline" set="null" line="208" static="1">
		<f a="this:colB:t">
			<x path="Int"/>
			<x path="pallette.utils.ColorInt"/>
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</blendRGB>
	<blend get="inline" set="null" line="221" static="1">
		<f a="this:a:b:t">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</blend>
	<smootherStep get="inline" set="null" line="226" static="1">
		<f a="this:t">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</smootherStep>
</class></impl>
	</abstract>
	<class path="pallette.utils._ColorInt.ColorInt_Impl_" params="" file="/usr/local/lib/haxeLibrary/pallette/git/src/pallette/utils/ColorInt.hx" private="1" module="pallette.utils.ColorInt" final="1">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="pallette.utils.ColorInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<fromARGB public="1" get="inline" set="null" line="15" static="1">
			<f a="argb">
				<c path="pallette.utils.ARGB"/>
				<x path="pallette.utils.ColorInt"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromARGB>
		<fromRGB public="1" get="inline" set="null" line="20" static="1">
			<f a="argb">
				<c path="pallette.utils.RGB"/>
				<x path="pallette.utils.ColorInt"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromRGB>
		<htmlStyleRGBA public="1" get="inline" set="null" line="25" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</htmlStyleRGBA>
		<htmlStyleHex public="1" get="inline" set="null" line="30" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</htmlStyleHex>
		<toARGB public="1" get="inline" set="null" line="35" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="pallette.utils.ARGB"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toARGB>
		<toRGB public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="pallette.utils.RGB"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toRGB>
		<fromCYMKA public="1" get="inline" set="null" line="45" static="1">
			<f a="c">
				<c path="pallette.utils.CYMKA"/>
				<x path="pallette.utils.ColorInt"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromCYMKA>
		<fromCYMK public="1" get="inline" set="null" line="50" static="1">
			<f a="c">
				<c path="pallette.utils.CYMK"/>
				<x path="pallette.utils.ColorInt"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromCYMK>
		<toCYMKA public="1" get="inline" set="null" line="55" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="pallette.utils.CYMKA"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toCYMKA>
		<toCYMK public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="pallette.utils.CYMK"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toCYMK>
		<cyan public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cyan>
		<get_cyan get="inline" set="null" line="73" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cyan>
		<set_cyan get="inline" set="null" line="77" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cyan>
		<yellow public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</yellow>
		<get_yellow get="inline" set="null" line="86" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_yellow>
		<set_yellow get="inline" set="null" line="90" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_yellow>
		<magenta public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</magenta>
		<get_magenta get="inline" set="null" line="99" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_magenta>
		<set_magenta get="inline" set="null" line="103" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_magenta>
		<black public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</black>
		<get_black get="inline" set="null" line="112" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_black>
		<set_black get="inline" set="null" line="115" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_black>
		<alpha public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alpha>
		<get_alpha get="inline" set="null" line="124" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alpha>
		<set_alpha get="inline" set="null" line="128" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alpha>
		<red public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</red>
		<get_red get="inline" set="null" line="134" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_red>
		<set_red get="inline" set="null" line="138" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_red>
		<green public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</green>
		<get_green get="inline" set="null" line="144" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_green>
		<set_green get="inline" set="null" line="148" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_green>
		<blue public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blue>
		<get_blue get="inline" set="null" line="154" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blue>
		<set_blue get="inline" set="null" line="158" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blue>
		<aiCYMKA public="1" get="inline" set="null" line="164" static="1">
			<f a="arr:?alpha" v=":1.0">
				<c path="Array"><c path="String"/></c>
				<x path="Float"/>
				<x path="pallette.utils.ColorInt"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1.0 }</e></m></meta>
		</aiCYMKA>
		<ARGB_CYMKA public="1" get="inline" set="null" line="173" static="1"><f a="v">
	<c path="pallette.utils.ARGB"/>
	<c path="pallette.utils.CYMKA"/>
</f></ARGB_CYMKA>
		<CYMKA_ARGB public="1" get="inline" set="null" line="183" static="1"><f a="v">
	<c path="pallette.utils.CYMKA"/>
	<c path="pallette.utils.ARGB"/>
</f></CYMKA_ARGB>
		<luminosityGrey public="1" get="inline" set="null" line="190" static="1">
			<f a="this:?scale" v=":1.">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":value"><e>{ scale : 1. }</e></m>
				<m n=":impl"/>
			</meta>
		</luminosityGrey>
		<blendARGB public="1" get="inline" set="null" line="194" static="1">
			<f a="this:colB:t">
				<x path="Int"/>
				<x path="pallette.utils.ColorInt"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</blendARGB>
		<blendRGB public="1" get="inline" set="null" line="208" static="1">
			<f a="this:colB:t">
				<x path="Int"/>
				<x path="pallette.utils.ColorInt"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</blendRGB>
		<blend get="inline" set="null" line="221" static="1">
			<f a="this:a:b:t">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</blend>
		<smootherStep get="inline" set="null" line="226" static="1">
			<f a="this:t">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</smootherStep>
	</class>
	<class path="pallette.utils.RGB" params="" file="/usr/local/lib/haxeLibrary/pallette/git/src/pallette/utils/RGB.hx">
		<r public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</r>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<new public="1" set="method" line="10"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ r, g, b }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="pallette.wheel.Wheel24" params="" file="/usr/local/lib/haxeLibrary/pallette/git/src/pallette/wheel/ColorWheel24.hx" module="pallette.wheel.ColorWheel24">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="pallette.wheel._ColorWheel24.Wheel24_Impl_" params="" file="/usr/local/lib/haxeLibrary/pallette/git/src/pallette/wheel/ColorWheel24.hx" private="1" module="pallette.wheel.ColorWheel24" extern="1" final="1">
	<redRadish public="1" get="inline" set="null" expr="cast 0xffef3c42" line="5" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffef3c42</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</redRadish>
	<orangeSoda public="1" get="inline" set="null" expr="cast 0xfff25e40" line="6" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff25e40</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</orangeSoda>
	<gokuOrange public="1" get="inline" set="null" expr="cast 0xfff2823a" line="7" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff2823a</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</gokuOrange>
	<highlighterOrange public="1" get="inline" set="null" expr="cast 0xfff69537" line="8" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff69537</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</highlighterOrange>
	<carona public="1" get="inline" set="null" expr="cast 0xfff4aa2f" line="9" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff4aa2f</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</carona>
	<solarPower public="1" get="inline" set="null" expr="cast 0xfff6c137" line="10" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff6c137</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</solarPower>
	<flirtatious public="1" get="inline" set="null" expr="cast 0xfffad435" line="11" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfffad435</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</flirtatious>
	<yellowBellied public="1" get="inline" set="null" expr="cast 0xfffdf32f" line="12" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfffdf32f</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</yellowBellied>
	<daffodil public="1" get="inline" set="null" expr="cast 0xffffff2d" line="13" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffffff2d</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</daffodil>
	<spoiledEgg public="1" get="inline" set="null" expr="cast 0xffdff429" line="14" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffdff429</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</spoiledEgg>
	<peraRocha public="1" get="inline" set="null" expr="cast 0xffa7d52a" line="15" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffa7d52a</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</peraRocha>
	<appleGreen public="1" get="inline" set="null" expr="cast 0xff79c725" line="16" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff79c725</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</appleGreen>
	<fieldGreen public="1" get="inline" set="null" expr="cast 0xff53c025" line="17" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff53c025</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</fieldGreen>
	<parisGreen public="1" get="inline" set="null" expr="cast 0xff52c67f" line="18" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff52c67f</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</parisGreen>
	<maximumBlue public="1" get="inline" set="null" expr="cast 0xff4daecf" line="19" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4daecf</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</maximumBlue>
	<blueTourmaline public="1" get="inline" set="null" expr="cast 0xff4592ca" line="20" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4592ca</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</blueTourmaline>
	<celestialPlum public="1" get="inline" set="null" expr="cast 0xff3f77c4" line="21" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3f77c4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</celestialPlum>
	<freeSpeechBlue public="1" get="inline" set="null" expr="cast 0xff3a57bf" line="22" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3a57bf</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</freeSpeechBlue>
	<earlySpringNight public="1" get="inline" set="null" expr="cast 0xff3438bd" line="23" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3438bd</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</earlySpringNight>
	<blueDepression public="1" get="inline" set="null" expr="cast 0xff4b27bd" line="24" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4b27bd</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</blueDepression>
	<nebulaFuchsia public="1" get="inline" set="null" expr="cast 0xff7328b6" line="25" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff7328b6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</nebulaFuchsia>
	<fuchsiaFlair public="1" get="inline" set="null" expr="cast 0xffb528c5" line="26" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffb528c5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</fuchsiaFlair>
	<royalFuchsia public="1" get="inline" set="null" expr="cast 0xffc32a94" line="27" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffc32a94</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</royalFuchsia>
	<fuchsiaPurple public="1" get="inline" set="null" expr="cast 0xffdd3371" line="28" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffdd3371</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</fuchsiaPurple>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="pallette.wheel._ColorWheel24.Wheel24_Impl_" params="" file="/usr/local/lib/haxeLibrary/pallette/git/src/pallette/wheel/ColorWheel24.hx" private="1" module="pallette.wheel.ColorWheel24" extern="1" final="1">
		<redRadish public="1" get="inline" set="null" expr="cast 0xffef3c42" line="5" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffef3c42</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</redRadish>
		<orangeSoda public="1" get="inline" set="null" expr="cast 0xfff25e40" line="6" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff25e40</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</orangeSoda>
		<gokuOrange public="1" get="inline" set="null" expr="cast 0xfff2823a" line="7" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff2823a</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</gokuOrange>
		<highlighterOrange public="1" get="inline" set="null" expr="cast 0xfff69537" line="8" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff69537</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</highlighterOrange>
		<carona public="1" get="inline" set="null" expr="cast 0xfff4aa2f" line="9" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff4aa2f</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</carona>
		<solarPower public="1" get="inline" set="null" expr="cast 0xfff6c137" line="10" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff6c137</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</solarPower>
		<flirtatious public="1" get="inline" set="null" expr="cast 0xfffad435" line="11" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfffad435</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</flirtatious>
		<yellowBellied public="1" get="inline" set="null" expr="cast 0xfffdf32f" line="12" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfffdf32f</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</yellowBellied>
		<daffodil public="1" get="inline" set="null" expr="cast 0xffffff2d" line="13" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffffff2d</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</daffodil>
		<spoiledEgg public="1" get="inline" set="null" expr="cast 0xffdff429" line="14" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffdff429</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</spoiledEgg>
		<peraRocha public="1" get="inline" set="null" expr="cast 0xffa7d52a" line="15" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffa7d52a</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</peraRocha>
		<appleGreen public="1" get="inline" set="null" expr="cast 0xff79c725" line="16" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff79c725</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</appleGreen>
		<fieldGreen public="1" get="inline" set="null" expr="cast 0xff53c025" line="17" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff53c025</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</fieldGreen>
		<parisGreen public="1" get="inline" set="null" expr="cast 0xff52c67f" line="18" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff52c67f</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</parisGreen>
		<maximumBlue public="1" get="inline" set="null" expr="cast 0xff4daecf" line="19" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4daecf</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</maximumBlue>
		<blueTourmaline public="1" get="inline" set="null" expr="cast 0xff4592ca" line="20" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4592ca</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</blueTourmaline>
		<celestialPlum public="1" get="inline" set="null" expr="cast 0xff3f77c4" line="21" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3f77c4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</celestialPlum>
		<freeSpeechBlue public="1" get="inline" set="null" expr="cast 0xff3a57bf" line="22" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3a57bf</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</freeSpeechBlue>
		<earlySpringNight public="1" get="inline" set="null" expr="cast 0xff3438bd" line="23" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3438bd</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</earlySpringNight>
		<blueDepression public="1" get="inline" set="null" expr="cast 0xff4b27bd" line="24" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4b27bd</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</blueDepression>
		<nebulaFuchsia public="1" get="inline" set="null" expr="cast 0xff7328b6" line="25" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff7328b6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</nebulaFuchsia>
		<fuchsiaFlair public="1" get="inline" set="null" expr="cast 0xffb528c5" line="26" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffb528c5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</fuchsiaFlair>
		<royalFuchsia public="1" get="inline" set="null" expr="cast 0xffc32a94" line="27" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffc32a94</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</royalFuchsia>
		<fuchsiaPurple public="1" get="inline" set="null" expr="cast 0xffdd3371" line="28" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffdd3371</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</fuchsiaPurple>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="pallette.wheel.ColorWheel24" params="" file="/usr/local/lib/haxeLibrary/pallette/git/src/pallette/wheel/ColorWheel24.hx">
		<getWheel public="1" get="inline" set="null" line="34" static="1"><f a=""><c path="Array"><x path="pallette.wheel.Wheel24"/></c></f></getWheel>
		<random public="1" get="inline" set="null" line="61" static="1"><f a=""><x path="pallette.wheel.Wheel24"/></f></random>
		<getName public="1" get="inline" set="null" line="67" static="1"><f a="w">
	<x path="pallette.wheel.Wheel24"/>
	<c path="String"/>
</f></getName>
		<next public="1" get="inline" set="null" line="96" static="1"><f a="w">
	<x path="pallette.wheel.Wheel24"/>
	<x path="pallette.wheel.Wheel24"/>
</f></next>
		<haxe_doc>![wheel24](../../bootstrap/img/wheel24.png)</haxe_doc>
	</class>
	<class path="trilateral3.DocTrilateral3" params="" file="src/trilateral3/DocTrilateral3.hx">
		<main public="1" set="method" line="20" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<new public="1" set="method" line="23"><f a=""><x path="Void"/></f></new>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</class>
	<class path="trilateral3.Trilateral" params="" file="src/trilateral3/Trilateral.hx">
		<transformMatrix public="1" static="1"><c path="trilateral3.matrix.MatrixDozen"/></transformMatrix>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="trilateral3.color.ColorHelper" params="" file="src/trilateral3/color/ColorHelper.hx">
		<getBlack_ public="1" expr="getBlack">
			<f a="r:g:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>getBlack</e></m></meta>
		</getBlack_>
		<from_cymka_ public="1" expr="from_cymka">
			<f a="c:y:m:k:a">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>from_cymka</e></m></meta>
		</from_cymka_>
		<from_argb_ public="1" expr="from_argb">
			<f a="a:r:g:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>from_argb</e></m></meta>
		</from_argb_>
		<toHexInt_ public="1" expr="toHexInt">
			<f a="c">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>toHexInt</e></m></meta>
		</toHexInt_>
		<rgbConvert_ public="1" expr="rgbConvert">
			<f a="color:k">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>rgbConvert</e></m></meta>
		</rgbConvert_>
		<cymkConvert_ public="1" expr="cymkConvert">
			<f a="color:black">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>cymkConvert</e></m></meta>
		</cymkConvert_>
		<alphaChannel_ public="1" expr="alphaChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>alphaChannel</e></m></meta>
		</alphaChannel_>
		<redChannel_ public="1" expr="redChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>redChannel</e></m></meta>
		</redChannel_>
		<greenChannel_ public="1" expr="greenChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>greenChannel</e></m></meta>
		</greenChannel_>
		<blueChannel_ public="1" expr="blueChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>blueChannel</e></m></meta>
		</blueChannel_>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="trilateral3.color._ColorHelper.ColorHelper_Fields_" params="" file="src/trilateral3/color/ColorHelper.hx" private="1" module="trilateral3.color.ColorHelper" final="1">
		<getBlack public="1" get="inline" set="null" line="4" static="1"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></getBlack>
		<from_cymka public="1" get="inline" set="null" line="8" static="1"><f a="c:y:m:k:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_cymka>
		<from_argb public="1" get="inline" set="null" line="15" static="1"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_argb>
		<toHexInt public="1" get="inline" set="null" line="21" static="1"><f a="c">
	<x path="Float"/>
	<x path="Int"/>
</f></toHexInt>
		<rgbConvert public="1" get="inline" set="null" line="24" static="1"><f a="color:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></rgbConvert>
		<cymkConvert public="1" get="inline" set="null" line="27" static="1"><f a="color:black">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cymkConvert>
		<alphaChannel public="1" get="inline" set="null" line="30" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="33" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="36" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="39" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.color.ColorInt" params="" file="src/trilateral3/color/ColorInt.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast field="fromARGB"><c path="trilateral3.structure.ARGB"/></icast>
			<icast field="fromCYMKA"><c path="trilateral3.structure.CYMKA"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toARGB"><c path="trilateral3.structure.ARGB"/></icast>
			<icast field="toCYMK"><c path="trilateral3.structure.CYMKA"/></icast>
		</to>
		<impl><class path="trilateral3.color._ColorInt.ColorInt_Impl_" params="" file="src/trilateral3/color/ColorInt.hx" private="1" module="trilateral3.color.ColorInt" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="v">
			<x path="Int"/>
			<x path="trilateral3.color.ColorInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<fromARGB public="1" get="inline" set="null" line="12" static="1">
		<f a="argb">
			<c path="trilateral3.structure.ARGB"/>
			<x path="trilateral3.color.ColorInt"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromARGB>
	<toARGB public="1" get="inline" set="null" line="17" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="trilateral3.structure.ARGB"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toARGB>
	<fromCYMKA public="1" get="inline" set="null" line="22" static="1">
		<f a="c">
			<c path="trilateral3.structure.CYMKA"/>
			<x path="trilateral3.color.ColorInt"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromCYMKA>
	<toCYMK public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="trilateral3.structure.CYMKA"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toCYMK>
	<cyan public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cyan>
	<get_cyan get="inline" set="null" line="36" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cyan>
	<set_cyan get="inline" set="null" line="40" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cyan>
	<yellow public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</yellow>
	<get_yellow get="inline" set="null" line="49" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_yellow>
	<set_yellow get="inline" set="null" line="53" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_yellow>
	<magenta public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</magenta>
	<get_magenta get="inline" set="null" line="62" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_magenta>
	<set_magenta get="inline" set="null" line="66" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_magenta>
	<black public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</black>
	<get_black get="inline" set="null" line="75" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_black>
	<set_black get="inline" set="null" line="78" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_black>
	<alpha public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alpha>
	<get_alpha get="inline" set="null" line="87" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alpha>
	<set_alpha get="inline" set="null" line="91" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alpha>
	<red public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</red>
	<get_red get="inline" set="null" line="97" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_red>
	<set_red get="inline" set="null" line="101" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_red>
	<green public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</green>
	<get_green get="inline" set="null" line="107" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_green>
	<set_green get="inline" set="null" line="111" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_green>
	<blue public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blue>
	<get_blue get="inline" set="null" line="117" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blue>
	<set_blue get="inline" set="null" line="121" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blue>
	<aiCYMKA public="1" get="inline" set="null" line="127" static="1">
		<f a="arr:?alpha" v=":1.0">
			<c path="Array"><c path="String"/></c>
			<x path="Float"/>
			<x path="trilateral3.color.ColorInt"/>
		</f>
		<meta><m n=":value"><e>{ alpha : 1.0 }</e></m></meta>
	</aiCYMKA>
	<ARGB_CYMKA public="1" get="inline" set="null" line="136" static="1"><f a="v">
	<c path="trilateral3.structure.ARGB"/>
	<c path="trilateral3.structure.CYMKA"/>
</f></ARGB_CYMKA>
	<CYMKA_ARGB public="1" get="inline" set="null" line="146" static="1"><f a="v">
	<c path="trilateral3.structure.CYMKA"/>
	<c path="trilateral3.structure.ARGB"/>
</f></CYMKA_ARGB>
</class></impl>
	</abstract>
	<class path="trilateral3.color._ColorInt.ColorInt_Impl_" params="" file="src/trilateral3/color/ColorInt.hx" private="1" module="trilateral3.color.ColorInt" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="trilateral3.color.ColorInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<fromARGB public="1" get="inline" set="null" line="12" static="1">
			<f a="argb">
				<c path="trilateral3.structure.ARGB"/>
				<x path="trilateral3.color.ColorInt"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromARGB>
		<toARGB public="1" get="inline" set="null" line="17" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="trilateral3.structure.ARGB"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toARGB>
		<fromCYMKA public="1" get="inline" set="null" line="22" static="1">
			<f a="c">
				<c path="trilateral3.structure.CYMKA"/>
				<x path="trilateral3.color.ColorInt"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromCYMKA>
		<toCYMK public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="trilateral3.structure.CYMKA"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toCYMK>
		<cyan public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cyan>
		<get_cyan get="inline" set="null" line="36" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cyan>
		<set_cyan get="inline" set="null" line="40" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cyan>
		<yellow public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</yellow>
		<get_yellow get="inline" set="null" line="49" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_yellow>
		<set_yellow get="inline" set="null" line="53" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_yellow>
		<magenta public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</magenta>
		<get_magenta get="inline" set="null" line="62" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_magenta>
		<set_magenta get="inline" set="null" line="66" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_magenta>
		<black public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</black>
		<get_black get="inline" set="null" line="75" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_black>
		<set_black get="inline" set="null" line="78" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_black>
		<alpha public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alpha>
		<get_alpha get="inline" set="null" line="87" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alpha>
		<set_alpha get="inline" set="null" line="91" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alpha>
		<red public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</red>
		<get_red get="inline" set="null" line="97" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_red>
		<set_red get="inline" set="null" line="101" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_red>
		<green public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</green>
		<get_green get="inline" set="null" line="107" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_green>
		<set_green get="inline" set="null" line="111" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_green>
		<blue public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blue>
		<get_blue get="inline" set="null" line="117" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blue>
		<set_blue get="inline" set="null" line="121" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blue>
		<aiCYMKA public="1" get="inline" set="null" line="127" static="1">
			<f a="arr:?alpha" v=":1.0">
				<c path="Array"><c path="String"/></c>
				<x path="Float"/>
				<x path="trilateral3.color.ColorInt"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1.0 }</e></m></meta>
		</aiCYMKA>
		<ARGB_CYMKA public="1" get="inline" set="null" line="136" static="1"><f a="v">
	<c path="trilateral3.structure.ARGB"/>
	<c path="trilateral3.structure.CYMKA"/>
</f></ARGB_CYMKA>
		<CYMKA_ARGB public="1" get="inline" set="null" line="146" static="1"><f a="v">
	<c path="trilateral3.structure.CYMKA"/>
	<c path="trilateral3.structure.ARGB"/>
</f></CYMKA_ARGB>
	</class>
	<abstract path="trilateral3.drawing.Color3Abstract" params="" file="src/trilateral3/drawing/Color3Abstract.hx">
		<from><icast><t path="trilateral3.drawing.Color3Type"/></icast></from>
		<this><t path="trilateral3.drawing.Color3Type"/></this>
		<to><icast><t path="trilateral3.drawing.Color3Type"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.drawing._Color3Abstract.Color3Abstract_Impl_" params="" file="src/trilateral3/drawing/Color3Abstract.hx" private="1" module="trilateral3.drawing.Color3Abstract" final="1">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="color3Type">
			<t path="trilateral3.drawing.Color3Type"/>
			<x path="trilateral3.drawing.Color3Abstract"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<argb public="1" get="null" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argb>
	<set_argb get="inline" set="null" line="9" static="1">
		<f a="this:col">
			<t path="trilateral3.drawing.Color3Type"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argb>
	<argbA public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbA>
	<set_argbA get="inline" set="null" line="16" static="1">
		<f a="this:col">
			<t path="trilateral3.drawing.Color3Type"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbA>
	<get_argbA get="inline" set="null" line="20" static="1">
		<f a="this">
			<t path="trilateral3.drawing.Color3Type"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbA>
	<argbB public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbB>
	<set_argbB get="inline" set="null" line="25" static="1">
		<f a="this:col">
			<t path="trilateral3.drawing.Color3Type"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbB>
	<get_argbB get="inline" set="null" line="29" static="1">
		<f a="this">
			<t path="trilateral3.drawing.Color3Type"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbB>
	<argbC public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbC>
	<set_argbC get="inline" set="null" line="34" static="1">
		<f a="this:col">
			<t path="trilateral3.drawing.Color3Type"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbC>
	<get_argbC get="inline" set="null" line="38" static="1">
		<f a="this">
			<t path="trilateral3.drawing.Color3Type"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbC>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._Color3Abstract.Color3Abstract_Impl_" params="" file="src/trilateral3/drawing/Color3Abstract.hx" private="1" module="trilateral3.drawing.Color3Abstract" final="1">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="color3Type">
				<t path="trilateral3.drawing.Color3Type"/>
				<x path="trilateral3.drawing.Color3Abstract"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<argb public="1" get="null" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argb>
		<set_argb get="inline" set="null" line="9" static="1">
			<f a="this:col">
				<t path="trilateral3.drawing.Color3Type"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argb>
		<argbA public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbA>
		<set_argbA get="inline" set="null" line="16" static="1">
			<f a="this:col">
				<t path="trilateral3.drawing.Color3Type"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbA>
		<get_argbA get="inline" set="null" line="20" static="1">
			<f a="this">
				<t path="trilateral3.drawing.Color3Type"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbA>
		<argbB public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbB>
		<set_argbB get="inline" set="null" line="25" static="1">
			<f a="this:col">
				<t path="trilateral3.drawing.Color3Type"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbB>
		<get_argbB get="inline" set="null" line="29" static="1">
			<f a="this">
				<t path="trilateral3.drawing.Color3Type"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbB>
		<argbC public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbC>
		<set_argbC get="inline" set="null" line="34" static="1">
			<f a="this:col">
				<t path="trilateral3.drawing.Color3Type"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbC>
		<get_argbC get="inline" set="null" line="38" static="1">
			<f a="this">
				<t path="trilateral3.drawing.Color3Type"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbC>
	</class>
	<typedef path="trilateral3.drawing.Color3Type" params="" file="src/trilateral3/drawing/Color3Type.hx"><a>
	<set_argbC set="method"><f a="col">
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
	<set_argbB set="method"><f a="col">
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
	<set_argbA set="method"><f a="col">
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
	<set_argb set="method"><f a="col">
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
	<get_argbC set="method"><f a=""><x path="Int"/></f></get_argbC>
	<get_argbB set="method"><f a=""><x path="Int"/></f></get_argbB>
	<get_argbA set="method"><f a=""><x path="Int"/></f></get_argbA>
</a></typedef>
	<abstract path="trilateral3.drawing.ColorAbstract" params="" file="src/trilateral3/drawing/ColorAbstract.hx">
		<from><icast><t path="trilateral3.drawing.ColorType"/></icast></from>
		<this><t path="trilateral3.drawing.ColorType"/></this>
		<to><icast><t path="trilateral3.drawing.ColorType"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.drawing._ColorAbstract.ColorAbstract_Impl_" params="" file="src/trilateral3/drawing/ColorAbstract.hx" private="1" module="trilateral3.drawing.ColorAbstract" final="1">
	<_new public="1" get="inline" set="null" line="4" static="1">
		<f a="colorType">
			<t path="trilateral3.drawing.ColorType"/>
			<x path="trilateral3.drawing.ColorAbstract"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="8" static="1">
		<f a="this">
			<t path="trilateral3.drawing.ColorType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="11" static="1">
		<f a="this:v">
			<t path="trilateral3.drawing.ColorType"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<size public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</size>
	<set_size get="inline" set="null" line="16" static="1">
		<f a="this:v">
			<t path="trilateral3.drawing.ColorType"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_size>
	<get_size get="inline" set="null" line="20" static="1">
		<f a="this">
			<t path="trilateral3.drawing.ColorType"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_size>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._ColorAbstract.ColorAbstract_Impl_" params="" file="src/trilateral3/drawing/ColorAbstract.hx" private="1" module="trilateral3.drawing.ColorAbstract" final="1">
		<_new public="1" get="inline" set="null" line="4" static="1">
			<f a="colorType">
				<t path="trilateral3.drawing.ColorType"/>
				<x path="trilateral3.drawing.ColorAbstract"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="8" static="1">
			<f a="this">
				<t path="trilateral3.drawing.ColorType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="11" static="1">
			<f a="this:v">
				<t path="trilateral3.drawing.ColorType"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<size public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</size>
		<set_size get="inline" set="null" line="16" static="1">
			<f a="this:v">
				<t path="trilateral3.drawing.ColorType"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_size>
		<get_size get="inline" set="null" line="20" static="1">
			<f a="this">
				<t path="trilateral3.drawing.ColorType"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_size>
	</class>
	<typedef path="trilateral3.drawing.ColorType" params="" file="src/trilateral3/drawing/ColorType.hx"><a>
	<set_size set="method"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
	<set_pos set="method"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
	<get_size set="method"><f a=""><x path="Int"/></f></get_size>
	<get_pos set="method"><f a=""><x path="Float"/></f></get_pos>
	<getTriInt><f a=""><c path="trilateral3.structure.TriInt"/></f></getTriInt>
	<cornerColors><f a="colorA:colorB:colorC">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
	<colorTriangles><f a="color:times">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
	<color3current>
		<x path="Null"><x path="trilateral3.drawing.Color3Abstract"/></x>
		<meta><m n=":optional"/></meta>
	</color3current>
</a></typedef>
	<class path="trilateral3.drawing.Contour" params="" file="src/trilateral3/drawing/Contour.hx">
		<smallDotScale get="inline" set="null" expr="0.07" line="95" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.07</e></m></meta>
		</smallDotScale>
		<thetaCompute get="inline" set="null" line="180" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaCompute>
		<dist get="inline" set="null" line="184" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></dist>
		<debugCol0 public="1" expr="redRadish">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>redRadish</e></m></meta>
		</debugCol0>
		<debugCol1 public="1" expr="gokuOrange">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>gokuOrange</e></m></meta>
		</debugCol1>
		<debugCol2 public="1" expr="carona">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>carona</e></m></meta>
		</debugCol2>
		<debugCol3 public="1" expr="flirtatious">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>flirtatious</e></m></meta>
		</debugCol3>
		<debugCol4 public="1" expr="daffodil">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>daffodil</e></m></meta>
		</debugCol4>
		<debugCol5 public="1" expr="peraRocha">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>peraRocha</e></m></meta>
		</debugCol5>
		<debugCol6 public="1" expr="fieldGreen">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>fieldGreen</e></m></meta>
		</debugCol6>
		<debugCol7 public="1" expr="maximumBlue">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>maximumBlue</e></m></meta>
		</debugCol7>
		<debugCol8 public="1" expr="celestialPlum">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>celestialPlum</e></m></meta>
		</debugCol8>
		<debugCol9 public="1" expr="earlySpringNight">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>earlySpringNight</e></m></meta>
		</debugCol9>
		<debugCol10 public="1" expr="nebulaFuchsia">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>nebulaFuchsia</e></m></meta>
		</debugCol10>
		<debugCol11 public="1" expr="royalFuchsia">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>royalFuchsia</e></m></meta>
		</debugCol11>
		<debugCol12 public="1" expr="orangeSoda">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>orangeSoda</e></m></meta>
		</debugCol12>
		<pointsClock public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pointsClock>
		<pointsAnti public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pointsAnti>
		<penultimateCX public="1"><x path="Float"/></penultimateCX>
		<penultimateCY public="1"><x path="Float"/></penultimateCY>
		<lastClockX public="1"><x path="Float"/></lastClockX>
		<lastClockY public="1"><x path="Float"/></lastClockY>
		<penultimateAX public="1"><x path="Float"/></penultimateAX>
		<penultimateAY public="1"><x path="Float"/></penultimateAY>
		<lastAntiX public="1"><x path="Float"/></lastAntiX>
		<lastAntiY public="1"><x path="Float"/></lastAntiY>
		<pen public="1"><c path="trilateral3.drawing.Pen"/></pen>
		<endLine><x path="trilateral3.drawing.StyleEndLine"/></endLine>
		<ax><x path="Float"/></ax>
		<ay><x path="Float"/></ay>
		<bx><x path="Float"/></bx>
		<by><x path="Float"/></by>
		<cx><x path="Float"/></cx>
		<cy><x path="Float"/></cy>
		<dx><x path="Null"><x path="Float"/></x></dx>
		<dy><x path="Null"><x path="Float"/></x></dy>
		<ex><x path="Null"><x path="Float"/></x></ex>
		<ey><x path="Null"><x path="Float"/></x></ey>
		<dxPrev><x path="Null"><x path="Float"/></x></dxPrev>
		<dyPrev><x path="Null"><x path="Float"/></x></dyPrev>
		<exPrev><x path="Null"><x path="Float"/></x></exPrev>
		<eyPrev><x path="Null"><x path="Float"/></x></eyPrev>
		<dxOld><x path="Null"><x path="Float"/></x></dxOld>
		<dyOld><x path="Null"><x path="Float"/></x></dyOld>
		<exOld><x path="Null"><x path="Float"/></x></exOld>
		<eyOld><x path="Null"><x path="Float"/></x></eyOld>
		<jx><x path="Float"/></jx>
		<jy><x path="Float"/></jy>
		<lastClock><x path="Bool"/></lastClock>
		<jxOld><x path="Float"/></jxOld>
		<jyOld><x path="Float"/></jyOld>
		<kax><x path="Float"/></kax>
		<kay><x path="Float"/></kay>
		<kbx><x path="Float"/></kbx>
		<kby><x path="Float"/></kby>
		<kcx><x path="Float"/></kcx>
		<kcy><x path="Float"/></kcy>
		<ncx><x path="Float"/></ncx>
		<ncy><x path="Float"/></ncy>
		<quadIndex><x path="Float"/></quadIndex>
		<angleA public="1"><x path="Float"/></angleA>
		<halfA public="1"><x path="Float"/></halfA>
		<beta public="1"><x path="Float"/></beta>
		<r><x path="Float"/></r>
		<theta public="1"><x path="Float"/></theta>
		<angle1 public="1"><x path="Null"><x path="Float"/></x></angle1>
		<angle2 public="1"><x path="Float"/></angle2>
		<reset public="1" set="method" line="97"><f a=""><x path="Void"/></f></reset>
		<count public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<computeDE public="1" get="inline" set="null" line="139"><f a=""><x path="Void"/></f></computeDE>
		<anglesCompute get="inline" set="null" line="155"><f a=""><x path="Void"/></f></anglesCompute>
		<thetaComputeAdj get="inline" set="null" line="176"><f a="qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaComputeAdj>
		<triangleJoin public="1" get="inline" set="null" line="193">
			<f a="ax_:ay_:bx_:by_:width_:?curveEnds:?overlap" v=":::::false:false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ overlap : false, curveEnds : false }</e></m></meta>
		</triangleJoin>
		<overlapQuad get="inline" set="null" line="298"><f a=""><x path="Void"/></f></overlapQuad>
		<end public="1" get="inline" set="null" line="306"><f a="width_">
	<x path="Float"/>
	<x path="Void"/>
</f></end>
		<triangle2DFill get="inline" set="null" line="312">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</triangle2DFill>
		<addPieXstart get="inline" set="null" line="316">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : -1 }</e></m></meta>
		</addPieXstart>
		<addPieX get="inline" set="null" line="336">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::0:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : 0 }</e></m></meta>
		</addPieX>
		<addPie get="inline" set="null" line="356">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::0:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : 0 }</e></m></meta>
		</addPie>
		<computeJ get="inline" set="null" line="362"><f a="width_:theta0:dif">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></computeJ>
		<addDot get="inline" set="null" line="372"><f a="x:y:color:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addDot>
		<addSmallTriangles get="inline" set="null" line="398"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addSmallTriangles>
		<triangle2DFillangleCorners get="inline" set="null" line="410"><f a="oldx_:oldy_:prevx_:prevy_:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangle2DFillangleCorners>
		<triangle2DFillangleCornersLess get="inline" set="null" line="422"><f a="oldx_:oldy_:prevx_:prevy_:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangle2DFillangleCornersLess>
		<connectQuadsWhenQuadsOverlay get="inline" set="null" line="433"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></connectQuadsWhenQuadsOverlay>
		<connectQuads get="inline" set="null" line="448"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></connectQuads>
		<addInitialQuads get="inline" set="null" line="464"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addInitialQuads>
		<endEdges public="1" set="method" line="548"><f a=""><x path="Void"/></f></endEdges>
		<counter expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</counter>
		<addQuads set="method" line="574"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addQuads>
		<storeLastQuads get="inline" set="null" line="740"><f a=""><x path="Void"/></f></storeLastQuads>
		<isClockwise get="inline" set="null" line="750"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isClockwise>
		<line public="1" get="inline" set="null" line="753">
			<f a="ax_:ay_:bx_:by_:width_:?endLineCurve" v=":::::no">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.drawing.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLineCurve : no }</e></m></meta>
		</line>
		<new public="1" set="method" line="134">
			<f a="pen_:?endLine_" v=":no">
				<c path="trilateral3.drawing.Pen"/>
				<x path="trilateral3.drawing.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLine_ : no }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.drawing.DrawAbstract" params="" file="src/trilateral3/drawing/DrawAbstract.hx">
		<from><icast><t path="trilateral3.drawing.DrawType"/></icast></from>
		<this><t path="trilateral3.drawing.DrawType"/></this>
		<to><icast><t path="trilateral3.drawing.DrawType"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.drawing._DrawAbstract.DrawAbstract_Impl_" params="" file="src/trilateral3/drawing/DrawAbstract.hx" private="1" module="trilateral3.drawing.DrawAbstract" final="1">
	<_new public="1" get="inline" set="null" line="4" static="1">
		<f a="drawType">
			<t path="trilateral3.drawing.DrawType"/>
			<x path="trilateral3.drawing.DrawAbstract"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="8" static="1">
		<f a="this">
			<t path="trilateral3.drawing.DrawType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="11" static="1">
		<f a="this:v">
			<t path="trilateral3.drawing.DrawType"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<size public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</size>
	<set_size get="inline" set="null" line="16" static="1">
		<f a="this:v">
			<t path="trilateral3.drawing.DrawType"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_size>
	<get_size get="inline" set="null" line="20" static="1">
		<f a="this">
			<t path="trilateral3.drawing.DrawType"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_size>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._DrawAbstract.DrawAbstract_Impl_" params="" file="src/trilateral3/drawing/DrawAbstract.hx" private="1" module="trilateral3.drawing.DrawAbstract" final="1">
		<_new public="1" get="inline" set="null" line="4" static="1">
			<f a="drawType">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="trilateral3.drawing.DrawAbstract"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="8" static="1">
			<f a="this">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="11" static="1">
			<f a="this:v">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<size public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</size>
		<set_size get="inline" set="null" line="16" static="1">
			<f a="this:v">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_size>
		<get_size get="inline" set="null" line="20" static="1">
			<f a="this">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_size>
	</class>
	<typedef path="trilateral3.drawing.DrawType" params="" file="src/trilateral3/drawing/DrawType.hx"><a>
	<triangleCurrent>
		<x path="Null"><x path="trilateral3.drawing.TriangleAbstract"/></x>
		<meta><m n=":optional"/></meta>
	</triangleCurrent>
	<triangle><f a="ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></triangle>
	<transformRange><f a="m:startEnd">
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></transformRange>
	<transform><f a="">
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transform>
	<set_size set="method"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
	<set_pos set="method"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
	<next><f a=""><x path="Float"/></f></next>
	<hasNext><f a=""><x path="Bool"/></f></hasNext>
	<get_size set="method"><f a=""><x path="Int"/></f></get_size>
	<get_pos set="method"><f a=""><x path="Float"/></f></get_pos>
	<getTriangle3D><f a=""><c path="trilateral3.structure.Triangle3D"/></f></getTriangle3D>
</a></typedef>
	<class path="trilateral3.drawing._Fill.Fill_Fields_" params="" file="src/trilateral3/drawing/Fill.hx" private="1" module="trilateral3.drawing.Fill" final="1"><triangulate public="1" set="method" line="11" static="1"><f a="pen:sketch:fillForm">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.drawing.Sketch"/>
	<x path="trilateral3.drawing.StyleFill"/>
	<x path="Void"/>
</f></triangulate></class>
	<class path="trilateral3.drawing.Pen" params="" file="src/trilateral3/drawing/Pen.hx">
		<rounded public="1" expr="30">
			<x path="Float"/>
			<meta><m n=":value"><e>30</e></m></meta>
		</rounded>
		<dz public="1" expr="0.01">
			<x path="Float"/>
			<meta><m n=":value"><e>0.01</e></m></meta>
		</dz>
		<currentColor public="1" expr="0xFACADE">
			<x path="Int"/>
			<meta><m n=":value"><e>0xFACADE</e></m></meta>
		</currentColor>
		<drawType public="1"><x path="trilateral3.drawing.DrawAbstract"/></drawType>
		<colorType public="1"><x path="trilateral3.drawing.ColorAbstract"/></colorType>
		<translateX public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></translateX>
		<translateY public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></translateY>
		<translateZ public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></translateZ>
		<rotateX public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></rotateX>
		<rotateY public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></rotateY>
		<rotateZ public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></rotateZ>
		<indices public="1" expr="[]">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</indices>
		<transformRange public="1" get="inline" set="null" line="30"><f a="trans:ir">
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></transformRange>
		<up public="1" get="inline" set="null" line="34"><f a="ir">
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></up>
		<down public="1" get="inline" set="null" line="39"><f a="ir">
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></down>
		<back public="1" get="inline" set="null" line="44"><f a="ir">
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></back>
		<transBack get="inline" set="null" line="48"><f a=""><c path="trilateral3.matrix.MatrixDozen"/></f></transBack>
		<cornerColor public="1" get="inline" set="null" line="78">
			<f a="?color" v="-1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color : -1 }</e></m></meta>
		</cornerColor>
		<cornerColors public="1" get="inline" set="null" line="83"><f a="colorA:colorB:colorC">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
		<middleColor public="1" get="inline" set="null" line="87"><f a="color:colorCentre">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></middleColor>
		<middleColors public="1" get="inline" set="null" line="91"><f a="color:colorCentre:times">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></middleColors>
		<colorTriangles public="1" get="inline" set="null" line="97"><f a="color:times">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
		<addTriangle public="1" get="inline" set="null" line="102"><f a="ax:ay:az:bx:by:bz:cx:cy:cz">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addTriangle>
		<triangle2DFill public="1" get="inline" set="null" line="111">
			<f a="ax:ay:bx:by:cx:cy:?color" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ color : -1 }</e></m></meta>
		</triangle2DFill>
		<pos public="1" get="accessor" set="accessor"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="123"><f a=""><x path="Float"/></f></get_pos>
		<set_pos get="inline" set="null" line="127"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<triangleCurrent public="1" get="accessor" set="null">
			<x path="trilateral3.drawing.TriangleAbstract"/>
			<haxe_doc>* Only optionally available use with care, works with PenNodule.</haxe_doc>
		</triangleCurrent>
		<get_triangleCurrent get="inline" set="null" line="137"><f a=""><x path="trilateral3.drawing.TriangleAbstract"/></f></get_triangleCurrent>
		<color3Current public="1" get="accessor" set="null">
			<x path="trilateral3.drawing.Color3Abstract"/>
			<haxe_doc>* Only possible if using interleave data structure !! use with care.</haxe_doc>
		</color3Current>
		<get_color3Current get="inline" set="null" line="145"><f a=""><x path="trilateral3.drawing.Color3Abstract"/></f></get_color3Current>
		<copyRange public="1" get="inline" set="null" line="149"><f a="otherPen:startEnd:vec">
	<c path="trilateral3.drawing.Pen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<c path="trilateral3.matrix.Vertex"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></copyRange>
		<new public="1" set="method" line="26"><f a="drawType_:colorType_">
	<x path="trilateral3.drawing.DrawAbstract"/>
	<x path="trilateral3.drawing.ColorAbstract"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="trilateral3.drawing.Dim" params="" file="src/trilateral3/drawing/Sketch.hx" module="trilateral3.drawing.Sketch"><a>
	<minY><x path="Float"/></minY>
	<minX><x path="Float"/></minX>
	<maxY><x path="Float"/></maxY>
	<maxX><x path="Float"/></maxX>
</a></typedef>
	<class path="trilateral3.drawing.Sketch" params="" file="src/trilateral3/drawing/Sketch.hx">
		<implements path="justPath.IPathContext"/>
		<create public="1" get="inline" set="null" line="80" static="1">
			<f a="drawType_:colorType_:sketchForm_:?endLine_" v=":::no">
				<x path="trilateral3.drawing.DrawAbstract"/>
				<x path="trilateral3.drawing.ColorAbstract"/>
				<x path="trilateral3.drawing.StyleSketch"/>
				<x path="trilateral3.drawing.StyleEndLine"/>
				<c path="trilateral3.drawing.Sketch"/>
			</f>
			<meta><m n=":value"><e>{ endLine_ : no }</e></m></meta>
		</create>
		<x expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<width public="1" expr="0.01">
			<x path="Float"/>
			<meta><m n=":value"><e>0.01</e></m></meta>
		</width>
		<widthFunction public="1"><f a="::::">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></widthFunction>
		<colourFunction public="1"><f a="::::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colourFunction>
		<tempArr><c path="Array"><x path="Float"/></c></tempArr>
		<contour public="1"><c path="trilateral3.drawing.Contour"/></contour>
		<pen><c path="trilateral3.drawing.Pen"/></pen>
		<endLine><x path="trilateral3.drawing.StyleEndLine"/></endLine>
		<sketchForm><x path="trilateral3.drawing.StyleSketch"/></sketchForm>
		<points public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></points>
		<pointsClock public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></pointsClock>
		<pointsAnti public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></pointsAnti>
		<dim public="1"><c path="Array"><t path="trilateral3.drawing.Dim"/></c></dim>
		<tracerLine get="inline" set="null" line="29"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></tracerLine>
		<fillOnlyLine get="inline" set="null" line="32"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillOnlyLine>
		<baseLine set="method" line="34"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></baseLine>
		<crudeLine get="inline" set="null" line="38"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></crudeLine>
		<roundEndLine get="inline" set="null" line="41"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></roundEndLine>
		<mediumLine get="inline" set="null" line="44"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></mediumLine>
		<mediumOverlapLine get="inline" set="null" line="47"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></mediumOverlapLine>
		<fineLine get="inline" set="null" line="50"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fineLine>
		<fineOverlapLine get="inline" set="null" line="53"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fineOverlapLine>
		<line public="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></line>
		<reset public="1" set="method" line="90"><f a=""><x path="Void"/></f></reset>
		<pointsNoEndOverlap public="1" set="method" line="99"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></pointsNoEndOverlap>
		<pointsRewound public="1" set="method" line="153"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></pointsRewound>
		<initDim get="inline" set="null" line="213"><f a=""><t path="trilateral3.drawing.Dim"/></f></initDim>
		<updateDim get="inline" set="null" line="216"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateDim>
		<moveTo public="1" set="method" line="223"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lastClock public="1" get="inline" set="null" line="240"><f a=""><x path="Void"/></f></lastClock>
		<getEdges public="1" get="inline" set="null" line="250"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></getEdges>
		<lineTo public="1" get="inline" set="null" line="278"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" get="inline" set="null" line="295"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<quadThru public="1" get="inline" set="null" line="304"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadThru>
		<curveTo public="1" get="inline" set="null" line="310"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<plotCoord public="1" get="inline" set="null" line="318">
			<f a="arr:?withMove" v=":true">
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ withMove : true }</e></m></meta>
		</plotCoord>
		<aiString public="1" get="inline" set="null" line="333">
			<f a="str:x:y:?flipY" v=":::0">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ flipY : 0 }</e></m></meta>
		</aiString>
		<new public="1" set="method" line="57">
			<f a="pen_:sketchForm_:?endLine_" v="::no">
				<c path="trilateral3.drawing.Pen"/>
				<x path="trilateral3.drawing.StyleSketch"/>
				<x path="trilateral3.drawing.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLine_ : no }</e></m></meta>
		</new>
	</class>
	<abstract path="trilateral3.drawing.StyleEndLine" params="" file="src/trilateral3/drawing/StyleEndLine.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="trilateral3.drawing._StyleEndLine.StyleEndLine_Impl_" params="" file="src/trilateral3/drawing/StyleEndLine.hx" private="1" module="trilateral3.drawing.StyleEndLine" extern="1" final="1">
	<no public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="trilateral3.drawing.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</no>
	<begin public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="trilateral3.drawing.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</begin>
	<end public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="trilateral3.drawing.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</end>
	<both public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="trilateral3.drawing.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</both>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._StyleEndLine.StyleEndLine_Impl_" params="" file="src/trilateral3/drawing/StyleEndLine.hx" private="1" module="trilateral3.drawing.StyleEndLine" extern="1" final="1">
		<no public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="trilateral3.drawing.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</no>
		<begin public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="trilateral3.drawing.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</begin>
		<end public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="trilateral3.drawing.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</end>
		<both public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="trilateral3.drawing.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</both>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="trilateral3.drawing.StyleFill" params="" file="src/trilateral3/drawing/StyleFill.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="trilateral3.drawing._StyleFill.StyleFill_Impl_" params="" file="src/trilateral3/drawing/StyleFill.hx" private="1" module="trilateral3.drawing.StyleFill" extern="1" final="1">
	<tess2 public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="trilateral3.drawing.StyleFill"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</tess2>
	<polyK public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="trilateral3.drawing.StyleFill"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</polyK>
	<poly2tri public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="trilateral3.drawing.StyleFill"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</poly2tri>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._StyleFill.StyleFill_Impl_" params="" file="src/trilateral3/drawing/StyleFill.hx" private="1" module="trilateral3.drawing.StyleFill" extern="1" final="1">
		<tess2 public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="trilateral3.drawing.StyleFill"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</tess2>
		<polyK public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="trilateral3.drawing.StyleFill"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</polyK>
		<poly2tri public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="trilateral3.drawing.StyleFill"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</poly2tri>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="trilateral3.drawing.StyleSketch" params="" file="src/trilateral3/drawing/StyleSketch.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="trilateral3.drawing._StyleSketch.StyleSketch_Impl_" params="" file="src/trilateral3/drawing/StyleSketch.hx" private="1" module="trilateral3.drawing.StyleSketch" extern="1" final="1">
	<Tracer public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Tracer>
	<Base public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Base>
	<Crude public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Crude>
	<FillOnly public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FillOnly>
	<Fine public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Fine>
	<FineOverlap public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FineOverlap>
	<Medium public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Medium>
	<MediumOverlap public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MediumOverlap>
	<RoundEnd public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RoundEnd>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._StyleSketch.StyleSketch_Impl_" params="" file="src/trilateral3/drawing/StyleSketch.hx" private="1" module="trilateral3.drawing.StyleSketch" extern="1" final="1">
		<Tracer public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Tracer>
		<Base public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Base>
		<Crude public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Crude>
		<FillOnly public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FillOnly>
		<Fine public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Fine>
		<FineOverlap public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FineOverlap>
		<Medium public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Medium>
		<MediumOverlap public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MediumOverlap>
		<RoundEnd public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RoundEnd>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="trilateral3.drawing.TriangleAbstract" params="" file="src/trilateral3/drawing/TriangleAbstract.hx">
		<from><icast><t path="trilateral3.drawing.TriangleType"/></icast></from>
		<this><t path="trilateral3.drawing.TriangleType"/></this>
		<to><icast><t path="trilateral3.drawing.TriangleType"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.drawing._TriangleAbstract.TriangleAbstract_Impl_" params="" file="src/trilateral3/drawing/TriangleAbstract.hx" private="1" module="trilateral3.drawing.TriangleAbstract" final="1">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="triangleType">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="trilateral3.drawing.TriangleAbstract"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="9" static="1">
		<f a="this">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<back public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</back>
	<get_back get="inline" set="null" line="13" static="1">
		<f a="this">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_back>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="17" static="1">
		<f a="this">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="21" static="1">
		<f a="this">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="24" static="1">
		<f a="this:v">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="28" static="1">
		<f a="this">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="31" static="1">
		<f a="this:v">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</z>
	<get_z get="inline" set="null" line="35" static="1">
		<f a="this">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_z get="inline" set="null" line="38" static="1">
		<f a="this:v">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._TriangleAbstract.TriangleAbstract_Impl_" params="" file="src/trilateral3/drawing/TriangleAbstract.hx" private="1" module="trilateral3.drawing.TriangleAbstract" final="1">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="triangleType">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="trilateral3.drawing.TriangleAbstract"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="9" static="1">
			<f a="this">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<back public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</back>
		<get_back get="inline" set="null" line="13" static="1">
			<f a="this">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_back>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="17" static="1">
			<f a="this">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="21" static="1">
			<f a="this">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="24" static="1">
			<f a="this:v">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="28" static="1">
			<f a="this">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="31" static="1">
			<f a="this:v">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</z>
		<get_z get="inline" set="null" line="35" static="1">
			<f a="this">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_z get="inline" set="null" line="38" static="1">
			<f a="this:v">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
	</class>
	<typedef path="trilateral3.drawing.TriangleType" params="" file="src/trilateral3/drawing/TriangleType.hx"><a>
	<triangle><f a="ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></triangle>
	<transform><f a="">
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transform>
	<set_z set="method"><f a="z">
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
	<set_y set="method"><f a="y">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<set_x set="method"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<rotateTrig><f a="x:y:cos:sin">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
	<rotate><f a="x:y:theta">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<moveDelta><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
	<liteHit><f a="px:py">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
	<get_z set="method"><f a=""><x path="Float"/></f></get_z>
	<get_y set="method"><f a=""><x path="Float"/></f></get_y>
	<get_x set="method"><f a=""><x path="Float"/></f></get_x>
	<get_right set="method"><f a=""><x path="Float"/></f></get_right>
	<get_bottom set="method"><f a=""><x path="Float"/></f></get_bottom>
	<get_back set="method"><f a=""><x path="Float"/></f></get_back>
	<getTriangle3D><f a=""><c path="trilateral3.structure.Triangle3D"/></f></getTriangle3D>
	<fullHit><f a="px:py">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
</a></typedef>
	<abstract path="trilateral3.geom.FlatColorTriangles" params="" file="src/trilateral3/geom/FlatColorTriangles.hx">
		<this><x path="dsHelper.flatInterleave.FloatColorTriangles"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_" params="" file="src/trilateral3/geom/FlatColorTriangles.hx" private="1" module="trilateral3.geom.FlatColorTriangles" final="1">
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="trilateral3.geom.FlatColorTriangles"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<transform public="1" set="method" line="16" static="1">
		<f a="this:m">
			<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
			<c path="trilateral3.matrix.MatrixDozen"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transform>
	<transformAll public="1" set="method" line="34" static="1">
		<f a="this:m">
			<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
			<c path="trilateral3.matrix.MatrixDozen"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transformAll>
	<transformRange public="1" set="method" line="42" static="1">
		<f a="this:m:startEnd">
			<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
			<c path="trilateral3.matrix.MatrixDozen"/>
			<x path="trilateral3.shape.IndexRange"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transformRange>
	<getTriangle3D public="1" get="inline" set="null" line="53" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
			<c path="trilateral3.structure.Triangle3D"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getTriangle3D>
	<getTriInt public="1" get="inline" set="null" line="60" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
			<c path="trilateral3.structure.TriInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getTriInt>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_" params="" file="src/trilateral3/geom/FlatColorTriangles.hx" private="1" module="trilateral3.geom.FlatColorTriangles" final="1">
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="trilateral3.geom.FlatColorTriangles"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<transform public="1" set="method" line="16" static="1">
			<f a="this:m">
				<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
				<c path="trilateral3.matrix.MatrixDozen"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transform>
		<transformAll public="1" set="method" line="34" static="1">
			<f a="this:m">
				<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
				<c path="trilateral3.matrix.MatrixDozen"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transformAll>
		<transformRange public="1" set="method" line="42" static="1">
			<f a="this:m:startEnd">
				<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
				<c path="trilateral3.matrix.MatrixDozen"/>
				<x path="trilateral3.shape.IndexRange"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transformRange>
		<getTriangle3D public="1" get="inline" set="null" line="53" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
				<c path="trilateral3.structure.Triangle3D"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getTriangle3D>
		<getTriInt public="1" get="inline" set="null" line="60" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
				<c path="trilateral3.structure.TriInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getTriInt>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.geom.FlatColors" params="" file="src/trilateral3/geom/FlatColors.hx">
		<this><x path="dsHelper.flat.f32.Float32FlatRGBA"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.geom._FlatColors.FlatColors_Impl_" params="" file="src/trilateral3/geom/FlatColors.hx" private="1" module="trilateral3.geom.FlatColors" final="1">
	<_new public="1" get="inline" set="null" line="12" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="trilateral3.geom.FlatColors"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<getTriInt public="1" get="inline" set="null" line="15" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32FlatRGBA"/>
			<c path="trilateral3.structure.TriInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getTriInt>
</class></impl>
	</abstract>
	<class path="trilateral3.geom._FlatColors.FlatColors_Impl_" params="" file="src/trilateral3/geom/FlatColors.hx" private="1" module="trilateral3.geom.FlatColors" final="1">
		<_new public="1" get="inline" set="null" line="12" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="trilateral3.geom.FlatColors"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<getTriInt public="1" get="inline" set="null" line="15" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32FlatRGBA"/>
				<c path="trilateral3.structure.TriInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getTriInt>
	</class>
	<abstract path="trilateral3.geom.FlatTriangles" params="" file="src/trilateral3/geom/FlatTriangles.hx">
		<this><x path="dsHelper.flat.f32.Float32FlatTriangle"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.geom._FlatTriangles.FlatTriangles_Impl_" params="" file="src/trilateral3/geom/FlatTriangles.hx" private="1" module="trilateral3.geom.FlatTriangles" final="1">
	<_new public="1" get="inline" set="null" line="11" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="trilateral3.geom.FlatTriangles"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<transform public="1" set="method" line="14" static="1">
		<f a="this:m">
			<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
			<c path="trilateral3.matrix.MatrixDozen"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transform>
	<transformAll public="1" set="method" line="32" static="1">
		<f a="this:m">
			<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
			<c path="trilateral3.matrix.MatrixDozen"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transformAll>
	<transformRange public="1" set="method" line="40" static="1">
		<f a="this:m:startEnd">
			<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
			<c path="trilateral3.matrix.MatrixDozen"/>
			<x path="trilateral3.shape.IndexRange"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transformRange>
	<getTriangle3D public="1" get="inline" set="null" line="51" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
			<c path="trilateral3.structure.Triangle3D"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getTriangle3D>
</class></impl>
	</abstract>
	<class path="trilateral3.geom._FlatTriangles.FlatTriangles_Impl_" params="" file="src/trilateral3/geom/FlatTriangles.hx" private="1" module="trilateral3.geom.FlatTriangles" final="1">
		<_new public="1" get="inline" set="null" line="11" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="trilateral3.geom.FlatTriangles"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<transform public="1" set="method" line="14" static="1">
			<f a="this:m">
				<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
				<c path="trilateral3.matrix.MatrixDozen"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transform>
		<transformAll public="1" set="method" line="32" static="1">
			<f a="this:m">
				<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
				<c path="trilateral3.matrix.MatrixDozen"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transformAll>
		<transformRange public="1" set="method" line="40" static="1">
			<f a="this:m:startEnd">
				<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
				<c path="trilateral3.matrix.MatrixDozen"/>
				<x path="trilateral3.shape.IndexRange"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transformRange>
		<getTriangle3D public="1" get="inline" set="null" line="51" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
				<c path="trilateral3.structure.Triangle3D"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getTriangle3D>
	</class>
	<class path="trilateral3.geom._Transformer.Transformer_Fields_" params="" file="src/trilateral3/geom/Transformer.hx" private="1" module="trilateral3.geom.Transformer" final="1">
		<multiplyTransform public="1" get="inline" set="null" line="5" static="1"><f a="r:s">
	<c path="trilateral3.matrix.MatrixDozen"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></multiplyTransform>
		<transformVertex public="1" get="inline" set="null" line="16" static="1"><f a="v:t">
	<c path="trilateral3.matrix.Vertex"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<c path="trilateral3.matrix.Vertex"/>
</f></transformVertex>
		<unitTransform public="1" get="inline" set="null" line="24" static="1"><f a=""><c path="trilateral3.matrix.MatrixDozen"/></f></unitTransform>
	</class>
	<class path="trilateral3.math.Algebra" params="" file="src/trilateral3/math/Algebra.hx">
		<adjustWinding_ public="1" expr="adjustWinding">
			<f a="A_:B_:C_">
				<c path="trilateral3.structure.XY"/>
				<c path="trilateral3.structure.XY"/>
				<c path="trilateral3.structure.XY"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>adjustWinding</e></m></meta>
		</adjustWinding_>
		<minusXY_ public="1" expr="minusXY">
			<f a="a:b">
				<c path="trilateral3.structure.XY"/>
				<c path="trilateral3.structure.XY"/>
				<c path="trilateral3.structure.XY"/>
			</f>
			<meta><m n=":value"><e>minusXY</e></m></meta>
		</minusXY_>
		<sign_ public="1" expr="sign">
			<f a="n">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>sign</e></m></meta>
		</sign_>
		<quadCurve_ public="1" expr="quadCurve">
			<f a="p:ax:ay:bx:by:cx:cy">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>quadCurve</e></m></meta>
		</quadCurve_>
		<cubicCurve_ public="1" expr="cubicCurve">
			<f a="p:ax:ay:bx:by:cx:cy:dx:dy">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>cubicCurve</e></m></meta>
		</cubicCurve_>
		<calculateQuadStep_ public="1" expr="calculateQuadStep">
			<f a="ax:ay:bx:by:cx:cy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>calculateQuadStep</e></m></meta>
		</calculateQuadStep_>
		<calculateCubicStep_ public="1" expr="calculateCubicStep">
			<f a="ax:ay:bx:by:cx:cy:dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>calculateCubicStep</e></m></meta>
		</calculateCubicStep_>
		<lineAB_ public="1" expr="lineAB">
			<f a="A:B:width">
				<c path="trilateral3.structure.XY"/>
				<c path="trilateral3.structure.XY"/>
				<x path="Float"/>
				<c path="trilateral3.structure.Quad2D"/>
			</f>
			<meta><m n=":value"><e>lineAB</e></m></meta>
		</lineAB_>
		<lineABCoord_ public="1" expr="lineABCoord">
			<f a="ax:ay:bx:by:width">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="trilateral3.structure.Quad2D"/>
			</f>
			<meta><m n=":value"><e>lineABCoord</e></m></meta>
		</lineABCoord_>
		<rotateVectorLine_ public="1" expr="rotateVectorLine">
			<f a="pos:dim:omega:pivotX:pivotY">
				<c path="trilateral3.structure.XY"/>
				<c path="trilateral3.structure.XY"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="trilateral3.structure.Quad2D"/>
			</f>
			<meta><m n=":value"><e>rotateVectorLine</e></m></meta>
		</rotateVectorLine_>
		<pivotCheap_ public="1" expr="pivotCheap">
			<f a="p:sin:cos:pivotX:pivotY">
				<c path="trilateral3.structure.XY"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="trilateral3.structure.XY"/>
			</f>
			<meta><m n=":value"><e>pivotCheap</e></m></meta>
		</pivotCheap_>
		<pivot_ public="1" expr="pivot">
			<f a="p:omega:pivotX:pivotY">
				<c path="trilateral3.structure.XY"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="trilateral3.structure.XY"/>
			</f>
			<meta><m n=":value"><e>pivot</e></m></meta>
		</pivot_>
		<thetaCheap_ public="1" expr="thetaCheap">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>thetaCheap</e></m></meta>
		</thetaCheap_>
		<distCheap_ public="1" expr="distCheap">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>distCheap</e></m></meta>
		</distCheap_>
		<distance_ public="1" expr="distance">
			<f a="px:py:qx:qy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>distance</e></m></meta>
		</distance_>
		<quadraticThru_ public="1" expr="quadraticThru">
			<f a="t:s:c:e">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>quadraticThru</e></m></meta>
		</quadraticThru_>
		<quadratic_ public="1" expr="quadratic">
			<f a="t:s:c:e">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>quadratic</e></m></meta>
		</quadratic_>
		<quadSegment_ public="1" expr="quadSegment">
			<f a="t0:t1:s:c:e">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>quadSegment</e></m></meta>
		</quadSegment_>
		<cubic_ public="1" expr="cubic">
			<f a="t:s:c1:c2:e">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>cubic</e></m></meta>
		</cubic_>
		<perp_ public="1" expr="perp">
			<f a="a:b">
				<c path="trilateral3.structure.XY"/>
				<c path="trilateral3.structure.XY"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>perp</e></m></meta>
		</perp_>
		<new public="1" set="method" line="168">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="trilateral3.math._Algebra.Algebra_Fields_" params="" file="src/trilateral3/math/Algebra.hx" private="1" module="trilateral3.math.Algebra" final="1">
		<adjustWinding public="1" get="inline" set="null" line="7" static="1"><f a="A_:B_:C_">
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<x path="Bool"/>
</f></adjustWinding>
		<minusXY public="1" get="inline" set="null" line="14" static="1"><f a="a:b">
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
</f></minusXY>
		<sign public="1" get="inline" set="null" line="19" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<quadStep public="1" expr="0.03" line="22" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.03</e></m></meta>
		</quadStep>
		<quadCurve public="1" get="inline" set="null" line="25" static="1"><f a="p:ax:ay:bx:by:cx:cy">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
</f></quadCurve>
		<cubicStep public="1" get="inline" set="null" expr="0.03" line="41" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.03</e></m></meta>
		</cubicStep>
		<cubicCurve public="1" get="inline" set="null" line="44" static="1"><f a="p:ax:ay:bx:by:cx:cy:dx:dy">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
</f></cubicCurve>
		<calculateQuadStep public="1" get="inline" set="null" line="60" static="1"><f a="ax:ay:bx:by:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculateQuadStep>
		<calculateCubicStep public="1" get="inline" set="null" line="66" static="1"><f a="ax:ay:bx:by:cx:cy:dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculateCubicStep>
		<lineAB public="1" get="inline" set="null" line="73" static="1"><f a="A:B:width">
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<x path="Float"/>
	<c path="trilateral3.structure.Quad2D"/>
</f></lineAB>
		<lineABCoord public="1" get="inline" set="null" line="83" static="1"><f a="ax:ay:bx:by:width">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="trilateral3.structure.Quad2D"/>
</f></lineABCoord>
		<rotateVectorLine public="1" get="inline" set="null" line="92" static="1"><f a="pos:dim:omega:pivotX:pivotY">
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="trilateral3.structure.Quad2D"/>
</f></rotateVectorLine>
		<pivotCheap public="1" get="inline" set="null" line="114" static="1"><f a="p:sin:cos:pivotX:pivotY">
	<c path="trilateral3.structure.XY"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="trilateral3.structure.XY"/>
</f></pivotCheap>
		<pivot public="1" get="inline" set="null" line="122" static="1"><f a="p:omega:pivotX:pivotY">
	<c path="trilateral3.structure.XY"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="trilateral3.structure.XY"/>
</f></pivot>
		<thetaCheap public="1" get="inline" set="null" line="130" static="1"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaCheap>
		<distCheap public="1" get="inline" set="null" line="134" static="1"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distCheap>
		<distance public="1" get="inline" set="null" line="138" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distance>
		<quadraticThru public="1" get="inline" set="null" line="144" static="1"><f a="t:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadraticThru>
		<quadratic public="1" get="inline" set="null" line="149" static="1"><f a="t:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadratic>
		<quadSegment public="1" get="inline" set="null" line="154" static="1"><f a="t0:t1:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadSegment>
		<cubic public="1" get="inline" set="null" line="159" static="1"><f a="t:s:c1:c2:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cubic>
		<perp public="1" get="inline" set="null" line="164" static="1"><f a="a:b">
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<x path="Float"/>
</f></perp>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="trilateral3.matrix.MatrixDozen" params="" file="src/trilateral3/matrix/MatrixDozen.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<d public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</d>
		<e public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</e>
		<f public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</f>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<h public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</h>
		<i public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</i>
		<j public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</j>
		<k public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</k>
		<l public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</l>
		<new set="method" line="12"><f a="a:b:c:d:e:f:g:h:i:j:k:l">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.matrix.Vertex" params="" file="src/trilateral3/matrix/Vertex.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<z public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</z>
		<w public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</w>
		<new set="method" line="16">
			<f a="x:y:z:?w" v=":::1.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1. }</e></m></meta>
		</new>
		<haxe_doc>{ x, y, z, w }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.nodule.PenNodule" params="" file="src/trilateral3/nodule/PenNodule.hx">
		<largeEnough final="1" set="null" expr="20000000" line="12" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>20000000</e></m></meta>
		</largeEnough>
		<colorTriangles public="1" expr="new FlatColorTriangles(largeEnough)">
			<x path="trilateral3.geom.FlatColorTriangles"/>
			<meta><m n=":value"><e>new FlatColorTriangles(largeEnough)</e></m></meta>
		</colorTriangles>
		<pen public="1"><c path="trilateral3.drawing.Pen"/></pen>
		<createPen public="1" set="method" line="25"><f a=""><x path="Void"/></f></createPen>
		<data public="1" get="accessor" set="null"><t path="dsHelper.haxe.io.Float32Array"/></data>
		<get_data public="1" get="inline" set="null" line="85"><f a=""><t path="dsHelper.haxe.io.Float32Array"/></f></get_data>
		<size public="1" get="accessor" set="null"><x path="Int"/></size>
		<get_size public="1" get="inline" set="null" line="90"><f a=""><x path="Int"/></f></get_size>
		<new public="1" set="method" line="15">
			<f a="?useGLScale" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useGLScale : true }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.shape.IndexRange" params="" file="src/trilateral3/shape/IndexRange.hx">
		<from><icast><c path="trilateral3.structure.StartEnd"/></icast></from>
		<this><c path="trilateral3.structure.StartEnd"/></this>
		<to><icast><c path="trilateral3.structure.StartEnd"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.shape._IndexRange.IndexRange_Impl_" params="" file="src/trilateral3/shape/IndexRange.hx" private="1" module="trilateral3.shape.IndexRange" final="1">
	<_new public="1" set="method" line="5" static="1">
		<f a="startEnd">
			<c path="trilateral3.structure.StartEnd"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<adding public="1" get="inline" set="null" line="6" static="1">
		<f a="a:b">
			<x path="trilateral3.shape.IndexRange"/>
			<x path="trilateral3.shape.IndexRange"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</adding>
	<add public="1" get="inline" set="null" line="10" static="1">
		<f a="this:b">
			<c path="trilateral3.structure.StartEnd"/>
			<c path="trilateral3.structure.StartEnd"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</add>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="18" static="1">
		<f a="this">
			<c path="trilateral3.structure.StartEnd"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.shape._IndexRange.IndexRange_Impl_" params="" file="src/trilateral3/shape/IndexRange.hx" private="1" module="trilateral3.shape.IndexRange" final="1">
		<_new public="1" set="method" line="5" static="1">
			<f a="startEnd">
				<c path="trilateral3.structure.StartEnd"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<adding public="1" get="inline" set="null" line="6" static="1">
			<f a="a:b">
				<x path="trilateral3.shape.IndexRange"/>
				<x path="trilateral3.shape.IndexRange"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</adding>
		<add public="1" get="inline" set="null" line="10" static="1">
			<f a="this:b">
				<c path="trilateral3.structure.StartEnd"/>
				<c path="trilateral3.structure.StartEnd"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</add>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="18" static="1">
			<f a="this">
				<c path="trilateral3.structure.StartEnd"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.shape.PolyEdge" params="" file="src/trilateral3/shape/PolyEdge.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="trilateral3.shape._PolyEdge.PolyEdge_Impl_" params="" file="src/trilateral3/shape/PolyEdge.hx" private="1" module="trilateral3.shape.PolyEdge" extern="1" final="1">
	<triangle public="1" get="inline" set="null" expr="cast 3" line="3" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</triangle>
	<quadrilateral public="1" get="inline" set="null" expr="cast 4" line="4" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</quadrilateral>
	<tetragon public="1" get="inline" set="null" expr="cast 4" line="6" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</tetragon>
	<pentagon public="1" get="inline" set="null" expr="cast 5" line="7" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</pentagon>
	<hexagon public="1" get="inline" set="null" expr="cast 6" line="8" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</hexagon>
	<heptagon public="1" get="inline" set="null" expr="cast 7" line="9" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</heptagon>
	<septagon public="1" get="inline" set="null" expr="cast 7" line="10" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</septagon>
	<octagon public="1" get="inline" set="null" expr="cast 8" line="11" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</octagon>
	<nonagon public="1" get="inline" set="null" expr="cast 9" line="12" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</nonagon>
	<enneagon public="1" get="inline" set="null" expr="cast 9" line="13" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</enneagon>
	<decagon public="1" get="inline" set="null" expr="cast 10" line="14" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</decagon>
	<hendecagon public="1" get="inline" set="null" expr="cast 11" line="15" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</hendecagon>
	<undecagon public="1" get="inline" set="null" expr="cast 11" line="16" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</undecagon>
	<dodecagon public="1" get="inline" set="null" expr="cast 12" line="17" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</dodecagon>
	<dozen public="1" get="inline" set="null" expr="cast 12" line="18" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</dozen>
	<triskaidecagon public="1" get="inline" set="null" expr="cast 13" line="19" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</triskaidecagon>
	<tetrakaidecagon public="1" get="inline" set="null" expr="cast 14" line="20" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</tetrakaidecagon>
	<pentadecagon public="1" get="inline" set="null" expr="cast 15" line="21" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 15</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</pentadecagon>
	<hexakaidecagon public="1" get="inline" set="null" expr="cast 16" line="22" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</hexakaidecagon>
	<heptadecagon public="1" get="inline" set="null" expr="cast 17" line="23" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 17</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</heptadecagon>
	<octakaidecagon public="1" get="inline" set="null" expr="cast 18" line="24" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 18</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</octakaidecagon>
	<enneadecagon public="1" get="inline" set="null" expr="cast 19" line="25" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 19</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</enneadecagon>
	<icosagon public="1" get="inline" set="null" expr="cast 20" line="26" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 20</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</icosagon>
	<triacontagon public="1" get="inline" set="null" expr="cast 30" line="27" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 30</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</triacontagon>
	<tetracontagon public="1" get="inline" set="null" expr="cast 40" line="28" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 40</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</tetracontagon>
	<pentacontagon public="1" get="inline" set="null" expr="cast 50" line="29" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 50</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</pentacontagon>
	<hexacontagon public="1" get="inline" set="null" expr="cast 60" line="30" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 60</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</hexacontagon>
	<heptacontagon public="1" get="inline" set="null" expr="cast 70" line="31" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 70</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</heptacontagon>
	<octacontagon public="1" get="inline" set="null" expr="cast 80" line="32" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 80</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</octacontagon>
	<enneacontagon public="1" get="inline" set="null" expr="cast 90" line="33" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 90</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</enneacontagon>
	<hectagon public="1" get="inline" set="null" expr="cast 100" line="34" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 100</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</hectagon>
	<chiliagon public="1" get="inline" set="null" expr="cast 1000" line="35" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 1000</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</chiliagon>
	<myriagon public="1" get="inline" set="null" expr="cast 10000" line="36" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 10000</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</myriagon>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.shape._PolyEdge.PolyEdge_Impl_" params="" file="src/trilateral3/shape/PolyEdge.hx" private="1" module="trilateral3.shape.PolyEdge" extern="1" final="1">
		<triangle public="1" get="inline" set="null" expr="cast 3" line="3" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</triangle>
		<quadrilateral public="1" get="inline" set="null" expr="cast 4" line="4" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</quadrilateral>
		<tetragon public="1" get="inline" set="null" expr="cast 4" line="6" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</tetragon>
		<pentagon public="1" get="inline" set="null" expr="cast 5" line="7" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</pentagon>
		<hexagon public="1" get="inline" set="null" expr="cast 6" line="8" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</hexagon>
		<heptagon public="1" get="inline" set="null" expr="cast 7" line="9" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</heptagon>
		<septagon public="1" get="inline" set="null" expr="cast 7" line="10" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</septagon>
		<octagon public="1" get="inline" set="null" expr="cast 8" line="11" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</octagon>
		<nonagon public="1" get="inline" set="null" expr="cast 9" line="12" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</nonagon>
		<enneagon public="1" get="inline" set="null" expr="cast 9" line="13" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</enneagon>
		<decagon public="1" get="inline" set="null" expr="cast 10" line="14" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</decagon>
		<hendecagon public="1" get="inline" set="null" expr="cast 11" line="15" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</hendecagon>
		<undecagon public="1" get="inline" set="null" expr="cast 11" line="16" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</undecagon>
		<dodecagon public="1" get="inline" set="null" expr="cast 12" line="17" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</dodecagon>
		<dozen public="1" get="inline" set="null" expr="cast 12" line="18" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</dozen>
		<triskaidecagon public="1" get="inline" set="null" expr="cast 13" line="19" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</triskaidecagon>
		<tetrakaidecagon public="1" get="inline" set="null" expr="cast 14" line="20" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</tetrakaidecagon>
		<pentadecagon public="1" get="inline" set="null" expr="cast 15" line="21" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 15</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</pentadecagon>
		<hexakaidecagon public="1" get="inline" set="null" expr="cast 16" line="22" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</hexakaidecagon>
		<heptadecagon public="1" get="inline" set="null" expr="cast 17" line="23" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 17</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</heptadecagon>
		<octakaidecagon public="1" get="inline" set="null" expr="cast 18" line="24" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 18</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</octakaidecagon>
		<enneadecagon public="1" get="inline" set="null" expr="cast 19" line="25" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 19</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</enneadecagon>
		<icosagon public="1" get="inline" set="null" expr="cast 20" line="26" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 20</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</icosagon>
		<triacontagon public="1" get="inline" set="null" expr="cast 30" line="27" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 30</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</triacontagon>
		<tetracontagon public="1" get="inline" set="null" expr="cast 40" line="28" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 40</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</tetracontagon>
		<pentacontagon public="1" get="inline" set="null" expr="cast 50" line="29" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 50</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</pentacontagon>
		<hexacontagon public="1" get="inline" set="null" expr="cast 60" line="30" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 60</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</hexacontagon>
		<heptacontagon public="1" get="inline" set="null" expr="cast 70" line="31" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 70</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</heptacontagon>
		<octacontagon public="1" get="inline" set="null" expr="cast 80" line="32" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 80</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</octacontagon>
		<enneacontagon public="1" get="inline" set="null" expr="cast 90" line="33" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 90</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</enneacontagon>
		<hectagon public="1" get="inline" set="null" expr="cast 100" line="34" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 100</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</hectagon>
		<chiliagon public="1" get="inline" set="null" expr="cast 1000" line="35" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 1000</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</chiliagon>
		<myriagon public="1" get="inline" set="null" expr="cast 10000" line="36" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 10000</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</myriagon>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="trilateral3.shape.Regular" params="" file="src/trilateral3/shape/Regular.hx">
		<from><icast><c path="trilateral3.drawing.Pen"/></icast></from>
		<this><c path="trilateral3.drawing.Pen"/></this>
		<to><icast><c path="trilateral3.drawing.Pen"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.shape._Regular.Regular_Impl_" params="" file="src/trilateral3/shape/Regular.hx" private="1" module="trilateral3.shape.Regular" final="1">
	<_new public="1" set="method" line="7" static="1">
		<f a="pen_">
			<c path="trilateral3.drawing.Pen"/>
			<x path="trilateral3.shape.Regular"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<addRegular public="1" get="inline" set="null" line="10" static="1">
		<f a="this:rs:style">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.StyleRegular"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</addRegular>
	<triangle public="1" get="inline" set="null" line="32" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</triangle>
	<triangle2 public="1" get="inline" set="null" line="36" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</triangle2>
	<square public="1" get="inline" set="null" line="43" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</square>
	<square2 public="1" get="inline" set="null" line="47" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</square2>
	<bar public="1" get="inline" set="null" line="54" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</bar>
	<colorTrianglesPos public="1" get="inline" set="null" line="64" static="1">
		<f a="this:start:col:len">
			<c path="trilateral3.drawing.Pen"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorTrianglesPos>
	<bar2 public="1" get="inline" set="null" line="69" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</bar2>
	<pentagon public="1" get="inline" set="null" line="76" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</pentagon>
	<pentagon2 public="1" get="inline" set="null" line="80" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</pentagon2>
	<hexagon public="1" get="inline" set="null" line="87" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexagon>
	<hexagon2 public="1" get="inline" set="null" line="91" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexagon2>
	<circle public="1" get="inline" set="null" line="98" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</circle>
	<circle2 public="1" get="inline" set="null" line="102" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</circle2>
	<circleRadial public="1" get="inline" set="null" line="109" static="1">
		<f a="this:rs:colorCentre:rx:ry">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</circleRadial>
	<circleRadial2 public="1" get="inline" set="null" line="113" static="1">
		<f a="this:rs:colorCentre:rx:ry">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</circleRadial2>
	<roundedSquare public="1" get="inline" set="null" line="120" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</roundedSquare>
	<roundedSquare2 public="1" get="inline" set="null" line="129" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</roundedSquare2>
	<star public="1" get="inline" set="null" line="136" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</star>
	<star2 public="1" get="inline" set="null" line="145" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</star2>
	<polygon public="1" get="inline" set="null" line="152" static="1">
		<f a="this:rs:?sides" v="::36">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Int"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ sides : 36 }</e></m>
			<m n=":impl"/>
		</meta>
	</polygon>
	<polygonRadial public="1" get="inline" set="null" line="161" static="1">
		<f a="this:rs:colorCentre:rx:ry:?sides" v=":::::36">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ sides : 36 }</e></m>
			<m n=":impl"/>
		</meta>
	</polygonRadial>
	<circleMultiCorners public="1" get="inline" set="null" line="170" static="1">
		<f a="this:rs:arr:?rx:?ry" v=":::0:0">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<c path="Array"><x path="Int"/></c>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ ry : 0, rx : 0 }</e></m>
			<m n=":impl"/>
		</meta>
	</circleMultiCorners>
	<polygonMultiCorners public="1" get="inline" set="null" line="174" static="1">
		<f a="this:rs:arr:?rx:?ry:?sides" v=":::0:0:36">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<c path="Array"><x path="Int"/></c>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ sides : 36, ry : 0, rx : 0 }</e></m>
			<m n=":impl"/>
		</meta>
	</polygonMultiCorners>
</class></impl>
	</abstract>
	<class path="trilateral3.shape._Regular.Regular_Impl_" params="" file="src/trilateral3/shape/Regular.hx" private="1" module="trilateral3.shape.Regular" final="1">
		<_new public="1" set="method" line="7" static="1">
			<f a="pen_">
				<c path="trilateral3.drawing.Pen"/>
				<x path="trilateral3.shape.Regular"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<addRegular public="1" get="inline" set="null" line="10" static="1">
			<f a="this:rs:style">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.StyleRegular"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</addRegular>
		<triangle public="1" get="inline" set="null" line="32" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</triangle>
		<triangle2 public="1" get="inline" set="null" line="36" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</triangle2>
		<square public="1" get="inline" set="null" line="43" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</square>
		<square2 public="1" get="inline" set="null" line="47" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</square2>
		<bar public="1" get="inline" set="null" line="54" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</bar>
		<colorTrianglesPos public="1" get="inline" set="null" line="64" static="1">
			<f a="this:start:col:len">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorTrianglesPos>
		<bar2 public="1" get="inline" set="null" line="69" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</bar2>
		<pentagon public="1" get="inline" set="null" line="76" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</pentagon>
		<pentagon2 public="1" get="inline" set="null" line="80" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</pentagon2>
		<hexagon public="1" get="inline" set="null" line="87" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexagon>
		<hexagon2 public="1" get="inline" set="null" line="91" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexagon2>
		<circle public="1" get="inline" set="null" line="98" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</circle>
		<circle2 public="1" get="inline" set="null" line="102" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</circle2>
		<circleRadial public="1" get="inline" set="null" line="109" static="1">
			<f a="this:rs:colorCentre:rx:ry">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</circleRadial>
		<circleRadial2 public="1" get="inline" set="null" line="113" static="1">
			<f a="this:rs:colorCentre:rx:ry">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</circleRadial2>
		<roundedSquare public="1" get="inline" set="null" line="120" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</roundedSquare>
		<roundedSquare2 public="1" get="inline" set="null" line="129" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</roundedSquare2>
		<star public="1" get="inline" set="null" line="136" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</star>
		<star2 public="1" get="inline" set="null" line="145" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</star2>
		<polygon public="1" get="inline" set="null" line="152" static="1">
			<f a="this:rs:?sides" v="::36">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Int"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ sides : 36 }</e></m>
				<m n=":impl"/>
			</meta>
		</polygon>
		<polygonRadial public="1" get="inline" set="null" line="161" static="1">
			<f a="this:rs:colorCentre:rx:ry:?sides" v=":::::36">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ sides : 36 }</e></m>
				<m n=":impl"/>
			</meta>
		</polygonRadial>
		<circleMultiCorners public="1" get="inline" set="null" line="170" static="1">
			<f a="this:rs:arr:?rx:?ry" v=":::0:0">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ ry : 0, rx : 0 }</e></m>
				<m n=":impl"/>
			</meta>
		</circleMultiCorners>
		<polygonMultiCorners public="1" get="inline" set="null" line="174" static="1">
			<f a="this:rs:arr:?rx:?ry:?sides" v=":::0:0:36">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ sides : 36, ry : 0, rx : 0 }</e></m>
				<m n=":impl"/>
			</meta>
		</polygonMultiCorners>
	</class>
	<class path="trilateral3.shape.Shaper" params="" file="src/trilateral3/shape/Shaper.hx">
		<add2DTriangle_ public="1" expr="add2DTriangle">
			<f a="drawType:ax:ay:bx:by:cx:cy">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>add2DTriangle</e></m></meta>
		</add2DTriangle_>
		<add2DQuad_ public="1" expr="add2DQuad">
			<f a="drawType:ax:ay:bx:by:cx:cy:dx:dy">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>add2DQuad</e></m></meta>
		</add2DQuad_>
		<quad_ public="1" expr="quad">
			<f a="drawType:q">
				<t path="trilateral3.drawing.DrawType"/>
				<c path="trilateral3.structure.Quad2D"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>quad</e></m></meta>
		</quad_>
		<lineAB_ public="1" expr="lineAB">
			<f a="drawType:A:B:width">
				<t path="trilateral3.drawing.DrawType"/>
				<c path="trilateral3.structure.XY"/>
				<c path="trilateral3.structure.XY"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>lineAB</e></m></meta>
		</lineAB_>
		<lineXY_ public="1" expr="lineXY">
			<f a="drawType:ax:ay:bx:by:width">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>lineXY</e></m></meta>
		</lineXY_>
		<rectangle_ public="1" expr="rectangle">
			<f a="drawType:x:y:w:h">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>rectangle</e></m></meta>
		</rectangle_>
		<squareOutline_ public="1" expr="squareOutline">
			<f a="drawType:px:py:radius:thick:?theta">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>squareOutline</e></m></meta>
		</squareOutline_>
		<square_ public="1" expr="square">
			<f a="drawType:px:py:radius:?theta">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>square</e></m></meta>
		</square_>
		<diamond_ public="1" expr="diamond">
			<f a="drawType:x:y:radius:?theta">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>diamond</e></m></meta>
		</diamond_>
		<diamondOutline_ public="1" expr="diamondOutline">
			<f a="drawType:x:y:thick:radius:?theta">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>diamondOutline</e></m></meta>
		</diamondOutline_>
		<overlapStar_ public="1" expr="overlapStar">
			<f a="drawType:px:py:radius:?theta">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>overlapStar</e></m></meta>
		</overlapStar_>
		<circle_ public="1" expr="circle">
			<f a="drawType:ax:ay:radius:?sides:?omega">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circle</e></m></meta>
		</circle_>
		<circleRadial_ public="1" expr="circleRadial">
			<f a="drawType:ax:ay:rx:ry:radius:?sides:?omega">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circleRadial</e></m></meta>
		</circleRadial_>
		<circleRadialOnSide_ public="1" expr="circleRadialOnSide">
			<f a="drawType:ax:ay:rx:ry:radius:?sides:?omega">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circleRadialOnSide</e></m></meta>
		</circleRadialOnSide_>
		<ellipse_ public="1" expr="ellipse">
			<f a="drawType:ax:ay:rx:ry:sides">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>ellipse</e></m></meta>
		</ellipse_>
		<pie_ public="1" expr="pie">
			<f a="drawType:ax:ay:radius:beta:gamma:prefer:?sides">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>pie</e></m></meta>
		</pie_>
		<pieX_ public="1" expr="pieX">
			<f a="drawType:ax:ay:radius:beta:gamma:prefer:edgePoly:?sides">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>pieX</e></m></meta>
		</pieX_>
		<pieDifX_ public="1" expr="pieDifX">
			<f a="drawType:ax:ay:radius:beta:dif:edgePoly:?sides">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>pieDifX</e></m></meta>
		</pieDifX_>
		<ellpisePie_ public="1" expr="ellipsePie">
			<f a="drawType:ax:ay:rx:ry:beta:gamma:prefer:?sides">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>ellipsePie</e></m></meta>
		</ellpisePie_>
		<pieDif_ public="1" expr="pieDif">
			<f a="drawType:ax:ay:radius:beta:dif:?sides">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>pieDif</e></m></meta>
		</pieDif_>
		<arc_ public="1" expr="arc">
			<f a="drawType:ax:ay:radius:width:beta:gamma:prefer:?sides">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>arc</e></m></meta>
		</arc_>
		<circleOnSide_ public="1" expr="circleOnSide">
			<f a="drawType:ax:ay:radius:?sides:?omega">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circleOnSide</e></m></meta>
		</circleOnSide_>
		<ellipseOnSide_ public="1" expr="ellipseOnSide">
			<f a="drawType:ax:ay:rx:ry:sides">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>ellipseOnSide</e></m></meta>
		</ellipseOnSide_>
		<shape_ public="1" expr="shape">
			<f a="drawType:x:y:radius:p:?omega">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.PolyEdge"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>shape</e></m></meta>
		</shape_>
		<shapeRadial_ public="1" expr="shapeRadial">
			<f a="drawType:x:y:rx:ry:radius:p:?omega">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.PolyEdge"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>shapeRadial</e></m></meta>
		</shapeRadial_>
		<roundedRectangle_ public="1" expr="roundedRectangle">
			<f a="drawType:x:y:width:height:radius">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>roundedRectangle</e></m></meta>
		</roundedRectangle_>
		<roundedRectangleOutline_ public="1" expr="roundedRectangleOutline">
			<f a="drawType:x:y:width:height:thick:radius">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>roundedRectangleOutline</e></m></meta>
		</roundedRectangleOutline_>
		<spiralLines_ public="1" expr="spiralLines">
			<f a="drawType:x:y:radius:nolines:startWid:stepWid">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>spiralLines</e></m></meta>
		</spiralLines_>
		<new public="1" set="method" line="735">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="trilateral3.shape._Shaper.Shaper_Fields_" params="" file="src/trilateral3/shape/Shaper.hx" private="1" module="trilateral3.shape.Shaper" final="1">
		<add2DTriangle public="1" get="inline" set="null" line="16" static="1">
			<f a="drawType:ax:ay:bx:by:cx:cy">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Shaper provides static methods for drawing with triangles.
the methods return the number of triangles added.</haxe_doc>
		</add2DTriangle>
		<add2DQuad public="1" get="inline" set="null" line="28" static="1"><f a="drawType:ax:ay:bx:by:cx:cy:dx:dy">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></add2DQuad>
		<quad public="1" get="inline" set="null" line="38" static="1"><f a="drawType:q">
	<t path="trilateral3.drawing.DrawType"/>
	<c path="trilateral3.structure.Quad2D"/>
	<x path="Int"/>
</f></quad>
		<lineAB public="1" get="inline" set="null" line="42" static="1"><f a="drawType:A:B:width">
	<t path="trilateral3.drawing.DrawType"/>
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<x path="Float"/>
	<x path="Int"/>
</f></lineAB>
		<lineXY public="1" get="inline" set="null" line="49" static="1"><f a="drawType:ax:ay:bx:by:width">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></lineXY>
		<rectangle public="1" get="inline" set="null" line="56" static="1"><f a="drawType:x:y:w:h">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></rectangle>
		<squareOutline public="1" get="inline" set="null" line="71" static="1">
			<f a="drawType:px:py:radius:thick:?theta" v=":::::0">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0 }</e></m></meta>
		</squareOutline>
		<square public="1" get="inline" set="null" line="171" static="1">
			<f a="drawType:px:py:radius:?theta" v="::::0">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0 }</e></m></meta>
		</square>
		<diamond public="1" get="inline" set="null" line="218" static="1">
			<f a="drawType:x:y:radius:?theta" v="::::0.">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0. }</e></m></meta>
		</diamond>
		<diamondOutline public="1" get="inline" set="null" line="224" static="1">
			<f a="drawType:x:y:thick:radius:?theta" v=":::::0.">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0. }</e></m></meta>
		</diamondOutline>
		<overlapStar public="1" get="inline" set="null" line="232" static="1">
			<f a="drawType:px:py:radius:?theta" v="::::0">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0 }</e></m></meta>
		</overlapStar>
		<circle public="1" get="inline" set="null" line="262" static="1">
			<f a="drawType:ax:ay:radius:?sides:?omega" v="::::36:0.">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circle>
		<circleRadial public="1" get="inline" set="null" line="284" static="1">
			<f a="drawType:ax:ay:rx:ry:radius:?sides:?omega" v="::::::36:0.">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circleRadial>
		<circleRadialOnSide public="1" get="inline" set="null" line="313" static="1">
			<f a="drawType:ax:ay:rx:ry:radius:?sides:?omega" v="::::::36:0.">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circleRadialOnSide>
		<ellipse public="1" get="inline" set="null" line="347" static="1">
			<f a="drawType:ax:ay:rx:ry:?sides" v=":::::36">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</ellipse>
		<pie public="1" get="inline" set="null" line="373" static="1">
			<f a="drawType:ax:ay:radius:beta:gamma:prefer:?sides" v=":::::::36">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
 * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pie>
		<pieX public="1" get="inline" set="null" line="409" static="1">
			<f a="drawType:ax:ay:radius:beta:gamma:prefer:edgePoly:?sides" v="::::::::36">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
 * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pieX>
		<pieDifX public="1" get="inline" set="null" line="449" static="1">
			<f a="drawType:ax:ay:radius:beta:dif:edgePoly:?sides" v=":::::::36">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
			<haxe_doc>* Optimized Pie used in Contour, with dif pre-calculated
 * External edge also added</haxe_doc>
		</pieDifX>
		<ellipsePie public="1" get="inline" set="null" line="484" static="1">
			<f a="drawType:ax:ay:rx:ry:beta:gamma:prefer:?sides" v="::::::::36">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</ellipsePie>
		<pieDif public="1" get="inline" set="null" line="520" static="1">
			<f a="drawType:ax:ay:radius:beta:dif:?sides" v="::::::36">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
			<haxe_doc>* Optimized Pie used in Contour, with dif pre-calculated</haxe_doc>
		</pieDif>
		<arc public="1" get="inline" set="null" line="549" static="1">
			<f a="drawType:ax:ay:radius:width:beta:gamma:prefer:?sides" v="::::::::36">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</arc>
		<circleOnSide public="1" get="inline" set="null" line="589" static="1">
			<f a="drawType:ax:ay:radius:?sides:?omega" v="::::36:0.">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circleOnSide>
		<ellipseOnSide public="1" get="inline" set="null" line="612" static="1">
			<f a="drawType:ax:ay:rx:ry:?sides" v=":::::36">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</ellipseOnSide>
		<shape public="1" get="inline" set="null" line="635" static="1">
			<f a="drawType:x:y:radius:p:?omega" v=":::::0.">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.PolyEdge"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0. }</e></m></meta>
		</shape>
		<shapeRadial public="1" get="inline" set="null" line="645" static="1">
			<f a="drawType:x:y:rx:ry:radius:p:?omega" v=":::::::0.">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.PolyEdge"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0. }</e></m></meta>
		</shapeRadial>
		<roundedRectangle public="1" get="inline" set="null" line="659" static="1"><f a="drawType:x:y:width:height:radius">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></roundedRectangle>
		<roundedRectangleOutline public="1" get="inline" set="null" line="689" static="1"><f a="drawType:x:y:width:height:thick:radius">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></roundedRectangleOutline>
		<spiralLines public="1" get="inline" set="null" line="720" static="1"><f a="drawType:x:y:radius:nolines:startWid:stepWid">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></spiralLines>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.shape.StyleRegular" params="" file="src/trilateral3/shape/StyleRegular.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="trilateral3.shape._StyleRegular.StyleRegular_Impl_" params="" file="src/trilateral3/shape/StyleRegular.hx" private="1" module="trilateral3.shape.StyleRegular" extern="1" final="1">
	<TRIANGLE public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TRIANGLE>
	<SQUARE public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SQUARE>
	<BAR public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BAR>
	<PENTAGON public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PENTAGON>
	<HEXAGON public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HEXAGON>
	<CIRCLE public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CIRCLE>
	<ROUNDSQUARE public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ROUNDSQUARE>
	<STAR public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</STAR>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.shape._StyleRegular.StyleRegular_Impl_" params="" file="src/trilateral3/shape/StyleRegular.hx" private="1" module="trilateral3.shape.StyleRegular" extern="1" final="1">
		<TRIANGLE public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TRIANGLE>
		<SQUARE public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SQUARE>
		<BAR public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BAR>
		<PENTAGON public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PENTAGON>
		<HEXAGON public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HEXAGON>
		<CIRCLE public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CIRCLE>
		<ROUNDSQUARE public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ROUNDSQUARE>
		<STAR public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</STAR>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="trilateral3.shape.xtra.DieSpots" params="" file="src/trilateral3/shape/xtra/DieSpots.hx">
		<from><icast><x path="trilateral3.shape.Regular"/></icast></from>
		<this><x path="trilateral3.shape.Regular"/></this>
		<to><icast><x path="trilateral3.shape.Regular"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.shape.xtra._DieSpots.DieSpots_Impl_" params="" file="src/trilateral3/shape/xtra/DieSpots.hx" private="1" module="trilateral3.shape.xtra.DieSpots" final="1">
	<_new public="1" set="method" line="9" static="1">
		<f a="regular">
			<x path="trilateral3.shape.Regular"/>
			<x path="trilateral3.shape.xtra.DieSpots"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<six2 public="1" get="inline" set="null" line="12" static="1">
		<f a="this:rs:?dx:?dy" v="::25:35">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 35, dx : 25 }</e></m>
			<m n=":impl"/>
		</meta>
	</six2>
	<colorSix public="1" get="inline" set="null" line="44" static="1">
		<f a="this:rs:?dx:?dy" v="::25:35">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 35, dx : 25 }</e></m>
			<m n=":impl"/>
		</meta>
	</colorSix>
	<five2 public="1" get="inline" set="null" line="76" static="1">
		<f a="this:rs:?dx:?dy" v="::30:30">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 30, dx : 30 }</e></m>
			<m n=":impl"/>
		</meta>
	</five2>
	<four2 public="1" get="inline" set="null" line="103" static="1">
		<f a="this:rs:?dx:?dy" v="::30:30">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 30, dx : 30 }</e></m>
			<m n=":impl"/>
		</meta>
	</four2>
	<three2 public="1" get="inline" set="null" line="127" static="1">
		<f a="this:rs:?dx:?dy" v="::25:25">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 25, dx : 25 }</e></m>
			<m n=":impl"/>
		</meta>
	</three2>
	<two2 public="1" get="inline" set="null" line="144" static="1">
		<f a="this:rs:?dx:?dy" v="::20:20">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 20, dx : 20 }</e></m>
			<m n=":impl"/>
		</meta>
	</two2>
	<one2 public="1" get="inline" set="null" line="158" static="1">
		<f a="this:rs">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</one2>
	<six public="1" get="inline" set="null" line="164" static="1">
		<f a="this:rs:?dx:?dy" v="::25:35">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 35, dx : 25 }</e></m>
			<m n=":impl"/>
		</meta>
	</six>
	<five public="1" get="inline" set="null" line="196" static="1">
		<f a="this:rs:?dx:?dy" v="::30:30">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 30, dx : 30 }</e></m>
			<m n=":impl"/>
		</meta>
	</five>
	<four public="1" get="inline" set="null" line="223" static="1">
		<f a="this:rs:?dx:?dy" v="::30:30">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 30, dx : 30 }</e></m>
			<m n=":impl"/>
		</meta>
	</four>
	<three public="1" get="inline" set="null" line="247" static="1">
		<f a="this:rs:?dx:?dy" v="::25:25">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 25, dx : 25 }</e></m>
			<m n=":impl"/>
		</meta>
	</three>
	<two public="1" get="inline" set="null" line="264" static="1">
		<f a="this:rs:?dx:?dy" v="::20:20">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 20, dx : 20 }</e></m>
			<m n=":impl"/>
		</meta>
	</two>
	<one public="1" get="inline" set="null" line="278" static="1">
		<f a="this:rs">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</one>
	<colorOne public="1" get="inline" set="null" line="284" static="1">
		<f a="this:rs">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorOne>
	<goldOne public="1" get="inline" set="null" line="290" static="1">
		<f a="this:rs">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</goldOne>
</class></impl>
	</abstract>
	<class path="trilateral3.shape.xtra._DieSpots.DieSpots_Impl_" params="" file="src/trilateral3/shape/xtra/DieSpots.hx" private="1" module="trilateral3.shape.xtra.DieSpots" final="1">
		<_new public="1" set="method" line="9" static="1">
			<f a="regular">
				<x path="trilateral3.shape.Regular"/>
				<x path="trilateral3.shape.xtra.DieSpots"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<six2 public="1" get="inline" set="null" line="12" static="1">
			<f a="this:rs:?dx:?dy" v="::25:35">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 35, dx : 25 }</e></m>
				<m n=":impl"/>
			</meta>
		</six2>
		<colorSix public="1" get="inline" set="null" line="44" static="1">
			<f a="this:rs:?dx:?dy" v="::25:35">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 35, dx : 25 }</e></m>
				<m n=":impl"/>
			</meta>
		</colorSix>
		<five2 public="1" get="inline" set="null" line="76" static="1">
			<f a="this:rs:?dx:?dy" v="::30:30">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 30, dx : 30 }</e></m>
				<m n=":impl"/>
			</meta>
		</five2>
		<four2 public="1" get="inline" set="null" line="103" static="1">
			<f a="this:rs:?dx:?dy" v="::30:30">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 30, dx : 30 }</e></m>
				<m n=":impl"/>
			</meta>
		</four2>
		<three2 public="1" get="inline" set="null" line="127" static="1">
			<f a="this:rs:?dx:?dy" v="::25:25">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 25, dx : 25 }</e></m>
				<m n=":impl"/>
			</meta>
		</three2>
		<two2 public="1" get="inline" set="null" line="144" static="1">
			<f a="this:rs:?dx:?dy" v="::20:20">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 20, dx : 20 }</e></m>
				<m n=":impl"/>
			</meta>
		</two2>
		<one2 public="1" get="inline" set="null" line="158" static="1">
			<f a="this:rs">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</one2>
		<six public="1" get="inline" set="null" line="164" static="1">
			<f a="this:rs:?dx:?dy" v="::25:35">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 35, dx : 25 }</e></m>
				<m n=":impl"/>
			</meta>
		</six>
		<five public="1" get="inline" set="null" line="196" static="1">
			<f a="this:rs:?dx:?dy" v="::30:30">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 30, dx : 30 }</e></m>
				<m n=":impl"/>
			</meta>
		</five>
		<four public="1" get="inline" set="null" line="223" static="1">
			<f a="this:rs:?dx:?dy" v="::30:30">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 30, dx : 30 }</e></m>
				<m n=":impl"/>
			</meta>
		</four>
		<three public="1" get="inline" set="null" line="247" static="1">
			<f a="this:rs:?dx:?dy" v="::25:25">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 25, dx : 25 }</e></m>
				<m n=":impl"/>
			</meta>
		</three>
		<two public="1" get="inline" set="null" line="264" static="1">
			<f a="this:rs:?dx:?dy" v="::20:20">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 20, dx : 20 }</e></m>
				<m n=":impl"/>
			</meta>
		</two>
		<one public="1" get="inline" set="null" line="278" static="1">
			<f a="this:rs">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</one>
		<colorOne public="1" get="inline" set="null" line="284" static="1">
			<f a="this:rs">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorOne>
		<goldOne public="1" get="inline" set="null" line="290" static="1">
			<f a="this:rs">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</goldOne>
	</class>
	<class path="trilateral3.structure.ARGB" params="" file="src/trilateral3/structure/ARGB.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<r public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</r>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<new public="1" set="method" line="11"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ a, r, g, b }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.CYMKA" params="" file="src/trilateral3/structure/CYMKA.hx">
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<m public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</m>
		<k public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</k>
		<a public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</a>
		<new public="1" set="method" line="12"><f a="c:y:m:k:?a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ a, r, g, b }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.Quad2D" params="" file="src/trilateral3/structure/Quad2D.hx">
		<a public="1"><c path="trilateral3.structure.XY"/></a>
		<b public="1"><c path="trilateral3.structure.XY"/></b>
		<c public="1"><c path="trilateral3.structure.XY"/></c>
		<d public="1"><c path="trilateral3.structure.XY"/></d>
		<new set="method" line="9"><f a="a:b:c:d">
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.RegularShape" params="" file="src/trilateral3/structure/RegularShape.hx">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<radius public="1"><x path="Float"/></radius>
		<color public="1"><x path="Int"/></color>
		<clone public="1" set="method" line="14"><f a=""><c path="trilateral3.structure.RegularShape"/></f></clone>
		<new public="1" set="method" line="8"><f a="x:y:radius:color">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="trilateral3.structure.StartEnd" params="" file="src/trilateral3/structure/StartEnd.hx">
		<start public="1"><x path="Int"/></start>
		<end public="1"><x path="Int"/></end>
		<new public="1" set="method" line="6"><f a="start:end">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.TriInt" params="" file="src/trilateral3/structure/TriInt.hx">
		<a public="1"><x path="Int"/></a>
		<b public="1"><x path="Int"/></b>
		<c public="1"><x path="Int"/></c>
		<new public="1" set="method" line="7"><f a="a:b:c">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.Triangle3D" params="" file="src/trilateral3/structure/Triangle3D.hx">
		<a public="1"><c path="trilateral3.matrix.Vertex"/></a>
		<b public="1"><c path="trilateral3.matrix.Vertex"/></b>
		<c public="1"><c path="trilateral3.matrix.Vertex"/></c>
		<new set="method" line="8"><f a="a:b:c">
	<c path="trilateral3.matrix.Vertex"/>
	<c path="trilateral3.matrix.Vertex"/>
	<c path="trilateral3.matrix.Vertex"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.XY" params="" file="src/trilateral3/structure/XY.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<w public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</w>
		<new public="1" set="method" line="10"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ x, y, z, w }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<typedef path="trilateral3.target.openfl.ColorPalletInt" params="" file="src/trilateral3/target/openfl/AppOpenFL.hx" module="trilateral3.target.openfl.AppOpenFL"><x path="pallette.utils.ColorInt"/></typedef>
	<class path="trilateral3.target.openfl.AppOpenFL" params="" file="src/trilateral3/target/openfl/AppOpenFL.hx">
		<extends path="flash.display.Sprite"/>
		<main public="1" set="method" line="22" static="1"><f a=""><x path="Void"/></f></main>
		<pen public="1"><c path="trilateral3.drawing.Pen"/></pen>
		<nodule public="1" expr="new PenNodule(false)">
			<c path="trilateral3.nodule.PenNodule"/>
			<meta><m n=":value"><e>new PenNodule(false)</e></m></meta>
		</nodule>
		<tri public="1"><x path="trilateral3.geom.FlatColorTriangles"/></tri>
		<g><c path="flash.display.Graphics"/></g>
		<viewSprite><c path="flash.display.Sprite"/></viewSprite>
		<internalSetup get="inline" set="null" line="30"><f a=""><x path="Void"/></f></internalSetup>
		<animate get="inline" set="null" line="38"><f a=""><x path="Void"/></f></animate>
		<firstDraw get="inline" set="null" line="42"><f a=""><x path="Void"/></f></firstDraw>
		<draw public="1" set="method" line="48"><f a=""><x path="Void"/></f></draw>
		<render get="inline" set="null" line="52"><f a=""><x path="Void"/></f></render>
		<internalDraw get="inline" set="null" line="57"><f a=""><x path="Void"/></f></internalDraw>
		<drawRender public="1" set="method" line="81"><f a=""><x path="Void"/></f></drawRender>
		<this_onEnterFrame get="inline" set="null" line="85"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></this_onEnterFrame>
		<new public="1" set="method" line="23"><f a=""><x path="Void"/></f></new>
	</class>
</haxe>