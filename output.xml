<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/usr/local/lib/haxe/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<impl><class path="_Any.Any_Impl_" params="" file="/usr/local/lib/haxe/std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="35" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<__cast params="T" get="inline" set="null" line="38" static="1">
		<f a="value">
			<c path="__cast.T"/>
			<x path="Any"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":from"/>
		</meta>
	</__cast>
	<toString get="inline" set="null" line="41" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</toString>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/usr/local/lib/haxe/std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="35" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<__cast params="T" get="inline" set="null" line="38" static="1">
			<f a="value">
				<c path="__cast.T"/>
				<x path="Any"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":from"/>
			</meta>
		</__cast>
		<toString get="inline" set="null" line="41" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</toString>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Array" params="T" file="/usr/local/lib/haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<contains public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether `this` Array contains `x`.

		If `x` is found by checking standard equality, the function returns `true`, otherwise
		the function returns `false`.</haxe_doc>
		</contains>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="280">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="287">
			<f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array indices and values.</haxe_doc>
		</keyValueIterator>
		<map public="1" params="S" get="inline" set="null" line="298">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="316">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<resize public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Class" params="T" file="/usr/local/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="EReg" params="" file="/usr/local/lib/haxe/std/cpp/_std/EReg.hx">
		<_hx_regexp_new_options set="method" static="1">
			<f a="s:options">
				<c path="String"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_regexp_new_options"</e></m></meta>
		</_hx_regexp_new_options>
		<_hx_regexp_match set="method" static="1">
			<f a="handler:string:pos:len">
				<d/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_regexp_match"</e></m></meta>
		</_hx_regexp_match>
		<_hx_regexp_matched set="method" static="1">
			<f a="handle:pos">
				<d/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_regexp_matched"</e></m></meta>
		</_hx_regexp_matched>
		<_hx_regexp_matched_pos set="method" static="1">
			<f a="handle:match">
				<d/>
				<x path="Int"/>
				<a>
					<pos><x path="Int"/></pos>
					<len><x path="Int"/></len>
				</a>
			</f>
			<meta><m n=":native"><e>"_hx_regexp_matched_pos"</e></m></meta>
		</_hx_regexp_matched_pos>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":buildXml"><e><![CDATA["<include name=\"${HXCPP}/src/hx/libs/regexp/Build.xml\"/>"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/local/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/local/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/usr/local/lib/haxe/std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="Map" params="K:V" file="/usr/local/lib/haxe/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="/usr/local/lib/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/usr/local/lib/haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately `3.141592653589793`.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of `-1.0 / 0.0`.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of `1.0 / 0.0`.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		`NaN` stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: `Math.sqrt(-1)`.

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		- If `v` is positive or `0`, the result is unchanged. Otherwise the result is `-v`.
		- If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		- If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		`exp(1.0)` is approximately `2.718281828459`.

		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to `0.0`,
		and less than `1.0`.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</ffloor>
		<fceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fceil>
		<fround public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value, as a Float.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":include"><e>"hxMath.h"</e></m>
		</meta>
	</class>
	<class path="Reflect" params="" file="/usr/local/lib/haxe/std/cpp/_std/Reflect.hx">
		<isFunction public="1" set="method" line="75" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compareMethods public="1" set="method" line="84" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are null, the result is false.
		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.

		If `f1` or `f2` are member method closures, the result is true if they
		are closures of the same method on the same object value, false otherwise.</haxe_doc>
		</compareMethods>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":analyzer"><e>ignore</e></m>
		</meta>
	</class>
	<class path="Std" params="" file="/usr/local/lib/haxe/std/cpp/_std/Std.hx">
		<is public="1" get="inline" set="null" line="24" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>DEPRECATED. Use `Std.isOfType(v, t)` instead.

		Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<isOfType public="1" set="method" line="28" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</isOfType>
		<downcast public="1" params="T:S" set="method" line="32" static="1">
			<f a="value:c">
				<c path="downcast.T"/>
				<x path="Class"><c path="downcast.S"/></x>
				<c path="downcast.S"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Checks if object `value` is an instance of class or interface `c`.

		Compiles only if the type specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the type specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with core types such as `String`,
		`Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</downcast>
		<instance public="1" params="T:S" set="method" line="37" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"Std.instance() is deprecated. Use Std.downcast() instead."</e></m>
				<m n=":keep"/>
			</meta>
		</instance>
		<string public="1" set="method" line="41" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="45" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="49" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If `x` is null, the result is unspecified.
		If `x` cannot be parsed as integer, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="53" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="57" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":headerClassCode"><e><![CDATA["\t\tstatic inline String string(String &s) { return s; }"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Single" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Single"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc>Single-precision IEEE 32bit float (4-byte).</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="/usr/local/lib/haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="StringBuf" params="" file="/usr/local/lib/haxe/std/cpp/_std/StringBuf.hx">
		<b><c path="Array"><c path="String"/></c></b>
		<charBuf><c path="Array"><x path="cpp.Char"/></c></charBuf>
		<charBufAsString set="method" line="37"><f a=""><c path="String"/></f></charBufAsString>
		<flush set="method" line="43"><f a=""><x path="Void"/></f></flush>
		<toString public="1" set="method" line="92">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" set="method" line="35">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="StringTools" params="" file="/usr/local/lib/haxe/std/StringTools.hx">
		<hex public="1" set="method" line="426" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="Type" params="" file="/usr/local/lib/haxe/std/cpp/_std/Type.hx">
		<nativeEnumEq set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_enum_eq"</e></m></meta>
		</nativeEnumEq>
		<getEnumValueIndex set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_getEnumValueIndex"</e></m></meta>
		</getEnumValueIndex>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="UInt" params="" file="/usr/local/lib/haxe/std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash and C#.
	Simulate it for other platforms.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/usr/local/lib/haxe/std/UInt.hx" private="1" module="UInt" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="cpp.ArrayBase" params="" file="/usr/local/lib/haxe/std/cpp/ArrayBase.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<getElementSize public="1" set="method"><f a=""><x path="Int"/></f></getElementSize>
		<getByteCount public="1" set="method"><f a=""><x path="Int"/></f></getByteCount>
		<getBase public="1" set="method"><f a=""><c path="cpp.RawPointer"><x path="cpp.Char"/></c></f></getBase>
	</class>
	<class path="cpp.AutoCast" params="" file="/usr/local/lib/haxe/std/cpp/AutoCast.hx" extern="1"/>
	<abstract path="cpp.Char" params="" file="/usr/local/lib/haxe/std/cpp/Char.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cpp.Char"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cpp.ConstPointer" params="T" file="/usr/local/lib/haxe/std/cpp/ConstPointer.hx" extern="1">
		<fromRaw public="1" params="T" set="method" static="1"><f a="ptr">
	<c path="cpp.RawConstPointer"><c path="fromRaw.T"/></c>
	<c path="cpp.ConstPointer"><c path="fromRaw.T"/></c>
</f></fromRaw>
		<fromStar public="1" params="T" set="method" static="1">
			<f a="star">
				<t path="cpp.Star"><c path="fromStar.T"/></t>
				<c path="cpp.ConstPointer"><c path="fromStar.T"/></c>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromRaw"</e></m></meta>
		</fromStar>
		<fromPointer public="1" params="T" set="method" static="1"><f a="inNativePointer">
	<d/>
	<c path="cpp.ConstPointer"><c path="fromPointer.T"/></c>
</f></fromPointer>
		<ptr public="1"><t path="cpp.Star"><c path="cpp.ConstPointer.T"/></t></ptr>
		<value public="1" get="accessor" set="null"><c path="cpp.ConstPointer.T"/></value>
		<raw public="1" get="accessor" set="null"><c path="cpp.RawPointer"><c path="cpp.ConstPointer.T"/></c></raw>
		<constRaw public="1" get="accessor" set="null"><c path="cpp.RawConstPointer"><c path="cpp.ConstPointer.T"/></c></constRaw>
		<get_value public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t></f></get_value>
		<get_constRaw public="1" set="method"><f a=""><c path="cpp.RawConstPointer"><c path="cpp.ConstPointer.T"/></c></f></get_constRaw>
		<get_raw public="1" set="method"><f a=""><c path="cpp.RawPointer"><c path="cpp.ConstPointer.T"/></c></f></get_raw>
		<lt public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></lt>
		<leq public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></leq>
		<gt public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></gt>
		<geq public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></geq>
		<setRaw public="1" params="O" set="method"><f a="ptr">
	<c path="cpp.RawPointer"><c path="setRaw.O"/></c>
	<x path="Void"/>
</f></setRaw>
		<reinterpret public="1" params="Other" set="method"><f a=""><c path="cpp.Pointer"><c path="reinterpret.Other"/></c></f></reinterpret>
		<rawCast public="1" params="Other" set="method"><f a=""><c path="cpp.RawPointer"><c path="rawCast.Other"/></c></f></rawCast>
		<at public="1" set="method"><f a="inIndex">
	<x path="Int"/>
	<t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t>
</f></at>
		<inc public="1" set="method"><f a=""><c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c></f></inc>
		<dec public="1" set="method"><f a=""><c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c></f></dec>
		<incBy public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></incBy>
		<decBy public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></decBy>
		<add public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></add>
		<sub public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></sub>
		<postIncVal public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t></f></postIncVal>
		<meta>
			<m n=":coreType"/>
			<m n=":include"><e>"cpp/Pointer.h"</e></m>
			<m n=":native"><e>"cpp.Pointer"</e></m>
			<m n=":semantics"><e>variable</e></m>
		</meta>
	</class>
	<class path="cpp.EnumBase" params="" file="/usr/local/lib/haxe/std/cpp/EnumBase.hx" extern="1">
		<_hx_getIndex public="1" set="method"><f a=""><x path="Int"/></f></_hx_getIndex>
		<_hx_getTag public="1" set="method"><f a=""><c path="String"/></f></_hx_getTag>
		<_hx_getParamCount public="1" set="method"><f a=""><x path="Int"/></f></_hx_getParamCount>
		<_hx_getParamI public="1" set="method"><f a="inIndex">
	<x path="Int"/>
	<d/>
</f></_hx_getParamI>
		<_hx_getParameters public="1" set="method"><f a=""><c path="Array"><d/></c></f></_hx_getParameters>
		<getIndex public="1" get="inline" set="null" line="34"><f a=""><x path="Int"/></f></getIndex>
		<getTag public="1" get="inline" set="null" line="36"><f a=""><c path="String"/></f></getTag>
		<getParamCount public="1" get="inline" set="null" line="38"><f a=""><x path="Int"/></f></getParamCount>
		<getParamI public="1" get="inline" set="null" line="40"><f a="inIndex">
	<x path="Int"/>
	<d/>
</f></getParamI>
		<getParameters public="1" get="inline" set="null" line="42"><f a=""><c path="Array"><d/></c></f></getParameters>
		<meta><m n=":native"><e>"hx.EnumBase"</e></m></meta>
	</class>
	<class path="cpp.ErrorConstants" params="" file="/usr/local/lib/haxe/std/cpp/ErrorConstants.hx" extern="1">
		<invalidCast public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_CAST"</e></m></meta>
		</invalidCast>
		<indexOutOfBounds public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INDEX_OUT_OF_BOUNDS"</e></m></meta>
		</indexOutOfBounds>
		<invalidObject public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_OBJECT"</e></m></meta>
		</invalidObject>
		<invalidArgCount public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_ARG_COUNT"</e></m></meta>
		</invalidArgCount>
		<nullFunctionPointer public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_NULL_FUNCTION_POINTER"</e></m></meta>
		</nullFunctionPointer>
	</class>
	<abstract path="cpp.Float32" params="" file="/usr/local/lib/haxe/std/cpp/Float32.hx">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="cpp.Float32"/></this>
		<to><icast><x path="Float"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="cpp.Int64" params="" file="/usr/local/lib/haxe/std/cpp/Int64.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cpp.Int64"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cpp.NativeArray" params="" file="/usr/local/lib/haxe/std/cpp/NativeArray.hx" extern="1">
		<create public="1" params="T" set="method" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="Array"><c path="create.T"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_create_array_length"</e></m></meta>
		</create>
		<blit public="1" params="T" get="inline" set="null" line="37" static="1">
			<f a="ioDestArray:inDestElement:inSourceArray:inSourceElement:inElementCount">
				<c path="Array"><c path="blit.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="blit.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</blit>
		<getBase public="1" get="inline" set="null" line="41" static="1">
			<f a="inArray">
				<c path="Array"><d/></c>
				<c path="cpp.ArrayBase"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getBase>
		<reserve public="1" params="T" set="method" static="1">
			<f a="inArray:inElements">
				<c path="Array"><c path="reserve.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</reserve>
		<capacity public="1" params="T" set="method" static="1">
			<f a="inArray">
				<c path="Array"><c path="capacity.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</capacity>
		<getElementSize public="1" params="T" set="method" static="1">
			<f a="inArray">
				<c path="Array"><c path="getElementSize.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</getElementSize>
		<address public="1" params="T" get="inline" set="null" line="54" static="1"><f a="inArray:inIndex">
	<c path="Array"><c path="address.T"/></c>
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="address.T"/></c>
</f></address>
		<setData public="1" params="T" set="method" static="1">
			<f a="inArray:inData:inElementCount">
				<c path="Array"><c path="setData.T"/></c>
				<c path="cpp.Pointer"><c path="setData.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</setData>
		<setUnmanagedData public="1" params="T" set="method" static="1">
			<f a="inArray:inData:inElementCount">
				<c path="Array"><c path="setUnmanagedData.T"/></c>
				<c path="cpp.ConstPointer"><c path="setUnmanagedData.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</setUnmanagedData>
		<zero public="1" params="T" set="method" static="1">
			<f a="ioDestArray:?inFirst:?inElements">
				<c path="Array"><c path="zero.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</zero>
		<removeAt public="1" params="T" set="method" static="1">
			<f a="ioDestArray:inIndex">
				<c path="Array"><c path="removeAt.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</removeAt>
		<memcmp public="1" params="T" set="method" static="1">
			<f a="inArrayA:inArrayB">
				<c path="Array"><c path="memcmp.T"/></c>
				<c path="Array"><c path="memcmp.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</memcmp>
		<resolveVirtualArray public="1" set="method" static="1">
			<f a="inArray">
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_reslove_virtual_array"</e></m></meta>
		</resolveVirtualArray>
		<unsafeGet public="1" params="T" set="method" static="1">
			<f a="inDestArray:inIndex">
				<c path="Array"><c path="unsafeGet.T"/></c>
				<x path="Int"/>
				<c path="unsafeGet.T"/>
			</f>
			<meta><m n=":native"><e>"_hx_array_unsafe_get"</e></m></meta>
		</unsafeGet>
		<unsafeSet public="1" params="T" get="inline" set="null" line="93" static="1">
			<f a="ioDestArray:inIndex:inValue">
				<c path="Array"><c path="unsafeSet.T"/></c>
				<x path="Int"/>
				<c path="unsafeSet.T"/>
				<c path="unsafeSet.T"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":native"><e>"_hx_array_unsafe_set"</e></m>
			</meta>
		</unsafeSet>
		<setSize public="1" params="T" set="method" static="1">
			<f a="ioArray:inSize">
				<c path="Array"><c path="setSize.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="setSize.T"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_array_set_size_exact"</e></m></meta>
		</setSize>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="cpp.NativeString" params="" file="/usr/local/lib/haxe/std/cpp/NativeString.hx" extern="1">
		<raw public="1" get="inline" set="null" line="26" static="1">
			<f a="inString">
				<c path="String"/>
				<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</raw>
		<c_str public="1" get="inline" set="null" line="29" static="1">
			<f a="inString">
				<c path="String"/>
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</c_str>
		<fromPointer public="1" get="inline" set="null" line="32" static="1">
			<f a="inPtr">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromPointer>
		<fromGcPointer public="1" get="inline" set="null" line="35" static="1">
			<f a="inPtr:inLen">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromGcPointer>
		<parseFloat public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_float"</e></m></meta>
		</parseFloat>
		<parseSubstrFloat public="1" set="method" static="1">
			<f a="inString:start:length">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_substr_float"</e></m></meta>
		</parseSubstrFloat>
		<parseInt public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_substr_int"</e></m></meta>
		</parseInt>
		<parseSubstrInt public="1" set="method" static="1">
			<f a="inString:start:length">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_substr_int"</e></m></meta>
		</parseSubstrInt>
		<compare public="1" set="method" static="1">
			<f a="inString0:inString1">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_string_compare"</e></m></meta>
		</compare>
		<utf8CharCodeAt public="1" set="method" static="1">
			<f a="inString:inIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_char_code_at"</e></m></meta>
		</utf8CharCodeAt>
		<utf8Length public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_length"</e></m></meta>
		</utf8Length>
		<utf8IsValid public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_is_valid"</e></m></meta>
		</utf8IsValid>
		<utf8Sub public="1" set="method" static="1">
			<f a="inString:charStart:inLen">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_sub"</e></m></meta>
		</utf8Sub>
		<fromPointerLen public="1" set="method" static="1">
			<f a="inPtr:len">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_string_create"</e></m></meta>
		</fromPointerLen>
		<utf8DecodeAdvance public="1" set="method" static="1">
			<f a="reference">
				<x path="cpp.Char"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_decode_advance"</e></m></meta>
		</utf8DecodeAdvance>
	</class>
	<class path="cpp.ObjectType" params="" file="/usr/local/lib/haxe/std/cpp/ObjectType.hx" extern="1">
		<vtUnknown public="1" get="inline" set="null" expr="-1" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</vtUnknown>
		<vtInt public="1" get="inline" set="null" expr="0xff" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xff</e></m></meta>
		</vtInt>
		<vtNull public="1" get="inline" set="null" expr="0" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</vtNull>
		<vtFloat public="1" get="inline" set="null" expr="1" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</vtFloat>
		<vtBool public="1" get="inline" set="null" expr="2" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</vtBool>
		<vtString public="1" get="inline" set="null" expr="3" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</vtString>
		<vtObject public="1" get="inline" set="null" expr="4" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</vtObject>
		<vtArray public="1" get="inline" set="null" expr="5" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</vtArray>
		<vtFunction public="1" get="inline" set="null" expr="6" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</vtFunction>
		<vtEnum public="1" get="inline" set="null" expr="7" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</vtEnum>
		<vtClass public="1" get="inline" set="null" expr="8" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</vtClass>
		<vtInt64 public="1" get="inline" set="null" expr="9" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</vtInt64>
		<vtAbstractBase public="1" get="inline" set="null" expr="0x100" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100</e></m></meta>
		</vtAbstractBase>
	</class>
	<class path="cpp.Pointer" params="T" file="/usr/local/lib/haxe/std/cpp/Pointer.hx" extern="1">
		<extends path="cpp.ConstPointer"><c path="cpp.Pointer.T"/></extends>
		<fromRaw public="1" params="T" set="method" static="1"><f a="ptr">
	<c path="cpp.RawPointer"><c path="fromRaw.T"/></c>
	<c path="cpp.Pointer"><c path="fromRaw.T"/></c>
</f></fromRaw>
		<fromStar public="1" params="T" set="method" static="1">
			<f a="star">
				<t path="cpp.Star"><c path="fromStar.T"/></t>
				<c path="cpp.Pointer"><c path="fromStar.T"/></c>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromRaw"</e></m></meta>
		</fromStar>
		<nativeFromHandle public="1" params="T" set="method" static="1">
			<f a="inHandle:?inKind">
				<d/>
				<c path="String"/>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromHandle"</e></m></meta>
		</nativeFromHandle>
		<fromHandle public="1" params="T" get="inline" set="null" line="44" static="1"><f a="inHandle:?inKind">
	<d/>
	<c path="String"/>
	<c path="cpp.Pointer"><c path="fromHandle.T"/></c>
</f></fromHandle>
		<fromPointer public="1" params="T" set="method" static="1"><f a="inNativePointer">
	<d/>
	<c path="cpp.Pointer"><c path="fromPointer.T"/></c>
</f></fromPointer>
		<addressOf public="1" params="T" set="method" static="1"><f a="inVariable">
	<t path="cpp.Reference"><c path="addressOf.T"/></t>
	<c path="cpp.Pointer"><c path="addressOf.T"/></c>
</f></addressOf>
		<endOf public="1" params="T" set="method" static="1"><f a="inVariable">
	<c path="endOf.T"/>
	<c path="cpp.Pointer"><c path="cpp.Void"/></c>
</f></endOf>
		<nativeArrayElem public="1" params="T" set="method" static="1">
			<f a="array:inElem">
				<c path="Array"><c path="nativeArrayElem.T"/></c>
				<x path="Int"/>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::arrayElem"</e></m></meta>
		</nativeArrayElem>
		<arrayElem public="1" params="T" get="inline" set="null" line="56" static="1"><f a="array:inElem">
	<c path="Array"><c path="arrayElem.T"/></c>
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="arrayElem.T"/></c>
</f></arrayElem>
		<nativeOfArray public="1" params="T" set="method" static="1">
			<f a="array">
				<c path="Array"><c path="nativeOfArray.T"/></c>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::ofArray"</e></m></meta>
		</nativeOfArray>
		<ofArray public="1" params="T" get="inline" set="null" line="62" static="1"><f a="array">
	<c path="Array"><c path="ofArray.T"/></c>
	<c path="cpp.Pointer"><c path="ofArray.T"/></c>
</f></ofArray>
		<ref public="1" get="accessor" set="accessor"><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></ref>
		<get_ref public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></f></get_ref>
		<set_ref public="1" set="method"><f a="t">
	<c path="cpp.Pointer.T"/>
	<t path="cpp.Reference"><c path="cpp.Pointer.T"/></t>
</f></set_ref>
		<setAt public="1" set="method"><f a="inIndex:value">
	<x path="Int"/>
	<c path="cpp.Pointer.T"/>
	<x path="Void"/>
</f></setAt>
		<toUnmanagedArray public="1" get="inline" set="null" line="66"><f a="elementCount">
	<x path="Int"/>
	<c path="Array"><c path="cpp.Pointer.T"/></c>
</f></toUnmanagedArray>
		<toUnmanagedVector public="1" get="inline" set="null" line="72"><f a="elementCount">
	<x path="Int"/>
	<x path="haxe.ds.Vector"><c path="cpp.Pointer.T"/></x>
</f></toUnmanagedVector>
		<inc public="1" set="method" override="1"><f a=""><c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c></f></inc>
		<dec public="1" set="method" override="1"><f a=""><c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c></f></dec>
		<incBy public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></incBy>
		<decBy public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></decBy>
		<add public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></add>
		<sub public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></sub>
		<postIncRef public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></f></postIncRef>
		<destroy public="1" set="method"><f a=""><x path="Void"/></f></destroy>
		<destroyArray public="1" set="method"><f a=""><x path="Void"/></f></destroyArray>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreType"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
	</class>
	<class path="cpp.RawConstPointer" params="T" file="/usr/local/lib/haxe/std/cpp/RawConstPointer.hx" extern="1">
		<addressOf public="1" params="T" set="method" static="1">
			<f a="t">
				<c path="addressOf.T"/>
				<c path="cpp.RawConstPointer"><c path="addressOf.T"/></c>
			</f>
			<meta><m n=":native"><e>"::hx::AddressOf"</e></m></meta>
		</addressOf>
		<meta><m n=":unreflective"/></meta>
	</class>
	<class path="cpp.RawPointer" params="T" file="/usr/local/lib/haxe/std/cpp/RawPointer.hx" extern="1">
		<extends path="cpp.RawConstPointer"><c path="cpp.RawPointer.T"/></extends>
		<addressOf public="1" params="T" set="method" static="1">
			<f a="t">
				<c path="addressOf.T"/>
				<c path="cpp.RawPointer"><c path="addressOf.T"/></c>
			</f>
			<meta><m n=":native"><e>"::hx::AddressOf"</e></m></meta>
		</addressOf>
		<meta><m n=":unreflective"/></meta>
	</class>
	<typedef path="cpp.Reference" params="T" file="/usr/local/lib/haxe/std/cpp/Reference.hx">
		<c path="cpp.Reference.T"/>
		<haxe_doc>Allows haxe to type result correctly, and hxcpp can recognise this and
	prevent unwanted casting.</haxe_doc>
		<meta><m n=":semantics"><e>reference</e></m></meta>
	</typedef>
	<typedef path="cpp.Star" params="T" file="/usr/local/lib/haxe/std/cpp/Star.hx">
		<x path="Null"><c path="cpp.Star.T"/></x>
		<haxe_doc>Allows haxe to type result correctly, and hxcpp can recognise this use the
	correct type.</haxe_doc>
	</typedef>
	<abstract path="cpp.UInt8" params="" file="/usr/local/lib/haxe/std/cpp/UInt8.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cpp.UInt8"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cpp.Void" params="" file="/usr/local/lib/haxe/std/cpp/Void.hx" extern="1"><meta><m n=":native"><e>"void"</e></m></meta></class>
	<abstract path="dsHelper.flat.f32.Float32Flat4" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32Flat4.hx">
		<this><x path="dsHelper.flat.io.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32Flat4.Float32Flat4_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32Flat4.hx" private="1" module="dsHelper.flat.f32.Float32Flat4" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32Flat4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32Flat4.Float32Flat4_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32Flat4.hx" private="1" module="dsHelper.flat.f32.Float32Flat4" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32Flat4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.f32.Float32Flat9" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32Flat9.hx">
		<this><x path="dsHelper.flat.io.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32Flat9.Float32Flat9_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32Flat9.hx" private="1" module="dsHelper.flat.f32.Float32Flat9" final="1">
	<readItem public="1" get="inline" set="null" line="6" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32Flat9"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="24" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32Flat9.Float32Flat9_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32Flat9.hx" private="1" module="dsHelper.flat.f32.Float32Flat9" final="1">
		<readItem public="1" get="inline" set="null" line="6" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32Flat9"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="24" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="dsHelper.flat.f32.Float32FlatRGBA" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32FlatRGBA.hx">
		<this><x path="dsHelper.flat.f32.Float32Flat4"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32FlatRGBA.Float32FlatRGBA_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32FlatRGBA.hx" private="1" module="dsHelper.flat.f32.Float32FlatRGBA" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32FlatRGBA"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<red public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</red>
	<get_red set="method" line="11" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_red>
	<set_red set="method" line="14" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_red>
	<green public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</green>
	<get_green get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_green>
	<set_green get="inline" set="null" line="24" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_green>
	<blue public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blue>
	<get_blue get="inline" set="null" line="30" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blue>
	<set_blue get="inline" set="null" line="34" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blue>
	<alpha public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alpha>
	<get_alpha get="inline" set="null" line="40" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alpha>
	<set_alpha get="inline" set="null" line="44" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alpha>
	<rgb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgb>
	<set_rgb get="inline" set="null" line="50" static="1">
		<f a="this:col">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgb>
	<get_rgb get="inline" set="null" line="58" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgb>
	<argb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argb>
	<set_argb get="inline" set="null" line="65" static="1">
		<f a="this:col">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argb>
	<get_argb get="inline" set="null" line="73" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argb>
	<readItem public="1" get="inline" set="null" line="81" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="86" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<colorTriangles public="1" get="inline" set="null" line="90" static="1">
		<f a="this:color:times">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="94" static="1">
		<f a="this:colorA:colorB:colorC">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cornerColors>
	<hex public="1" get="inline" set="null" line="103" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hex>
	<hexAll public="1" get="inline" set="null" line="107" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexAll>
	<alphaChannel public="1" get="inline" set="null" line="118" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="121" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="124" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="127" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32FlatRGBA.Float32FlatRGBA_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32FlatRGBA.hx" private="1" module="dsHelper.flat.f32.Float32FlatRGBA" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32FlatRGBA"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<red public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</red>
		<get_red set="method" line="11" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_red>
		<set_red set="method" line="14" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_red>
		<green public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</green>
		<get_green get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_green>
		<set_green get="inline" set="null" line="24" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_green>
		<blue public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blue>
		<get_blue get="inline" set="null" line="30" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blue>
		<set_blue get="inline" set="null" line="34" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blue>
		<alpha public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alpha>
		<get_alpha get="inline" set="null" line="40" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alpha>
		<set_alpha get="inline" set="null" line="44" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alpha>
		<rgb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgb>
		<set_rgb get="inline" set="null" line="50" static="1">
			<f a="this:col">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgb>
		<get_rgb get="inline" set="null" line="58" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgb>
		<argb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argb>
		<set_argb get="inline" set="null" line="65" static="1">
			<f a="this:col">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argb>
		<get_argb get="inline" set="null" line="73" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argb>
		<readItem public="1" get="inline" set="null" line="81" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="86" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<colorTriangles public="1" get="inline" set="null" line="90" static="1">
			<f a="this:color:times">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="94" static="1">
			<f a="this:colorA:colorB:colorC">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cornerColors>
		<hex public="1" get="inline" set="null" line="103" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hex>
		<hexAll public="1" get="inline" set="null" line="107" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexAll>
		<alphaChannel public="1" get="inline" set="null" line="118" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="121" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="124" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="127" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="dsHelper.flat.f32.Float32FlatTriangle" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32FlatTriangle.hx">
		<this><x path="dsHelper.flat.f32.Float32Flat9"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.f32._Float32FlatTriangle.Float32FlatTriangle_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32FlatTriangle.hx" private="1" module="dsHelper.flat.f32.Float32FlatTriangle" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<ax public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ax>
	<get_ax set="method" line="11" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ax>
	<set_ax set="method" line="14" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ax>
	<ay public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ay>
	<get_ay set="method" line="19" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ay>
	<set_ay set="method" line="22" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ay>
	<az public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</az>
	<get_az set="method" line="27" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_az>
	<set_az set="method" line="30" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_az>
	<bx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bx>
	<get_bx set="method" line="35" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bx>
	<set_bx set="method" line="38" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bx>
	<by public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</by>
	<get_by set="method" line="43" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_by>
	<set_by set="method" line="46" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_by>
	<bz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bz>
	<get_bz set="method" line="51" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bz>
	<set_bz set="method" line="54" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bz>
	<cx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cx>
	<get_cx set="method" line="59" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cx>
	<set_cx set="method" line="62" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cx>
	<cy public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cy>
	<get_cy set="method" line="67" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cy>
	<set_cy set="method" line="70" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cy>
	<cz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cz>
	<get_cz set="method" line="75" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cz>
	<set_cz set="method" line="78" static="1">
		<f a="this:v">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cz>
	<triangle public="1" set="method" line="83" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangle>
	<adjustWinding public="1" set="method" line="107" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="111" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="115" static="1">
		<f a="this:x">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="124" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="128" static="1">
		<f a="this:y">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</z>
	<get_z get="inline" set="null" line="137" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_z get="inline" set="null" line="141" static="1">
		<f a="this:z">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="150" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="155" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<back public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</back>
	<get_back get="inline" set="null" line="160" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_back>
	<moveDelta set="method" line="164" static="1">
		<f a="this:dx:dy">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDelta>
	<sign public="1" get="inline" set="null" line="172" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<liteHit public="1" get="inline" set="null" line="177" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</liteHit>
	<fullHit public="1" set="method" line="185" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fullHit>
	<rotate public="1" get="inline" set="null" line="190" static="1">
		<f a="this:x:y:theta">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<rotateTrig public="1" get="inline" set="null" line="196" static="1">
		<f a="this:x:y:cos:sin">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateTrig>
	<prettyString public="1" get="inline" set="null" line="225" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyString>
	<prettyAll public="1" get="inline" set="null" line="231" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32Flat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAll>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.f32._Float32FlatTriangle.Float32FlatTriangle_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/f32/Float32FlatTriangle.hx" private="1" module="dsHelper.flat.f32.Float32FlatTriangle" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<ax public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ax>
		<get_ax set="method" line="11" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ax>
		<set_ax set="method" line="14" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ax>
		<ay public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ay>
		<get_ay set="method" line="19" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ay>
		<set_ay set="method" line="22" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ay>
		<az public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</az>
		<get_az set="method" line="27" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_az>
		<set_az set="method" line="30" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_az>
		<bx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bx>
		<get_bx set="method" line="35" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bx>
		<set_bx set="method" line="38" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bx>
		<by public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</by>
		<get_by set="method" line="43" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_by>
		<set_by set="method" line="46" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_by>
		<bz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bz>
		<get_bz set="method" line="51" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bz>
		<set_bz set="method" line="54" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bz>
		<cx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cx>
		<get_cx set="method" line="59" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cx>
		<set_cx set="method" line="62" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cx>
		<cy public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cy>
		<get_cy set="method" line="67" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cy>
		<set_cy set="method" line="70" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cy>
		<cz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cz>
		<get_cz set="method" line="75" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cz>
		<set_cz set="method" line="78" static="1">
			<f a="this:v">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cz>
		<triangle public="1" set="method" line="83" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangle>
		<adjustWinding public="1" set="method" line="107" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="111" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="115" static="1">
			<f a="this:x">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="124" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="128" static="1">
			<f a="this:y">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</z>
		<get_z get="inline" set="null" line="137" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_z get="inline" set="null" line="141" static="1">
			<f a="this:z">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="150" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="155" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<back public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</back>
		<get_back get="inline" set="null" line="160" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_back>
		<moveDelta set="method" line="164" static="1">
			<f a="this:dx:dy">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDelta>
		<sign public="1" get="inline" set="null" line="172" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<liteHit public="1" get="inline" set="null" line="177" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</liteHit>
		<fullHit public="1" set="method" line="185" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fullHit>
		<rotate public="1" get="inline" set="null" line="190" static="1">
			<f a="this:x:y:theta">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<rotateTrig public="1" get="inline" set="null" line="196" static="1">
			<f a="this:x:y:cos:sin">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateTrig>
		<prettyString public="1" get="inline" set="null" line="225" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyString>
		<prettyAll public="1" get="inline" set="null" line="231" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32Flat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAll>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="dsHelper.flat.io.Float32Flat" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/io/Float32Flat.hx">
		<from><icast field="fromArray"><t path="dsHelper.haxe.io.Float32Array"/></icast></from>
		<this><t path="dsHelper.haxe.io.Float32Array"/></this>
		<to><icast field="toArray"><x path="lime.utils.Float32Array"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flat.io._Float32Flat.Float32Flat_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/io/Float32Flat.hx" private="1" module="dsHelper.flat.io.Float32Flat" final="1">
	<readItem public="1" get="inline" set="null" line="17" static="1">
		<f a="this:k">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Flat32(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="30" static="1">
		<f a="this:k:v">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Flat32(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
	</writeItem>
	<_new public="1" get="inline" set="null" line="36" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flat.io.Float32Flat"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<size public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</size>
	<get_size set="method" line="44" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_size>
	<set_size set="method" line="49" static="1">
		<f a="this:id">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_size>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="54" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="58" static="1">
		<f a="this:id">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="68" static="1">
		<f a="this:pos_">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<updateLen get="inline" set="null" line="74" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</updateLen>
	<hasNext public="1" get="inline" set="null" line="79" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hasNext>
	<next public="1" get="inline" set="null" line="81" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</next>
	<increment public="1" get="inline" set="null" line="86" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</increment>
	<toArray public="1" get="inline" set="null" line="91" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<fromArray public="1" get="inline" set="null" line="96" static="1">
		<f a="arr">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="dsHelper.flat.io.Float32Flat"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArray>
	<clone public="1" get="inline" set="null" line="102" static="1">
		<f a="this">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="dsHelper.flat.io.Float32Flat"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clone>
	<fill public="1" get="inline" set="null" line="108" static="1">
		<f a="this:arr">
			<t path="dsHelper.haxe.io.Float32Array"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fill>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="dsHelper.flat.io._Float32Flat.Float32Flat_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flat/io/Float32Flat.hx" private="1" module="dsHelper.flat.io.Float32Flat" final="1">
		<readItem public="1" get="inline" set="null" line="17" static="1">
			<f a="this:k">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Flat32(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="30" static="1">
			<f a="this:k:v">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Flat32(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
		</writeItem>
		<_new public="1" get="inline" set="null" line="36" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flat.io.Float32Flat"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<size public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</size>
		<get_size set="method" line="44" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_size>
		<set_size set="method" line="49" static="1">
			<f a="this:id">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_size>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="54" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="58" static="1">
			<f a="this:id">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="68" static="1">
			<f a="this:pos_">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<updateLen get="inline" set="null" line="74" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</updateLen>
		<hasNext public="1" get="inline" set="null" line="79" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="81" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</next>
		<increment public="1" get="inline" set="null" line="86" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</increment>
		<toArray public="1" get="inline" set="null" line="91" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<fromArray public="1" get="inline" set="null" line="96" static="1">
			<f a="arr">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="dsHelper.flat.io.Float32Flat"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArray>
		<clone public="1" get="inline" set="null" line="102" static="1">
			<f a="this">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="dsHelper.flat.io.Float32Flat"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clone>
		<fill public="1" get="inline" set="null" line="108" static="1">
			<f a="this:arr">
				<t path="dsHelper.haxe.io.Float32Array"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fill>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="dsHelper.flatInterleave.FloatColorTriangles" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flatInterleave/FloatColorTriangles.hx">
		<this><x path="dsHelper.flatInterleave.core.Flat3x7"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flatInterleave/FloatColorTriangles.hx" private="1" module="dsHelper.flatInterleave.FloatColorTriangles" final="1">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<create public="1" get="inline" set="null" line="8" static="1"><f a="len">
	<x path="Int"/>
	<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
</f></create>
	<ax public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ax>
	<get_ax set="method" line="13" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ax>
	<set_ax set="method" line="16" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ax>
	<ay public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ay>
	<get_ay set="method" line="21" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ay>
	<set_ay set="method" line="24" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ay>
	<az public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</az>
	<get_az set="method" line="29" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_az>
	<set_az set="method" line="32" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_az>
	<redA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</redA>
	<get_redA set="method" line="38" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_redA>
	<set_redA set="method" line="41" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_redA>
	<greenA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</greenA>
	<get_greenA get="inline" set="null" line="47" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_greenA>
	<set_greenA get="inline" set="null" line="51" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_greenA>
	<blueA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blueA>
	<get_blueA get="inline" set="null" line="57" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blueA>
	<set_blueA get="inline" set="null" line="61" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blueA>
	<alphaA public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alphaA>
	<get_alphaA get="inline" set="null" line="67" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alphaA>
	<set_alphaA get="inline" set="null" line="71" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alphaA>
	<bx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bx>
	<get_bx set="method" line="78" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bx>
	<set_bx set="method" line="81" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bx>
	<by public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</by>
	<get_by set="method" line="86" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_by>
	<set_by set="method" line="89" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_by>
	<bz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bz>
	<get_bz set="method" line="94" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bz>
	<set_bz set="method" line="97" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bz>
	<redB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</redB>
	<get_redB set="method" line="103" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_redB>
	<set_redB set="method" line="106" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_redB>
	<greenB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</greenB>
	<get_greenB get="inline" set="null" line="112" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_greenB>
	<set_greenB get="inline" set="null" line="116" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_greenB>
	<blueB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blueB>
	<get_blueB get="inline" set="null" line="122" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blueB>
	<set_blueB get="inline" set="null" line="126" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blueB>
	<alphaB public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alphaB>
	<get_alphaB get="inline" set="null" line="132" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alphaB>
	<set_alphaB get="inline" set="null" line="136" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alphaB>
	<cx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cx>
	<get_cx set="method" line="143" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cx>
	<set_cx set="method" line="146" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cx>
	<cy public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cy>
	<get_cy set="method" line="151" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cy>
	<set_cy set="method" line="154" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cy>
	<cz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cz>
	<get_cz set="method" line="159" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cz>
	<set_cz set="method" line="162" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cz>
	<redC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</redC>
	<get_redC set="method" line="168" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_redC>
	<set_redC set="method" line="171" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_redC>
	<greenC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</greenC>
	<get_greenC get="inline" set="null" line="177" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_greenC>
	<set_greenC get="inline" set="null" line="181" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_greenC>
	<blueC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blueC>
	<get_blueC get="inline" set="null" line="187" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blueC>
	<set_blueC get="inline" set="null" line="191" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blueC>
	<alphaC public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alphaC>
	<get_alphaC get="inline" set="null" line="197" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alphaC>
	<set_alphaC get="inline" set="null" line="201" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alphaC>
	<triangle public="1" set="method" line="207" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangle>
	<adjustWinding public="1" set="method" line="231" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="235" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="239" static="1">
		<f a="this:x">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="248" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="252" static="1">
		<f a="this:y">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</z>
	<get_z get="inline" set="null" line="261" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_z get="inline" set="null" line="265" static="1">
		<f a="this:z">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="274" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="279" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<back public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</back>
	<get_back get="inline" set="null" line="284" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_back>
	<moveDelta set="method" line="288" static="1">
		<f a="this:dx:dy">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDelta>
	<sign public="1" get="inline" set="null" line="296" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<liteHit public="1" get="inline" set="null" line="301" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</liteHit>
	<fullHit public="1" set="method" line="309" static="1">
		<f a="this:px:py">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fullHit>
	<rotate public="1" get="inline" set="null" line="314" static="1">
		<f a="this:x:y:theta">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<rotateTrig public="1" get="inline" set="null" line="320" static="1">
		<f a="this:x:y:cos:sin">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateTrig>
	<colorTriangles public="1" get="inline" set="null" line="349" static="1">
		<f a="this:color:times">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="356" static="1">
		<f a="this:colorA:colorB:colorC">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cornerColors>
	<rgb public="1" get="null" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgb>
	<set_rgb get="inline" set="null" line="363" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgb>
	<rgbA public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgbA>
	<set_rgbA get="inline" set="null" line="371" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgbA>
	<get_rgbA get="inline" set="null" line="379" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgbA>
	<rgbB public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgbB>
	<set_rgbB get="inline" set="null" line="386" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgbB>
	<get_rgbB get="inline" set="null" line="394" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgbB>
	<rgbC public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgbC>
	<set_rgbC get="inline" set="null" line="401" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgbC>
	<get_rgbC get="inline" set="null" line="409" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgbC>
	<argb public="1" get="null" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argb>
	<set_argb get="inline" set="null" line="416" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argb>
	<argbA public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbA>
	<set_argbA get="inline" set="null" line="424" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbA>
	<get_argbA get="inline" set="null" line="432" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbA>
	<argbB public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbB>
	<set_argbB get="inline" set="null" line="440" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbB>
	<get_argbB get="inline" set="null" line="448" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbB>
	<argbC public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbC>
	<set_argbC get="inline" set="null" line="456" static="1">
		<f a="this:col">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbC>
	<get_argbC get="inline" set="null" line="464" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbC>
	<prettyStringVert public="1" get="inline" set="null" line="471" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyStringVert>
	<prettyAllVert public="1" get="inline" set="null" line="477" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAllVert>
	<hex public="1" get="inline" set="null" line="488" static="1">
		<f a="this:v">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hex>
	<hexA public="1" get="inline" set="null" line="492" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexA>
	<hexB public="1" get="inline" set="null" line="496" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexB>
	<hexC public="1" get="inline" set="null" line="500" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexC>
	<hexAll public="1" get="inline" set="null" line="504" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexAll>
	<alphaChannel public="1" get="inline" set="null" line="515" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="518" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="521" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="524" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="dsHelper.flatInterleave._FloatColorTriangles.FloatColorTriangles_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flatInterleave/FloatColorTriangles.hx" private="1" module="dsHelper.flatInterleave.FloatColorTriangles" final="1">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<create public="1" get="inline" set="null" line="8" static="1"><f a="len">
	<x path="Int"/>
	<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
</f></create>
		<ax public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ax>
		<get_ax set="method" line="13" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ax>
		<set_ax set="method" line="16" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ax>
		<ay public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ay>
		<get_ay set="method" line="21" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ay>
		<set_ay set="method" line="24" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ay>
		<az public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</az>
		<get_az set="method" line="29" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_az>
		<set_az set="method" line="32" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_az>
		<redA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</redA>
		<get_redA set="method" line="38" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_redA>
		<set_redA set="method" line="41" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_redA>
		<greenA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</greenA>
		<get_greenA get="inline" set="null" line="47" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_greenA>
		<set_greenA get="inline" set="null" line="51" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_greenA>
		<blueA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blueA>
		<get_blueA get="inline" set="null" line="57" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blueA>
		<set_blueA get="inline" set="null" line="61" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blueA>
		<alphaA public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alphaA>
		<get_alphaA get="inline" set="null" line="67" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alphaA>
		<set_alphaA get="inline" set="null" line="71" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alphaA>
		<bx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bx>
		<get_bx set="method" line="78" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bx>
		<set_bx set="method" line="81" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bx>
		<by public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</by>
		<get_by set="method" line="86" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_by>
		<set_by set="method" line="89" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_by>
		<bz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bz>
		<get_bz set="method" line="94" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bz>
		<set_bz set="method" line="97" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bz>
		<redB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</redB>
		<get_redB set="method" line="103" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_redB>
		<set_redB set="method" line="106" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_redB>
		<greenB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</greenB>
		<get_greenB get="inline" set="null" line="112" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_greenB>
		<set_greenB get="inline" set="null" line="116" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_greenB>
		<blueB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blueB>
		<get_blueB get="inline" set="null" line="122" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blueB>
		<set_blueB get="inline" set="null" line="126" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blueB>
		<alphaB public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alphaB>
		<get_alphaB get="inline" set="null" line="132" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alphaB>
		<set_alphaB get="inline" set="null" line="136" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alphaB>
		<cx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cx>
		<get_cx set="method" line="143" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cx>
		<set_cx set="method" line="146" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cx>
		<cy public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cy>
		<get_cy set="method" line="151" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cy>
		<set_cy set="method" line="154" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cy>
		<cz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cz>
		<get_cz set="method" line="159" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cz>
		<set_cz set="method" line="162" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cz>
		<redC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</redC>
		<get_redC set="method" line="168" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_redC>
		<set_redC set="method" line="171" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_redC>
		<greenC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</greenC>
		<get_greenC get="inline" set="null" line="177" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_greenC>
		<set_greenC get="inline" set="null" line="181" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_greenC>
		<blueC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blueC>
		<get_blueC get="inline" set="null" line="187" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blueC>
		<set_blueC get="inline" set="null" line="191" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blueC>
		<alphaC public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alphaC>
		<get_alphaC get="inline" set="null" line="197" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alphaC>
		<set_alphaC get="inline" set="null" line="201" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alphaC>
		<triangle public="1" set="method" line="207" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangle>
		<adjustWinding public="1" set="method" line="231" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="235" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="239" static="1">
			<f a="this:x">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="248" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="252" static="1">
			<f a="this:y">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</z>
		<get_z get="inline" set="null" line="261" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_z get="inline" set="null" line="265" static="1">
			<f a="this:z">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="274" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="279" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<back public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</back>
		<get_back get="inline" set="null" line="284" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_back>
		<moveDelta set="method" line="288" static="1">
			<f a="this:dx:dy">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDelta>
		<sign public="1" get="inline" set="null" line="296" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<liteHit public="1" get="inline" set="null" line="301" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</liteHit>
		<fullHit public="1" set="method" line="309" static="1">
			<f a="this:px:py">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fullHit>
		<rotate public="1" get="inline" set="null" line="314" static="1">
			<f a="this:x:y:theta">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<rotateTrig public="1" get="inline" set="null" line="320" static="1">
			<f a="this:x:y:cos:sin">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateTrig>
		<colorTriangles public="1" get="inline" set="null" line="349" static="1">
			<f a="this:color:times">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="356" static="1">
			<f a="this:colorA:colorB:colorC">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cornerColors>
		<rgb public="1" get="null" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgb>
		<set_rgb get="inline" set="null" line="363" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgb>
		<rgbA public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgbA>
		<set_rgbA get="inline" set="null" line="371" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgbA>
		<get_rgbA get="inline" set="null" line="379" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgbA>
		<rgbB public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgbB>
		<set_rgbB get="inline" set="null" line="386" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgbB>
		<get_rgbB get="inline" set="null" line="394" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgbB>
		<rgbC public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgbC>
		<set_rgbC get="inline" set="null" line="401" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgbC>
		<get_rgbC get="inline" set="null" line="409" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgbC>
		<argb public="1" get="null" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argb>
		<set_argb get="inline" set="null" line="416" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argb>
		<argbA public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbA>
		<set_argbA get="inline" set="null" line="424" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbA>
		<get_argbA get="inline" set="null" line="432" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbA>
		<argbB public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbB>
		<set_argbB get="inline" set="null" line="440" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbB>
		<get_argbB get="inline" set="null" line="448" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbB>
		<argbC public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbC>
		<set_argbC get="inline" set="null" line="456" static="1">
			<f a="this:col">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbC>
		<get_argbC get="inline" set="null" line="464" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbC>
		<prettyStringVert public="1" get="inline" set="null" line="471" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyStringVert>
		<prettyAllVert public="1" get="inline" set="null" line="477" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAllVert>
		<hex public="1" get="inline" set="null" line="488" static="1">
			<f a="this:v">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hex>
		<hexA public="1" get="inline" set="null" line="492" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexA>
		<hexB public="1" get="inline" set="null" line="496" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexB>
		<hexC public="1" get="inline" set="null" line="500" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexC>
		<hexAll public="1" get="inline" set="null" line="504" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexAll>
		<alphaChannel public="1" get="inline" set="null" line="515" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="518" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="521" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="524" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="dsHelper.flatInterleave.core.Flat3x7" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flatInterleave/core/Flat3x7.hx">
		<this><x path="dsHelper.flat.io.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flatInterleave/core/Flat3x7.hx" private="1" module="dsHelper.flatInterleave.core.Flat3x7" final="1">
	<readItem public="1" get="inline" set="null" line="7" static="1">
		<f a="this:k">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="11" static="1">
		<f a="this:k:v">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="16" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="dsHelper.flatInterleave.core.Flat3x7"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="21" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="25" static="1">
		<f a="this:id">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="30" static="1">
		<f a="this">
			<x path="dsHelper.flat.io.Float32Flat"/>
			<t path="dsHelper.haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="dsHelper.flatInterleave.core._Flat3x7.Flat3x7_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/flatInterleave/core/Flat3x7.hx" private="1" module="dsHelper.flatInterleave.core.Flat3x7" final="1">
		<readItem public="1" get="inline" set="null" line="7" static="1">
			<f a="this:k">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="11" static="1">
			<f a="this:k:v">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="16" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="dsHelper.flatInterleave.core.Flat3x7"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="21" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="25" static="1">
			<f a="this:id">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="30" static="1">
			<f a="this">
				<x path="dsHelper.flat.io.Float32Flat"/>
				<t path="dsHelper.haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<typedef path="dsHelper.haxe.io.Float32Array" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/haxe/io/Float32Array.hx">
		<x path="lime.utils.Float32Array"/>
		<haxe_doc>* switches between Lime, NME and haxe.io.Float32Array</haxe_doc>
	</typedef>
	<abstract path="dsHelper.iterArr.ArrayPairs" params="T" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/iterArr/ArrayPairs.hx">
		<this><c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c></this>
		<impl><class path="dsHelper.iterArr._ArrayPairs.ArrayPairs_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/iterArr/ArrayPairs.hx" private="1" module="dsHelper.iterArr.ArrayPairs" final="1">
	<_new public="1" set="method" line="3" static="1">
		<f a="arr">
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			<x path="dsHelper.iterArr.ArrayPairs"><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="5" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<access get="inline" set="null" line="6" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			<x path="Int"/>
			<a>
				<y><c path="dsHelper.iterArr.ArrayPairs.T"/></y>
				<x><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
			</a>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</access>
	<getObj public="1" get="inline" set="null" line="9" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			<x path="Int"/>
			<a>
				<y><c path="dsHelper.iterArr.ArrayPairs.T"/></y>
				<x><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
			</a>
		</f>
		<meta><m n=":impl"/></meta>
	</getObj>
	<reverse public="1" get="inline" set="null" line="14" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="dsHelper.iterArr._ArrayPairs.ArrayPairs_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/iterArr/ArrayPairs.hx" private="1" module="dsHelper.iterArr.ArrayPairs" final="1">
		<_new public="1" set="method" line="3" static="1">
			<f a="arr">
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
				<x path="dsHelper.iterArr.ArrayPairs"><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="5" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<access get="inline" set="null" line="6" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
				<x path="Int"/>
				<a>
					<y><c path="dsHelper.iterArr.ArrayPairs.T"/></y>
					<x><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
				</a>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</access>
		<getObj public="1" get="inline" set="null" line="9" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
				<x path="Int"/>
				<a>
					<y><c path="dsHelper.iterArr.ArrayPairs.T"/></y>
					<x><c path="dsHelper.iterArr.ArrayPairs.T"/></x>
				</a>
			</f>
			<meta><m n=":impl"/></meta>
		</getObj>
		<reverse public="1" get="inline" set="null" line="14" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
				<c path="Array"><c path="dsHelper.iterArr.ArrayPairs.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="dsHelper.iterArr.ArrayTriple" params="T" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/iterArr/ArrayTriple.hx">
		<this><c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c></this>
		<impl><class path="dsHelper.iterArr._ArrayTriple.ArrayTriple_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/iterArr/ArrayTriple.hx" private="1" module="dsHelper.iterArr.ArrayTriple" final="1">
	<_new public="1" set="method" line="3" static="1">
		<f a="arr">
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			<x path="dsHelper.iterArr.ArrayTriple"><c path="dsHelper.iterArr.ArrayTriple.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="5" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<access get="inline" set="null" line="6" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			<x path="Int"/>
			<a>
				<c><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<b><c path="dsHelper.iterArr.ArrayTriple.T"/></b>
				<a><c path="dsHelper.iterArr.ArrayTriple.T"/></a>
			</a>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</access>
	<getObj public="1" get="inline" set="null" line="9" static="1">
		<f a="this:key">
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			<x path="Int"/>
			<a>
				<c><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<b><c path="dsHelper.iterArr.ArrayTriple.T"/></b>
				<a><c path="dsHelper.iterArr.ArrayTriple.T"/></a>
			</a>
		</f>
		<meta><m n=":impl"/></meta>
	</getObj>
	<reverse public="1" get="inline" set="null" line="14" static="1">
		<f a="this">
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="dsHelper.iterArr._ArrayTriple.ArrayTriple_Impl_" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/iterArr/ArrayTriple.hx" private="1" module="dsHelper.iterArr.ArrayTriple" final="1">
		<_new public="1" set="method" line="3" static="1">
			<f a="arr">
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<x path="dsHelper.iterArr.ArrayTriple"><c path="dsHelper.iterArr.ArrayTriple.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="5" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<access get="inline" set="null" line="6" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<x path="Int"/>
				<a>
					<c><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
					<b><c path="dsHelper.iterArr.ArrayTriple.T"/></b>
					<a><c path="dsHelper.iterArr.ArrayTriple.T"/></a>
				</a>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</access>
		<getObj public="1" get="inline" set="null" line="9" static="1">
			<f a="this:key">
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<x path="Int"/>
				<a>
					<c><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
					<b><c path="dsHelper.iterArr.ArrayTriple.T"/></b>
					<a><c path="dsHelper.iterArr.ArrayTriple.T"/></a>
				</a>
			</f>
			<meta><m n=":impl"/></meta>
		</getObj>
		<reverse public="1" get="inline" set="null" line="14" static="1">
			<f a="this">
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
				<c path="Array"><c path="dsHelper.iterArr.ArrayTriple.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="dsHelper.splitter.SpaceSplitter" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/splitter/SpaceSplitter.hx"><parse public="1" get="inline" set="null" line="5" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><c path="Array"><c path="String"/></c></c>
</f></parse></class>
	<class path="dsHelper.splitter.StringCodeIterator" params="" file="/usr/local/lib/haxeLibrary/dsHelper/git/src/dsHelper/splitter/StringCodeIterator.hx">
		<str expr="&quot;&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>""</e></m></meta>
		</str>
		<b><c path="StringBuf"/></b>
		<pos public="1"><x path="Int"/></pos>
		<c public="1"><x path="Int"/></c>
		<last2 public="1"><c path="String"/></last2>
		<last public="1"><c path="String"/></last>
		<length public="1"><x path="Int"/></length>
		<addChar public="1" get="inline" set="null" line="17"><f a=""><x path="Void"/></f></addChar>
		<toStr public="1" get="inline" set="null" line="21"><f a=""><c path="String"/></f></toStr>
		<isRepeat public="1" get="inline" set="null" line="27"><f a=""><x path="Bool"/></f></isRepeat>
		<resetBuffer public="1" get="inline" set="null" line="33"><f a=""><x path="Void"/></f></resetBuffer>
		<reset public="1" get="inline" set="null" line="37"><f a=""><x path="Void"/></f></reset>
		<hasNext public="1" get="inline" set="null" line="41"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="45"><f a=""><x path="Int"/></f></next>
		<new public="1" set="method" line="11">
			<f a="str_:?pos_" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ pos_ : 0 }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="flash.Vector" params="T" file="/usr/local/lib/haxe/std/flash/Vector.hx" extern="1">
		<ofArray public="1" params="T" line="56" static="1">
			<f a="v">
				<c path="Array"><c path="ofArray.T"/></c>
				<c path="flash.Vector"><c path="ofArray.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</ofArray>
		<convert public="1" params="T:U" line="60" static="1">
			<f a="v">
				<c path="flash.Vector"><c path="convert.T"/></c>
				<c path="flash.Vector"><c path="convert.U"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</convert>
		<typeReference public="1" params="T" line="91" static="1">
			<f a=""><x path="Class"><c path="flash.Vector"><c path="typeReference.T"/></c></x></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Get a run-time value referencing the `Vector` class with concrete type parameters.

		Normally in Haxe, for most of the types, type parameters are eliminated at run-time,
		so there is no way to check if a value is of a type with specific type parameters.

		However, on the Flash target, the `flash.Vector<T>` values carry type parameter
		information at run-time all the type-checks (such as `Std.isOfType` and `Std.downcast`) on them
		must be done using a `Class<T>` value that also carries the type parameters. However,
		Haxe syntax does not allow creating such values and this function exists to mitigate
		this limitation.

		It should be used as such:
		```haxe
		var specificVectorType:Class<Vector<Int>> = Vector.typeReference();
		trace(Std.isOfType(vec, specificVectorType));
		```
		or using the type-check syntax:
		```haxe
		trace(Std.isOfType(vec, (Vector.typeReference() : Class<Vector<Int>>)));
		```

		It's also helpful when working with native Flash libraries, that receive Class instances:
		```haxe
		new Signal((Vector.typeReference() : Class<Vector<Int>>));
		```]]></haxe_doc>
		</typeReference>
		<length public="1"><x path="Int"/></length>
		<fixed public="1"><x path="Bool"/></fixed>
		<concat public="1" set="method"><f a="?a">
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></concat>
		<join public="1" set="method"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<pop public="1" set="method"><f a=""><x path="Null"><c path="flash.Vector.T"/></x></f></pop>
		<push public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
</f></push>
		<reverse public="1" set="method"><f a=""><x path="Void"/></f></reverse>
		<shift public="1" set="method"><f a=""><x path="Null"><c path="flash.Vector.T"/></x></f></shift>
		<unshift public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Void"/>
</f></unshift>
		<slice public="1" set="method"><f a="?pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></slice>
		<sort public="1" set="method"><f a="f">
	<f a=":">
		<c path="flash.Vector.T"/>
		<c path="flash.Vector.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></splice>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<indexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<insertAt public="1" get="inline" set="null" line="50"><f a="index:element">
	<x path="Int"/>
	<c path="flash.Vector.T"/>
	<x path="Void"/>
</f></insertAt>
		<removeAt public="1">
			<f a="index">
				<x path="Int"/>
				<c path="flash.Vector.T"/>
			</f>
			<meta><m n=":require"><e>flash19</e></m></meta>
		</removeAt>
		<new public="1"><f a="?length:?fixed">
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The Vector class is very similar to Array but is only supported by the Flash Player 10+</haxe_doc>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.display.IBitmapDrawable" params="" file="/usr/local/lib/haxe/std/flash/display/IBitmapDrawable.hx" extern="1" interface="1"/>
	<class path="flash.display.BitmapData" params="" file="/usr/local/lib/haxe/std/flash/display/BitmapData.hx" extern="1">
		<implements path="flash.display.IBitmapDrawable"/>
		<height public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</height>
		<rect public="1" get="accessor" set="null">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":flash.property"/></meta>
		</rect>
		<transparent public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</transparent>
		<width public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</width>
		<applyFilter public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:filter">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.filters.BitmapFilter"/>
	<x path="Void"/>
</f></applyFilter>
		<clone public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></clone>
		<colorTransform public="1" set="method"><f a="rect:colorTransform">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></colorTransform>
		<compare public="1" set="method"><f a="otherBitmapData">
	<c path="flash.display.BitmapData"/>
	<x path="flash.utils.Object"/>
</f></compare>
		<copyChannel public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:sourceChannel:destChannel">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></copyChannel>
		<copyPixels public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha" v=":::::false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Point"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mergeAlpha : false }</e></m></meta>
		</copyPixels>
		<copyPixelsToByteArray public="1">
			<f a="rect:data">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyPixelsToByteArray>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<draw public="1" set="method">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing" v=":::::false">
				<c path="flash.display.IBitmapDrawable"/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<x path="flash.display.BlendMode"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smoothing : false }</e></m></meta>
		</draw>
		<drawWithQuality public="1" expr="{ smoothing : false }">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing:?quality">
				<c path="flash.display.IBitmapDrawable"/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<x path="flash.display.BlendMode"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<x path="flash.display.StageQuality"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ smoothing : false }</e></m>
				<m n=":require"><e>flash11_3</e></m>
			</meta>
		</drawWithQuality>
		<encode public="1">
			<f a="rect:compressor:?byteArray">
				<c path="flash.geom.Rectangle"/>
				<x path="flash.utils.Object"/>
				<c path="flash.utils.ByteArray"/>
				<c path="flash.utils.ByteArray"/>
			</f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</encode>
		<fillRect public="1" set="method"><f a="rect:color">
	<c path="flash.geom.Rectangle"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></fillRect>
		<floodFill public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></floodFill>
		<generateFilterRect public="1" set="method"><f a="sourceRect:filter">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"/>
</f></generateFilterRect>
		<getColorBoundsRect public="1" set="method">
			<f a="mask:color:?findColor" v="::true">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
			</f>
			<meta><m n=":value"><e>{ findColor : true }</e></m></meta>
		</getColorBoundsRect>
		<getPixel public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel>
		<getPixel32 public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel32>
		<getPixels public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
</f></getPixels>
		<getVector public="1">
			<f a="rect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getVector>
		<get_height set="method"><f a=""><x path="Int"/></f></get_height>
		<get_rect set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_rect>
		<get_transparent set="method"><f a=""><x path="Bool"/></f></get_transparent>
		<get_width set="method"><f a=""><x path="Int"/></f></get_width>
		<histogram public="1">
			<f a="?hRect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><c path="flash.Vector"><x path="Float"/></c></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</histogram>
		<hitTest public="1" set="method">
			<f a="firstPoint:firstAlphaThreshold:secondObject:?secondBitmapDataPoint:?secondAlphaThreshold" v="::::1">
				<c path="flash.geom.Point"/>
				<x path="UInt"/>
				<x path="flash.utils.Object"/>
				<c path="flash.geom.Point"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ secondAlphaThreshold : 1 }</e></m></meta>
		</hitTest>
		<lock public="1" set="method"><f a=""><x path="Void"/></f></lock>
		<merge public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:redMultiplier:greenMultiplier:blueMultiplier:alphaMultiplier">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></merge>
		<noise public="1" set="method">
			<f a="randomSeed:?low:?high:?channelOptions:?grayScale" v=":0:255:7:false">
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ grayScale : false, channelOptions : 7, high : 255, low : 0 }</e></m></meta>
		</noise>
		<paletteMap public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?redArray:?greenArray:?blueArray:?alphaArray">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></paletteMap>
		<perlinNoise public="1" set="method">
			<f a="baseX:baseY:numOctaves:randomSeed:stitch:fractalNoise:?channelOptions:?grayScale:?offsets" v="::::::7:false:">
				<x path="Float"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<c path="Array"><c path="flash.geom.Point"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ grayScale : false, channelOptions : 7 }</e></m></meta>
		</perlinNoise>
		<pixelDissolve public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:?randomSeed:?numPixels:?fillColor" v=":::0:0:0">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ fillColor : 0, numPixels : 0, randomSeed : 0 }</e></m></meta>
		</pixelDissolve>
		<scroll public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scroll>
		<setPixel public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel>
		<setPixel32 public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel32>
		<setPixels public="1" set="method"><f a="rect:inputByteArray">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></setPixels>
		<setVector public="1">
			<f a="rect:inputVector">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</setVector>
		<threshold public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:operation:threshold:?color:?mask:?copySource" v=":::::0:0xFFFFFFFF:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<c path="String"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":value"><e>{ copySource : false, mask : 0xFFFFFFFF, color : 0 }</e></m></meta>
		</threshold>
		<unlock public="1" set="method"><f a="?changeRect">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></unlock>
		<new public="1" set="method">
			<f a="width:height:?transparent:?fillColor" v="::true:0xFFFFFFFF">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ fillColor : 0xFFFFFFFF, transparent : true }</e></m></meta>
		</new>
	</class>
	<abstract path="flash.display.BlendMode" params="" file="/usr/local/lib/haxe/std/flash/display/BlendMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.BlendMode"</e></m>
		</meta>
		<impl><class path="flash.display._BlendMode.BlendMode_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/BlendMode.hx" private="1" module="flash.display.BlendMode" extern="1" final="1">
	<ADD public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ADD>
	<ALPHA public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ALPHA>
	<DARKEN public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DARKEN>
	<DIFFERENCE public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DIFFERENCE>
	<ERASE public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ERASE>
	<HARDLIGHT public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HARDLIGHT>
	<INVERT public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INVERT>
	<LAYER public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LAYER>
	<LIGHTEN public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LIGHTEN>
	<MULTIPLY public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MULTIPLY>
	<NORMAL public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NORMAL>
	<OVERLAY public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OVERLAY>
	<SCREEN public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SCREEN>
	<SHADER public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHADER>
	<SUBTRACT public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SUBTRACT>
	<meta>
		<m n=":native"><e>"flash.display.BlendMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._BlendMode.BlendMode_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/BlendMode.hx" private="1" module="flash.display.BlendMode" extern="1" final="1">
		<ADD public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ADD>
		<ALPHA public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ALPHA>
		<DARKEN public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DARKEN>
		<DIFFERENCE public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DIFFERENCE>
		<ERASE public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ERASE>
		<HARDLIGHT public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HARDLIGHT>
		<INVERT public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INVERT>
		<LAYER public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LAYER>
		<LIGHTEN public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LIGHTEN>
		<MULTIPLY public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MULTIPLY>
		<NORMAL public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NORMAL>
		<OVERLAY public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OVERLAY>
		<SCREEN public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SCREEN>
		<SHADER public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHADER>
		<SUBTRACT public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SUBTRACT>
		<meta>
			<m n=":native"><e>"flash.display.BlendMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.CapsStyle" params="" file="/usr/local/lib/haxe/std/flash/display/CapsStyle.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.CapsStyle"</e></m>
		</meta>
		<impl><class path="flash.display._CapsStyle.CapsStyle_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/CapsStyle.hx" private="1" module="flash.display.CapsStyle" extern="1" final="1">
	<NONE public="1" set="null" static="1">
		<x path="flash.display.CapsStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<ROUND public="1" set="null" static="1">
		<x path="flash.display.CapsStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ROUND>
	<SQUARE public="1" set="null" static="1">
		<x path="flash.display.CapsStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SQUARE>
	<meta>
		<m n=":native"><e>"flash.display.CapsStyle"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._CapsStyle.CapsStyle_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/CapsStyle.hx" private="1" module="flash.display.CapsStyle" extern="1" final="1">
		<NONE public="1" set="null" static="1">
			<x path="flash.display.CapsStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<ROUND public="1" set="null" static="1">
			<x path="flash.display.CapsStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ROUND>
		<SQUARE public="1" set="null" static="1">
			<x path="flash.display.CapsStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SQUARE>
		<meta>
			<m n=":native"><e>"flash.display.CapsStyle"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.GradientType" params="" file="/usr/local/lib/haxe/std/flash/display/GradientType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.GradientType"</e></m>
		</meta>
		<impl><class path="flash.display._GradientType.GradientType_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/GradientType.hx" private="1" module="flash.display.GradientType" extern="1" final="1">
	<LINEAR public="1" set="null" static="1">
		<x path="flash.display.GradientType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LINEAR>
	<RADIAL public="1" set="null" static="1">
		<x path="flash.display.GradientType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RADIAL>
	<meta>
		<m n=":native"><e>"flash.display.GradientType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._GradientType.GradientType_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/GradientType.hx" private="1" module="flash.display.GradientType" extern="1" final="1">
		<LINEAR public="1" set="null" static="1">
			<x path="flash.display.GradientType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LINEAR>
		<RADIAL public="1" set="null" static="1">
			<x path="flash.display.GradientType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RADIAL>
		<meta>
			<m n=":native"><e>"flash.display.GradientType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.Graphics" params="" file="/usr/local/lib/haxe/std/flash/display/Graphics.hx" extern="1" final="1">
		<beginBitmapFill public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth" v="::true:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : false, repeat : true }</e></m></meta>
		</beginBitmapFill>
		<beginFill public="1" set="method">
			<f a="color:?alpha" v=":1">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1 }</e></m></meta>
		</beginFill>
		<beginGradientFill public="1" set="method">
			<f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio" v=":::::::0">
				<x path="flash.display.GradientType"/>
				<c path="Array"><x path="UInt"/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="flash.geom.Matrix"/>
				<x path="flash.display.SpreadMethod"/>
				<x path="flash.display.InterpolationMethod"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ focalPointRatio : 0 }</e></m></meta>
		</beginGradientFill>
		<beginShaderFill public="1">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</beginShaderFill>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<copyFrom public="1">
			<f a="sourceGraphics">
				<c path="flash.display.Graphics"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</copyFrom>
		<cubicCurveTo public="1">
			<f a="controlX1:controlY1:controlX2:controlY2:anchorX:anchorY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</cubicCurveTo>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<drawCircle public="1" set="method"><f a="x:y:radius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawCircle>
		<drawEllipse public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawEllipse>
		<drawGraphicsData public="1">
			<f a="graphicsData">
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawGraphicsData>
		<drawPath public="1">
			<f a="commands:data:?winding">
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="flash.display.GraphicsPathWinding"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawPath>
		<drawRect public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRect>
		<drawRoundRect public="1" set="method">
			<f a="x:y:width:height:ellipseWidth:?ellipseHeight" v=":::::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ellipseHeight : 0 }</e></m></meta>
		</drawRoundRect>
		<drawRoundRectComplex public="1" set="method"><f a="x:y:width:height:topLeftRadius:topRightRadius:bottomLeftRadius:bottomRightRadius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRoundRectComplex>
		<drawTriangles public="1">
			<f a="vertices:?indices:?uvtData:?culling">
				<c path="flash.Vector"><x path="Float"/></c>
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="flash.display.TriangleCulling"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawTriangles>
		<endFill public="1" set="method"><f a=""><x path="Void"/></f></endFill>
		<lineBitmapStyle public="1" expr="{ smooth : false, repeat : true }">
			<f a="bitmap:?matrix:?repeat:?smooth">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ smooth : false, repeat : true }</e></m>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</lineBitmapStyle>
		<lineGradientStyle public="1" set="method">
			<f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio" v=":::::::0">
				<x path="flash.display.GradientType"/>
				<c path="Array"><x path="UInt"/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="flash.geom.Matrix"/>
				<x path="flash.display.SpreadMethod"/>
				<x path="flash.display.InterpolationMethod"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ focalPointRatio : 0 }</e></m></meta>
		</lineGradientStyle>
		<lineShaderStyle public="1">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</lineShaderStyle>
		<lineStyle public="1" set="method">
			<f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit" v="0:0:1:false::::3">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="flash.display.LineScaleMode"/>
				<x path="flash.display.CapsStyle"/>
				<x path="flash.display.JointStyle"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miterLimit : 3, pixelHinting : false, alpha : 1, color : 0, thickness : 0 }</e></m></meta>
		</lineStyle>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<readGraphicsData public="1" expr="{ recurse : true }">
			<f a="?recurse">
				<x path="Bool"/>
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
			</f>
			<meta>
				<m n=":value"><e>{ recurse : true }</e></m>
				<m n=":require"><e>flash11_6</e></m>
			</meta>
		</readGraphicsData>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="flash.display.GraphicsPathWinding" params="" file="/usr/local/lib/haxe/std/flash/display/GraphicsPathWinding.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.GraphicsPathWinding"</e></m>
		</meta>
		<impl><class path="flash.display._GraphicsPathWinding.GraphicsPathWinding_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/GraphicsPathWinding.hx" private="1" module="flash.display.GraphicsPathWinding" extern="1" final="1">
	<EVEN_ODD public="1" set="null" static="1">
		<x path="flash.display.GraphicsPathWinding"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EVEN_ODD>
	<NON_ZERO public="1" set="null" static="1">
		<x path="flash.display.GraphicsPathWinding"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NON_ZERO>
	<meta>
		<m n=":native"><e>"flash.display.GraphicsPathWinding"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._GraphicsPathWinding.GraphicsPathWinding_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/GraphicsPathWinding.hx" private="1" module="flash.display.GraphicsPathWinding" extern="1" final="1">
		<EVEN_ODD public="1" set="null" static="1">
			<x path="flash.display.GraphicsPathWinding"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EVEN_ODD>
		<NON_ZERO public="1" set="null" static="1">
			<x path="flash.display.GraphicsPathWinding"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NON_ZERO>
		<meta>
			<m n=":native"><e>"flash.display.GraphicsPathWinding"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.IGraphicsData" params="" file="/usr/local/lib/haxe/std/flash/display/IGraphicsData.hx" extern="1" interface="1"/>
	<abstract path="flash.display.InterpolationMethod" params="" file="/usr/local/lib/haxe/std/flash/display/InterpolationMethod.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.InterpolationMethod"</e></m>
		</meta>
		<impl><class path="flash.display._InterpolationMethod.InterpolationMethod_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/InterpolationMethod.hx" private="1" module="flash.display.InterpolationMethod" extern="1" final="1">
	<LINEAR_RGB public="1" set="null" static="1">
		<x path="flash.display.InterpolationMethod"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LINEAR_RGB>
	<RGB public="1" set="null" static="1">
		<x path="flash.display.InterpolationMethod"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RGB>
	<meta>
		<m n=":native"><e>"flash.display.InterpolationMethod"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._InterpolationMethod.InterpolationMethod_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/InterpolationMethod.hx" private="1" module="flash.display.InterpolationMethod" extern="1" final="1">
		<LINEAR_RGB public="1" set="null" static="1">
			<x path="flash.display.InterpolationMethod"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LINEAR_RGB>
		<RGB public="1" set="null" static="1">
			<x path="flash.display.InterpolationMethod"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RGB>
		<meta>
			<m n=":native"><e>"flash.display.InterpolationMethod"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.JointStyle" params="" file="/usr/local/lib/haxe/std/flash/display/JointStyle.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.JointStyle"</e></m>
		</meta>
		<impl><class path="flash.display._JointStyle.JointStyle_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/JointStyle.hx" private="1" module="flash.display.JointStyle" extern="1" final="1">
	<BEVEL public="1" set="null" static="1">
		<x path="flash.display.JointStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BEVEL>
	<MITER public="1" set="null" static="1">
		<x path="flash.display.JointStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MITER>
	<ROUND public="1" set="null" static="1">
		<x path="flash.display.JointStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ROUND>
	<meta>
		<m n=":native"><e>"flash.display.JointStyle"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._JointStyle.JointStyle_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/JointStyle.hx" private="1" module="flash.display.JointStyle" extern="1" final="1">
		<BEVEL public="1" set="null" static="1">
			<x path="flash.display.JointStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BEVEL>
		<MITER public="1" set="null" static="1">
			<x path="flash.display.JointStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MITER>
		<ROUND public="1" set="null" static="1">
			<x path="flash.display.JointStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ROUND>
		<meta>
			<m n=":native"><e>"flash.display.JointStyle"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.LineScaleMode" params="" file="/usr/local/lib/haxe/std/flash/display/LineScaleMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.LineScaleMode"</e></m>
		</meta>
		<impl><class path="flash.display._LineScaleMode.LineScaleMode_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/LineScaleMode.hx" private="1" module="flash.display.LineScaleMode" extern="1" final="1">
	<HORIZONTAL public="1" set="null" static="1">
		<x path="flash.display.LineScaleMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HORIZONTAL>
	<NONE public="1" set="null" static="1">
		<x path="flash.display.LineScaleMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<NORMAL public="1" set="null" static="1">
		<x path="flash.display.LineScaleMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NORMAL>
	<VERTICAL public="1" set="null" static="1">
		<x path="flash.display.LineScaleMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VERTICAL>
	<meta>
		<m n=":native"><e>"flash.display.LineScaleMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._LineScaleMode.LineScaleMode_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/LineScaleMode.hx" private="1" module="flash.display.LineScaleMode" extern="1" final="1">
		<HORIZONTAL public="1" set="null" static="1">
			<x path="flash.display.LineScaleMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HORIZONTAL>
		<NONE public="1" set="null" static="1">
			<x path="flash.display.LineScaleMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<NORMAL public="1" set="null" static="1">
			<x path="flash.display.LineScaleMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NORMAL>
		<VERTICAL public="1" set="null" static="1">
			<x path="flash.display.LineScaleMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VERTICAL>
		<meta>
			<m n=":native"><e>"flash.display.LineScaleMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.Shader" params="" file="/usr/local/lib/haxe/std/flash/display/Shader.hx" extern="1">
		<byteCode public="1" get="null" set="accessor">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":flash.property"/></meta>
		</byteCode>
		<data public="1" get="accessor" set="accessor">
			<c path="flash.display.ShaderData"/>
			<meta><m n=":flash.property"/></meta>
		</data>
		<precisionHint public="1" get="accessor" set="accessor">
			<x path="flash.display.ShaderPrecision"/>
			<meta><m n=":flash.property"/></meta>
		</precisionHint>
		<get_data set="method"><f a=""><c path="flash.display.ShaderData"/></f></get_data>
		<get_precisionHint set="method"><f a=""><x path="flash.display.ShaderPrecision"/></f></get_precisionHint>
		<set_byteCode set="method"><f a="value">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
</f></set_byteCode>
		<set_data set="method"><f a="value">
	<c path="flash.display.ShaderData"/>
	<c path="flash.display.ShaderData"/>
</f></set_data>
		<set_precisionHint set="method"><f a="value">
	<x path="flash.display.ShaderPrecision"/>
	<x path="flash.display.ShaderPrecision"/>
</f></set_precisionHint>
		<new public="1"><f a="?code">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.display.ShaderData" params="" file="/usr/local/lib/haxe/std/flash/display/ShaderData.hx" extern="1"><new public="1" set="method"><f a="byteCode">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new></class>
	<abstract path="flash.display.ShaderPrecision" params="" file="/usr/local/lib/haxe/std/flash/display/ShaderPrecision.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.ShaderPrecision"</e></m>
		</meta>
		<impl><class path="flash.display._ShaderPrecision.ShaderPrecision_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/ShaderPrecision.hx" private="1" module="flash.display.ShaderPrecision" extern="1" final="1">
	<FAST public="1" set="null" static="1">
		<x path="flash.display.ShaderPrecision"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FAST>
	<FULL public="1" set="null" static="1">
		<x path="flash.display.ShaderPrecision"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FULL>
	<meta>
		<m n=":native"><e>"flash.display.ShaderPrecision"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._ShaderPrecision.ShaderPrecision_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/ShaderPrecision.hx" private="1" module="flash.display.ShaderPrecision" extern="1" final="1">
		<FAST public="1" set="null" static="1">
			<x path="flash.display.ShaderPrecision"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FAST>
		<FULL public="1" set="null" static="1">
			<x path="flash.display.ShaderPrecision"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FULL>
		<meta>
			<m n=":native"><e>"flash.display.ShaderPrecision"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.SpreadMethod" params="" file="/usr/local/lib/haxe/std/flash/display/SpreadMethod.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.SpreadMethod"</e></m>
		</meta>
		<impl><class path="flash.display._SpreadMethod.SpreadMethod_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/SpreadMethod.hx" private="1" module="flash.display.SpreadMethod" extern="1" final="1">
	<PAD public="1" set="null" static="1">
		<x path="flash.display.SpreadMethod"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PAD>
	<REFLECT public="1" set="null" static="1">
		<x path="flash.display.SpreadMethod"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REFLECT>
	<REPEAT public="1" set="null" static="1">
		<x path="flash.display.SpreadMethod"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REPEAT>
	<meta>
		<m n=":native"><e>"flash.display.SpreadMethod"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._SpreadMethod.SpreadMethod_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/SpreadMethod.hx" private="1" module="flash.display.SpreadMethod" extern="1" final="1">
		<PAD public="1" set="null" static="1">
			<x path="flash.display.SpreadMethod"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PAD>
		<REFLECT public="1" set="null" static="1">
			<x path="flash.display.SpreadMethod"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REFLECT>
		<REPEAT public="1" set="null" static="1">
			<x path="flash.display.SpreadMethod"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REPEAT>
		<meta>
			<m n=":native"><e>"flash.display.SpreadMethod"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.StageQuality" params="" file="/usr/local/lib/haxe/std/flash/display/StageQuality.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.StageQuality"</e></m>
		</meta>
		<impl><class path="flash.display._StageQuality.StageQuality_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/StageQuality.hx" private="1" module="flash.display.StageQuality" extern="1" final="1">
	<BEST public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BEST>
	<HIGH public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGH>
	<HIGH_16X16 public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGH_16X16>
	<HIGH_16X16_LINEAR public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGH_16X16_LINEAR>
	<HIGH_8X8 public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGH_8X8>
	<HIGH_8X8_LINEAR public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGH_8X8_LINEAR>
	<LOW public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOW>
	<MEDIUM public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MEDIUM>
	<meta>
		<m n=":native"><e>"flash.display.StageQuality"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._StageQuality.StageQuality_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/StageQuality.hx" private="1" module="flash.display.StageQuality" extern="1" final="1">
		<BEST public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BEST>
		<HIGH public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGH>
		<HIGH_16X16 public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGH_16X16>
		<HIGH_16X16_LINEAR public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGH_16X16_LINEAR>
		<HIGH_8X8 public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGH_8X8>
		<HIGH_8X8_LINEAR public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGH_8X8_LINEAR>
		<LOW public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOW>
		<MEDIUM public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MEDIUM>
		<meta>
			<m n=":native"><e>"flash.display.StageQuality"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.TriangleCulling" params="" file="/usr/local/lib/haxe/std/flash/display/TriangleCulling.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.TriangleCulling"</e></m>
		</meta>
		<impl><class path="flash.display._TriangleCulling.TriangleCulling_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/TriangleCulling.hx" private="1" module="flash.display.TriangleCulling" extern="1" final="1">
	<NEGATIVE public="1" set="null" static="1">
		<x path="flash.display.TriangleCulling"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NEGATIVE>
	<NONE public="1" set="null" static="1">
		<x path="flash.display.TriangleCulling"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<POSITIVE public="1" set="null" static="1">
		<x path="flash.display.TriangleCulling"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</POSITIVE>
	<meta>
		<m n=":native"><e>"flash.display.TriangleCulling"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._TriangleCulling.TriangleCulling_Impl_" params="" file="/usr/local/lib/haxe/std/flash/display/TriangleCulling.hx" private="1" module="flash.display.TriangleCulling" extern="1" final="1">
		<NEGATIVE public="1" set="null" static="1">
			<x path="flash.display.TriangleCulling"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NEGATIVE>
		<NONE public="1" set="null" static="1">
			<x path="flash.display.TriangleCulling"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<POSITIVE public="1" set="null" static="1">
			<x path="flash.display.TriangleCulling"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</POSITIVE>
		<meta>
			<m n=":native"><e>"flash.display.TriangleCulling"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="/usr/local/lib/haxe/std/flash/filters/BitmapFilter.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.filters.BitmapFilter"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="/usr/local/lib/haxe/std/flash/geom/ColorTransform.hx" extern="1">
		<alphaMultiplier public="1"><x path="Float"/></alphaMultiplier>
		<alphaOffset public="1"><x path="Float"/></alphaOffset>
		<blueMultiplier public="1"><x path="Float"/></blueMultiplier>
		<blueOffset public="1"><x path="Float"/></blueOffset>
		<color public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</color>
		<greenMultiplier public="1"><x path="Float"/></greenMultiplier>
		<greenOffset public="1"><x path="Float"/></greenOffset>
		<redMultiplier public="1"><x path="Float"/></redMultiplier>
		<redOffset public="1"><x path="Float"/></redOffset>
		<concat public="1" set="method"><f a="second">
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></concat>
		<get_color set="method"><f a=""><x path="UInt"/></f></get_color>
		<set_color set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_color>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="?redMultiplier:?greenMultiplier:?blueMultiplier:?alphaMultiplier:?redOffset:?greenOffset:?blueOffset:?alphaOffset" v="1:1:1:1:0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alphaOffset : 0, blueOffset : 0, greenOffset : 0, redOffset : 0, alphaMultiplier : 1, blueMultiplier : 1, greenMultiplier : 1, redMultiplier : 1 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Matrix" params="" file="/usr/local/lib/haxe/std/flash/geom/Matrix.hx" extern="1">
		<a public="1"><x path="Float"/></a>
		<b public="1"><x path="Float"/></b>
		<c public="1"><x path="Float"/></c>
		<d public="1"><x path="Float"/></d>
		<tx public="1"><x path="Float"/></tx>
		<ty public="1"><x path="Float"/></ty>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix"/></f></clone>
		<concat public="1" set="method"><f a="m">
	<c path="flash.geom.Matrix"/>
	<x path="Void"/>
</f></concat>
		<copyColumnFrom public="1">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<copyColumnTo public="1">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyFrom public="1">
			<f a="sourceMatrix">
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyRowFrom public="1">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRowTo public="1">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<createBox public="1" set="method">
			<f a="scaleX:scaleY:?rotation:?tx:?ty" v="::0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, rotation : 0 }</e></m></meta>
		</createBox>
		<createGradientBox public="1" set="method">
			<f a="width:height:?rotation:?tx:?ty" v="::0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, rotation : 0 }</e></m></meta>
		</createGradientBox>
		<deltaTransformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></deltaTransformPoint>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<invert public="1" set="method"><f a=""><x path="Void"/></f></invert>
		<rotate public="1" set="method"><f a="angle">
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<scale public="1" set="method"><f a="sx:sy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<setTo public="1">
			<f a="aa:ba:ca:da:txa:tya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<transformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></transformPoint>
		<translate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<new public="1" set="method">
			<f a="?a:?b:?c:?d:?tx:?ty" v="1:0:0:1:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, d : 1, c : 0, b : 0, a : 1 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Point" params="" file="/usr/local/lib/haxe/std/flash/geom/Point.hx" extern="1">
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
</f></distance>
		<interpolate public="1" set="method" static="1"><f a="pt1:pt2:f">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></interpolate>
		<polar public="1" set="method" static="1"><f a="len:angle">
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></polar>
		<length public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</length>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<add public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Point"/></f></clone>
		<copyFrom public="1">
			<f a="sourcePoint">
				<c path="flash.geom.Point"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></equals>
		<get_length set="method"><f a=""><x path="Float"/></f></get_length>
		<normalize public="1" set="method"><f a="thickness">
	<x path="Float"/>
	<x path="Void"/>
</f></normalize>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<setTo public="1">
			<f a="xa:ya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<subtract public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="?x:?y" v="0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Rectangle" params="" file="/usr/local/lib/haxe/std/flash/geom/Rectangle.hx" extern="1">
		<bottom public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bottom>
		<bottomRight public="1" get="accessor" set="accessor">
			<c path="flash.geom.Point"/>
			<meta><m n=":flash.property"/></meta>
		</bottomRight>
		<height public="1"><x path="Float"/></height>
		<left public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</left>
		<right public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</right>
		<size public="1" get="accessor" set="accessor">
			<c path="flash.geom.Point"/>
			<meta><m n=":flash.property"/></meta>
		</size>
		<top public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</top>
		<topLeft public="1" get="accessor" set="accessor">
			<c path="flash.geom.Point"/>
			<meta><m n=":flash.property"/></meta>
		</topLeft>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Rectangle"/></f></clone>
		<contains public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></contains>
		<containsPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></containsPoint>
		<containsRect public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></containsRect>
		<copyFrom public="1">
			<f a="sourceRect">
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></equals>
		<get_bottom set="method"><f a=""><x path="Float"/></f></get_bottom>
		<get_bottomRight set="method"><f a=""><c path="flash.geom.Point"/></f></get_bottomRight>
		<get_left set="method"><f a=""><x path="Float"/></f></get_left>
		<get_right set="method"><f a=""><x path="Float"/></f></get_right>
		<get_size set="method"><f a=""><c path="flash.geom.Point"/></f></get_size>
		<get_top set="method"><f a=""><x path="Float"/></f></get_top>
		<get_topLeft set="method"><f a=""><c path="flash.geom.Point"/></f></get_topLeft>
		<inflate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></inflate>
		<inflatePoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></inflatePoint>
		<intersection public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></intersection>
		<intersects public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></intersects>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<offsetPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></offsetPoint>
		<setEmpty public="1" set="method"><f a=""><x path="Void"/></f></setEmpty>
		<setTo public="1">
			<f a="xa:ya:widtha:heighta">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<set_bottom set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_bottom>
		<set_bottomRight set="method"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_bottomRight>
		<set_left set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_left>
		<set_right set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_right>
		<set_size set="method"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_size>
		<set_top set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_top>
		<set_topLeft set="method"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_topLeft>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<union public="1" set="method"><f a="toUnion">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></union>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height" v="0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0, width : 0, y : 0, x : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Vector3D" params="" file="/usr/local/lib/haxe/std/flash/geom/Vector3D.hx" extern="1">
		<X_AXIS final="1" public="1" static="1"><c path="flash.geom.Vector3D"/></X_AXIS>
		<Y_AXIS final="1" public="1" static="1"><c path="flash.geom.Vector3D"/></Y_AXIS>
		<Z_AXIS final="1" public="1" static="1"><c path="flash.geom.Vector3D"/></Z_AXIS>
		<angleBetween public="1" static="1"><f a="a:b">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></angleBetween>
		<distance public="1" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></distance>
		<length public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</length>
		<lengthSquared public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</lengthSquared>
		<w public="1"><x path="Float"/></w>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<add public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Vector3D"/></f></clone>
		<copyFrom public="1">
			<f a="sourceVector3D">
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<crossProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></crossProduct>
		<decrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></decrementBy>
		<dotProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></dotProduct>
		<equals public="1" set="method">
			<f a="toCompare:?allFour" v=":false">
				<c path="flash.geom.Vector3D"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ allFour : false }</e></m></meta>
		</equals>
		<get_length set="method"><f a=""><x path="Float"/></f></get_length>
		<get_lengthSquared set="method"><f a=""><x path="Float"/></f></get_lengthSquared>
		<incrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></incrementBy>
		<nearEquals public="1" set="method">
			<f a="toCompare:tolerance:?allFour" v="::false">
				<c path="flash.geom.Vector3D"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ allFour : false }</e></m></meta>
		</nearEquals>
		<negate public="1" set="method"><f a=""><x path="Void"/></f></negate>
		<normalize public="1" set="method"><f a=""><x path="Float"/></f></normalize>
		<project public="1" set="method"><f a=""><x path="Void"/></f></project>
		<scaleBy public="1" set="method"><f a="s">
	<x path="Float"/>
	<x path="Void"/>
</f></scaleBy>
		<setTo public="1">
			<f a="xa:ya:za">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<subtract public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" expr="{ w : 0, z : 0, y : 0, x : 0 }">
			<f a="?x:?y:?z:?w">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 0, z : 0, y : 0, x : 0 }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.utils.IDataInput" params="" file="/usr/local/lib/haxe/std/flash/utils/IDataInput.hx" extern="1" interface="1">
		<bytesAvailable public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesAvailable>
		<endian public="1" get="accessor" set="accessor">
			<x path="flash.utils.Endian"/>
			<meta><m n=":flash.property"/></meta>
		</endian>
		<objectEncoding public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<get_bytesAvailable set="method"><f a=""><x path="UInt"/></f></get_bytesAvailable>
		<get_endian set="method"><f a=""><x path="flash.utils.Endian"/></f></get_endian>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<set_endian set="method"><f a="value">
	<x path="flash.utils.Endian"/>
	<x path="flash.utils.Endian"/>
</f></set_endian>
		<set_objectEncoding set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_objectEncoding>
	</class>
	<class path="flash.utils.IDataInput2" params="" file="/usr/local/lib/haxe/std/flash/utils/IDataInput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataInput"/></class>
	<class path="flash.utils.IDataOutput" params="" file="/usr/local/lib/haxe/std/flash/utils/IDataOutput.hx" extern="1" interface="1">
		<endian public="1" get="accessor" set="accessor">
			<x path="flash.utils.Endian"/>
			<meta><m n=":flash.property"/></meta>
		</endian>
		<objectEncoding public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<get_endian set="method"><f a=""><x path="flash.utils.Endian"/></f></get_endian>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<set_endian set="method"><f a="value">
	<x path="flash.utils.Endian"/>
	<x path="flash.utils.Endian"/>
</f></set_endian>
		<set_objectEncoding set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_objectEncoding>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
	</class>
	<class path="flash.utils.IDataOutput2" params="" file="/usr/local/lib/haxe/std/flash/utils/IDataOutput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataOutput"/></class>
	<class path="flash.utils.ByteArray" params="" file="/usr/local/lib/haxe/std/flash/utils/ByteArray.hx" extern="1">
		<implements path="flash.utils.IDataInput2"/>
		<implements path="flash.utils.IDataOutput2"/>
		<defaultObjectEncoding public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</defaultObjectEncoding>
		<get_defaultObjectEncoding set="method" static="1"><f a=""><x path="UInt"/></f></get_defaultObjectEncoding>
		<set_defaultObjectEncoding set="method" static="1"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_defaultObjectEncoding>
		<bytesAvailable public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesAvailable>
		<endian public="1" get="accessor" set="accessor">
			<x path="flash.utils.Endian"/>
			<meta><m n=":flash.property"/></meta>
		</endian>
		<length public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</length>
		<objectEncoding public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<position public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</position>
		<shareable public="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_4</e></m>
			</meta>
		</shareable>
		<atomicCompareAndSwapIntAt public="1">
			<f a="byteIndex:expectedValue:newValue">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapIntAt>
		<atomicCompareAndSwapLength public="1">
			<f a="expectedLength:newLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapLength>
		<clear public="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clear>
		<compress public="1" set="method"><f a="?algorithm">
	<x path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></compress>
		<deflate public="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</deflate>
		<get_bytesAvailable set="method"><f a=""><x path="UInt"/></f></get_bytesAvailable>
		<get_endian set="method"><f a=""><x path="flash.utils.Endian"/></f></get_endian>
		<get_length set="method"><f a=""><x path="UInt"/></f></get_length>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<get_position set="method"><f a=""><x path="UInt"/></f></get_position>
		<get_shareable set="method"><f a=""><x path="Bool"/></f></get_shareable>
		<inflate public="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</inflate>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<set_endian set="method"><f a="value">
	<x path="flash.utils.Endian"/>
	<x path="flash.utils.Endian"/>
</f></set_endian>
		<set_length set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_length>
		<set_objectEncoding set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_objectEncoding>
		<set_position set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_position>
		<set_shareable set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_shareable>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<uncompress public="1" set="method"><f a="?algorithm">
	<x path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></uncompress>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="flash.utils.CompressionAlgorithm" params="" file="/usr/local/lib/haxe/std/flash/utils/CompressionAlgorithm.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.utils.CompressionAlgorithm"</e></m>
			<m n=":require"><e>flash11</e></m>
		</meta>
		<impl><class path="flash.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_" params="" file="/usr/local/lib/haxe/std/flash/utils/CompressionAlgorithm.hx" private="1" module="flash.utils.CompressionAlgorithm" extern="1" final="1">
	<DEFLATE public="1" set="null" static="1">
		<x path="flash.utils.CompressionAlgorithm"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DEFLATE>
	<LZMA public="1" set="null" static="1">
		<x path="flash.utils.CompressionAlgorithm"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LZMA>
	<ZLIB public="1" set="null" static="1">
		<x path="flash.utils.CompressionAlgorithm"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ZLIB>
	<meta>
		<m n=":native"><e>"flash.utils.CompressionAlgorithm"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_" params="" file="/usr/local/lib/haxe/std/flash/utils/CompressionAlgorithm.hx" private="1" module="flash.utils.CompressionAlgorithm" extern="1" final="1">
		<DEFLATE public="1" set="null" static="1">
			<x path="flash.utils.CompressionAlgorithm"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DEFLATE>
		<LZMA public="1" set="null" static="1">
			<x path="flash.utils.CompressionAlgorithm"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LZMA>
		<ZLIB public="1" set="null" static="1">
			<x path="flash.utils.CompressionAlgorithm"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ZLIB>
		<meta>
			<m n=":native"><e>"flash.utils.CompressionAlgorithm"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.utils.Endian" params="" file="/usr/local/lib/haxe/std/flash/utils/Endian.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.utils.Endian"</e></m>
		</meta>
		<impl><class path="flash.utils._Endian.Endian_Impl_" params="" file="/usr/local/lib/haxe/std/flash/utils/Endian.hx" private="1" module="flash.utils.Endian" extern="1" final="1">
	<BIG_ENDIAN public="1" set="null" static="1">
		<x path="flash.utils.Endian"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BIG_ENDIAN>
	<LITTLE_ENDIAN public="1" set="null" static="1">
		<x path="flash.utils.Endian"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LITTLE_ENDIAN>
	<meta>
		<m n=":native"><e>"flash.utils.Endian"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.utils._Endian.Endian_Impl_" params="" file="/usr/local/lib/haxe/std/flash/utils/Endian.hx" private="1" module="flash.utils.Endian" extern="1" final="1">
		<BIG_ENDIAN public="1" set="null" static="1">
			<x path="flash.utils.Endian"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BIG_ENDIAN>
		<LITTLE_ENDIAN public="1" set="null" static="1">
			<x path="flash.utils.Endian"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LITTLE_ENDIAN>
		<meta>
			<m n=":native"><e>"flash.utils.Endian"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.utils.Object" params="" file="/usr/local/lib/haxe/std/flash/utils/Object.hx">
		<from><icast><d/></icast></from>
		<this><x path="flash.utils.Object"/></this>
		<to><icast><d/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<enum path="fracs.DifferencePreference" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Angles.hx" module="fracs.Angles">
		<CLOCKWISE/>
		<ANTICLOCKWISE/>
		<SMALL/>
		<LARGE/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="fracs.Angles" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Angles.hx">
		<pi2pi public="1" get="inline" set="null" line="11" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></pi2pi>
		<zeroto2pi public="1" get="inline" set="null" line="19" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zeroto2pi>
		<zerotoMinus2pi public="1" get="inline" set="null" line="27" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zerotoMinus2pi>
		<differencePrefer public="1" get="inline" set="null" line="36" static="1"><f a="a:b:prefer">
	<x path="Float"/>
	<x path="Float"/>
	<e path="fracs.DifferencePreference"/>
	<x path="Float"/>
</f></differencePrefer>
		<difference public="1" get="inline" set="null" line="48" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></difference>
		<differenceClockWise public="1" get="inline" set="null" line="57" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceClockWise>
		<differenceAntiClockwise public="1" get="inline" set="null" line="61" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceAntiClockwise>
		<differenceSmall public="1" get="inline" set="null" line="65" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceSmall>
		<differenceLarge public="1" get="inline" set="null" line="80" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceLarge>
		<differenceSmallLarge public="1" get="inline" set="null" line="95" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<a>
		<small><x path="Float"/></small>
		<large><x path="Float"/></large>
	</a>
</f></differenceSmallLarge>
	</class>
	<typedef path="fracs.Fractional" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Fraction.hx" module="fracs.Fraction"><a>
	<value><x path="Null"><x path="Float"/></x></value>
	<positive><x path="Bool"/></positive>
	<numerator><x path="Int"/></numerator>
	<denominator><x path="Int"/></denominator>
</a></typedef>
	<abstract path="fracs.FractionArray" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Fraction.hx" module="fracs.Fraction">
		<from><icast><c path="Array"><x path="fracs.Fraction"/></c></icast></from>
		<this><c path="Array"><x path="fracs.Fraction"/></c></this>
		<to>
			<icast><c path="Array"><x path="fracs.Fraction"/></c></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta>
			<m n=":arrayAccess"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="fracs._Fraction.FractionArray_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="?val">
			<c path="Array"><x path="fracs.Fraction"/></c>
			<x path="fracs.FractionArray"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<add public="1" get="inline" set="null" line="17" static="1">
		<f a="this:val">
			<c path="Array"><x path="fracs.Fraction"/></c>
			<x path="fracs.Fraction"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</add>
	<toString public="1" get="inline" set="null" line="22" static="1">
		<f a="this">
			<c path="Array"><x path="fracs.Fraction"/></c>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toString>
</class></impl>
	</abstract>
	<class path="fracs._Fraction.FractionArray_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="?val">
				<c path="Array"><x path="fracs.Fraction"/></c>
				<x path="fracs.FractionArray"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<add public="1" get="inline" set="null" line="17" static="1">
			<f a="this:val">
				<c path="Array"><x path="fracs.Fraction"/></c>
				<x path="fracs.Fraction"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</add>
		<toString public="1" get="inline" set="null" line="22" static="1">
			<f a="this">
				<c path="Array"><x path="fracs.Fraction"/></c>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toString>
	</class>
	<abstract path="fracs.Fraction" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Fraction.hx">
		<from>
			<icast><t path="fracs.Fractional"/></icast>
			<icast field="fromString"><c path="String"/></icast>
			<icast field="fromFloat"><x path="Float"/></icast>
		</from>
		<this><t path="fracs.Fractional"/></this>
		<to>
			<icast><t path="fracs.Fractional"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="fracs._Fraction.Fraction_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="numerator:denominator:?positive:?value" v="::true:null">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta>
			<m n=":value"><e>{ value : null, positive : true }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<optimize get="inline" set="null" line="44" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":impl"/></meta>
	</optimize>
	<optimizeFraction get="inline" set="null" line="48" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":impl"/></meta>
	</optimizeFraction>
	<toFloat public="1" get="inline" set="null" line="53" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
	<float public="1" get="inline" set="null" line="61" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</float>
	<verbose public="1" get="inline" set="null" line="65" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</verbose>
	<fromString public="1" get="inline" set="null" line="70" static="1">
		<f a="val">
			<c path="String"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="81" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toString>
	<fromFloat public="1" get="inline" set="null" line="97" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<firstFloat public="1" get="inline" set="null" line="118" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.Fraction"/>
</f></firstFloat>
	<byDenominator public="1" get="inline" set="null" line="125" static="1">
		<f a="this:val">
			<t path="fracs.Fractional"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</byDenominator>
	<all public="1" get="inline" set="null" line="136" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.FractionArray"/>
</f></all>
	<similarToFraction public="1" get="inline" set="null" line="140" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<x path="fracs.FractionArray"/>
		</f>
		<meta><m n=":impl"/></meta>
	</similarToFraction>
	<similarToValue public="1" get="inline" set="null" line="145" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<x path="fracs.FractionArray"/>
		</f>
		<meta><m n=":impl"/></meta>
	</similarToValue>
</class></impl>
	</abstract>
	<class path="fracs._Fraction.Fraction_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="numerator:denominator:?positive:?value" v="::true:null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta>
				<m n=":value"><e>{ value : null, positive : true }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<optimize get="inline" set="null" line="44" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":impl"/></meta>
		</optimize>
		<optimizeFraction get="inline" set="null" line="48" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":impl"/></meta>
		</optimizeFraction>
		<toFloat public="1" get="inline" set="null" line="53" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
		<float public="1" get="inline" set="null" line="61" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</float>
		<verbose public="1" get="inline" set="null" line="65" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</verbose>
		<fromString public="1" get="inline" set="null" line="70" static="1">
			<f a="val">
				<c path="String"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="81" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toString>
		<fromFloat public="1" get="inline" set="null" line="97" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<firstFloat public="1" get="inline" set="null" line="118" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.Fraction"/>
</f></firstFloat>
		<byDenominator public="1" get="inline" set="null" line="125" static="1">
			<f a="this:val">
				<t path="fracs.Fractional"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</byDenominator>
		<all public="1" get="inline" set="null" line="136" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.FractionArray"/>
</f></all>
		<similarToFraction public="1" get="inline" set="null" line="140" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<x path="fracs.FractionArray"/>
			</f>
			<meta><m n=":impl"/></meta>
		</similarToFraction>
		<similarToValue public="1" get="inline" set="null" line="145" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<x path="fracs.FractionArray"/>
			</f>
			<meta><m n=":impl"/></meta>
		</similarToValue>
	</class>
	<class path="fracs.Fracs" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Fraction.hx" module="fracs.Fraction">
		<grabDecimalInput get="inline" set="null" line="153" static="1"><f a="decimalVal">
	<c path="String"/>
	<x path="Float"/>
</f></grabDecimalInput>
		<approximateFractions set="method" line="159" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.FractionArray"/>
			</f>
			<meta><m n=":allow"><e>fracs.Fraction</e></m></meta>
		</approximateFractions>
		<getMaxNumerator get="inline" set="null" line="185" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></getMaxNumerator>
		<extractDigitStr get="inline" set="null" line="218" static="1"><f a="fStr">
	<c path="String"/>
	<c path="String"/>
</f></extractDigitStr>
		<getMaxNumeratorStr get="inline" set="null" line="239" static="1"><f a="fStr">
	<c path="String"/>
	<x path="Float"/>
</f></getMaxNumeratorStr>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="fracs.Pi2pi" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Pi2pi.hx">
		<from>
			<icast field="fromFloat"><x path="Float"/></icast>
			<icast field="fromFraction"><x path="fracs.Fraction"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to>
			<icast><x path="Float"/></icast>
			<icast field="tofraction"><x path="fracs.Fraction"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta><m n="forward"/></meta>
		<impl><class path="fracs._Pi2pi.Pi2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Pi2pi.hx" private="1" module="fracs.Pi2pi" final="1">
	<_new get="inline" set="null" line="5" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<fromFloat public="1" get="inline" set="null" line="10" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<additionPi public="1" set="method" line="20" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</additionPi>
	<subtractionPi public="1" set="method" line="24" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subtractionPi>
	<dividePi public="1" set="method" line="28" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</dividePi>
	<timesPi public="1" set="method" line="32" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</timesPi>
	<addition public="1" set="method" line="36" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addition>
	<subtraction public="1" set="method" line="40" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subtraction>
	<divide public="1" set="method" line="44" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divide>
	<times public="1" set="method" line="48" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</times>
	<degrees public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</degrees>
	<get_degrees public="1" get="inline" set="null" line="52" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_degrees>
	<set_degrees public="1" get="inline" set="null" line="56" static="1">
		<f a="this:val">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_degrees>
	<fromFraction get="inline" set="null" line="62" static="1">
		<f a="val">
			<x path="fracs.Fraction"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFraction>
	<tofraction get="inline" set="null" line="67" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</tofraction>
	<fromString get="inline" set="null" line="71" static="1">
		<f a="val">
			<c path="String"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="77" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toString>
</class></impl>
	</abstract>
	<class path="fracs._Pi2pi.Pi2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/Pi2pi.hx" private="1" module="fracs.Pi2pi" final="1">
		<_new get="inline" set="null" line="5" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<fromFloat public="1" get="inline" set="null" line="10" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<additionPi public="1" set="method" line="20" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</additionPi>
		<subtractionPi public="1" set="method" line="24" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subtractionPi>
		<dividePi public="1" set="method" line="28" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</dividePi>
		<timesPi public="1" set="method" line="32" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</timesPi>
		<addition public="1" set="method" line="36" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addition>
		<subtraction public="1" set="method" line="40" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subtraction>
		<divide public="1" set="method" line="44" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divide>
		<times public="1" set="method" line="48" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</times>
		<degrees public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</degrees>
		<get_degrees public="1" get="inline" set="null" line="52" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_degrees>
		<set_degrees public="1" get="inline" set="null" line="56" static="1">
			<f a="this:val">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_degrees>
		<fromFraction get="inline" set="null" line="62" static="1">
			<f a="val">
				<x path="fracs.Fraction"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFraction>
		<tofraction get="inline" set="null" line="67" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</tofraction>
		<fromString get="inline" set="null" line="71" static="1">
			<f a="val">
				<c path="String"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="77" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toString>
	</class>
	<abstract path="fracs.ZeroTo2pi" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/ZeroTo2pi.hx">
		<from>
			<icast field="fromFloat"><x path="Float"/></icast>
			<icast field="fromFraction"><x path="fracs.Fraction"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to>
			<icast><x path="Float"/></icast>
			<icast field="tofraction"><x path="fracs.Fraction"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta><m n="forward"/></meta>
		<impl><class path="fracs._ZeroTo2pi.ZeroTo2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/ZeroTo2pi.hx" private="1" module="fracs.ZeroTo2pi" final="1">
	<_new get="inline" set="null" line="5" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<fromFloat public="1" get="inline" set="null" line="10" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<additionPi public="1" set="method" line="20" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</additionPi>
	<subtractionPi public="1" set="method" line="24" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subtractionPi>
	<dividePi public="1" set="method" line="28" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</dividePi>
	<timesPi public="1" set="method" line="32" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</timesPi>
	<addition public="1" set="method" line="36" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addition>
	<subtraction public="1" set="method" line="40" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subtraction>
	<divide public="1" set="method" line="44" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divide>
	<times public="1" set="method" line="48" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</times>
	<degrees public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</degrees>
	<get_degrees public="1" get="inline" set="null" line="52" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_degrees>
	<set_degrees public="1" get="inline" set="null" line="56" static="1">
		<f a="this:val">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_degrees>
	<fromFraction get="inline" set="null" line="62" static="1">
		<f a="val">
			<x path="fracs.Fraction"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFraction>
	<tofraction get="inline" set="null" line="67" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</tofraction>
	<fromString get="inline" set="null" line="71" static="1">
		<f a="val">
			<c path="String"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="77" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toString>
</class></impl>
	</abstract>
	<class path="fracs._ZeroTo2pi.ZeroTo2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/git/src/fracs/ZeroTo2pi.hx" private="1" module="fracs.ZeroTo2pi" final="1">
		<_new get="inline" set="null" line="5" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<fromFloat public="1" get="inline" set="null" line="10" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<additionPi public="1" set="method" line="20" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</additionPi>
		<subtractionPi public="1" set="method" line="24" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subtractionPi>
		<dividePi public="1" set="method" line="28" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</dividePi>
		<timesPi public="1" set="method" line="32" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</timesPi>
		<addition public="1" set="method" line="36" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addition>
		<subtraction public="1" set="method" line="40" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subtraction>
		<divide public="1" set="method" line="44" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divide>
		<times public="1" set="method" line="48" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</times>
		<degrees public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</degrees>
		<get_degrees public="1" get="inline" set="null" line="52" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_degrees>
		<set_degrees public="1" get="inline" set="null" line="56" static="1">
			<f a="this:val">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_degrees>
		<fromFraction get="inline" set="null" line="62" static="1">
			<f a="val">
				<x path="fracs.Fraction"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFraction>
		<tofraction get="inline" set="null" line="67" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</tofraction>
		<fromString get="inline" set="null" line="71" static="1">
			<f a="val">
				<c path="String"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="77" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toString>
	</class>
	<abstract path="haxe.CallStack" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1"><meta><m n=":keep"/></meta></class>
	<class path="haxe.EnumTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.Exception" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Exception.hx">
		<caught set="method" line="18" static="1"><f a="value">
	<x path="Any"/>
	<c path="haxe.Exception"/>
</f></caught>
		<thrown set="method" line="26" static="1"><f a="value">
	<x path="Any"/>
	<x path="Any"/>
</f></thrown>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<__exceptionMessage>
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__exceptionMessage>
		<__nativeStack>
			<c path="Array"><c path="String"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__nativeStack>
		<__skipStack expr="0">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
			</meta>
		</__skipStack>
		<__nativeException>
			<x path="Any"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeException>
		<__previousException>
			<x path="Null"><c path="haxe.Exception"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__previousException>
		<unwrap set="method" line="48"><f a=""><x path="Any"/></f></unwrap>
		<get_native final="1" set="method" line="74"><f a=""><x path="Any"/></f></get_native>
		<new public="1" set="method" line="36">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="haxe.Int32" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe._Int64.___Int64" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64" extern="1">
		<make public="1" set="method" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_make"</e></m></meta>
		</make>
		<ofInt public="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>" ::cpp::Int64Struct"</e></m></meta>
		</ofInt>
		<isInt64 public="1" set="method" static="1">
			<f a="d">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>" ::cpp::Int64Struct::is"</e></m></meta>
		</isInt64>
		<isNeg public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_is_neg"</e></m></meta>
		</isNeg>
		<isZero public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_is_zero"</e></m></meta>
		</isZero>
		<compare public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_compare"</e></m></meta>
		</compare>
		<ucompare public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_ucompare"</e></m></meta>
		</ucompare>
		<toString public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_to_string"</e></m></meta>
		</toString>
		<neg public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neg"</e></m></meta>
		</neg>
		<preIncrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_pre_increment"</e></m></meta>
		</preIncrement>
		<postIncrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_post_increment"</e></m></meta>
		</postIncrement>
		<preDecrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_pre_decrement"</e></m></meta>
		</preDecrement>
		<postDecrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_post_decrement"</e></m></meta>
		</postDecrement>
		<add public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_add"</e></m></meta>
		</add>
		<addInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_add"</e></m></meta>
		</addInt>
		<sub public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</sub>
		<subInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</subInt>
		<intSub public="1" set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</intSub>
		<mul public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_mul"</e></m></meta>
		</mul>
		<div public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_div"</e></m></meta>
		</div>
		<mod public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_mod"</e></m></meta>
		</mod>
		<eq public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_eq"</e></m></meta>
		</eq>
		<eqInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_eq"</e></m></meta>
		</eqInt>
		<neq public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neq"</e></m></meta>
		</neq>
		<neqInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neq"</e></m></meta>
		</neqInt>
		<complement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_complement"</e></m></meta>
		</complement>
		<bitAnd public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_and"</e></m></meta>
		</bitAnd>
		<bitOr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_or"</e></m></meta>
		</bitOr>
		<bitXor public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_xor"</e></m></meta>
		</bitXor>
		<shl public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_shl"</e></m></meta>
		</shl>
		<shr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_shr"</e></m></meta>
		</shr>
		<ushr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_ushr"</e></m></meta>
		</ushr>
		<high public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_high"</e></m></meta>
		</high>
		<low public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_low"</e></m></meta>
		</low>
		<get public="1" set="method"><f a=""><x path="cpp.Int64"/></f></get>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":notNull"/>
			<m n=":include"><e>"cpp/Int64.h"</e></m>
			<m n=":native"><e>"cpp::Int64Struct"</e></m>
		</meta>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64"><c path="haxe._Int64.___Int64"/></typedef>
	<abstract path="haxe.Int64" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.Log" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/Log.hx">
		<nativeTrace set="method" static="1">
			<f a="message:posInfo">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"__trace"</e></m></meta>
		</nativeTrace>
		<trace public="1" set="dynamic" line="29" static="1">
			<f a="v:?infos">
				<d/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.NativeStackTrace" params="" file="/usr/local/lib/haxe/std/cpp/_std/haxe/NativeStackTrace.hx">
		<saveStack public="1" get="inline" set="null" line="12" static="1">
			<f a="exception">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature"><e>"haxe.NativeStackTrace.exceptionStack"</e></m></meta>
		</saveStack>
		<callStack public="1" set="method" line="16" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":noDebug"/>
			</meta>
		</callStack>
		<exceptionStack public="1" set="method" line="21" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":noDebug"/>
			</meta>
		</exceptionStack>
		<haxe_doc>Do not use manually.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/usr/local/lib/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.ValueException" params="" file="/usr/local/lib/haxe/std/haxe/ValueException.hx">
		<extends path="haxe.Exception"/>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>Thrown value.</haxe_doc>
		</value>
		<unwrap set="method" line="35" override="1">
			<f a=""><x path="Any"/></f>
			<haxe_doc>Extract an originally thrown value.

		This method must return the same value on subsequent calls.
		Used internally for catching non-native exceptions.
		Do _not_ override unless you know what you are doing.</haxe_doc>
		</unwrap>
		<new public="1" set="method" line="23"><f a="value:?previous:?native">
	<x path="Any"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception containing arbitrary value.

	This class is automatically used for throwing values, which don't extend `haxe.Exception`
	or native exception type.
	For example:
	```haxe
	throw "Terrible error";
	```
	will be compiled to
	```haxe
	throw new ValueException("Terrible error");
	```</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="263"><f a=""><x path="Int"/></f></get_height>
		<new public="1" set="method" line="252">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.ds.Map" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta><m n=":multiType"><e>@:followWithAbstracts K</e></m></meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
	<_new public="1" set="method" static="1">
		<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
	</_new>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Map.Map_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
		<_new public="1" set="method" static="1">
			<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
		</_new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>concat</e>
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.StringMap" params="T" file="/usr/local/lib/haxe/std/cpp/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h>
			<d/>
			<meta><m n=":ifFeature"><e>"haxe.ds.StringMap.*"</e></m></meta>
		</h>
		<set public="1" set="method" line="60">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<new public="1" set="method" line="58">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":headerClassCode"><e><![CDATA["\n  inline void set(String key, ::null value) { __string_hash_set(HX_MAP_THIS,key,value); }\n  inline void set(String key, bool value) { __string_hash_set(HX_MAP_THIS,key,value); }\n  inline void set(String key, char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, unsigned char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, signed char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, short value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, unsigned short value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, int value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, unsigned int value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, float value) { __string_hash_set_float(HX_MAP_THIS,key,value); }\n  inline void set(String key, double value) { __string_hash_set_float(HX_MAP_THIS,key,value); }\n  inline void set(String key, ::String value) { __string_hash_set_string(HX_MAP_THIS,key,value); }\n\n  template<typename V, typename H>\n  inline void set(String key, const ::cpp::Struct<V,H> &value) {__string_hash_set(HX_MAP_THIS,key,value); }\n  template<typename V>\n  inline void set(String key, const ::cpp::Function<V> &value) {__string_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\n  template<typename V>\n  inline void set(String key, const ::cpp::Pointer<V> &value) {__string_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\n\n  template<typename VALUE>\n  inline void set(Dynamic &key, const VALUE &value) { set( (String)key, value ); }\n\n  inline bool get_bool(String key) { return __string_hash_get_bool(h,key); }\n  inline int get_int(String key) { return __string_hash_get_int(h,key); }\n  inline Float get_float(String key) { return __string_hash_get_float(h,key); }\n  inline String get_string(String key) { return __string_hash_get_string(h,key); }\n"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.extern.AsVar" params="T" file="/usr/local/lib/haxe/std/haxe/extern/AsVar.hx">
		<from><icast><c path="haxe.extern.AsVar.T"/></icast></from>
		<this><c path="haxe.extern.AsVar.T"/></this>
		<to><icast><c path="haxe.extern.AsVar.T"/></icast></to>
		<haxe_doc>If this type is used as an argument type, the compiler ensures that
	argument expressions are bound to a local variable.</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
		<impl><class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.io.Bytes" params="" file="/projects/May2019/May2020/lime/src/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="505" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="535" static="1">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns bytes representation of the given String, using specific encoding (UTF-8 by default)</haxe_doc>
		</ofString>
		<ofData public="1" set="method" line="597" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<ofHex public="1" set="method" line="614" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Convert hexadecimal string to Bytes.
		Support only straight hex string ( Example: "0FDA14058916052309" )</haxe_doc>
		</ofHex>
		<fastGet public="1" get="inline" set="null" line="635" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Read the most efficiently possible the n-th byte of the data.
		Behavior when reading outside of the available data is unspecified.</haxe_doc>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="52">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="69">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</set>
		<blit public="1" set="method" line="88"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<fill public="1" set="method" line="127">
			<f a="pos:len:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fill>
		<sub public="1" set="method" line="147"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="175"><f a="other">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></compare>
		<getDouble public="1" get="inline" set="null" line="226">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the IEEE double precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getDouble>
		<getFloat public="1" get="inline" set="null" line="248">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the IEEE single precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getFloat>
		<setDouble public="1" set="method" line="272">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Store the IEEE double precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setDouble>
		<setFloat public="1" set="method" line="298">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Store the IEEE single precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setFloat>
		<getUInt16 public="1" get="inline" set="null" line="318">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</getUInt16>
		<setUInt16 public="1" get="inline" set="null" line="330">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</setUInt16>
		<getInt32 public="1" get="inline" set="null" line="343">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt32>
		<getInt64 public="1" get="inline" set="null" line="361">
			<f a="pos">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt64>
		<setInt32 public="1" get="inline" set="null" line="369">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt32>
		<setInt64 public="1" get="inline" set="null" line="384">
			<f a="pos:v">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt64>
		<getString public="1" set="method" line="390">
			<f a="pos:len:?encoding">
				<x path="Int"/>
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getString>
		<readString public="1" get="inline" set="null" line="455">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"readString is deprecated, use getString instead"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</readString>
		<toString public="1" set="method" line="463">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns string representation of the bytes as UTF8</haxe_doc>
		</toString>
		<toHex public="1" set="method" line="484"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="500"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new set="method" line="43"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":autoBuild"><e>lime._internal.macros.AssetsMacro.embedBytes()</e></m>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/usr/local/lib/haxe/std/haxe/io/BytesData.hx"><c path="Array"><x path="cpp.UInt8"/></c></typedef>
	<enum path="haxe.io.Encoding" params="" file="/usr/local/lib/haxe/std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.io.Error" params="" file="/usr/local/lib/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/usr/local/lib/haxe/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="43">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="51">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="hxPolyK.Rectangle" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<width><x path="Float"/></width>
	<height><x path="Float"/></height>
</a></typedef>
	<typedef path="hxPolyK.PointK" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<flag><x path="Bool"/></flag>
</a></typedef>
	<typedef path="hxPolyK.Ray" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK"><a>
	<refl><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></refl>
	<norm><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></norm>
	<edge><x path="Float"/></edge>
	<dist><x path="Float"/></dist>
</a></typedef>
	<typedef path="hxPolyK.Edge" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK"><a>
	<point><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></point>
	<norm><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></norm>
	<edge><x path="Float"/></edge>
	<dist><x path="Float"/></dist>
</a></typedef>
	<abstract path="hxPolyK.ArrayPairs" params="T" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK">
		<this><c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c></this>
		<impl><class path="hxPolyK._PolyK.ArrayPairs_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" private="1" module="hxPolyK.PolyK" final="1">
	<_new public="1" set="method" line="68" static="1">
		<f a="arr">
			<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
			<x path="hxPolyK.ArrayPairs"><c path="hxPolyK.ArrayPairs.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="70" static="1">
		<f a="this">
			<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<access get="inline" set="null" line="71" static="1">
		<f a="this:key">
			<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
			<x path="Int"/>
			<a>
				<y><c path="hxPolyK.ArrayPairs.T"/></y>
				<x><c path="hxPolyK.ArrayPairs.T"/></x>
			</a>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</access>
	<reverse public="1" get="inline" set="null" line="75" static="1">
		<f a="this">
			<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
			<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="hxPolyK._PolyK.ArrayPairs_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" private="1" module="hxPolyK.PolyK" final="1">
		<_new public="1" set="method" line="68" static="1">
			<f a="arr">
				<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
				<x path="hxPolyK.ArrayPairs"><c path="hxPolyK.ArrayPairs.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="70" static="1">
			<f a="this">
				<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<access get="inline" set="null" line="71" static="1">
			<f a="this:key">
				<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
				<x path="Int"/>
				<a>
					<y><c path="hxPolyK.ArrayPairs.T"/></y>
					<x><c path="hxPolyK.ArrayPairs.T"/></x>
				</a>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</access>
		<reverse public="1" get="inline" set="null" line="75" static="1">
			<f a="this">
				<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
				<c path="Array"><c path="hxPolyK.ArrayPairs.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxPolyK.ArrayTriple" params="T" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" module="hxPolyK.PolyK">
		<this><c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c></this>
		<impl><class path="hxPolyK._PolyK.ArrayTriple_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" private="1" module="hxPolyK.PolyK" final="1">
	<_new public="1" set="method" line="86" static="1">
		<f a="arr">
			<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
			<x path="hxPolyK.ArrayTriple"><c path="hxPolyK.ArrayTriple.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="88" static="1">
		<f a="this">
			<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<access get="inline" set="null" line="89" static="1">
		<f a="this:key">
			<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
			<x path="Int"/>
			<a>
				<c><c path="hxPolyK.ArrayTriple.T"/></c>
				<b><c path="hxPolyK.ArrayTriple.T"/></b>
				<a><c path="hxPolyK.ArrayTriple.T"/></a>
			</a>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</access>
	<reverse public="1" get="inline" set="null" line="93" static="1">
		<f a="this">
			<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
			<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
</class></impl>
	</abstract>
	<class path="hxPolyK._PolyK.ArrayTriple_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx" private="1" module="hxPolyK.PolyK" final="1">
		<_new public="1" set="method" line="86" static="1">
			<f a="arr">
				<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
				<x path="hxPolyK.ArrayTriple"><c path="hxPolyK.ArrayTriple.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="88" static="1">
			<f a="this">
				<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<access get="inline" set="null" line="89" static="1">
			<f a="this:key">
				<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
				<x path="Int"/>
				<a>
					<c><c path="hxPolyK.ArrayTriple.T"/></c>
					<b><c path="hxPolyK.ArrayTriple.T"/></b>
					<a><c path="hxPolyK.ArrayTriple.T"/></a>
				</a>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</access>
		<reverse public="1" get="inline" set="null" line="93" static="1">
			<f a="this">
				<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
				<c path="Array"><c path="hxPolyK.ArrayTriple.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
	</class>
	<class path="hxPolyK.PolyK" params="" file="/usr/local/lib/haxeLibrary/hxPolyK/git/hxPolyK/PolyK.hx">
		<small public="1" get="inline" set="null" expr="0.0000000001" line="105" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0000000001</e></m></meta>
		</small>
		<isSimple public="1" get="inline" set="null" line="109" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<x path="Bool"/>
</f></isSimple>
		<isConvex public="1" get="inline" set="null" line="151" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<x path="Bool"/>
</f></isConvex>
		<getArea public="1" get="inline" set="null" line="166" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></getArea>
		<getAABB public="1" get="inline" set="null" line="181" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<t path="hxPolyK.Rectangle"/>
</f></getAABB>
		<reverse public="1" get="inline" set="null" line="195" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
</f></reverse>
		<triangulate public="1" get="inline" set="null" line="201" static="1"><f a="p">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
</f></triangulate>
		<containsPoint public="1" set="method" line="262" static="1"><f a="p:px:py">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></containsPoint>
		<slice public="1" set="method" line="305" static="1"><f a="p:ax:ay:bx:by">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><c path="Array"><x path="Float"/></c></c>
</f></slice>
		<raycast public="1" get="inline" set="null" line="396" static="1"><f a="p:x:y:dx:dy:isc">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<t path="hxPolyK.Ray"/>
	<t path="hxPolyK.Ray"/>
</f></raycast>
		<closestEdge public="1" get="inline" set="null" line="432" static="1"><f a="p:x:y:isc">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<t path="hxPolyK.Edge"/>
	<t path="hxPolyK.Edge"/>
</f></closestEdge>
		<pointLineDist get="inline" set="null" line="465" static="1"><f a="p:a:b:edge:isc">
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<x path="Float"/>
	<t path="hxPolyK.Edge"/>
	<x path="Void"/>
</f></pointLineDist>
		<updateISC get="inline" set="null" line="502" static="1"><f a="dx:dy:a1:b1:b2:c:edge:isc">
	<x path="Float"/>
	<x path="Float"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<x path="Float"/>
	<t path="hxPolyK.Ray"/>
	<x path="Void"/>
</f></updateISC>
		<getPoints get="inline" set="null" line="518" static="1"><f a="ps:ind0:ind1">
	<c path="Array"><t path="hxPolyK.PointK"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><t path="hxPolyK.PointK"/></c>
</f></getPoints>
		<firstWithFlag set="method" line="528" static="1"><f a="ps:ind">
	<c path="Array"><t path="hxPolyK.PointK"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></firstWithFlag>
		<pointInTriangle get="inline" set="null" line="536" static="1"><f a="px:py:ax:ay:bx:by:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></pointInTriangle>
		<rayLineIntersection get="inline" set="null" line="555" static="1"><f a="a1:a2:b1:b2:c">
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
</f></rayLineIntersection>
		<getLineIntersection get="inline" set="null" line="574" static="1"><f a="a1:a2:b1:b2">
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
</f></getLineIntersection>
		<inRect get="inline" set="null" line="586" static="1"><f a="a:b:c">
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<x path="Bool"/>
</f></inRect>
		<convex get="inline" set="null" line="597" static="1"><f a="ax:ay:bx:by:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></convex>
		<dist get="inline" set="null" line="602" static="1"><f a="a:b">
	<t path="hxPolyK.PointK"/>
	<t path="hxPolyK.PointK"/>
	<x path="Float"/>
</f></dist>
		<new public="1" set="method" line="106"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="justPath.IPathContext" params="" file="/usr/local/lib/haxeLibrary/justPath/git/justPath/IPathContext.hx" interface="1">
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" set="method"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" set="method"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
	</class>
	<abstract path="lime.utils.ArrayBuffer" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBuffer.hx">
		<from>
			<icast><d/></icast>
			<icast><c path="haxe.io.Bytes"/></icast>
		</from>
		<this><c path="haxe.io.Bytes"/></this>
		<to>
			<icast><d/></icast>
			<icast><c path="haxe.io.Bytes"/></icast>
		</to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._ArrayBuffer.ArrayBuffer_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBuffer.hx" private="1" module="lime.utils.ArrayBuffer" final="1">
	<byteLength public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteLength>
	<get_byteLength get="inline" set="null" line="15" static="1">
		<f a="this">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_byteLength>
	<_new public="1" get="inline" set="null" line="20" static="1">
		<f a="byteLength">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<isView public="1" get="inline" set="null" line="25" static="1"><f a="arg">
	<d/>
	<x path="Bool"/>
</f></isView>
	<slice public="1" get="inline" set="null" line="30" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
		</f>
		<meta>
			<m n=":value"><e>{ end : null }</e></m>
			<m n=":impl"/>
		</meta>
	</slice>
</class></impl>
	</abstract>
	<class path="lime.utils._ArrayBuffer.ArrayBuffer_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBuffer.hx" private="1" module="lime.utils.ArrayBuffer" final="1">
		<byteLength public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</byteLength>
		<get_byteLength get="inline" set="null" line="15" static="1">
			<f a="this">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_byteLength>
		<_new public="1" get="inline" set="null" line="20" static="1">
			<f a="byteLength">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<isView public="1" get="inline" set="null" line="25" static="1"><f a="arg">
	<d/>
	<x path="Bool"/>
</f></isView>
		<slice public="1" get="inline" set="null" line="30" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
			</f>
			<meta>
				<m n=":value"><e>{ end : null }</e></m>
				<m n=":impl"/>
			</meta>
		</slice>
	</class>
	<class path="lime.utils.ArrayBufferView" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBufferView.hx">
		<type public="1" expr="TypedArrayType.None">
			<x path="lime.utils.TypedArrayType"/>
			<meta><m n=":value"><e>TypedArrayType.None</e></m></meta>
		</type>
		<buffer public="1"><x path="lime.utils.ArrayBuffer"/></buffer>
		<byteOffset public="1"><x path="Int"/></byteOffset>
		<byteLength public="1"><x path="Int"/></byteLength>
		<length public="1"><x path="Int"/></length>
		<bytesPerElement set="null" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</bytesPerElement>
		<initTypedArray get="inline" set="null" line="45">
			<f a="view">
				<c path="lime.utils.ArrayBufferView"/>
				<c path="lime.utils.ArrayBufferView"/>
			</f>
			<meta><m n=":allow"><e>lime.utils</e></m></meta>
		</initTypedArray>
		<initBuffer get="inline" set="null" line="76">
			<f a="in_buffer:?in_byteOffset:?len" v=":0:null">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="lime.utils.ArrayBufferView"/>
			</f>
			<meta>
				<m n=":value"><e>{ len : null, in_byteOffset : 0 }</e></m>
				<m n=":allow"><e>lime.utils</e></m>
			</meta>
		</initBuffer>
		<initArray params="T" get="inline" set="null" line="112">
			<f a="array">
				<c path="Array"><c path="initArray.T"/></c>
				<c path="lime.utils.ArrayBufferView"/>
			</f>
			<meta><m n=":allow"><e>lime.utils</e></m></meta>
		</initArray>
		<set public="1" params="T" get="inline" set="null" line="129">
			<f a="?view:?array:?offset" v="null:null:0">
				<c path="lime.utils.ArrayBufferView"/>
				<c path="Array"><c path="set.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0, array : null, view : null }</e></m></meta>
		</set>
		<cloneBuffer get="inline" set="null" line="149">
			<f a="src:?srcByteOffset" v=":0">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcByteOffset : 0 }</e></m></meta>
		</cloneBuffer>
		<subarray params="T_subarray" get="inline" set="null" line="163">
			<f a="begin:?end" v=":null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="subarray.T_subarray"/>
			</f>
			<meta>
				<m n=":value"><e>{ end : null }</e></m>
				<m n=":generic"/>
				<m n=":allow"><e>lime.utils</e></m>
			</meta>
		</subarray>
		<bytesForType get="inline" set="null" line="208"><f a="type">
	<x path="lime.utils.TypedArrayType"/>
	<x path="Int"/>
</f></bytesForType>
		<toString get="inline" set="null" line="246"><f a=""><c path="String"/></f></toString>
		<toByteLength get="inline" set="null" line="268"><f a="elemCount">
	<x path="Int"/>
	<x path="Int"/>
</f></toByteLength>
		<copyFromArray set="method" line="278">
			<f a="array:?offset" v=":0">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
		</copyFromArray>
		<new get="inline" set="null" line="20">
			<f a="?elements:in_type" v="null:">
				<x path="Int"/>
				<x path="lime.utils.TypedArrayType"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ elements : null }</e></m>
				<m n=":allow"><e>lime.utils</e></m>
			</meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<enum path="lime.utils.TAError" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBufferView.hx" module="lime.utils.ArrayBufferView">
		<RangeError/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
			<m n=":noCompletion"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</enum>
	<abstract path="lime.utils.TypedArrayType" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBufferView.hx" module="lime.utils.ArrayBufferView">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":noCompletion"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":enum"/>
		</meta>
		<impl><class path="lime.utils._ArrayBufferView.TypedArrayType_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBufferView.hx" private="1" module="lime.utils.ArrayBufferView" extern="1" final="1">
	<None public="1" get="inline" set="null" expr="cast 0" line="406" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</None>
	<Int8 public="1" get="inline" set="null" expr="cast 1" line="407" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Int8>
	<Int16 public="1" get="inline" set="null" expr="cast 2" line="408" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Int16>
	<Int32 public="1" get="inline" set="null" expr="cast 3" line="409" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Int32>
	<Uint8 public="1" get="inline" set="null" expr="cast 4" line="410" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Uint8>
	<Uint8Clamped public="1" get="inline" set="null" expr="cast 5" line="411" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Uint8Clamped>
	<Uint16 public="1" get="inline" set="null" expr="cast 6" line="412" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Uint16>
	<Uint32 public="1" get="inline" set="null" expr="cast 7" line="413" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Uint32>
	<Float32 public="1" get="inline" set="null" expr="cast 8" line="414" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Float32>
	<Float64 public="1" get="inline" set="null" expr="cast 9" line="415" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Float64>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.utils._ArrayBufferView.TypedArrayType_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBufferView.hx" private="1" module="lime.utils.ArrayBufferView" extern="1" final="1">
		<None public="1" get="inline" set="null" expr="cast 0" line="406" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</None>
		<Int8 public="1" get="inline" set="null" expr="cast 1" line="407" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Int8>
		<Int16 public="1" get="inline" set="null" expr="cast 2" line="408" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Int16>
		<Int32 public="1" get="inline" set="null" expr="cast 3" line="409" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Int32>
		<Uint8 public="1" get="inline" set="null" expr="cast 4" line="410" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Uint8>
		<Uint8Clamped public="1" get="inline" set="null" expr="cast 5" line="411" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Uint8Clamped>
		<Uint16 public="1" get="inline" set="null" expr="cast 6" line="412" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Uint16>
		<Uint32 public="1" get="inline" set="null" expr="cast 7" line="413" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Uint32>
		<Float32 public="1" get="inline" set="null" expr="cast 8" line="414" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Float32>
		<Float64 public="1" get="inline" set="null" expr="cast 9" line="415" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Float64>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime.utils.ArrayBufferIO" params="" file="/projects/May2019/May2020/lime/src/lime/utils/ArrayBufferView.hx" module="lime.utils.ArrayBufferView">
		<getInt8 public="1" get="inline" set="null" line="424" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getInt8>
		<setInt8 public="1" get="inline" set="null" line="438" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setInt8>
		<getUint8 public="1" get="inline" set="null" line="454" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getUint8>
		<setUint8Clamped public="1" get="inline" set="null" line="467" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</setUint8Clamped>
		<setUint8 public="1" get="inline" set="null" line="476" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setUint8>
		<getInt16 public="1" set="method" line="491" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getInt16>
		<getInt16_BE public="1" set="method" line="505" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getInt16_BE>
		<setInt16 public="1" set="method" line="519" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setInt16>
		<setInt16_BE public="1" set="method" line="534" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setInt16_BE>
		<getUint16 public="1" get="inline" set="null" line="551" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getUint16>
		<getUint16_BE public="1" get="inline" set="null" line="567" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getUint16_BE>
		<setUint16 public="1" get="inline" set="null" line="583" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setUint16>
		<setUint16_BE public="1" get="inline" set="null" line="596" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setUint16_BE>
		<getInt32 public="1" get="inline" set="null" line="611" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getInt32>
		<getInt32_BE public="1" get="inline" set="null" line="624" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getInt32_BE>
		<setInt32 public="1" get="inline" set="null" line="637" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setInt32>
		<setInt32_BE public="1" get="inline" set="null" line="654" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setInt32_BE>
		<getUint32 public="1" get="inline" set="null" line="671" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getUint32>
		<getUint32_BE public="1" get="inline" set="null" line="684" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getUint32_BE>
		<setUint32 public="1" get="inline" set="null" line="697" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setUint32>
		<setUint32_BE public="1" get="inline" set="null" line="710" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setUint32_BE>
		<getFloat32 public="1" get="inline" set="null" line="724" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getFloat32>
		<getFloat32_BE public="1" get="inline" set="null" line="737" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getFloat32_BE>
		<setFloat32 public="1" get="inline" set="null" line="750" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setFloat32>
		<setFloat32_BE public="1" get="inline" set="null" line="766" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setFloat32_BE>
		<getFloat64 public="1" get="inline" set="null" line="782" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getFloat64>
		<getFloat64_BE public="1" get="inline" set="null" line="795" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getFloat64_BE>
		<setFloat64 public="1" get="inline" set="null" line="808" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setFloat64>
		<setFloat64_BE public="1" get="inline" set="null" line="824" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setFloat64_BE>
		<_clamp get="inline" set="null" line="841" static="1">
			<f a="_in">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
		</_clamp>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<abstract path="lime.utils.Float32Array" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Float32Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._Float32Array.Float32Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Float32Array.hx" private="1" module="lime.utils.Float32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="92" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<hello public="1" static="1"><x path="Int"/></hello>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<_new public="1" params="T" get="inline" set="null" line="98" static="1">
		<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<x path="openfl.Vector"><x path="Float"/></x>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Float32Array"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":generic"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="130" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Float32Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ end : null }</e></m>
			<m n=":impl"/>
		</meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="134" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="139" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toBytes>
	<toString get="inline" set="null" line="145" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Null"><c path="String"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<get_length get="inline" set="null" line="148" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
	</get_length>
	<__get public="1" get="inline" set="null" line="153" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="160" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
</class></impl>
	</abstract>
	<class path="lime.utils._Float32Array.Float32Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Float32Array.hx" private="1" module="lime.utils.Float32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<hello public="1" static="1"><x path="Int"/></hello>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<_new public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<x path="openfl.Vector"><x path="Float"/></x>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Float32Array"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":generic"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="130" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Float32Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ end : null }</e></m>
				<m n=":impl"/>
			</meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="134" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="139" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toBytes>
		<toString get="inline" set="null" line="145" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<get_length get="inline" set="null" line="148" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
		</get_length>
		<__get public="1" get="inline" set="null" line="153" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="160" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
	</class>
	<abstract path="lime.utils.Float64Array" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Float64Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._Float64Array.Float64Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Float64Array.hx" private="1" module="lime.utils.Float64Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="90" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>8</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<_new public="1" params="T" get="inline" set="null" line="95" static="1">
		<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<x path="openfl.Vector"><x path="Float"/></x>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Float64Array"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":generic"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="127" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Float64Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ end : null }</e></m>
			<m n=":impl"/>
		</meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="131" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="136" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toBytes>
	<get_length get="inline" set="null" line="142" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<__get public="1" get="inline" set="null" line="147" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="154" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
	<toString get="inline" set="null" line="160" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Null"><c path="String"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="lime.utils._Float64Array.Float64Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Float64Array.hx" private="1" module="lime.utils.Float64Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<_new public="1" params="T" get="inline" set="null" line="95" static="1">
			<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<x path="openfl.Vector"><x path="Float"/></x>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Float64Array"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":generic"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="127" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Float64Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ end : null }</e></m>
				<m n=":impl"/>
			</meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="131" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="136" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toBytes>
		<get_length get="inline" set="null" line="142" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<__get public="1" get="inline" set="null" line="147" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="154" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
		<toString get="inline" set="null" line="160" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
	</class>
	<abstract path="lime.utils.Int16Array" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int16Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._Int16Array.Int16Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int16Array.hx" private="1" module="lime.utils.Int16Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="90" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<_new public="1" params="T" get="inline" set="null" line="95" static="1">
		<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<x path="openfl.Vector"><x path="Int"/></x>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int16Array"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":generic"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="127" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int16Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ end : null }</e></m>
			<m n=":impl"/>
		</meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="131" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int16Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="136" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toBytes>
	<get_length get="inline" set="null" line="142" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<__get public="1" get="inline" set="null" line="147" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="154" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
	<toString get="inline" set="null" line="160" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Null"><c path="String"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="lime.utils._Int16Array.Int16Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int16Array.hx" private="1" module="lime.utils.Int16Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<_new public="1" params="T" get="inline" set="null" line="95" static="1">
			<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<x path="openfl.Vector"><x path="Int"/></x>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int16Array"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":generic"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="127" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int16Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ end : null }</e></m>
				<m n=":impl"/>
			</meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="131" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int16Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="136" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toBytes>
		<get_length get="inline" set="null" line="142" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<__get public="1" get="inline" set="null" line="147" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="154" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
		<toString get="inline" set="null" line="160" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
	</class>
	<abstract path="lime.utils.Int32Array" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int32Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._Int32Array.Int32Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int32Array.hx" private="1" module="lime.utils.Int32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="90" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<_new public="1" params="T" get="inline" set="null" line="95" static="1">
		<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<x path="openfl.Vector"><x path="Int"/></x>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int32Array"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":generic"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="127" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int32Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ end : null }</e></m>
			<m n=":impl"/>
		</meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="131" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="136" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toBytes>
	<get_length get="inline" set="null" line="142" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<__get public="1" get="inline" set="null" line="147" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="154" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
	<toString get="inline" set="null" line="160" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Null"><c path="String"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="lime.utils._Int32Array.Int32Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int32Array.hx" private="1" module="lime.utils.Int32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<_new public="1" params="T" get="inline" set="null" line="95" static="1">
			<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<x path="openfl.Vector"><x path="Int"/></x>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int32Array"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":generic"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="127" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int32Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ end : null }</e></m>
				<m n=":impl"/>
			</meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="131" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="136" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toBytes>
		<get_length get="inline" set="null" line="142" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<__get public="1" get="inline" set="null" line="147" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="154" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
		<toString get="inline" set="null" line="160" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
	</class>
	<abstract path="lime.utils.Int8Array" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int8Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._Int8Array.Int8Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int8Array.hx" private="1" module="lime.utils.Int8Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="88" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<_new public="1" params="T" get="inline" set="null" line="93" static="1">
		<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<x path="openfl.Vector"><x path="Int"/></x>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int8Array"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":generic"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="125" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int8Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ end : null }</e></m>
			<m n=":impl"/>
		</meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="129" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int8Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="136" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toBytes>
	<get_length get="inline" set="null" line="142" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<__get public="1" get="inline" set="null" line="147" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="154" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
	<toString get="inline" set="null" line="160" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Null"><c path="String"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="lime.utils._Int8Array.Int8Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/Int8Array.hx" private="1" module="lime.utils.Int8Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<_new public="1" params="T" get="inline" set="null" line="93" static="1">
			<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<x path="openfl.Vector"><x path="Int"/></x>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int8Array"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":generic"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="125" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int8Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ end : null }</e></m>
				<m n=":impl"/>
			</meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="129" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int8Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="136" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toBytes>
		<get_length get="inline" set="null" line="142" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<__get public="1" get="inline" set="null" line="147" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="154" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
		<toString get="inline" set="null" line="160" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
	</class>
	<abstract path="lime.utils.UInt16Array" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt16Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._UInt16Array.UInt16Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt16Array.hx" private="1" module="lime.utils.UInt16Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="90" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<_new public="1" params="T" get="inline" set="null" line="95" static="1">
		<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<x path="openfl.Vector"><x path="Int"/></x>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt16Array"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":generic"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="127" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt16Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ end : null }</e></m>
			<m n=":impl"/>
		</meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="131" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="136" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toBytes>
	<get_length get="inline" set="null" line="142" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<__get public="1" get="inline" set="null" line="147" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Null"><x path="UInt"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="154" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
	<toString get="inline" set="null" line="160" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Null"><c path="String"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="lime.utils._UInt16Array.UInt16Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt16Array.hx" private="1" module="lime.utils.UInt16Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<_new public="1" params="T" get="inline" set="null" line="95" static="1">
			<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<x path="openfl.Vector"><x path="Int"/></x>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt16Array"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":generic"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="127" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt16Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ end : null }</e></m>
				<m n=":impl"/>
			</meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="131" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="136" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toBytes>
		<get_length get="inline" set="null" line="142" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<__get public="1" get="inline" set="null" line="147" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="154" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
		<toString get="inline" set="null" line="160" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
	</class>
	<abstract path="lime.utils.UInt32Array" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt32Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._UInt32Array.UInt32Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt32Array.hx" private="1" module="lime.utils.UInt32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="90" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<_new public="1" params="T" get="inline" set="null" line="95" static="1">
		<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<x path="openfl.Vector"><x path="Int"/></x>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt32Array"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":generic"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="127" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt32Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ end : null }</e></m>
			<m n=":impl"/>
		</meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="131" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="136" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toBytes>
	<get_length get="inline" set="null" line="142" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<__get public="1" get="inline" set="null" line="147" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Null"><x path="UInt"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="154" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
	<toString get="inline" set="null" line="160" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Null"><c path="String"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="lime.utils._UInt32Array.UInt32Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt32Array.hx" private="1" module="lime.utils.UInt32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<_new public="1" params="T" get="inline" set="null" line="95" static="1">
			<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<x path="openfl.Vector"><x path="Int"/></x>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt32Array"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":generic"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="127" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt32Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ end : null }</e></m>
				<m n=":impl"/>
			</meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="131" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="136" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toBytes>
		<get_length get="inline" set="null" line="142" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<__get public="1" get="inline" set="null" line="147" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="154" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
		<toString get="inline" set="null" line="160" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
	</class>
	<abstract path="lime.utils.UInt8Array" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt8Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.utils._UInt8Array.UInt8Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt8Array.hx" private="1" module="lime.utils.UInt8Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="88" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<_new public="1" params="T" get="inline" set="null" line="93" static="1">
		<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<x path="openfl.Vector"><x path="Int"/></x>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt8Array"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":generic"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="125" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt8Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ end : null }</e></m>
			<m n=":impl"/>
		</meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="129" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="134" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toBytes>
	<toString get="inline" set="null" line="140" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Null"><c path="String"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<get_length get="inline" set="null" line="143" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<__get public="1" get="inline" set="null" line="148" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Null"><x path="UInt"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="155" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
</class></impl>
	</abstract>
	<class path="lime.utils._UInt8Array.UInt8Array_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt8Array.hx" private="1" module="lime.utils.UInt8Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<_new public="1" params="T" get="inline" set="null" line="93" static="1">
			<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<x path="openfl.Vector"><x path="Int"/></x>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt8Array"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":generic"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="125" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt8Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ end : null }</e></m>
				<m n=":impl"/>
			</meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="129" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="134" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toBytes>
		<toString get="inline" set="null" line="140" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<get_length get="inline" set="null" line="143" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<__get public="1" get="inline" set="null" line="148" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="155" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
	</class>
	<abstract path="lime.utils.UInt8ClampedArray" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt8ClampedArray.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":arrayAccess"/>
		</meta>
		<impl><class path="lime.utils._UInt8ClampedArray.UInt8ClampedArray_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt8ClampedArray.hx" private="1" module="lime.utils.UInt8ClampedArray" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="100" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<_new public="1" params="T" get="inline" set="null" line="105" static="1">
		<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<x path="openfl.Vector"><x path="Int"/></x>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt8ClampedArray"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":generic"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="137" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt8ClampedArray"/>
		</f>
		<meta>
			<m n=":value"><e>{ end : null }</e></m>
			<m n=":impl"/>
		</meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="141" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt8ClampedArray"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="146" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toBytes>
	<get_length get="inline" set="null" line="152" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<__get public="1" get="inline" set="null" line="157" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Null"><x path="UInt"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="164" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
	<toString get="inline" set="null" line="170" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Null"><c path="String"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="lime.utils._UInt8ClampedArray.UInt8ClampedArray_Impl_" params="" file="/projects/May2019/May2020/lime/src/lime/utils/UInt8ClampedArray.hx" private="1" module="lime.utils.UInt8ClampedArray" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<_new public="1" params="T" get="inline" set="null" line="105" static="1">
			<f a="?elements:?buffer:?array:?vector:?view:?byteoffset:?len" v=":::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<x path="openfl.Vector"><x path="Int"/></x>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt8ClampedArray"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":generic"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="137" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt8ClampedArray"/>
			</f>
			<meta>
				<m n=":value"><e>{ end : null }</e></m>
				<m n=":impl"/>
			</meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="141" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt8ClampedArray"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="146" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toBytes>
		<get_length get="inline" set="null" line="152" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<__get public="1" get="inline" set="null" line="157" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="164" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
		<toString get="inline" set="null" line="170" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
	</class>
	<abstract path="openfl.Vector" params="T" file="/projects/May2019/May2020/openfl/src/openfl/Vector.hx">
		<from>
			<icast field="fromBoolVector"><c path="openfl._Vector.BoolVector"/></icast>
			<icast field="fromIntVector"><c path="openfl._Vector.IntVector"/></icast>
			<icast field="fromFloatVector"><c path="openfl._Vector.FloatVector"/></icast>
			<icast field="fromFunctionVector"><c path="openfl._Vector.FunctionVector"/></icast>
			<icast field="fromObjectVector"><c path="openfl._Vector.ObjectVector"><c path="fromObjectVector.T"/></c></icast>
		</from>
		<this><c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c></this>
		<to>
			<icast field="toBoolVector"><c path="openfl._Vector.BoolVector"/></icast>
			<icast field="toIntVector"><c path="openfl._Vector.IntVector"/></icast>
			<icast field="toFloatVector"><c path="openfl._Vector.FloatVector"/></icast>
			<icast field="toFunctionVector"><c path="openfl._Vector.FunctionVector"/></icast>
			<icast field="toObjectVector"><c path="openfl._Vector.ObjectVector"><c path="toObjectVector.T"/></c></icast>
			<icast field="toNullVector"><c path="openfl._Vector.ObjectVector"><c path="toNullVector.T"/></c></icast>
		</to>
		<haxe_doc><![CDATA[The Vector class lets you access and manipulate a vector — an array whose elements
	all have the same data type. The data type of a Vector's elements is known as the
	Vector's base type. The base type can be any class, including built in classes and
	custom classes. The base type is specified when declaring a Vector variable as well
	as when creating an instance by calling the class constructor.

	As with an Array, you can use the array access operator (`[]`) to set or retrieve the
	value of a Vector element. Several Vector methods also provide mechanisms for
	setting and retrieving element values. These include `push()`, `pop()`, `shift()`,
	`unshift()`, and others. The properties and methods of a Vector object are
	similar — in most cases identical — to the properties and methods of an Array. In
	most cases where you would use an Array in which all the elements have the same
	data type, a Vector instance is preferable. However, Vector instances are dense
	arrays, meaning it must have a value (or `null`) in each index. Array instances
	don't have this same restriction.

	The Vector's base type is specified using postfix type parameter syntax. Type
	parameter syntax is a sequence consisting of a dot (`.`), left angle bracket (`<`),
	class name, then a right angle bracket (`>`), as shown in this example:

	In the first line of the example, the variable `v` is declared as a
	Vector.<String> instance. In other words, it represents a Vector (an array) that
	can only hold String instances and from which only String instances can be
	retrieved. The second line constructs an instance of the same Vector type (that is,
	a Vector whose elements are all String objects) and assigns it to `v`.

	```as3
	var v:Vector.<String>;
	v = new Vector.<String>();
	```

	A variable declared with the Vector.<T> data type can only store a Vector instance
	that is constructed with the same base type T. For example, a Vector that's
	constructed by calling `new Vector.<String>()` can't be assigned to a variable that's
	declared with the Vector.<int> data type. The base types must match exactly. For
	example, the following code doesn't compile because the object's base type isn't
	the same as the variable's declared base type (even though Sprite is a subclass of
	DisplayObject):

	```haxe
	// This code doesn't compile even though Sprite is a DisplayObject subclass
	var v:Vector.<DisplayObject> = new Vector.<Sprite>();
	```

	To convert a Vector with base type T to a Vector of a superclass of T, use the
	`Vector()` global function.

	In addition to the data type restriction, the Vector class has other restrictions
	that distinguish it from the Array class:

	* A Vector is a dense array. Unlike an Array, which may have values in indices 0 and 7
	even if there are no values in positions 1 through 6, a Vector must have a value
	(or null) in each index.
	* A Vector can optionally be fixed-length, meaning the number of elements it contains
	can't change.
	* Access to a Vector's elements is bounds-checked. You can never read a value from an
	index greater than the final element (length - 1). You can never set a value with an
	index more than one beyond the current final index (in other words, you can only set
	a value at an existing index or at index [length]).

	As a result of its restrictions, a Vector has three primary benefits over an Array
	instance whose elements are all instances of a single class:

	* Performance: array element access and iteration are much faster when using a
	Vector instance than they are when using an Array.
	* Type safety: in strict mode the compiler can identify data type errors. Examples
	of data type errors include assigning a value of the incorrect data type to a
	Vector or expecting the wrong data type when reading a value from a Vector. Note,
	however, that when using the push() method or unshift() method to add values to a
	Vector, the arguments' data types are not checked at compile time. Instead, they are
	checked at run time.
	* Reliability: runtime range checking (or fixed-length checking) increases
	reliability significantly over Arrays.]]></haxe_doc>
		<meta><m n=":multiType"><e>T</e></m></meta>
		<impl><class path="openfl._Vector.Vector_Impl_" params="" file="/projects/May2019/May2020/openfl/src/openfl/Vector.hx" private="1" module="openfl.Vector" final="1">
	<fixed public="1" get="accessor" set="accessor" static="1">
		<x path="Bool"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Indicates whether the `length` property of the Vector can be changed. If the
		value is `true`, the `length` property can't be changed. This means the
		following operations are not allowed when `fixed` is `true`:

		* setting the `length` property directly
		* assigning a value to index position length
		* calling a method that changes the `length` property, including:
			* `pop()`
			* `push()`
			* `shift()`
			* `unshift()`
			* `splice()` (if the `splice()` call changes the length of the Vector).</haxe_doc>
	</fixed>
	<length public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The range of valid indices available in the Vector. A Vector instance has index
		positions up to but not including the length value.

		Every Vector element always has a value that is either an instance of the base
		type or `null`. When the `length` property is set to a value that's larger than
		its previous value, additional elements are created and populated with the
		default value appropriate to the base type (`null` for reference types).

		When the `length` property is set to a value that's smaller than its previous
		value, all the elements at index positions greater than or equal to the new
		length value are removed from the Vector.</haxe_doc>
	</length>
	<_new public="1" set="method" static="1">
		<f a="?length:?fixed:?array" v="0:false:null">
			<x path="Int"/>
			<x path="Bool"/>
			<c path="Array"><c path="openfl.Vector.T"/></c>
			<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
		</f>
		<meta>
			<m n=":value"><e>{ array : null, fixed : false, length : 0 }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc><![CDATA[Creates a Vector with the specified base type.

		When calling the `Vector.<T>()` constructor, specify the base type using
		type parameter syntax. Type parameter syntax is a sequence consisting of a
		dot (`.`), left angle bracket (`<`), class name, then a right angle bracket (`>`),
		as shown in this example:

		```as3
		var v:Vector.<String> = new Vector.<String>();
		```

		To create a Vector instance from an Array or another Vector (such as one with a
		different base type), use the `Vector()` global function.

		To create a pre-populated Vector instance, use the following syntax instead of
		using the parameters specified below:

		```as3
		// var v:Vector.<T> = new <T>[E0, ..., En-1 ,];
		// For example:
		var v:Vector.<int> = new <int>[0,1,2,];
		```

		The following information applies to this syntax:

		* It is supported in Flash Professional CS5 and later, Flash Builder 4 and later,
		and Flex 4 and later.
		* The trailing comma is optional.
		* Empty items in the array are not supported; a statement such as
		`var v:Vector.<int> = new <int>[0,,2,]` throws a compiler error.
		* You can't specify a default length for the Vector instance. Instead, the length
		is the same as the number of elements in the initialization list.
		* You can't specify whether the Vector instance has a fixed length. Instead, use
		the fixed property.
		* Data loss or errors can occur if items passed as values don't match the
		specified type. For example:

		```as3
		var v:Vector.<int> = new <int>[4.2]; // compiler error when running in strict mode
		trace(v[0]); //returns 4 when not running in strict mode
		```

		@param	length	The initial length (number of elements) of the Vector. If this
		parameter is greater than zero, the specified number of Vector elements are
		created and populated with the default value appropriate to the base type
		(`null` for reference types).
		@param	fixed	Whether the Vector's length is fixed (`true`) or can be changed
		(`false`). This value can also be set using the fixed property.]]></haxe_doc>
	</_new>
	<concat public="1" get="inline" set="null" line="191" static="1">
		<f a="this:?vec" v=":null">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
			<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
		</f>
		<meta>
			<m n=":value"><e>{ vec : null }</e></m>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Concatenates the Vectors specified in the parameters list with the elements in
		this Vector and creates a new Vector. The Vectors in the parameters list must
		have the same base type, or subtype, as this Vector. If you do not pass any
		parameters, the returned Vector is a duplicate (shallow clone) of the original
		Vector.

		@param	vec	A Vector of the base type, or subtype, of this Vector.
		@return	A Vector with the same base type as this Vector that contains the
		elements from this Vector followed by elements from the Vector in the
		parameter list.
		@throws	TypeError	If any argument is not a Vector of the base type, or cannot
		be converted to a Vector of the base type.</haxe_doc>
	</concat>
	<copy public="1" get="inline" set="null" line="200" static="1">
		<f a="this">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new shallow clone of the current Vector object
		@return	A new Vector object</haxe_doc>
	</copy>
	<filter public="1" get="inline" set="null" line="212" static="1">
		<f a="this:callback">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<f a="">
				<c path="openfl.Vector.T"/>
				<x path="Bool"/>
			</f>
			<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
		<haxe_doc>Executes a test function on each item in the Vector and returns a new Vector
		containing all items that return true for the specified function. If an item
		returns false, it is not included in the result Vector. The base type of the return
		Vector matches the base type of the Vector on which the method is called.
		@param	callback	The function to run on each item in the Vector.</haxe_doc>
	</filter>
	<get public="1" get="inline" set="null" line="220" static="1">
		<f a="this:index">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<x path="Int"/>
			<c path="openfl.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Array access</haxe_doc>
	</get>
	<indexOf public="1" get="inline" set="null" line="236" static="1">
		<f a="this:searchElement:?fromIndex" v="::0">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<c path="openfl.Vector.T"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":value"><e>{ fromIndex : 0 }</e></m>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Searches for an item in the Vector and returns the index position of the item.
		The item is compared to the Vector elements using strict equality (`===`).
		@param	searchElement	The item to find in the Vector.
		@param	fromIndex	The location in the Vector from which to start searching for
		the item. If this parameter is negative, it is treated as `length + fromIndex`,
		meaning the search starts -fromIndex items from the end and searches from that
		position forward to the end of the Vector.
		@return	A zero-based index position of the item in the Vector. If the
		`searchElement` argument is not found, the return value is -1.</haxe_doc>
	</indexOf>
	<insertAt public="1" get="inline" set="null" line="252" static="1">
		<f a="this:index:element">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<x path="Int"/>
			<c path="openfl.Vector.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Insert a single element into the Vector. This method modifies the Vector without
		making a copy.

		@param	index	An integer that specifies the position in the Vector where the
		element is to be inserted. You can use a negative integer to specify a position
		relative to the end of the Vector (for example, -1 for the last element of the
		Vector).
		@param	element	The value to insert
		@throws	RangeError	If this method is called while `fixed` is `true`.</haxe_doc>
	</insertAt>
	<iterator public="1" get="inline" set="null" line="260" static="1">
		<f a="this">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<t path="Iterator"><c path="openfl.Vector.T"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
		<haxe_doc>Iterator</haxe_doc>
	</iterator>
	<join public="1" get="inline" set="null" line="276" static="1">
		<f a="this:?sep" v=":&quot;,&quot;">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":value"><e>{ sep : "," }</e></m>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Converts the elements in the Vector to strings, inserts the specified separator
		between the elements, concatenates them, and returns the resulting string. A
		nested Vector is always separated by a comma (`,`), not by the separator passed
		to the `join()` method.

		@param	sep	A character or string that separates Vector elements in the returned
		string. If you omit this parameter, a comma is used as the default separator.
		@return	A string consisting of the elements of the Vector converted to strings
		and separated by the specified string.</haxe_doc>
	</join>
	<lastIndexOf public="1" get="inline" set="null" line="297" static="1">
		<f a="this:searchElement:?fromIndex" v="::null">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<c path="openfl.Vector.T"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":value"><e>{ fromIndex : null }</e></m>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Searches for an item in the Vector, working backward from the specified index
		position, and returns the index position of the matching item. The item is
		compared to the Vector elements using strict equality (`===`).

		@param	searchElement	The item to find in the Vector.
		@param	fromIndex	The location in the Vector from which to start searching for
		the item. The default is the maximum allowable index value, meaning that the
		search starts at the last item in the Vector.

		If this parameter is negative, it is treated as `length + fromIndex`, meaning the
		search starts -fromIndex items from the end and searches from that position
		backward to index 0.
		@return	A zero-based index position of the item in the Vector. If the
		`searchElement` argument is not found, the return value is -1.</haxe_doc>
	</lastIndexOf>
	<pop public="1" get="inline" set="null" line="308" static="1">
		<f a="this">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<x path="Null"><c path="openfl.Vector.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes the last element from the Vector and returns that element. The `length`
		property of the Vector is decreased by one when this function is called.
		@return	The value of the last element in the specified Vector.
		@throws	RangeError	If this method is called while `fixed` is `true`.</haxe_doc>
	</pop>
	<push public="1" get="inline" set="null" line="328" static="1">
		<f a="this:value">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<c path="openfl.Vector.T"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Adds one or more elements to the end of the Vector and returns the new length of
		the Vector.

		Because this function can accept multiple arguments, the data type of the
		arguments is not checked at compile time even in strict mode. However, if an
		argument is passed that is not an instance of the base type, an exception
		occurs at run time.

		@param	value	A value to append to the Vector.
		@return	The length of the Vector after the new elements are added.
		@throws	TypeError	If any argument is not an instance of the base type T of
		the Vector.
		@throws	RangeError	If this method is called while `fixed` is `true`.</haxe_doc>
	</push>
	<removeAt public="1" get="inline" set="null" line="346" static="1">
		<f a="this:index">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<x path="Int"/>
			<c path="openfl.Vector.T"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Remove a single element from the Vector. This method modifies the Vector without
		making a copy.

		@param	index	An integer that specifies the index of the element in the Vector
		that is to be deleted. You can use a negative integer to specify a position
		relative to the end of the Vector (for example, -1 for the last element of the
		Vector).
		@return	The element that was removed from the original Vector.
		@throws	RangeError	If the index argument specifies an index to be deleted that's
		outside the Vector's bounds.
		@throws	RangeError	If this method is called while `fixed` is `true`.</haxe_doc>
	</removeAt>
	<reverse public="1" get="inline" set="null" line="357" static="1">
		<f a="this">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Reverses the order of the elements in the Vector. This method alters the Vector
		on which it is called.

		@return	The Vector with the elements in reverse order.</haxe_doc>
	</reverse>
	<set public="1" get="inline" set="null" line="365" static="1">
		<f a="this:index:value">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<x path="Int"/>
			<c path="openfl.Vector.T"/>
			<c path="openfl.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Array access</haxe_doc>
	</set>
	<shift public="1" get="inline" set="null" line="377" static="1">
		<f a="this">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<x path="Null"><c path="openfl.Vector.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes the first element from the Vector and returns that element. The
		remaining Vector elements are moved from their original position, i, to i - 1.

		@return	The first element in the Vector.
		@throws	RangeError	If `fixed` is `true`.</haxe_doc>
	</shift>
	<slice public="1" get="inline" set="null" line="401" static="1">
		<f a="this:?startIndex:?endIndex" v=":0:null">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
		</f>
		<meta>
			<m n=":value"><e>{ endIndex : null, startIndex : 0 }</e></m>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Returns a new Vector that consists of a range of elements from the original
		Vector, without modifying the original Vector. The returned Vector includes the
		`startIndex` element and all elements up to, but not including, the
		`endIndex` element.

		If you don't pass any parameters, the new Vector is a duplicate (shallow clone) of
		the original Vector. If you pass a value of 0 for both parameters, a new, empty
		Vector is created of the same type as the original Vector.

		@param	startIndex	A number specifying the index of the starting point for the
		slice. If startIndex is a negative number, the starting point begins at the end
		of the Vector, where -1 is the last element.
		@param	endIndex	A number specifying the index of the ending point for the
		slice. If you omit this parameter, the slice includes all elements from the
		starting point to the end of the Vector. If endIndex is a negative number, the
		ending point is specified from the end of the Vector, where -1 is the last element.
		@return	A Vector that consists of a range of elements from the original Vector.</haxe_doc>
	</slice>
	<sort public="1" get="inline" set="null" line="449" static="1">
		<f a="this:sortBehavior">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<f a=":">
				<c path="openfl.Vector.T"/>
				<c path="openfl.Vector.T"/>
				<x path="Int"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Sorts the elements in the Vector object, and also returns a sorted Vector object.
		This method sorts according to the parameter sortBehavior, which is either a
		function that compares two values, or a set of sorting options.

		The method takes one parameter. The parameter is one of the following:

		* a function that takes two arguments of the base type (T) of the Vector and
		returns a Number:

			```as3
			function compare(x:T, y:T):Number {}
			```

			The logic of the function is that, given two elements `x` and `y`, the function
			returns one of the following three values:

			* a negative number, if `x` should appear before `y` in the sorted sequence
			* 0, if `x` equals `y`
			* a positive number, if `x` should appear after `y` in the sorted sequence

		* a number which is a bitwise OR of the following values:
			* 1 or `Array.CASEINSENSITIVE`
			* 2 or `Array.DESCENDING`
			* 4 or `Array.UNIQUESORT`
			* 8 or `Array.RETURNINDEXEDARRAY`
			* 16 or `Array.NUMERIC`

			If the value is 0, the sort works in the following way:

			* Sorting is case-sensitive (Z precedes a).
			* Sorting is ascending (a precedes b).
			* The array is modified to reflect the sort order; multiple elements that
			have identical sort fields are placed consecutively in the sorted array in
			no particular order.
			* All elements, regardless of data type, are sorted as if they were strings,
			so 100 precedes 99, because "1" is a lower string value than "9".

		@param	sortBehavior	A Function or a Number value that determines the
		behavior of the sort. A Function parameter specifies a comparison method. A
		Number value specifies the sorting options.
		@return	A Vector object, with elements in the new order.</haxe_doc>
	</sort>
	<splice public="1" get="inline" set="null" line="474" static="1">
		<f a="this:startIndex:deleteCount">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Adds elements to and removes elements from the Vector. This method modifies the
		Vector without making a copy.

		**Note:** To override this method in a subclass of Vector, use ...args for the
		parameters, as this example shows:

		```as3
		public override function splice(...args) {
		// your statements here
		}
		```

		@param	startIndex:int — An integer that specifies the index of the element in the Vector where the insertion or deletion begins. You can use a negative integer to specify a position relative to the end of the Vector (for example, -1 for the last element of the Vector).
		@param	deleteCount:uint (default = 4294967295) — An integer that specifies the number of elements to be deleted. This number includes the element specified in the startIndex parameter. If the value is 0, no elements are deleted.
		@param	... items — An optional list of one or more comma-separated values to insert into the Vector at the position specified in the startIndex parameter.
		@return	a Vector containing the elements that were removed from the original Vector.
		@throws	RangeError	If the startIndex and deleteCount arguments specify an index to be deleted that's outside the Vector's bounds.
		@throws	RangeError	If this method is called while fixed is true and the splice() operation changes the length of the Vector.</haxe_doc>
	</splice>
	<toString public="1" get="inline" set="null" line="487" static="1">
		<f a="this">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a string that represents the elements in the Vector. Every element in the
		Vector, starting with index 0 and ending with the highest index, is converted to
		a concatenated string and separated by commas. To specify a custom separator,
		use the `Vector.join()` method.

		@return	A string of Vector elements.</haxe_doc>
	</toString>
	<unshift public="1" get="inline" set="null" line="509" static="1">
		<f a="this:value">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<c path="openfl.Vector.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Adds one or more elements to the beginning of the Vector and returns the new
		length of the Vector. The other elements in the Vector are moved from their
		original position, i, to i + the number of new elements.

		Because this function can accept multiple arguments, the data type of the
		arguments is not checked at compile time even in strict mode. However, if an
		argument is passed that is not an instance of the base type, an exception occurs
		at run time.

		@param	value	An instance of the base type of the Vector to be inserted at the
		beginning of the Vector.
		@return	An integer representing the new length of the Vector.
		@throws	TypeError	If any argument is not an instance of the base type T of the
		Vector.
		@throws	RangeError	If this method is called while fixed is true.</haxe_doc>
	</unshift>
	<ofArray public="1" params="T" get="inline" set="null" line="519" static="1">
		<f a="array">
			<c path="Array"><c path="ofArray.T"/></c>
			<x path="openfl.Vector"><c path="ofArray.T"/></x>
		</f>
		<meta><m n=":generic"/></meta>
		<haxe_doc>Creates a new Vector object using the values from an Array object
		@param	array	An Array object
		@return	A new Vector object</haxe_doc>
	</ofArray>
	<convert public="1" params="T:U" get="inline" set="null" line="536" static="1">
		<f a="vec">
			<c path="openfl._Vector.IVector"><c path="convert.T"/></c>
			<c path="openfl._Vector.IVector"><c path="convert.U"/></c>
		</f>
		<haxe_doc>Attempts to cast a Vector to another Vector object of a similar type
		@param	vec	A Vector object to cast
		@return	The casted Vector object</haxe_doc>
	</convert>
	<toBoolVector params="T" get="inline" set="null" line="542" static="1">
		<f a="t:length:fixed:array">
			<c path="openfl._Vector.IVector"><c path="toBoolVector.T"/></c>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="Array"><c path="toBoolVector.T"/></c>
			<c path="openfl._Vector.BoolVector"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toBoolVector>
	<toIntVector params="T" get="inline" set="null" line="547" static="1">
		<f a="t:length:fixed:array">
			<c path="openfl._Vector.IVector"><c path="toIntVector.T"/></c>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="Array"><c path="toIntVector.T"/></c>
			<c path="openfl._Vector.IntVector"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toIntVector>
	<toFloatVector params="T" get="inline" set="null" line="552" static="1">
		<f a="t:length:fixed:array">
			<c path="openfl._Vector.IVector"><c path="toFloatVector.T"/></c>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="Array"><c path="toFloatVector.T"/></c>
			<c path="openfl._Vector.FloatVector"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloatVector>
	<toFunctionVector params="T" get="inline" set="null" line="558" static="1">
		<f a="t:length:fixed:array">
			<c path="openfl._Vector.IVector"><c path="toFunctionVector.T"/></c>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="Array"><c path="toFunctionVector.T"/></c>
			<c path="openfl._Vector.FunctionVector"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFunctionVector>
	<toObjectVector params="T" get="inline" set="null" line="565" static="1">
		<f a="t:length:fixed:array">
			<c path="openfl._Vector.IVector"><c path="toObjectVector.T"/></c>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="Array"><c path="toObjectVector.T"/></c>
			<c path="openfl._Vector.ObjectVector"><c path="toObjectVector.T"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toObjectVector>
	<toNullVector params="T" get="inline" set="null" line="570" static="1">
		<f a="t:length:fixed:array">
			<c path="openfl._Vector.IVector"><c path="toNullVector.T"/></c>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="Array"><c path="toNullVector.T"/></c>
			<c path="openfl._Vector.ObjectVector"><c path="toNullVector.T"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n="SuppressWarnings"><e>"checkstyle:Dynamic"</e></m>
			<m n=":to"/>
		</meta>
	</toNullVector>
	<fromBoolVector params="T" get="inline" set="null" line="576" static="1">
		<f a="vector">
			<c path="openfl._Vector.BoolVector"/>
			<x path="openfl.Vector"><c path="fromBoolVector.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromBoolVector>
	<fromIntVector params="T" get="inline" set="null" line="581" static="1">
		<f a="vector">
			<c path="openfl._Vector.IntVector"/>
			<x path="openfl.Vector"><c path="fromIntVector.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromIntVector>
	<fromFloatVector params="T" get="inline" set="null" line="586" static="1">
		<f a="vector">
			<c path="openfl._Vector.FloatVector"/>
			<x path="openfl.Vector"><c path="fromFloatVector.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloatVector>
	<fromFunctionVector params="T" get="inline" set="null" line="592" static="1">
		<f a="vector">
			<c path="openfl._Vector.FunctionVector"/>
			<x path="openfl.Vector"><c path="fromFunctionVector.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromFunctionVector>
	<fromObjectVector params="T" get="inline" set="null" line="598" static="1">
		<f a="vector">
			<c path="openfl._Vector.ObjectVector"><c path="fromObjectVector.T"/></c>
			<x path="openfl.Vector"><c path="fromObjectVector.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromObjectVector>
	<get_fixed get="inline" set="null" line="605" static="1">
		<f a="this">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</get_fixed>
	<set_fixed get="inline" set="null" line="610" static="1">
		<f a="this:value">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</set_fixed>
	<get_length get="inline" set="null" line="615" static="1">
		<f a="this">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</get_length>
	<set_length get="inline" set="null" line="620" static="1">
		<f a="this:value">
			<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</set_length>
</class></impl>
	</abstract>
	<class path="openfl._Vector.Vector_Impl_" params="" file="/projects/May2019/May2020/openfl/src/openfl/Vector.hx" private="1" module="openfl.Vector" final="1">
		<fixed public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Indicates whether the `length` property of the Vector can be changed. If the
		value is `true`, the `length` property can't be changed. This means the
		following operations are not allowed when `fixed` is `true`:

		* setting the `length` property directly
		* assigning a value to index position length
		* calling a method that changes the `length` property, including:
			* `pop()`
			* `push()`
			* `shift()`
			* `unshift()`
			* `splice()` (if the `splice()` call changes the length of the Vector).</haxe_doc>
		</fixed>
		<length public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The range of valid indices available in the Vector. A Vector instance has index
		positions up to but not including the length value.

		Every Vector element always has a value that is either an instance of the base
		type or `null`. When the `length` property is set to a value that's larger than
		its previous value, additional elements are created and populated with the
		default value appropriate to the base type (`null` for reference types).

		When the `length` property is set to a value that's smaller than its previous
		value, all the elements at index positions greater than or equal to the new
		length value are removed from the Vector.</haxe_doc>
		</length>
		<_new public="1" set="method" static="1">
			<f a="?length:?fixed:?array" v="0:false:null">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="Array"><c path="openfl.Vector.T"/></c>
				<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
			</f>
			<meta>
				<m n=":value"><e>{ array : null, fixed : false, length : 0 }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc><![CDATA[Creates a Vector with the specified base type.

		When calling the `Vector.<T>()` constructor, specify the base type using
		type parameter syntax. Type parameter syntax is a sequence consisting of a
		dot (`.`), left angle bracket (`<`), class name, then a right angle bracket (`>`),
		as shown in this example:

		```as3
		var v:Vector.<String> = new Vector.<String>();
		```

		To create a Vector instance from an Array or another Vector (such as one with a
		different base type), use the `Vector()` global function.

		To create a pre-populated Vector instance, use the following syntax instead of
		using the parameters specified below:

		```as3
		// var v:Vector.<T> = new <T>[E0, ..., En-1 ,];
		// For example:
		var v:Vector.<int> = new <int>[0,1,2,];
		```

		The following information applies to this syntax:

		* It is supported in Flash Professional CS5 and later, Flash Builder 4 and later,
		and Flex 4 and later.
		* The trailing comma is optional.
		* Empty items in the array are not supported; a statement such as
		`var v:Vector.<int> = new <int>[0,,2,]` throws a compiler error.
		* You can't specify a default length for the Vector instance. Instead, the length
		is the same as the number of elements in the initialization list.
		* You can't specify whether the Vector instance has a fixed length. Instead, use
		the fixed property.
		* Data loss or errors can occur if items passed as values don't match the
		specified type. For example:

		```as3
		var v:Vector.<int> = new <int>[4.2]; // compiler error when running in strict mode
		trace(v[0]); //returns 4 when not running in strict mode
		```

		@param	length	The initial length (number of elements) of the Vector. If this
		parameter is greater than zero, the specified number of Vector elements are
		created and populated with the default value appropriate to the base type
		(`null` for reference types).
		@param	fixed	Whether the Vector's length is fixed (`true`) or can be changed
		(`false`). This value can also be set using the fixed property.]]></haxe_doc>
		</_new>
		<concat public="1" get="inline" set="null" line="191" static="1">
			<f a="this:?vec" v=":null">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
				<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
			</f>
			<meta>
				<m n=":value"><e>{ vec : null }</e></m>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Concatenates the Vectors specified in the parameters list with the elements in
		this Vector and creates a new Vector. The Vectors in the parameters list must
		have the same base type, or subtype, as this Vector. If you do not pass any
		parameters, the returned Vector is a duplicate (shallow clone) of the original
		Vector.

		@param	vec	A Vector of the base type, or subtype, of this Vector.
		@return	A Vector with the same base type as this Vector that contains the
		elements from this Vector followed by elements from the Vector in the
		parameter list.
		@throws	TypeError	If any argument is not a Vector of the base type, or cannot
		be converted to a Vector of the base type.</haxe_doc>
		</concat>
		<copy public="1" get="inline" set="null" line="200" static="1">
			<f a="this">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new shallow clone of the current Vector object
		@return	A new Vector object</haxe_doc>
		</copy>
		<filter public="1" get="inline" set="null" line="212" static="1">
			<f a="this:callback">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<f a="">
					<c path="openfl.Vector.T"/>
					<x path="Bool"/>
				</f>
				<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
			<haxe_doc>Executes a test function on each item in the Vector and returns a new Vector
		containing all items that return true for the specified function. If an item
		returns false, it is not included in the result Vector. The base type of the return
		Vector matches the base type of the Vector on which the method is called.
		@param	callback	The function to run on each item in the Vector.</haxe_doc>
		</filter>
		<get public="1" get="inline" set="null" line="220" static="1">
			<f a="this:index">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<x path="Int"/>
				<c path="openfl.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Array access</haxe_doc>
		</get>
		<indexOf public="1" get="inline" set="null" line="236" static="1">
			<f a="this:searchElement:?fromIndex" v="::0">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<c path="openfl.Vector.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":value"><e>{ fromIndex : 0 }</e></m>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Searches for an item in the Vector and returns the index position of the item.
		The item is compared to the Vector elements using strict equality (`===`).
		@param	searchElement	The item to find in the Vector.
		@param	fromIndex	The location in the Vector from which to start searching for
		the item. If this parameter is negative, it is treated as `length + fromIndex`,
		meaning the search starts -fromIndex items from the end and searches from that
		position forward to the end of the Vector.
		@return	A zero-based index position of the item in the Vector. If the
		`searchElement` argument is not found, the return value is -1.</haxe_doc>
		</indexOf>
		<insertAt public="1" get="inline" set="null" line="252" static="1">
			<f a="this:index:element">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<x path="Int"/>
				<c path="openfl.Vector.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Insert a single element into the Vector. This method modifies the Vector without
		making a copy.

		@param	index	An integer that specifies the position in the Vector where the
		element is to be inserted. You can use a negative integer to specify a position
		relative to the end of the Vector (for example, -1 for the last element of the
		Vector).
		@param	element	The value to insert
		@throws	RangeError	If this method is called while `fixed` is `true`.</haxe_doc>
		</insertAt>
		<iterator public="1" get="inline" set="null" line="260" static="1">
			<f a="this">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<t path="Iterator"><c path="openfl.Vector.T"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
			<haxe_doc>Iterator</haxe_doc>
		</iterator>
		<join public="1" get="inline" set="null" line="276" static="1">
			<f a="this:?sep" v=":&quot;,&quot;">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":value"><e>{ sep : "," }</e></m>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Converts the elements in the Vector to strings, inserts the specified separator
		between the elements, concatenates them, and returns the resulting string. A
		nested Vector is always separated by a comma (`,`), not by the separator passed
		to the `join()` method.

		@param	sep	A character or string that separates Vector elements in the returned
		string. If you omit this parameter, a comma is used as the default separator.
		@return	A string consisting of the elements of the Vector converted to strings
		and separated by the specified string.</haxe_doc>
		</join>
		<lastIndexOf public="1" get="inline" set="null" line="297" static="1">
			<f a="this:searchElement:?fromIndex" v="::null">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<c path="openfl.Vector.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":value"><e>{ fromIndex : null }</e></m>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Searches for an item in the Vector, working backward from the specified index
		position, and returns the index position of the matching item. The item is
		compared to the Vector elements using strict equality (`===`).

		@param	searchElement	The item to find in the Vector.
		@param	fromIndex	The location in the Vector from which to start searching for
		the item. The default is the maximum allowable index value, meaning that the
		search starts at the last item in the Vector.

		If this parameter is negative, it is treated as `length + fromIndex`, meaning the
		search starts -fromIndex items from the end and searches from that position
		backward to index 0.
		@return	A zero-based index position of the item in the Vector. If the
		`searchElement` argument is not found, the return value is -1.</haxe_doc>
		</lastIndexOf>
		<pop public="1" get="inline" set="null" line="308" static="1">
			<f a="this">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<x path="Null"><c path="openfl.Vector.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes the last element from the Vector and returns that element. The `length`
		property of the Vector is decreased by one when this function is called.
		@return	The value of the last element in the specified Vector.
		@throws	RangeError	If this method is called while `fixed` is `true`.</haxe_doc>
		</pop>
		<push public="1" get="inline" set="null" line="328" static="1">
			<f a="this:value">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<c path="openfl.Vector.T"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Adds one or more elements to the end of the Vector and returns the new length of
		the Vector.

		Because this function can accept multiple arguments, the data type of the
		arguments is not checked at compile time even in strict mode. However, if an
		argument is passed that is not an instance of the base type, an exception
		occurs at run time.

		@param	value	A value to append to the Vector.
		@return	The length of the Vector after the new elements are added.
		@throws	TypeError	If any argument is not an instance of the base type T of
		the Vector.
		@throws	RangeError	If this method is called while `fixed` is `true`.</haxe_doc>
		</push>
		<removeAt public="1" get="inline" set="null" line="346" static="1">
			<f a="this:index">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<x path="Int"/>
				<c path="openfl.Vector.T"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Remove a single element from the Vector. This method modifies the Vector without
		making a copy.

		@param	index	An integer that specifies the index of the element in the Vector
		that is to be deleted. You can use a negative integer to specify a position
		relative to the end of the Vector (for example, -1 for the last element of the
		Vector).
		@return	The element that was removed from the original Vector.
		@throws	RangeError	If the index argument specifies an index to be deleted that's
		outside the Vector's bounds.
		@throws	RangeError	If this method is called while `fixed` is `true`.</haxe_doc>
		</removeAt>
		<reverse public="1" get="inline" set="null" line="357" static="1">
			<f a="this">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Reverses the order of the elements in the Vector. This method alters the Vector
		on which it is called.

		@return	The Vector with the elements in reverse order.</haxe_doc>
		</reverse>
		<set public="1" get="inline" set="null" line="365" static="1">
			<f a="this:index:value">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<x path="Int"/>
				<c path="openfl.Vector.T"/>
				<c path="openfl.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Array access</haxe_doc>
		</set>
		<shift public="1" get="inline" set="null" line="377" static="1">
			<f a="this">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<x path="Null"><c path="openfl.Vector.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes the first element from the Vector and returns that element. The
		remaining Vector elements are moved from their original position, i, to i - 1.

		@return	The first element in the Vector.
		@throws	RangeError	If `fixed` is `true`.</haxe_doc>
		</shift>
		<slice public="1" get="inline" set="null" line="401" static="1">
			<f a="this:?startIndex:?endIndex" v=":0:null">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
			</f>
			<meta>
				<m n=":value"><e>{ endIndex : null, startIndex : 0 }</e></m>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Returns a new Vector that consists of a range of elements from the original
		Vector, without modifying the original Vector. The returned Vector includes the
		`startIndex` element and all elements up to, but not including, the
		`endIndex` element.

		If you don't pass any parameters, the new Vector is a duplicate (shallow clone) of
		the original Vector. If you pass a value of 0 for both parameters, a new, empty
		Vector is created of the same type as the original Vector.

		@param	startIndex	A number specifying the index of the starting point for the
		slice. If startIndex is a negative number, the starting point begins at the end
		of the Vector, where -1 is the last element.
		@param	endIndex	A number specifying the index of the ending point for the
		slice. If you omit this parameter, the slice includes all elements from the
		starting point to the end of the Vector. If endIndex is a negative number, the
		ending point is specified from the end of the Vector, where -1 is the last element.
		@return	A Vector that consists of a range of elements from the original Vector.</haxe_doc>
		</slice>
		<sort public="1" get="inline" set="null" line="449" static="1">
			<f a="this:sortBehavior">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<f a=":">
					<c path="openfl.Vector.T"/>
					<c path="openfl.Vector.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Sorts the elements in the Vector object, and also returns a sorted Vector object.
		This method sorts according to the parameter sortBehavior, which is either a
		function that compares two values, or a set of sorting options.

		The method takes one parameter. The parameter is one of the following:

		* a function that takes two arguments of the base type (T) of the Vector and
		returns a Number:

			```as3
			function compare(x:T, y:T):Number {}
			```

			The logic of the function is that, given two elements `x` and `y`, the function
			returns one of the following three values:

			* a negative number, if `x` should appear before `y` in the sorted sequence
			* 0, if `x` equals `y`
			* a positive number, if `x` should appear after `y` in the sorted sequence

		* a number which is a bitwise OR of the following values:
			* 1 or `Array.CASEINSENSITIVE`
			* 2 or `Array.DESCENDING`
			* 4 or `Array.UNIQUESORT`
			* 8 or `Array.RETURNINDEXEDARRAY`
			* 16 or `Array.NUMERIC`

			If the value is 0, the sort works in the following way:

			* Sorting is case-sensitive (Z precedes a).
			* Sorting is ascending (a precedes b).
			* The array is modified to reflect the sort order; multiple elements that
			have identical sort fields are placed consecutively in the sorted array in
			no particular order.
			* All elements, regardless of data type, are sorted as if they were strings,
			so 100 precedes 99, because "1" is a lower string value than "9".

		@param	sortBehavior	A Function or a Number value that determines the
		behavior of the sort. A Function parameter specifies a comparison method. A
		Number value specifies the sorting options.
		@return	A Vector object, with elements in the new order.</haxe_doc>
		</sort>
		<splice public="1" get="inline" set="null" line="474" static="1">
			<f a="this:startIndex:deleteCount">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Adds elements to and removes elements from the Vector. This method modifies the
		Vector without making a copy.

		**Note:** To override this method in a subclass of Vector, use ...args for the
		parameters, as this example shows:

		```as3
		public override function splice(...args) {
		// your statements here
		}
		```

		@param	startIndex:int — An integer that specifies the index of the element in the Vector where the insertion or deletion begins. You can use a negative integer to specify a position relative to the end of the Vector (for example, -1 for the last element of the Vector).
		@param	deleteCount:uint (default = 4294967295) — An integer that specifies the number of elements to be deleted. This number includes the element specified in the startIndex parameter. If the value is 0, no elements are deleted.
		@param	... items — An optional list of one or more comma-separated values to insert into the Vector at the position specified in the startIndex parameter.
		@return	a Vector containing the elements that were removed from the original Vector.
		@throws	RangeError	If the startIndex and deleteCount arguments specify an index to be deleted that's outside the Vector's bounds.
		@throws	RangeError	If this method is called while fixed is true and the splice() operation changes the length of the Vector.</haxe_doc>
		</splice>
		<toString public="1" get="inline" set="null" line="487" static="1">
			<f a="this">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a string that represents the elements in the Vector. Every element in the
		Vector, starting with index 0 and ending with the highest index, is converted to
		a concatenated string and separated by commas. To specify a custom separator,
		use the `Vector.join()` method.

		@return	A string of Vector elements.</haxe_doc>
		</toString>
		<unshift public="1" get="inline" set="null" line="509" static="1">
			<f a="this:value">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<c path="openfl.Vector.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Adds one or more elements to the beginning of the Vector and returns the new
		length of the Vector. The other elements in the Vector are moved from their
		original position, i, to i + the number of new elements.

		Because this function can accept multiple arguments, the data type of the
		arguments is not checked at compile time even in strict mode. However, if an
		argument is passed that is not an instance of the base type, an exception occurs
		at run time.

		@param	value	An instance of the base type of the Vector to be inserted at the
		beginning of the Vector.
		@return	An integer representing the new length of the Vector.
		@throws	TypeError	If any argument is not an instance of the base type T of the
		Vector.
		@throws	RangeError	If this method is called while fixed is true.</haxe_doc>
		</unshift>
		<ofArray public="1" params="T" get="inline" set="null" line="519" static="1">
			<f a="array">
				<c path="Array"><c path="ofArray.T"/></c>
				<x path="openfl.Vector"><c path="ofArray.T"/></x>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Creates a new Vector object using the values from an Array object
		@param	array	An Array object
		@return	A new Vector object</haxe_doc>
		</ofArray>
		<convert public="1" params="T:U" get="inline" set="null" line="536" static="1">
			<f a="vec">
				<c path="openfl._Vector.IVector"><c path="convert.T"/></c>
				<c path="openfl._Vector.IVector"><c path="convert.U"/></c>
			</f>
			<haxe_doc>Attempts to cast a Vector to another Vector object of a similar type
		@param	vec	A Vector object to cast
		@return	The casted Vector object</haxe_doc>
		</convert>
		<toBoolVector params="T" get="inline" set="null" line="542" static="1">
			<f a="t:length:fixed:array">
				<c path="openfl._Vector.IVector"><c path="toBoolVector.T"/></c>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="Array"><c path="toBoolVector.T"/></c>
				<c path="openfl._Vector.BoolVector"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toBoolVector>
		<toIntVector params="T" get="inline" set="null" line="547" static="1">
			<f a="t:length:fixed:array">
				<c path="openfl._Vector.IVector"><c path="toIntVector.T"/></c>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="Array"><c path="toIntVector.T"/></c>
				<c path="openfl._Vector.IntVector"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toIntVector>
		<toFloatVector params="T" get="inline" set="null" line="552" static="1">
			<f a="t:length:fixed:array">
				<c path="openfl._Vector.IVector"><c path="toFloatVector.T"/></c>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="Array"><c path="toFloatVector.T"/></c>
				<c path="openfl._Vector.FloatVector"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloatVector>
		<toFunctionVector params="T" get="inline" set="null" line="558" static="1">
			<f a="t:length:fixed:array">
				<c path="openfl._Vector.IVector"><c path="toFunctionVector.T"/></c>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="Array"><c path="toFunctionVector.T"/></c>
				<c path="openfl._Vector.FunctionVector"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFunctionVector>
		<toObjectVector params="T" get="inline" set="null" line="565" static="1">
			<f a="t:length:fixed:array">
				<c path="openfl._Vector.IVector"><c path="toObjectVector.T"/></c>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="Array"><c path="toObjectVector.T"/></c>
				<c path="openfl._Vector.ObjectVector"><c path="toObjectVector.T"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toObjectVector>
		<toNullVector params="T" get="inline" set="null" line="570" static="1">
			<f a="t:length:fixed:array">
				<c path="openfl._Vector.IVector"><c path="toNullVector.T"/></c>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="Array"><c path="toNullVector.T"/></c>
				<c path="openfl._Vector.ObjectVector"><c path="toNullVector.T"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n="SuppressWarnings"><e>"checkstyle:Dynamic"</e></m>
				<m n=":to"/>
			</meta>
		</toNullVector>
		<fromBoolVector params="T" get="inline" set="null" line="576" static="1">
			<f a="vector">
				<c path="openfl._Vector.BoolVector"/>
				<x path="openfl.Vector"><c path="fromBoolVector.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromBoolVector>
		<fromIntVector params="T" get="inline" set="null" line="581" static="1">
			<f a="vector">
				<c path="openfl._Vector.IntVector"/>
				<x path="openfl.Vector"><c path="fromIntVector.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIntVector>
		<fromFloatVector params="T" get="inline" set="null" line="586" static="1">
			<f a="vector">
				<c path="openfl._Vector.FloatVector"/>
				<x path="openfl.Vector"><c path="fromFloatVector.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloatVector>
		<fromFunctionVector params="T" get="inline" set="null" line="592" static="1">
			<f a="vector">
				<c path="openfl._Vector.FunctionVector"/>
				<x path="openfl.Vector"><c path="fromFunctionVector.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromFunctionVector>
		<fromObjectVector params="T" get="inline" set="null" line="598" static="1">
			<f a="vector">
				<c path="openfl._Vector.ObjectVector"><c path="fromObjectVector.T"/></c>
				<x path="openfl.Vector"><c path="fromObjectVector.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromObjectVector>
		<get_fixed get="inline" set="null" line="605" static="1">
			<f a="this">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</get_fixed>
		<set_fixed get="inline" set="null" line="610" static="1">
			<f a="this:value">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</set_fixed>
		<get_length get="inline" set="null" line="615" static="1">
			<f a="this">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</get_length>
		<set_length get="inline" set="null" line="620" static="1">
			<f a="this:value">
				<c path="openfl._Vector.IVector"><c path="openfl.Vector.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</set_length>
	</class>
	<class path="openfl._Vector.IVector" params="T" file="/projects/May2019/May2020/openfl/src/openfl/Vector.hx" private="1" module="openfl.Vector" interface="1">
		<get_length public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":noCompletion"/>
			</meta>
		</get_length>
		<set_length public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":noCompletion"/>
			</meta>
		</set_length>
		<fixed public="1"><x path="Bool"/></fixed>
		<length public="1" get="accessor" set="accessor"><x path="Int"/></length>
		<concat public="1" set="method">
			<f a="?vec" v="null">
				<c path="openfl._Vector.IVector"><c path="openfl._Vector.IVector.T"/></c>
				<c path="openfl._Vector.IVector"><c path="openfl._Vector.IVector.T"/></c>
			</f>
			<meta><m n=":value"><e>{ vec : null }</e></m></meta>
		</concat>
		<copy public="1" set="method"><f a=""><c path="openfl._Vector.IVector"><c path="openfl._Vector.IVector.T"/></c></f></copy>
		<filter public="1" set="method"><f a="callback">
	<f a="">
		<c path="openfl._Vector.IVector.T"/>
		<x path="Bool"/>
	</f>
	<c path="openfl._Vector.IVector"><c path="openfl._Vector.IVector.T"/></c>
</f></filter>
		<get public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="openfl._Vector.IVector.T"/>
</f></get>
		<indexOf public="1" set="method">
			<f a="x:?from" v=":0">
				<c path="openfl._Vector.IVector.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ from : 0 }</e></m></meta>
		</indexOf>
		<insertAt public="1" set="method"><f a="index:element">
	<x path="Int"/>
	<c path="openfl._Vector.IVector.T"/>
	<x path="Void"/>
</f></insertAt>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="openfl._Vector.IVector.T"/></t></f></iterator>
		<join public="1" set="method">
			<f a="?sep" v="&quot;,&quot;">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ sep : "," }</e></m></meta>
		</join>
		<lastIndexOf public="1" set="method">
			<f a="x:?from" v=":null">
				<c path="openfl._Vector.IVector.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ from : null }</e></m></meta>
		</lastIndexOf>
		<pop public="1" set="method"><f a=""><x path="Null"><c path="openfl._Vector.IVector.T"/></x></f></pop>
		<push public="1" set="method"><f a="value">
	<c path="openfl._Vector.IVector.T"/>
	<x path="Int"/>
</f></push>
		<removeAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="openfl._Vector.IVector.T"/>
</f></removeAt>
		<reverse public="1" set="method"><f a=""><c path="openfl._Vector.IVector"><c path="openfl._Vector.IVector.T"/></c></f></reverse>
		<set public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<c path="openfl._Vector.IVector.T"/>
	<c path="openfl._Vector.IVector.T"/>
</f></set>
		<shift public="1" set="method"><f a=""><x path="Null"><c path="openfl._Vector.IVector.T"/></x></f></shift>
		<slice public="1" set="method">
			<f a="?startIndex:?endIndex" v="0:null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="openfl._Vector.IVector"><c path="openfl._Vector.IVector.T"/></c>
			</f>
			<meta><m n=":value"><e>{ endIndex : null, startIndex : 0 }</e></m></meta>
		</slice>
		<sort public="1" set="method"><f a="f">
	<f a=":">
		<c path="openfl._Vector.IVector.T"/>
		<c path="openfl._Vector.IVector.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="openfl._Vector.IVector"><c path="openfl._Vector.IVector.T"/></c>
</f></splice>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<unshift public="1" set="method"><f a="value">
	<c path="openfl._Vector.IVector.T"/>
	<x path="Void"/>
</f></unshift>
		<meta>
			<m n="SuppressWarnings"><e>"checkstyle:FieldDocComment"</e></m>
			<m n=":noCompletion"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="openfl._Vector.BoolVector" params="" file="/projects/May2019/May2020/openfl/src/openfl/Vector.hx" private="1" module="openfl.Vector">
		<implements path="openfl._Vector.IVector"><x path="Bool"/></implements>
		<fixed public="1"><x path="Bool"/></fixed>
		<length public="1" get="accessor" set="accessor"><x path="Int"/></length>
		<__array>
			<c path="Array"><x path="Bool"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__array>
		<concat public="1" set="method" line="652">
			<f a="?a" v="null">
				<c path="openfl._Vector.IVector"><x path="Bool"/></c>
				<c path="openfl._Vector.IVector"><x path="Bool"/></c>
			</f>
			<meta><m n=":value"><e>{ a : null }</e></m></meta>
		</concat>
		<copy public="1" set="method" line="673"><f a=""><c path="openfl._Vector.IVector"><x path="Bool"/></c></f></copy>
		<filter public="1" set="method" line="678"><f a="callback">
	<f a="">
		<x path="Bool"/>
		<x path="Bool"/>
	</f>
	<c path="openfl._Vector.IVector"><x path="Bool"/></c>
</f></filter>
		<get public="1" set="method" line="683"><f a="index">
	<x path="Int"/>
	<x path="Bool"/>
</f></get>
		<indexOf public="1" set="method" line="695">
			<f a="x:?from" v=":0">
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ from : 0 }</e></m></meta>
		</indexOf>
		<insertAt public="1" set="method" line="708"><f a="index:element">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></insertAt>
		<iterator public="1" set="method" line="716"><f a=""><t path="Iterator"><x path="Bool"/></t></f></iterator>
		<join public="1" set="method" line="721">
			<f a="?sep" v="&quot;,&quot;">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ sep : "," }</e></m></meta>
		</join>
		<lastIndexOf public="1" set="method" line="726">
			<f a="x:?from" v=":null">
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ from : null }</e></m></meta>
		</lastIndexOf>
		<pop public="1" set="method" line="739"><f a=""><x path="Null"><x path="Bool"/></x></f></pop>
		<push public="1" set="method" line="751"><f a="x">
	<x path="Bool"/>
	<x path="Int"/>
</f></push>
		<removeAt public="1" set="method" line="763"><f a="index">
	<x path="Int"/>
	<x path="Bool"/>
</f></removeAt>
		<reverse public="1" set="method" line="773"><f a=""><c path="openfl._Vector.IVector"><x path="Bool"/></c></f></reverse>
		<set public="1" set="method" line="779"><f a="index:value">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></set>
		<shift public="1" set="method" line="791"><f a=""><x path="Null"><x path="Bool"/></x></f></shift>
		<slice public="1" set="method" line="803">
			<f a="?startIndex:?endIndex" v="0:null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="openfl._Vector.IVector"><x path="Bool"/></c>
			</f>
			<meta><m n=":value"><e>{ endIndex : null, startIndex : 0 }</e></m></meta>
		</slice>
		<sort public="1" set="method" line="809"><f a="f">
	<f a=":">
		<x path="Bool"/>
		<x path="Bool"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method" line="814"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="openfl._Vector.IVector"><x path="Bool"/></c>
</f></splice>
		<toJSON set="method" line="820">
			<f a=""><d/></f>
			<meta>
				<m n="SuppressWarnings"><e>"checkstyle:Dynamic"</e></m>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</toJSON>
		<toString public="1" set="method" line="825"><f a=""><c path="String"/></f></toString>
		<unshift public="1" set="method" line="830"><f a="x">
	<x path="Bool"/>
	<x path="Void"/>
</f></unshift>
		<get_length set="method" line="839">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_length>
		<set_length set="method" line="844">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_length>
		<new public="1" set="method" line="639">
			<f a="?length:?fixed:?array" v="0:false:null">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="Array"><x path="Bool"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ array : null, fixed : false, length : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n="SuppressWarnings"><e>"checkstyle:FieldDocComment"</e></m>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="openfl._Vector.FloatVector" params="" file="/projects/May2019/May2020/openfl/src/openfl/Vector.hx" private="1" module="openfl.Vector">
		<implements path="openfl._Vector.IVector"><x path="Float"/></implements>
		<fixed public="1"><x path="Bool"/></fixed>
		<length public="1" get="accessor" set="accessor"><x path="Int"/></length>
		<__array>
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__array>
		<concat public="1" set="method" line="910">
			<f a="?a" v="null">
				<c path="openfl._Vector.IVector"><x path="Float"/></c>
				<c path="openfl._Vector.IVector"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>{ a : null }</e></m></meta>
		</concat>
		<copy public="1" set="method" line="931"><f a=""><c path="openfl._Vector.IVector"><x path="Float"/></c></f></copy>
		<filter public="1" set="method" line="936"><f a="callback">
	<f a="">
		<x path="Float"/>
		<x path="Bool"/>
	</f>
	<c path="openfl._Vector.IVector"><x path="Float"/></c>
</f></filter>
		<get public="1" set="method" line="941"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></get>
		<indexOf public="1" set="method" line="946">
			<f a="x:?from" v=":0">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ from : 0 }</e></m></meta>
		</indexOf>
		<insertAt public="1" set="method" line="959"><f a="index:element">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></insertAt>
		<iterator public="1" set="method" line="967"><f a=""><t path="Iterator"><x path="Float"/></t></f></iterator>
		<join public="1" set="method" line="972">
			<f a="?sep" v="&quot;,&quot;">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ sep : "," }</e></m></meta>
		</join>
		<lastIndexOf public="1" set="method" line="977">
			<f a="x:?from" v=":null">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ from : null }</e></m></meta>
		</lastIndexOf>
		<pop public="1" set="method" line="990"><f a=""><x path="Null"><x path="Float"/></x></f></pop>
		<push public="1" set="method" line="1002"><f a="x">
	<x path="Float"/>
	<x path="Int"/>
</f></push>
		<removeAt public="1" set="method" line="1014"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></removeAt>
		<reverse public="1" set="method" line="1024"><f a=""><c path="openfl._Vector.IVector"><x path="Float"/></c></f></reverse>
		<set public="1" set="method" line="1030"><f a="index:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set>
		<shift public="1" set="method" line="1042"><f a=""><x path="Null"><x path="Float"/></x></f></shift>
		<slice public="1" set="method" line="1054">
			<f a="?startIndex:?endIndex" v="0:null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="openfl._Vector.IVector"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>{ endIndex : null, startIndex : 0 }</e></m></meta>
		</slice>
		<sort public="1" set="method" line="1060"><f a="f">
	<f a=":">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method" line="1065"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="openfl._Vector.IVector"><x path="Float"/></c>
</f></splice>
		<toJSON set="method" line="1071">
			<f a=""><d/></f>
			<meta>
				<m n="SuppressWarnings"><e>"checkstyle:Dynamic"</e></m>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</toJSON>
		<toString public="1" set="method" line="1076"><f a=""><c path="String"/></f></toString>
		<unshift public="1" set="method" line="1081"><f a="x">
	<x path="Float"/>
	<x path="Void"/>
</f></unshift>
		<get_length set="method" line="1090">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_length>
		<set_length set="method" line="1095">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_length>
		<new public="1" set="method" line="888">
			<f a="?length:?fixed:?array:?forceCopy" v="0:false:null:false">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="Array"><d/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ forceCopy : false, array : null, fixed : false, length : 0 }</e></m>
				<m n="SuppressWarnings"><e>"checkstyle:Dynamic"</e></m>
			</meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n="SuppressWarnings"><e>"checkstyle:FieldDocComment"</e></m>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="openfl._Vector.FunctionVector" params="" file="/projects/May2019/May2020/openfl/src/openfl/Vector.hx" private="1" module="openfl.Vector">
		<implements path="openfl._Vector.IVector"><x path="haxe.Function"/></implements>
		<fixed public="1"><x path="Bool"/></fixed>
		<length public="1" get="accessor" set="accessor"><x path="Int"/></length>
		<__array>
			<c path="Array"><x path="haxe.Function"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__array>
		<concat public="1" set="method" line="1159">
			<f a="?a" v="null">
				<c path="openfl._Vector.IVector"><x path="haxe.Function"/></c>
				<c path="openfl._Vector.IVector"><x path="haxe.Function"/></c>
			</f>
			<meta><m n=":value"><e>{ a : null }</e></m></meta>
		</concat>
		<copy public="1" set="method" line="1180"><f a=""><c path="openfl._Vector.IVector"><x path="haxe.Function"/></c></f></copy>
		<filter public="1" set="method" line="1185"><f a="callback">
	<f a="">
		<x path="haxe.Function"/>
		<x path="Bool"/>
	</f>
	<c path="openfl._Vector.IVector"><x path="haxe.Function"/></c>
</f></filter>
		<get public="1" set="method" line="1190"><f a="index">
	<x path="Int"/>
	<x path="haxe.Function"/>
</f></get>
		<indexOf public="1" set="method" line="1202">
			<f a="x:?from" v=":0">
				<x path="haxe.Function"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ from : 0 }</e></m></meta>
		</indexOf>
		<insertAt public="1" set="method" line="1215"><f a="index:element">
	<x path="Int"/>
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></insertAt>
		<iterator public="1" set="method" line="1223"><f a=""><t path="Iterator"><x path="haxe.Function"/></t></f></iterator>
		<join public="1" set="method" line="1228">
			<f a="?sep" v="&quot;,&quot;">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ sep : "," }</e></m></meta>
		</join>
		<lastIndexOf public="1" set="method" line="1233">
			<f a="x:?from" v=":null">
				<x path="haxe.Function"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ from : null }</e></m></meta>
		</lastIndexOf>
		<pop public="1" set="method" line="1246"><f a=""><x path="haxe.Function"/></f></pop>
		<push public="1" set="method" line="1258"><f a="x">
	<x path="haxe.Function"/>
	<x path="Int"/>
</f></push>
		<removeAt public="1" set="method" line="1270"><f a="index">
	<x path="Int"/>
	<x path="haxe.Function"/>
</f></removeAt>
		<reverse public="1" set="method" line="1280"><f a=""><c path="openfl._Vector.IVector"><x path="haxe.Function"/></c></f></reverse>
		<set public="1" set="method" line="1286"><f a="index:value">
	<x path="Int"/>
	<x path="haxe.Function"/>
	<x path="haxe.Function"/>
</f></set>
		<shift public="1" set="method" line="1298"><f a=""><x path="haxe.Function"/></f></shift>
		<slice public="1" set="method" line="1310">
			<f a="?startIndex:?endIndex" v="0:null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="openfl._Vector.IVector"><x path="haxe.Function"/></c>
			</f>
			<meta><m n=":value"><e>{ endIndex : null, startIndex : 0 }</e></m></meta>
		</slice>
		<sort public="1" set="method" line="1316"><f a="f">
	<f a=":">
		<x path="haxe.Function"/>
		<x path="haxe.Function"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method" line="1321"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="openfl._Vector.IVector"><x path="haxe.Function"/></c>
</f></splice>
		<toJSON set="method" line="1327">
			<f a=""><d/></f>
			<meta>
				<m n="SuppressWarnings"><e>"checkstyle:Dynamic"</e></m>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</toJSON>
		<toString public="1" set="method" line="1332"><f a=""><c path="String"/></f></toString>
		<unshift public="1" set="method" line="1337"><f a="x">
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></unshift>
		<get_length set="method" line="1346">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_length>
		<set_length set="method" line="1351">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_length>
		<new public="1" set="method" line="1146">
			<f a="?length:?fixed:?array" v="0:false:null">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="Array"><x path="haxe.Function"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ array : null, fixed : false, length : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n="SuppressWarnings"><e>"checkstyle:FieldDocComment"</e></m>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="openfl._Vector.IntVector" params="" file="/projects/May2019/May2020/openfl/src/openfl/Vector.hx" private="1" module="openfl.Vector">
		<implements path="openfl._Vector.IVector"><x path="Int"/></implements>
		<fixed public="1"><x path="Bool"/></fixed>
		<length public="1" get="accessor" set="accessor"><x path="Int"/></length>
		<__array>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__array>
		<concat public="1" set="method" line="1408">
			<f a="?a" v="null">
				<c path="openfl._Vector.IVector"><x path="Int"/></c>
				<c path="openfl._Vector.IVector"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ a : null }</e></m></meta>
		</concat>
		<copy public="1" set="method" line="1429"><f a=""><c path="openfl._Vector.IVector"><x path="Int"/></c></f></copy>
		<filter public="1" set="method" line="1434"><f a="callback">
	<f a="">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<c path="openfl._Vector.IVector"><x path="Int"/></c>
</f></filter>
		<get public="1" set="method" line="1439"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<indexOf public="1" set="method" line="1444">
			<f a="x:?from" v=":0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ from : 0 }</e></m></meta>
		</indexOf>
		<insertAt public="1" set="method" line="1457"><f a="index:element">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></insertAt>
		<iterator public="1" set="method" line="1465"><f a=""><t path="Iterator"><x path="Int"/></t></f></iterator>
		<join public="1" set="method" line="1470">
			<f a="?sep" v="&quot;,&quot;">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ sep : "," }</e></m></meta>
		</join>
		<lastIndexOf public="1" set="method" line="1475">
			<f a="x:?from" v=":null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ from : null }</e></m></meta>
		</lastIndexOf>
		<pop public="1" set="method" line="1488"><f a=""><x path="Null"><x path="Int"/></x></f></pop>
		<push public="1" set="method" line="1500"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></push>
		<removeAt public="1" set="method" line="1512"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></removeAt>
		<reverse public="1" set="method" line="1522"><f a=""><c path="openfl._Vector.IVector"><x path="Int"/></c></f></reverse>
		<set public="1" set="method" line="1528"><f a="index:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set>
		<shift public="1" set="method" line="1540"><f a=""><x path="Null"><x path="Int"/></x></f></shift>
		<slice public="1" set="method" line="1552">
			<f a="?startIndex:?endIndex" v="0:null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="openfl._Vector.IVector"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ endIndex : null, startIndex : 0 }</e></m></meta>
		</slice>
		<sort public="1" set="method" line="1558"><f a="f">
	<f a=":">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method" line="1563"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="openfl._Vector.IVector"><x path="Int"/></c>
</f></splice>
		<toJSON set="method" line="1569">
			<f a=""><d/></f>
			<meta>
				<m n="SuppressWarnings"><e>"checkstyle:Dynamic"</e></m>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</toJSON>
		<toString public="1" set="method" line="1574"><f a=""><c path="String"/></f></toString>
		<unshift public="1" set="method" line="1579"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></unshift>
		<get_length set="method" line="1588">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_length>
		<set_length set="method" line="1593">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_length>
		<new public="1" set="method" line="1395">
			<f a="?length:?fixed:?array" v="0:false:null">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ array : null, fixed : false, length : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n="SuppressWarnings"><e>"checkstyle:FieldDocComment"</e></m>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="openfl._Vector.ObjectVector" params="T" file="/projects/May2019/May2020/openfl/src/openfl/Vector.hx" private="1" module="openfl.Vector">
		<implements path="openfl._Vector.IVector"><c path="openfl._Vector.ObjectVector.T"/></implements>
		<fixed public="1"><x path="Bool"/></fixed>
		<length public="1" get="accessor" set="accessor"><x path="Int"/></length>
		<__array>
			<c path="Array"><c path="openfl._Vector.ObjectVector.T"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__array>
		<concat public="1" set="method" line="1660">
			<f a="?a" v="null">
				<c path="openfl._Vector.IVector"><c path="openfl._Vector.ObjectVector.T"/></c>
				<c path="openfl._Vector.IVector"><c path="openfl._Vector.ObjectVector.T"/></c>
			</f>
			<meta>
				<m n=":value"><e>{ a : null }</e></m>
				<m n="SuppressWarnings"><e>"checkstyle:Dynamic"</e></m>
			</meta>
		</concat>
		<copy public="1" set="method" line="1681"><f a=""><c path="openfl._Vector.IVector"><c path="openfl._Vector.ObjectVector.T"/></c></f></copy>
		<filter public="1" set="method" line="1686"><f a="callback">
	<f a="">
		<c path="openfl._Vector.ObjectVector.T"/>
		<x path="Bool"/>
	</f>
	<c path="openfl._Vector.IVector"><c path="openfl._Vector.ObjectVector.T"/></c>
</f></filter>
		<get public="1" set="method" line="1691"><f a="index">
	<x path="Int"/>
	<c path="openfl._Vector.ObjectVector.T"/>
</f></get>
		<indexOf public="1" set="method" line="1696">
			<f a="x:?from" v=":0">
				<c path="openfl._Vector.ObjectVector.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ from : 0 }</e></m></meta>
		</indexOf>
		<insertAt public="1" set="method" line="1709"><f a="index:element">
	<x path="Int"/>
	<c path="openfl._Vector.ObjectVector.T"/>
	<x path="Void"/>
</f></insertAt>
		<iterator public="1" set="method" line="1717"><f a=""><t path="Iterator"><c path="openfl._Vector.ObjectVector.T"/></t></f></iterator>
		<join public="1" set="method" line="1722">
			<f a="?sep" v="&quot;,&quot;">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ sep : "," }</e></m></meta>
		</join>
		<lastIndexOf public="1" set="method" line="1727">
			<f a="x:?from" v=":null">
				<c path="openfl._Vector.ObjectVector.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ from : null }</e></m></meta>
		</lastIndexOf>
		<pop public="1" set="method" line="1740"><f a=""><c path="openfl._Vector.ObjectVector.T"/></f></pop>
		<push public="1" set="method" line="1752"><f a="x">
	<c path="openfl._Vector.ObjectVector.T"/>
	<x path="Int"/>
</f></push>
		<removeAt public="1" set="method" line="1764"><f a="index">
	<x path="Int"/>
	<c path="openfl._Vector.ObjectVector.T"/>
</f></removeAt>
		<reverse public="1" set="method" line="1774"><f a=""><c path="openfl._Vector.IVector"><c path="openfl._Vector.ObjectVector.T"/></c></f></reverse>
		<set public="1" set="method" line="1780"><f a="index:value">
	<x path="Int"/>
	<c path="openfl._Vector.ObjectVector.T"/>
	<c path="openfl._Vector.ObjectVector.T"/>
</f></set>
		<shift public="1" set="method" line="1792"><f a=""><c path="openfl._Vector.ObjectVector.T"/></f></shift>
		<slice public="1" set="method" line="1804">
			<f a="?startIndex:?endIndex" v="0:null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="openfl._Vector.IVector"><c path="openfl._Vector.ObjectVector.T"/></c>
			</f>
			<meta><m n=":value"><e>{ endIndex : null, startIndex : 0 }</e></m></meta>
		</slice>
		<sort public="1" set="method" line="1810"><f a="f">
	<f a=":">
		<c path="openfl._Vector.ObjectVector.T"/>
		<c path="openfl._Vector.ObjectVector.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method" line="1815"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="openfl._Vector.IVector"><c path="openfl._Vector.ObjectVector.T"/></c>
</f></splice>
		<toJSON set="method" line="1821">
			<f a=""><d/></f>
			<meta>
				<m n="SuppressWarnings"><e>"checkstyle:Dynamic"</e></m>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</toJSON>
		<toString public="1" set="method" line="1826"><f a=""><c path="String"/></f></toString>
		<unshift public="1" set="method" line="1831"><f a="x">
	<c path="openfl._Vector.ObjectVector.T"/>
	<x path="Void"/>
</f></unshift>
		<get_length set="method" line="1840">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_length>
		<set_length set="method" line="1845">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_length>
		<new public="1" set="method" line="1637">
			<f a="?length:?fixed:?array:?forceCopy" v="0:false:null:false">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="Array"><d/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ forceCopy : false, array : null, fixed : false, length : 0 }</e></m>
				<m n="SuppressWarnings"><e>"checkstyle:Dynamic"</e></m>
			</meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n="SuppressWarnings"><e>"checkstyle:FieldDocComment"</e></m>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="org.poly2tri.AdvancingFront" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/AdvancingFront.hx">
		<head public="1"><c path="org.poly2tri.Node"/></head>
		<tail public="1"><c path="org.poly2tri.Node"/></tail>
		<search_node public="1"><c path="org.poly2tri.Node"/></search_node>
		<locateNode public="1" set="method" line="15"><f a="x">
	<x path="Float"/>
	<c path="org.poly2tri.Node"/>
</f></locateNode>
		<locatePoint public="1" set="method" line="45"><f a="point">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Node"/>
</f></locatePoint>
		<new public="1" set="method" line="9"><f a="head:tail">
	<c path="org.poly2tri.Node"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Basin" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Basin.hx">
		<left_node public="1"><c path="org.poly2tri.Node"/></left_node>
		<bottom_node public="1"><c path="org.poly2tri.Node"/></bottom_node>
		<right_node public="1"><c path="org.poly2tri.Node"/></right_node>
		<width public="1"><x path="Float"/></width>
		<left_highest public="1"><x path="Bool"/></left_highest>
		<clear public="1" set="method" line="17"><f a=""><x path="Void"/></f></clear>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Constants" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Constants.hx">
		<kAlpha public="1" expr="0.3" line="8" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.3</e></m></meta>
		</kAlpha>
		<EPSILON public="1" expr="1e-12" line="9" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1e-12</e></m></meta>
		</EPSILON>
		<PI_2 public="1" expr="Math.PI / 2" line="10" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>Math.PI / 2</e></m></meta>
		</PI_2>
		<PI_3div4 public="1" expr="3 * Math.PI / 4" line="11" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>3 * Math.PI / 4</e></m></meta>
		</PI_3div4>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Edge" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Edge.hx">
		<p public="1"><c path="org.poly2tri.Point"/></p>
		<q public="1"><c path="org.poly2tri.Point"/></q>
		<toString public="1" set="method" line="42"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="8"><f a="p1:p2">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.EdgeEvent" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/EdgeEvent.hx">
		<constrained_edge public="1"><c path="org.poly2tri.Edge"/></constrained_edge>
		<right public="1"><x path="Bool"/></right>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Node" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Node.hx">
		<point public="1"><c path="org.poly2tri.Point"/></point>
		<triangle public="1"><c path="org.poly2tri.Triangle"/></triangle>
		<prev public="1"><c path="org.poly2tri.Node"/></prev>
		<next public="1"><c path="org.poly2tri.Node"/></next>
		<value public="1"><x path="Float"/></value>
		<getHoleAngle public="1" set="method" line="26">
			<f a=""><x path="Float"/></f>
			<haxe_doc>*
	 * @param node - middle node
	 * @return the angle between 3 front nodes</haxe_doc>
		</getHoleAngle>
		<getBasinAngle public="1" set="method" line="46"><f a=""><x path="Float"/></f></getBasinAngle>
		<new public="1" set="method" line="13">
			<f a="?point:?triangle" v="null:null">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Triangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ triangle : null, point : null }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Orientation" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Orientation.hx">
		<CW public="1" get="inline" set="null" expr="1" line="5" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</CW>
		<CCW public="1" get="inline" set="null" expr="-1" line="6" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</CCW>
		<COLLINEAR public="1" get="inline" set="null" expr="0" line="7" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</COLLINEAR>
		<orient2d public="1" set="method" line="9" static="1"><f a="pa:pb:pc">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Int"/>
</f></orient2d>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Point" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Point.hx">
		<sortPoints public="1" set="method" line="41" static="1"><f a="points">
	<c path="Array"><c path="org.poly2tri.Point"/></c>
	<x path="Void"/>
</f></sortPoints>
		<cmpPoints public="1" set="method" line="46" static="1"><f a="l:r">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Int"/>
</f></cmpPoints>
		<C_ID public="1" expr="0" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</C_ID>
		<id public="1"><x path="Int"/></id>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<edge_list public="1" get="accessor" set="null"><c path="Array"><c path="org.poly2tri.Edge"/></c></edge_list>
		<get_edge_list set="method" line="28"><f a=""><c path="Array"><c path="org.poly2tri.Edge"/></c></f></get_edge_list>
		<equals public="1" set="method" line="36"><f a="that">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="55"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="17"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Sweep" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Sweep.hx">
		<nextFlipPoint public="1" set="method" line="598" static="1"><f a="ep:eq:ot:op">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
</f></nextFlipPoint>
		<context><c path="org.poly2tri.SweepContext"/></context>
		<triangulate public="1" set="method" line="12"><f a=""><x path="Void"/></f></triangulate>
		<sweepPoints public="1" set="method" line="20"><f a=""><x path="Void"/></f></sweepPoints>
		<finalizationPolygon public="1" set="method" line="35"><f a=""><x path="Void"/></f></finalizationPolygon>
		<pointEvent public="1" set="method" line="51">
			<f a="point">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Node"/>
			</f>
			<haxe_doc>* Find closes node to the left of the new point and
	 * create a new triangle. If needed new holes and basins
	 * will be filled to.</haxe_doc>
		</pointEvent>
		<edgeEventByEdge public="1" set="method" line="66"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></edgeEventByEdge>
		<edgeEventByPoints public="1" set="method" line="81"><f a="ep:eq:triangle:point">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<x path="Void"/>
</f></edgeEventByPoints>
		<newFrontTriangle public="1" set="method" line="112"><f a="point:node">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Node"/>
	<c path="org.poly2tri.Node"/>
</f></newFrontTriangle>
		<fill public="1" set="method" line="139">
			<f a="node">
				<c path="org.poly2tri.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds a triangle to the advancing front to fill a hole.
	 * @param tcx
	 * @param node - middle node, that is the bottom of the hole</haxe_doc>
		</fill>
		<fillAdvancingFront public="1" set="method" line="166">
			<f a="n">
				<c path="org.poly2tri.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fills holes in the Advancing Front</haxe_doc>
		</fillAdvancingFront>
		<legalize public="1" set="method" line="203">
			<f a="t">
				<c path="org.poly2tri.Triangle"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if triangle was legalized</haxe_doc>
		</legalize>
		<fillBasin public="1" set="method" line="273">
			<f a="node">
				<c path="org.poly2tri.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Fills a basin that has formed on the Advancing Front to the right
	 * of given node.<br>
	 * First we decide a left,bottom and right node that forms the
	 * boundaries of the basin. Then we do a reqursive fill.
	 *
	 * @param tcx
	 * @param node - starting node, this or next node will be left node]]></haxe_doc>
		</fillBasin>
		<fillBasinReq public="1" set="method" line="311">
			<f a="node">
				<c path="org.poly2tri.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Recursive algorithm to fill a Basin with triangles
	 *
	 * @param tcx
	 * @param node - bottom_node</haxe_doc>
		</fillBasinReq>
		<isShallow public="1" set="method" line="345"><f a="node">
	<c path="org.poly2tri.Node"/>
	<x path="Bool"/>
</f></isShallow>
		<fillEdgeEvent public="1" set="method" line="356"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillEdgeEvent>
		<fillRightAboveEdgeEvent public="1" set="method" line="368"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillRightAboveEdgeEvent>
		<fillRightBelowEdgeEvent public="1" set="method" line="384"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillRightBelowEdgeEvent>
		<fillRightConcaveEdgeEvent public="1" set="method" line="399"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillRightConcaveEdgeEvent>
		<fillRightConvexEdgeEvent public="1" set="method" line="421"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillRightConvexEdgeEvent>
		<fillLeftAboveEdgeEvent public="1" set="method" line="445"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillLeftAboveEdgeEvent>
		<fillLeftBelowEdgeEvent public="1" set="method" line="461"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillLeftBelowEdgeEvent>
		<fillLeftConvexEdgeEvent public="1" set="method" line="480"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillLeftConvexEdgeEvent>
		<fillLeftConcaveEdgeEvent public="1" set="method" line="504"><f a="edge:node">
	<c path="org.poly2tri.Edge"/>
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></fillLeftConcaveEdgeEvent>
		<flipEdgeEvent public="1" set="method" line="528"><f a="ep:eq:t:p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<x path="Void"/>
</f></flipEdgeEvent>
		<nextFlipTriangle public="1" set="method" line="577"><f a="o:t:ot:p:op">
	<x path="Int"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
</f></nextFlipTriangle>
		<flipScanEdgeEvent public="1" set="method" line="617"><f a="ep:eq:flip_triangle:t:p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<x path="Void"/>
</f></flipScanEdgeEvent>
		<new public="1" set="method" line="7"><f a="context">
	<c path="org.poly2tri.SweepContext"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.SweepContext" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/SweepContext.hx">
		<triangles public="1"><c path="Array"><c path="org.poly2tri.Triangle"/></c></triangles>
		<points public="1"><c path="Array"><c path="org.poly2tri.Point"/></c></points>
		<edge_list public="1"><c path="Array"><c path="org.poly2tri.Edge"/></c></edge_list>
		<map public="1"><t path="Map">
	<c path="String"/>
	<c path="org.poly2tri.Triangle"/>
</t></map>
		<front public="1"><c path="org.poly2tri.AdvancingFront"/></front>
		<head public="1"><c path="org.poly2tri.Point"/></head>
		<tail public="1"><c path="org.poly2tri.Point"/></tail>
		<basin public="1"><c path="org.poly2tri.Basin"/></basin>
		<edge_event public="1"><c path="org.poly2tri.EdgeEvent"/></edge_event>
		<addPoints set="method" line="42"><f a="points">
	<c path="Array"><c path="org.poly2tri.Point"/></c>
	<x path="Void"/>
</f></addPoints>
		<addPolyline public="1" set="method" line="53"><f a="polyline">
	<c path="Array"><c path="org.poly2tri.Point"/></c>
	<x path="Void"/>
</f></addPolyline>
		<initEdges set="method" line="62"><f a="polyline">
	<c path="Array"><c path="org.poly2tri.Point"/></c>
	<x path="Void"/>
</f></initEdges>
		<addToMap public="1" set="method" line="75"><f a="triangle">
	<c path="org.poly2tri.Triangle"/>
	<x path="Void"/>
</f></addToMap>
		<initTriangulation public="1" set="method" line="81"><f a=""><x path="Void"/></f></initTriangulation>
		<locateNode public="1" set="method" line="110"><f a="point">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Node"/>
</f></locateNode>
		<createAdvancingFront public="1" set="method" line="115"><f a=""><x path="Void"/></f></createAdvancingFront>
		<removeNode public="1" set="method" line="135"><f a="node">
	<c path="org.poly2tri.Node"/>
	<x path="Void"/>
</f></removeNode>
		<mapTriangleToNodes public="1" set="method" line="140"><f a="triangle">
	<c path="org.poly2tri.Triangle"/>
	<x path="Void"/>
</f></mapTriangleToNodes>
		<meshClean public="1" set="method" line="152"><f a="t">
	<c path="org.poly2tri.Triangle"/>
	<x path="Void"/>
</f></meshClean>
		<new public="1" set="method" line="24"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Triangle" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Triangle.hx">
		<CW_OFFSET get="inline" set="null" expr="1" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
			<haxe_doc>* Return the point clockwise to the given point.
	 * Return the point counter-clockwise to the given point.
	 *
	 * Return the neighbor clockwise to given point.
	 * Return the neighbor counter-clockwise to given point.</haxe_doc>
		</CW_OFFSET>
		<CCW_OFFSET get="inline" set="null" expr="-1" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</CCW_OFFSET>
		<rotateTrianglePair public="1" set="method" line="331" static="1">
			<f a="t:p:ot:op">
				<c path="org.poly2tri.Triangle"/>
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Triangle"/>
				<c path="org.poly2tri.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Rotates a triangle pair one vertex CW
	 *<pre>
	 *       n2                    n2
	 *  P +-----+             P +-----+
	 *    | t  /|               |\  t |
	 *    |   / |               | \   |
	 *  n1|  /  |n3           n1|  \  |n3
	 *    | /   |    after CW   |   \ |
	 *    |/ oT |               | oT \|
	 *    +-----+ oP            +-----+
	 *       n4                    n4
	 * </pre>]]></haxe_doc>
		</rotateTrianglePair>
		<points public="1"><c path="Array"><c path="org.poly2tri.Point"/></c></points>
		<neighbors public="1"><c path="Array"><c path="org.poly2tri.Triangle"/></c></neighbors>
		<interior public="1"><x path="Bool"/></interior>
		<constrained_edge public="1"><c path="Array"><x path="Bool"/></c></constrained_edge>
		<delaunay_edge public="1"><c path="Array"><x path="Bool"/></c></delaunay_edge>
		<containsPoint public="1" set="method" line="52">
			<f a="point">
				<c path="org.poly2tri.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Test if this Triangle contains the Point object given as parameter as its vertices.
	 *
	 * @return <code>True</code> if the Point objects are of the Triangle's vertices,
	 *         <code>false</code> otherwise.]]></haxe_doc>
		</containsPoint>
		<containsEdgePoints public="1" set="method" line="57"><f a="p1:p2">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></containsEdgePoints>
		<markNeighbor public="1" set="method" line="72">
			<f a="t:p1:p2">
				<c path="org.poly2tri.Triangle"/>
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Update neighbor pointers.<br>
	 * This method takes either 3 parameters (<code>p1</code>, <code>p2</code> and
	 * <code>t</code>) or 1 parameter (<code>t</code>).
	 * @param   t   Triangle object.
	 * @param   p1  Point object.
	 * @param   p2  Point object.]]></haxe_doc>
		</markNeighbor>
		<markNeighborTriangle public="1" set="method" line="90"><f a="that">
	<c path="org.poly2tri.Triangle"/>
	<x path="Void"/>
</f></markNeighborTriangle>
		<getPointIndexOffset public="1" set="method" line="116">
			<f a="p:?offset" v=":0">
				<c path="org.poly2tri.Point"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
		</getPointIndexOffset>
		<pointCW public="1" set="method" line="150"><f a="p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
</f></pointCW>
		<pointCCW public="1" set="method" line="155"><f a="p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
</f></pointCCW>
		<neighborCW public="1" set="method" line="160"><f a="p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
</f></neighborCW>
		<neighborCCW public="1" set="method" line="165"><f a="p">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Triangle"/>
</f></neighborCCW>
		<getConstrainedEdgeCW public="1" set="method" line="170"><f a="p">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></getConstrainedEdgeCW>
		<setConstrainedEdgeCW public="1" set="method" line="171"><f a="p:ce">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></setConstrainedEdgeCW>
		<getConstrainedEdgeCCW public="1" set="method" line="173"><f a="p">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></getConstrainedEdgeCCW>
		<setConstrainedEdgeCCW public="1" set="method" line="174"><f a="p:ce">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></setConstrainedEdgeCCW>
		<getDelaunayEdgeCW public="1" set="method" line="176"><f a="p">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></getDelaunayEdgeCW>
		<setDelaunayEdgeCW public="1" set="method" line="177"><f a="p:e">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></setDelaunayEdgeCW>
		<getDelaunayEdgeCCW public="1" set="method" line="179"><f a="p">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></getDelaunayEdgeCCW>
		<setDelaunayEdgeCCW public="1" set="method" line="180"><f a="p:e">
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></setDelaunayEdgeCCW>
		<neighborAcross public="1" set="method" line="186">
			<f a="p">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Triangle"/>
			</f>
			<haxe_doc>* The neighbor across to given point.</haxe_doc>
		</neighborAcross>
		<oppositePoint public="1" set="method" line="188"><f a="t:p">
	<c path="org.poly2tri.Triangle"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
</f></oppositePoint>
		<legalize public="1" set="method" line="199">
			<f a="opoint:?npoint" v=":null">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ npoint : null }</e></m></meta>
			<haxe_doc><![CDATA[* Legalize triangle by rotating clockwise.<br>
	 * This method takes either 1 parameter (then the triangle is rotated around
	 * points(0)) or 2 parameters (then the triangle is rotated around the first
	 * parameter).]]></haxe_doc>
		</legalize>
		<index public="1" set="method" line="230">
			<f a="p">
				<c path="org.poly2tri.Point"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Alias for getPointIndexOffset
	 *
	 * @param	p</haxe_doc>
		</index>
		<edgeIndex public="1" set="method" line="241"><f a="p1:p2">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Int"/>
</f></edgeIndex>
		<markConstrainedEdgeByIndex public="1" set="method" line="267">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Mark an edge of this triangle as constrained.<br>
	 * This method takes either 1 parameter (an edge index or an Edge instance) or
	 * 2 parameters (two Point instances defining the edge of the triangle).]]></haxe_doc>
		</markConstrainedEdgeByIndex>
		<markConstrainedEdgeByEdge public="1" set="method" line="272"><f a="edge">
	<c path="org.poly2tri.Edge"/>
	<x path="Void"/>
</f></markConstrainedEdgeByEdge>
		<markConstrainedEdgeByPoints public="1" set="method" line="277"><f a="p:q">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Void"/>
</f></markConstrainedEdgeByPoints>
		<isEdgeSide public="1" set="method" line="305">
			<f a="ep:eq">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if a side from this triangle is an edge side.
	 * If sides are not marked they will be marked.
	 *
	 * @param	ep
	 * @param	eq
	 * @return</haxe_doc>
		</isEdgeSide>
		<clearNeigbors public="1" set="method" line="377"><f a=""><x path="Void"/></f></clearNeigbors>
		<clearDelunayEdges public="1" set="method" line="384"><f a=""><x path="Void"/></f></clearDelunayEdges>
		<toString public="1" set="method" line="392"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="21">
			<f a="p1:p2:p3:?fixOrientation:?checkOrientation" v=":::false:true">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ checkOrientation : true, fixOrientation : false }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.Utils" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/Utils.hx">
		<insideIncircle public="1" set="method" line="29" static="1">
			<f a="pa:pb:pc:pd">
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<c path="org.poly2tri.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* <b>Requirement</b>:<br>
	 * 1. a, b and c form a triangle.<br>
	 * 2. a and d is know to be on opposite side of bc<br>
	 * <pre>
	 *                a
	 *                +
	 *               / \
	 *              /   \
	 *            b/     \c
	 *            +-------+
	 *           /    d    \
	 *          /           \
	 * </pre>
	 * <b>Fact</b>: d has to be in area B to have a chance to be inside the circle formed by
	 *  a,b and c<br>
	 *  d is outside B if orient2d(a,b,d) or orient2d(c,a,d) is CW<br>
	 *  This preknowledge gives us a way to optimize the incircle test
	 * @param pa - triangle point, opposite d
	 * @param pb - triangle point
	 * @param pc - triangle point
	 * @param pd - point opposite a
	 * @return true if d is inside circle, false if on circle edge]]></haxe_doc>
		</insideIncircle>
		<inScanArea public="1" set="method" line="62" static="1"><f a="pa:pb:pc:pd">
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<c path="org.poly2tri.Point"/>
	<x path="Bool"/>
</f></inScanArea>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="org.poly2tri.VisiblePolygon" params="" file="/usr/local/lib/haxeLibrary/poly2trihx/0,1,4/org/poly2tri/VisiblePolygon.hx">
		<sweepContext><c path="org.poly2tri.SweepContext"/></sweepContext>
		<sweep><c path="org.poly2tri.Sweep"/></sweep>
		<triangulated><x path="Bool"/></triangulated>
		<addPolyline public="1" set="method" line="17"><f a="polyline">
	<c path="Array"><c path="org.poly2tri.Point"/></c>
	<x path="Void"/>
</f></addPolyline>
		<addPolylineFromFloats public="1" set="method" line="22"><f a="pos">
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></addPolylineFromFloats>
		<reset public="1" set="method" line="33"><f a=""><x path="Void"/></f></reset>
		<performTriangulationOnce public="1" set="method" line="40"><f a=""><x path="Void"/></f></performTriangulationOnce>
		<getVerticesAndTriangles public="1" set="method" line="48"><f a=""><a>
	<vertices><c path="Array"><x path="Float"/></c></vertices>
	<triangles><c path="Array"><x path="Int"/></c></triangles>
</a></f></getVerticesAndTriangles>
		<getNumTriangles public="1" set="method" line="77"><f a=""><x path="Int"/></f></getNumTriangles>
		<drawShape public="1" set="method" line="84"><f a="g">
	<c path="flash.display.Graphics"/>
	<x path="Void"/>
</f></drawShape>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="pallette.wheel.Wheel24" params="" file="/usr/local/lib/haxeLibrary/pallette/0,0,1/src/pallette/wheel/ColorWheel24.hx" module="pallette.wheel.ColorWheel24">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="pallette.wheel._ColorWheel24.Wheel24_Impl_" params="" file="/usr/local/lib/haxeLibrary/pallette/0,0,1/src/pallette/wheel/ColorWheel24.hx" private="1" module="pallette.wheel.ColorWheel24" extern="1" final="1">
	<redRadish public="1" get="inline" set="null" expr="cast 0xffef3c42" line="5" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffef3c42</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</redRadish>
	<orangeSoda public="1" get="inline" set="null" expr="cast 0xfff25e40" line="6" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff25e40</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</orangeSoda>
	<gokuOrange public="1" get="inline" set="null" expr="cast 0xfff2823a" line="7" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff2823a</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</gokuOrange>
	<highlighterOrange public="1" get="inline" set="null" expr="cast 0xfff69537" line="8" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff69537</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</highlighterOrange>
	<carona public="1" get="inline" set="null" expr="cast 0xfff4aa2f" line="9" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff4aa2f</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</carona>
	<solarPower public="1" get="inline" set="null" expr="cast 0xfff6c137" line="10" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff6c137</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</solarPower>
	<flirtatious public="1" get="inline" set="null" expr="cast 0xfffad435" line="11" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfffad435</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</flirtatious>
	<yellowBellied public="1" get="inline" set="null" expr="cast 0xfffdf32f" line="12" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfffdf32f</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</yellowBellied>
	<daffodil public="1" get="inline" set="null" expr="cast 0xffffff2d" line="13" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffffff2d</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</daffodil>
	<spoiledEgg public="1" get="inline" set="null" expr="cast 0xffdff429" line="14" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffdff429</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</spoiledEgg>
	<peraRocha public="1" get="inline" set="null" expr="cast 0xffa7d52a" line="15" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffa7d52a</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</peraRocha>
	<appleGreen public="1" get="inline" set="null" expr="cast 0xff79c725" line="16" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff79c725</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</appleGreen>
	<fieldGreen public="1" get="inline" set="null" expr="cast 0xff53c025" line="17" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff53c025</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</fieldGreen>
	<parisGreen public="1" get="inline" set="null" expr="cast 0xff52c67f" line="18" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff52c67f</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</parisGreen>
	<maximumBlue public="1" get="inline" set="null" expr="cast 0xff4daecf" line="19" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4daecf</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</maximumBlue>
	<blueTourmaline public="1" get="inline" set="null" expr="cast 0xff4592ca" line="20" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4592ca</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</blueTourmaline>
	<celestialPlum public="1" get="inline" set="null" expr="cast 0xff3f77c4" line="21" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3f77c4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</celestialPlum>
	<freeSpeechBlue public="1" get="inline" set="null" expr="cast 0xff3a57bf" line="22" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3a57bf</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</freeSpeechBlue>
	<earlySpringNight public="1" get="inline" set="null" expr="cast 0xff3438bd" line="23" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3438bd</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</earlySpringNight>
	<blueDepression public="1" get="inline" set="null" expr="cast 0xff4b27bd" line="24" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4b27bd</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</blueDepression>
	<nebulaFuchsia public="1" get="inline" set="null" expr="cast 0xff7328b6" line="25" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff7328b6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</nebulaFuchsia>
	<fuchsiaFlair public="1" get="inline" set="null" expr="cast 0xffb528c5" line="26" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffb528c5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</fuchsiaFlair>
	<royalFuchsia public="1" get="inline" set="null" expr="cast 0xffc32a94" line="27" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffc32a94</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</royalFuchsia>
	<fuchsiaPurple public="1" get="inline" set="null" expr="cast 0xffdd3371" line="28" static="1">
		<x path="pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffdd3371</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</fuchsiaPurple>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="pallette.wheel._ColorWheel24.Wheel24_Impl_" params="" file="/usr/local/lib/haxeLibrary/pallette/0,0,1/src/pallette/wheel/ColorWheel24.hx" private="1" module="pallette.wheel.ColorWheel24" extern="1" final="1">
		<redRadish public="1" get="inline" set="null" expr="cast 0xffef3c42" line="5" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffef3c42</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</redRadish>
		<orangeSoda public="1" get="inline" set="null" expr="cast 0xfff25e40" line="6" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff25e40</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</orangeSoda>
		<gokuOrange public="1" get="inline" set="null" expr="cast 0xfff2823a" line="7" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff2823a</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</gokuOrange>
		<highlighterOrange public="1" get="inline" set="null" expr="cast 0xfff69537" line="8" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff69537</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</highlighterOrange>
		<carona public="1" get="inline" set="null" expr="cast 0xfff4aa2f" line="9" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff4aa2f</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</carona>
		<solarPower public="1" get="inline" set="null" expr="cast 0xfff6c137" line="10" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff6c137</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</solarPower>
		<flirtatious public="1" get="inline" set="null" expr="cast 0xfffad435" line="11" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfffad435</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</flirtatious>
		<yellowBellied public="1" get="inline" set="null" expr="cast 0xfffdf32f" line="12" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfffdf32f</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</yellowBellied>
		<daffodil public="1" get="inline" set="null" expr="cast 0xffffff2d" line="13" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffffff2d</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</daffodil>
		<spoiledEgg public="1" get="inline" set="null" expr="cast 0xffdff429" line="14" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffdff429</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</spoiledEgg>
		<peraRocha public="1" get="inline" set="null" expr="cast 0xffa7d52a" line="15" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffa7d52a</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</peraRocha>
		<appleGreen public="1" get="inline" set="null" expr="cast 0xff79c725" line="16" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff79c725</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</appleGreen>
		<fieldGreen public="1" get="inline" set="null" expr="cast 0xff53c025" line="17" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff53c025</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</fieldGreen>
		<parisGreen public="1" get="inline" set="null" expr="cast 0xff52c67f" line="18" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff52c67f</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</parisGreen>
		<maximumBlue public="1" get="inline" set="null" expr="cast 0xff4daecf" line="19" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4daecf</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</maximumBlue>
		<blueTourmaline public="1" get="inline" set="null" expr="cast 0xff4592ca" line="20" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4592ca</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</blueTourmaline>
		<celestialPlum public="1" get="inline" set="null" expr="cast 0xff3f77c4" line="21" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3f77c4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</celestialPlum>
		<freeSpeechBlue public="1" get="inline" set="null" expr="cast 0xff3a57bf" line="22" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3a57bf</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</freeSpeechBlue>
		<earlySpringNight public="1" get="inline" set="null" expr="cast 0xff3438bd" line="23" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3438bd</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</earlySpringNight>
		<blueDepression public="1" get="inline" set="null" expr="cast 0xff4b27bd" line="24" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4b27bd</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</blueDepression>
		<nebulaFuchsia public="1" get="inline" set="null" expr="cast 0xff7328b6" line="25" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff7328b6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</nebulaFuchsia>
		<fuchsiaFlair public="1" get="inline" set="null" expr="cast 0xffb528c5" line="26" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffb528c5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</fuchsiaFlair>
		<royalFuchsia public="1" get="inline" set="null" expr="cast 0xffc32a94" line="27" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffc32a94</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</royalFuchsia>
		<fuchsiaPurple public="1" get="inline" set="null" expr="cast 0xffdd3371" line="28" static="1">
			<x path="pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffdd3371</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</fuchsiaPurple>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="pallette.wheel.ColorWheel24" params="" file="/usr/local/lib/haxeLibrary/pallette/0,0,1/src/pallette/wheel/ColorWheel24.hx">
		<getWheel public="1" get="inline" set="null" line="34" static="1"><f a=""><c path="Array"><x path="pallette.wheel.Wheel24"/></c></f></getWheel>
		<random public="1" get="inline" set="null" line="61" static="1"><f a=""><x path="pallette.wheel.Wheel24"/></f></random>
		<getName public="1" get="inline" set="null" line="67" static="1"><f a="w">
	<x path="pallette.wheel.Wheel24"/>
	<c path="String"/>
</f></getName>
		<next public="1" get="inline" set="null" line="96" static="1"><f a="w">
	<x path="pallette.wheel.Wheel24"/>
	<x path="pallette.wheel.Wheel24"/>
</f></next>
		<haxe_doc>![wheel24](../../bootstrap/img/wheel24.png)</haxe_doc>
	</class>
	<class path="trilateral3.DocTrilateral3" params="" file="src/trilateral3/DocTrilateral3.hx">
		<main public="1" set="method" line="20" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<new public="1" set="method" line="23"><f a=""><x path="Void"/></f></new>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</class>
	<class path="trilateral3.Trilateral" params="" file="src/trilateral3/Trilateral.hx">
		<transformMatrix public="1" expr="null" line="5" static="1">
			<x path="Null"><c path="trilateral3.matrix.MatrixDozen"/></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</transformMatrix>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="trilateral3.color.ColorHelper" params="" file="src/trilateral3/color/ColorHelper.hx">
		<getBlack_ public="1" expr="getBlack">
			<f a="r:g:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>getBlack</e></m></meta>
		</getBlack_>
		<from_cymka_ public="1" expr="from_cymka">
			<f a="c:y:m:k:a">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>from_cymka</e></m></meta>
		</from_cymka_>
		<from_argb_ public="1" expr="from_argb">
			<f a="a:r:g:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>from_argb</e></m></meta>
		</from_argb_>
		<toHexInt_ public="1" expr="toHexInt">
			<f a="c">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>toHexInt</e></m></meta>
		</toHexInt_>
		<rgbConvert_ public="1" expr="rgbConvert">
			<f a="color:k">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>rgbConvert</e></m></meta>
		</rgbConvert_>
		<cymkConvert_ public="1" expr="cymkConvert">
			<f a="color:black">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>cymkConvert</e></m></meta>
		</cymkConvert_>
		<alphaChannel_ public="1" expr="alphaChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>alphaChannel</e></m></meta>
		</alphaChannel_>
		<redChannel_ public="1" expr="redChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>redChannel</e></m></meta>
		</redChannel_>
		<greenChannel_ public="1" expr="greenChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>greenChannel</e></m></meta>
		</greenChannel_>
		<blueChannel_ public="1" expr="blueChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>blueChannel</e></m></meta>
		</blueChannel_>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="trilateral3.color._ColorHelper.ColorHelper_Fields_" params="" file="src/trilateral3/color/ColorHelper.hx" private="1" module="trilateral3.color.ColorHelper" final="1">
		<getBlack public="1" get="inline" set="null" line="4" static="1"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></getBlack>
		<from_cymka public="1" get="inline" set="null" line="8" static="1"><f a="c:y:m:k:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_cymka>
		<from_argb public="1" get="inline" set="null" line="15" static="1"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_argb>
		<toHexInt public="1" get="inline" set="null" line="21" static="1"><f a="c">
	<x path="Float"/>
	<x path="Int"/>
</f></toHexInt>
		<rgbConvert public="1" get="inline" set="null" line="24" static="1"><f a="color:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></rgbConvert>
		<cymkConvert public="1" get="inline" set="null" line="27" static="1"><f a="color:black">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cymkConvert>
		<alphaChannel public="1" get="inline" set="null" line="30" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="33" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="36" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="39" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.color.ColorInt" params="" file="src/trilateral3/color/ColorInt.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast field="fromARGB"><c path="trilateral3.structure.ARGB"/></icast>
			<icast field="fromCYMKA"><c path="trilateral3.structure.CYMKA"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toARGB"><c path="trilateral3.structure.ARGB"/></icast>
			<icast field="toCYMK"><c path="trilateral3.structure.CYMKA"/></icast>
		</to>
		<impl><class path="trilateral3.color._ColorInt.ColorInt_Impl_" params="" file="src/trilateral3/color/ColorInt.hx" private="1" module="trilateral3.color.ColorInt" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="v">
			<x path="Int"/>
			<x path="trilateral3.color.ColorInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<fromARGB public="1" get="inline" set="null" line="12" static="1">
		<f a="argb">
			<c path="trilateral3.structure.ARGB"/>
			<x path="trilateral3.color.ColorInt"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromARGB>
	<toARGB public="1" get="inline" set="null" line="17" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="trilateral3.structure.ARGB"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toARGB>
	<fromCYMKA public="1" get="inline" set="null" line="22" static="1">
		<f a="c">
			<c path="trilateral3.structure.CYMKA"/>
			<x path="trilateral3.color.ColorInt"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromCYMKA>
	<toCYMK public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="trilateral3.structure.CYMKA"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toCYMK>
	<cyan public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cyan>
	<get_cyan get="inline" set="null" line="36" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cyan>
	<set_cyan get="inline" set="null" line="40" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cyan>
	<yellow public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</yellow>
	<get_yellow get="inline" set="null" line="49" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_yellow>
	<set_yellow get="inline" set="null" line="53" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_yellow>
	<magenta public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</magenta>
	<get_magenta get="inline" set="null" line="62" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_magenta>
	<set_magenta get="inline" set="null" line="66" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_magenta>
	<black public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</black>
	<get_black get="inline" set="null" line="75" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_black>
	<set_black get="inline" set="null" line="78" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_black>
	<alpha public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alpha>
	<get_alpha get="inline" set="null" line="87" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alpha>
	<set_alpha get="inline" set="null" line="91" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alpha>
	<red public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</red>
	<get_red get="inline" set="null" line="97" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_red>
	<set_red get="inline" set="null" line="101" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_red>
	<green public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</green>
	<get_green get="inline" set="null" line="107" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_green>
	<set_green get="inline" set="null" line="111" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_green>
	<blue public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blue>
	<get_blue get="inline" set="null" line="117" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blue>
	<set_blue get="inline" set="null" line="121" static="1">
		<f a="this:v">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blue>
	<aiCYMKA public="1" get="inline" set="null" line="127" static="1">
		<f a="arr:?alpha" v=":1.0">
			<c path="Array"><c path="String"/></c>
			<x path="Float"/>
			<x path="trilateral3.color.ColorInt"/>
		</f>
		<meta><m n=":value"><e>{ alpha : 1.0 }</e></m></meta>
	</aiCYMKA>
	<aiARGB public="1" get="inline" set="null" line="135" static="1">
		<f a="arr:?alpha" v=":1.0">
			<c path="Array"><c path="String"/></c>
			<x path="Float"/>
			<x path="trilateral3.color.ColorInt"/>
		</f>
		<meta><m n=":value"><e>{ alpha : 1.0 }</e></m></meta>
	</aiARGB>
	<aiGreyA public="1" get="inline" set="null" line="143" static="1">
		<f a="s:?alpha" v=":1.0">
			<c path="String"/>
			<x path="Float"/>
			<x path="trilateral3.color.ColorInt"/>
		</f>
		<meta><m n=":value"><e>{ alpha : 1.0 }</e></m></meta>
	</aiGreyA>
	<ARGB_CYMKA public="1" get="inline" set="null" line="150" static="1"><f a="v">
	<c path="trilateral3.structure.ARGB"/>
	<c path="trilateral3.structure.CYMKA"/>
</f></ARGB_CYMKA>
	<CYMKA_ARGB public="1" get="inline" set="null" line="160" static="1"><f a="v">
	<c path="trilateral3.structure.CYMKA"/>
	<c path="trilateral3.structure.ARGB"/>
</f></CYMKA_ARGB>
</class></impl>
	</abstract>
	<class path="trilateral3.color._ColorInt.ColorInt_Impl_" params="" file="src/trilateral3/color/ColorInt.hx" private="1" module="trilateral3.color.ColorInt" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="trilateral3.color.ColorInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<fromARGB public="1" get="inline" set="null" line="12" static="1">
			<f a="argb">
				<c path="trilateral3.structure.ARGB"/>
				<x path="trilateral3.color.ColorInt"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromARGB>
		<toARGB public="1" get="inline" set="null" line="17" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="trilateral3.structure.ARGB"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toARGB>
		<fromCYMKA public="1" get="inline" set="null" line="22" static="1">
			<f a="c">
				<c path="trilateral3.structure.CYMKA"/>
				<x path="trilateral3.color.ColorInt"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromCYMKA>
		<toCYMK public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="trilateral3.structure.CYMKA"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toCYMK>
		<cyan public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cyan>
		<get_cyan get="inline" set="null" line="36" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cyan>
		<set_cyan get="inline" set="null" line="40" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cyan>
		<yellow public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</yellow>
		<get_yellow get="inline" set="null" line="49" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_yellow>
		<set_yellow get="inline" set="null" line="53" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_yellow>
		<magenta public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</magenta>
		<get_magenta get="inline" set="null" line="62" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_magenta>
		<set_magenta get="inline" set="null" line="66" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_magenta>
		<black public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</black>
		<get_black get="inline" set="null" line="75" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_black>
		<set_black get="inline" set="null" line="78" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_black>
		<alpha public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alpha>
		<get_alpha get="inline" set="null" line="87" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alpha>
		<set_alpha get="inline" set="null" line="91" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alpha>
		<red public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</red>
		<get_red get="inline" set="null" line="97" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_red>
		<set_red get="inline" set="null" line="101" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_red>
		<green public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</green>
		<get_green get="inline" set="null" line="107" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_green>
		<set_green get="inline" set="null" line="111" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_green>
		<blue public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blue>
		<get_blue get="inline" set="null" line="117" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blue>
		<set_blue get="inline" set="null" line="121" static="1">
			<f a="this:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blue>
		<aiCYMKA public="1" get="inline" set="null" line="127" static="1">
			<f a="arr:?alpha" v=":1.0">
				<c path="Array"><c path="String"/></c>
				<x path="Float"/>
				<x path="trilateral3.color.ColorInt"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1.0 }</e></m></meta>
		</aiCYMKA>
		<aiARGB public="1" get="inline" set="null" line="135" static="1">
			<f a="arr:?alpha" v=":1.0">
				<c path="Array"><c path="String"/></c>
				<x path="Float"/>
				<x path="trilateral3.color.ColorInt"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1.0 }</e></m></meta>
		</aiARGB>
		<aiGreyA public="1" get="inline" set="null" line="143" static="1">
			<f a="s:?alpha" v=":1.0">
				<c path="String"/>
				<x path="Float"/>
				<x path="trilateral3.color.ColorInt"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1.0 }</e></m></meta>
		</aiGreyA>
		<ARGB_CYMKA public="1" get="inline" set="null" line="150" static="1"><f a="v">
	<c path="trilateral3.structure.ARGB"/>
	<c path="trilateral3.structure.CYMKA"/>
</f></ARGB_CYMKA>
		<CYMKA_ARGB public="1" get="inline" set="null" line="160" static="1"><f a="v">
	<c path="trilateral3.structure.CYMKA"/>
	<c path="trilateral3.structure.ARGB"/>
</f></CYMKA_ARGB>
	</class>
	<abstract path="trilateral3.drawing.Color3Abstract" params="" file="src/trilateral3/drawing/Color3Abstract.hx">
		<from><icast><t path="trilateral3.drawing.Color3Type"/></icast></from>
		<this><t path="trilateral3.drawing.Color3Type"/></this>
		<to><icast><t path="trilateral3.drawing.Color3Type"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.drawing._Color3Abstract.Color3Abstract_Impl_" params="" file="src/trilateral3/drawing/Color3Abstract.hx" private="1" module="trilateral3.drawing.Color3Abstract" final="1">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="color3Type">
			<t path="trilateral3.drawing.Color3Type"/>
			<x path="trilateral3.drawing.Color3Abstract"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<argb public="1" get="null" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argb>
	<set_argb get="inline" set="null" line="9" static="1">
		<f a="this:col">
			<t path="trilateral3.drawing.Color3Type"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argb>
	<argbA public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbA>
	<set_argbA get="inline" set="null" line="16" static="1">
		<f a="this:col">
			<t path="trilateral3.drawing.Color3Type"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbA>
	<get_argbA get="inline" set="null" line="20" static="1">
		<f a="this">
			<t path="trilateral3.drawing.Color3Type"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbA>
	<argbB public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbB>
	<set_argbB get="inline" set="null" line="25" static="1">
		<f a="this:col">
			<t path="trilateral3.drawing.Color3Type"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbB>
	<get_argbB get="inline" set="null" line="29" static="1">
		<f a="this">
			<t path="trilateral3.drawing.Color3Type"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbB>
	<argbC public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argbC>
	<set_argbC get="inline" set="null" line="34" static="1">
		<f a="this:col">
			<t path="trilateral3.drawing.Color3Type"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argbC>
	<get_argbC get="inline" set="null" line="38" static="1">
		<f a="this">
			<t path="trilateral3.drawing.Color3Type"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argbC>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._Color3Abstract.Color3Abstract_Impl_" params="" file="src/trilateral3/drawing/Color3Abstract.hx" private="1" module="trilateral3.drawing.Color3Abstract" final="1">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="color3Type">
				<t path="trilateral3.drawing.Color3Type"/>
				<x path="trilateral3.drawing.Color3Abstract"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<argb public="1" get="null" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argb>
		<set_argb get="inline" set="null" line="9" static="1">
			<f a="this:col">
				<t path="trilateral3.drawing.Color3Type"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argb>
		<argbA public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbA>
		<set_argbA get="inline" set="null" line="16" static="1">
			<f a="this:col">
				<t path="trilateral3.drawing.Color3Type"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbA>
		<get_argbA get="inline" set="null" line="20" static="1">
			<f a="this">
				<t path="trilateral3.drawing.Color3Type"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbA>
		<argbB public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbB>
		<set_argbB get="inline" set="null" line="25" static="1">
			<f a="this:col">
				<t path="trilateral3.drawing.Color3Type"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbB>
		<get_argbB get="inline" set="null" line="29" static="1">
			<f a="this">
				<t path="trilateral3.drawing.Color3Type"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbB>
		<argbC public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argbC>
		<set_argbC get="inline" set="null" line="34" static="1">
			<f a="this:col">
				<t path="trilateral3.drawing.Color3Type"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argbC>
		<get_argbC get="inline" set="null" line="38" static="1">
			<f a="this">
				<t path="trilateral3.drawing.Color3Type"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argbC>
	</class>
	<typedef path="trilateral3.drawing.Color3Type" params="" file="src/trilateral3/drawing/Color3Type.hx"><a>
	<set_argbC set="method"><f a="col">
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
	<set_argbB set="method"><f a="col">
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
	<set_argbA set="method"><f a="col">
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
	<set_argb set="method"><f a="col">
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
	<get_argbC set="method"><f a=""><x path="Int"/></f></get_argbC>
	<get_argbB set="method"><f a=""><x path="Int"/></f></get_argbB>
	<get_argbA set="method"><f a=""><x path="Int"/></f></get_argbA>
</a></typedef>
	<abstract path="trilateral3.drawing.ColorAbstract" params="" file="src/trilateral3/drawing/ColorAbstract.hx">
		<from><icast><t path="trilateral3.drawing.ColorType"/></icast></from>
		<this><t path="trilateral3.drawing.ColorType"/></this>
		<to><icast><t path="trilateral3.drawing.ColorType"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.drawing._ColorAbstract.ColorAbstract_Impl_" params="" file="src/trilateral3/drawing/ColorAbstract.hx" private="1" module="trilateral3.drawing.ColorAbstract" final="1">
	<_new public="1" get="inline" set="null" line="4" static="1">
		<f a="colorType">
			<t path="trilateral3.drawing.ColorType"/>
			<x path="trilateral3.drawing.ColorAbstract"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="8" static="1">
		<f a="this">
			<t path="trilateral3.drawing.ColorType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="11" static="1">
		<f a="this:v">
			<t path="trilateral3.drawing.ColorType"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<size public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</size>
	<set_size get="inline" set="null" line="16" static="1">
		<f a="this:v">
			<t path="trilateral3.drawing.ColorType"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_size>
	<get_size get="inline" set="null" line="20" static="1">
		<f a="this">
			<t path="trilateral3.drawing.ColorType"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_size>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._ColorAbstract.ColorAbstract_Impl_" params="" file="src/trilateral3/drawing/ColorAbstract.hx" private="1" module="trilateral3.drawing.ColorAbstract" final="1">
		<_new public="1" get="inline" set="null" line="4" static="1">
			<f a="colorType">
				<t path="trilateral3.drawing.ColorType"/>
				<x path="trilateral3.drawing.ColorAbstract"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="8" static="1">
			<f a="this">
				<t path="trilateral3.drawing.ColorType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="11" static="1">
			<f a="this:v">
				<t path="trilateral3.drawing.ColorType"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<size public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</size>
		<set_size get="inline" set="null" line="16" static="1">
			<f a="this:v">
				<t path="trilateral3.drawing.ColorType"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_size>
		<get_size get="inline" set="null" line="20" static="1">
			<f a="this">
				<t path="trilateral3.drawing.ColorType"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_size>
	</class>
	<typedef path="trilateral3.drawing.ColorType" params="" file="src/trilateral3/drawing/ColorType.hx"><a>
	<set_size set="method"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
	<set_pos set="method"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
	<get_size set="method"><f a=""><x path="Int"/></f></get_size>
	<get_pos set="method"><f a=""><x path="Float"/></f></get_pos>
	<getTriInt><f a=""><c path="trilateral3.structure.TriInt"/></f></getTriInt>
	<cornerColors><f a="colorA:colorB:colorC">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
	<colorTriangles><f a="color:times">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
	<color3current>
		<x path="Null"><x path="trilateral3.drawing.Color3Abstract"/></x>
		<meta><m n=":optional"/></meta>
	</color3current>
</a></typedef>
	<class path="trilateral3.drawing.Contour" params="" file="src/trilateral3/drawing/Contour.hx">
		<smallDotScale get="inline" set="null" expr="0.07" line="95" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.07</e></m></meta>
		</smallDotScale>
		<thetaCompute get="inline" set="null" line="180" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaCompute>
		<dist get="inline" set="null" line="184" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></dist>
		<debugCol0 public="1" expr="redRadish">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>redRadish</e></m></meta>
		</debugCol0>
		<debugCol1 public="1" expr="gokuOrange">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>gokuOrange</e></m></meta>
		</debugCol1>
		<debugCol2 public="1" expr="carona">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>carona</e></m></meta>
		</debugCol2>
		<debugCol3 public="1" expr="flirtatious">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>flirtatious</e></m></meta>
		</debugCol3>
		<debugCol4 public="1" expr="daffodil">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>daffodil</e></m></meta>
		</debugCol4>
		<debugCol5 public="1" expr="peraRocha">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>peraRocha</e></m></meta>
		</debugCol5>
		<debugCol6 public="1" expr="fieldGreen">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>fieldGreen</e></m></meta>
		</debugCol6>
		<debugCol7 public="1" expr="maximumBlue">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>maximumBlue</e></m></meta>
		</debugCol7>
		<debugCol8 public="1" expr="celestialPlum">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>celestialPlum</e></m></meta>
		</debugCol8>
		<debugCol9 public="1" expr="earlySpringNight">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>earlySpringNight</e></m></meta>
		</debugCol9>
		<debugCol10 public="1" expr="nebulaFuchsia">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>nebulaFuchsia</e></m></meta>
		</debugCol10>
		<debugCol11 public="1" expr="royalFuchsia">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>royalFuchsia</e></m></meta>
		</debugCol11>
		<debugCol12 public="1" expr="orangeSoda">
			<x path="pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>orangeSoda</e></m></meta>
		</debugCol12>
		<pointsClock public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pointsClock>
		<pointsAnti public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pointsAnti>
		<penultimateCX public="1"><x path="Float"/></penultimateCX>
		<penultimateCY public="1"><x path="Float"/></penultimateCY>
		<lastClockX public="1"><x path="Float"/></lastClockX>
		<lastClockY public="1"><x path="Float"/></lastClockY>
		<penultimateAX public="1"><x path="Float"/></penultimateAX>
		<penultimateAY public="1"><x path="Float"/></penultimateAY>
		<lastAntiX public="1"><x path="Float"/></lastAntiX>
		<lastAntiY public="1"><x path="Float"/></lastAntiY>
		<pen public="1"><c path="trilateral3.drawing.Pen"/></pen>
		<endLine><x path="trilateral3.drawing.StyleEndLine"/></endLine>
		<ax><x path="Float"/></ax>
		<ay><x path="Float"/></ay>
		<bx><x path="Float"/></bx>
		<by><x path="Float"/></by>
		<cx><x path="Float"/></cx>
		<cy><x path="Float"/></cy>
		<dx><x path="Null"><x path="Float"/></x></dx>
		<dy><x path="Null"><x path="Float"/></x></dy>
		<ex><x path="Null"><x path="Float"/></x></ex>
		<ey><x path="Null"><x path="Float"/></x></ey>
		<dxPrev><x path="Null"><x path="Float"/></x></dxPrev>
		<dyPrev><x path="Null"><x path="Float"/></x></dyPrev>
		<exPrev><x path="Null"><x path="Float"/></x></exPrev>
		<eyPrev><x path="Null"><x path="Float"/></x></eyPrev>
		<dxOld><x path="Null"><x path="Float"/></x></dxOld>
		<dyOld><x path="Null"><x path="Float"/></x></dyOld>
		<exOld><x path="Null"><x path="Float"/></x></exOld>
		<eyOld><x path="Null"><x path="Float"/></x></eyOld>
		<jx><x path="Float"/></jx>
		<jy><x path="Float"/></jy>
		<lastClock><x path="Bool"/></lastClock>
		<jxOld><x path="Float"/></jxOld>
		<jyOld><x path="Float"/></jyOld>
		<kax><x path="Float"/></kax>
		<kay><x path="Float"/></kay>
		<kbx><x path="Float"/></kbx>
		<kby><x path="Float"/></kby>
		<kcx><x path="Float"/></kcx>
		<kcy><x path="Float"/></kcy>
		<ncx><x path="Float"/></ncx>
		<ncy><x path="Float"/></ncy>
		<quadIndex><x path="Float"/></quadIndex>
		<angleA public="1"><x path="Float"/></angleA>
		<halfA public="1"><x path="Float"/></halfA>
		<beta public="1"><x path="Float"/></beta>
		<r><x path="Float"/></r>
		<theta public="1"><x path="Float"/></theta>
		<angle1 public="1"><x path="Null"><x path="Float"/></x></angle1>
		<angle2 public="1"><x path="Float"/></angle2>
		<reset public="1" set="method" line="97"><f a=""><x path="Void"/></f></reset>
		<count public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<computeDE public="1" get="inline" set="null" line="139"><f a=""><x path="Void"/></f></computeDE>
		<anglesCompute get="inline" set="null" line="155"><f a=""><x path="Void"/></f></anglesCompute>
		<thetaComputeAdj get="inline" set="null" line="176"><f a="qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaComputeAdj>
		<triangleJoin public="1" get="inline" set="null" line="193">
			<f a="ax_:ay_:bx_:by_:width_:?curveEnds:?overlap" v=":::::false:false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ overlap : false, curveEnds : false }</e></m></meta>
		</triangleJoin>
		<overlapQuad get="inline" set="null" line="298"><f a=""><x path="Void"/></f></overlapQuad>
		<end public="1" get="inline" set="null" line="306"><f a="width_">
	<x path="Float"/>
	<x path="Void"/>
</f></end>
		<triangle2DFill get="inline" set="null" line="312">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</triangle2DFill>
		<addPieXstart get="inline" set="null" line="316">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : -1 }</e></m></meta>
		</addPieXstart>
		<addPieX get="inline" set="null" line="336">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::0:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : 0 }</e></m></meta>
		</addPieX>
		<addPie get="inline" set="null" line="356">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::0:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : 0 }</e></m></meta>
		</addPie>
		<computeJ get="inline" set="null" line="362"><f a="width_:theta0:dif">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></computeJ>
		<addDot get="inline" set="null" line="372"><f a="x:y:color:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addDot>
		<addSmallTriangles get="inline" set="null" line="398"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addSmallTriangles>
		<triangle2DFillangleCorners get="inline" set="null" line="410"><f a="oldx_:oldy_:prevx_:prevy_:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangle2DFillangleCorners>
		<triangle2DFillangleCornersLess get="inline" set="null" line="422"><f a="oldx_:oldy_:prevx_:prevy_:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangle2DFillangleCornersLess>
		<connectQuadsWhenQuadsOverlay get="inline" set="null" line="433"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></connectQuadsWhenQuadsOverlay>
		<connectQuads get="inline" set="null" line="448"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></connectQuads>
		<addInitialQuads get="inline" set="null" line="464"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addInitialQuads>
		<endEdges public="1" set="method" line="548"><f a=""><x path="Void"/></f></endEdges>
		<counter expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</counter>
		<addQuads set="method" line="574"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addQuads>
		<storeLastQuads get="inline" set="null" line="740"><f a=""><x path="Void"/></f></storeLastQuads>
		<isClockwise get="inline" set="null" line="750"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isClockwise>
		<line public="1" get="inline" set="null" line="753">
			<f a="ax_:ay_:bx_:by_:width_:?endLineCurve" v=":::::no">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.drawing.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLineCurve : no }</e></m></meta>
		</line>
		<new public="1" set="method" line="134">
			<f a="pen_:?endLine_" v=":no">
				<c path="trilateral3.drawing.Pen"/>
				<x path="trilateral3.drawing.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLine_ : no }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.drawing.DrawAbstract" params="" file="src/trilateral3/drawing/DrawAbstract.hx">
		<from><icast><t path="trilateral3.drawing.DrawType"/></icast></from>
		<this><t path="trilateral3.drawing.DrawType"/></this>
		<to><icast><t path="trilateral3.drawing.DrawType"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.drawing._DrawAbstract.DrawAbstract_Impl_" params="" file="src/trilateral3/drawing/DrawAbstract.hx" private="1" module="trilateral3.drawing.DrawAbstract" final="1">
	<_new public="1" get="inline" set="null" line="4" static="1">
		<f a="drawType">
			<t path="trilateral3.drawing.DrawType"/>
			<x path="trilateral3.drawing.DrawAbstract"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="8" static="1">
		<f a="this">
			<t path="trilateral3.drawing.DrawType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="11" static="1">
		<f a="this:v">
			<t path="trilateral3.drawing.DrawType"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<size public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</size>
	<set_size get="inline" set="null" line="16" static="1">
		<f a="this:v">
			<t path="trilateral3.drawing.DrawType"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_size>
	<get_size get="inline" set="null" line="20" static="1">
		<f a="this">
			<t path="trilateral3.drawing.DrawType"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_size>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._DrawAbstract.DrawAbstract_Impl_" params="" file="src/trilateral3/drawing/DrawAbstract.hx" private="1" module="trilateral3.drawing.DrawAbstract" final="1">
		<_new public="1" get="inline" set="null" line="4" static="1">
			<f a="drawType">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="trilateral3.drawing.DrawAbstract"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="8" static="1">
			<f a="this">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="11" static="1">
			<f a="this:v">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<size public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</size>
		<set_size get="inline" set="null" line="16" static="1">
			<f a="this:v">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_size>
		<get_size get="inline" set="null" line="20" static="1">
			<f a="this">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_size>
	</class>
	<typedef path="trilateral3.drawing.DrawType" params="" file="src/trilateral3/drawing/DrawType.hx"><a>
	<triangleCurrent>
		<x path="Null"><x path="trilateral3.drawing.TriangleAbstract"/></x>
		<meta><m n=":optional"/></meta>
	</triangleCurrent>
	<triangle><f a="ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></triangle>
	<transformRange><f a="m:startEnd">
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></transformRange>
	<transform><f a="">
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transform>
	<set_size set="method"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
	<set_pos set="method"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
	<next><f a=""><x path="Float"/></f></next>
	<hasNext><f a=""><x path="Bool"/></f></hasNext>
	<get_size set="method"><f a=""><x path="Int"/></f></get_size>
	<get_pos set="method"><f a=""><x path="Float"/></f></get_pos>
	<getTriangle3D><f a=""><c path="trilateral3.structure.Triangle3D"/></f></getTriangle3D>
</a></typedef>
	<class path="trilateral3.drawing._Fill.Fill_Fields_" params="" file="src/trilateral3/drawing/Fill.hx" private="1" module="trilateral3.drawing.Fill" final="1"><triangulate public="1" set="method" line="11" static="1"><f a="pen:sketch:fillForm">
	<c path="trilateral3.drawing.Pen"/>
	<c path="trilateral3.drawing.Sketch"/>
	<x path="trilateral3.drawing.StyleFill"/>
	<x path="Void"/>
</f></triangulate></class>
	<class path="trilateral3.drawing.Pen" params="" file="src/trilateral3/drawing/Pen.hx">
		<rounded public="1" expr="30">
			<x path="Float"/>
			<meta><m n=":value"><e>30</e></m></meta>
		</rounded>
		<dz public="1" expr="0.01">
			<x path="Float"/>
			<meta><m n=":value"><e>0.01</e></m></meta>
		</dz>
		<currentColor public="1" expr="0xFACADE">
			<x path="Int"/>
			<meta><m n=":value"><e>0xFACADE</e></m></meta>
		</currentColor>
		<drawType public="1"><x path="trilateral3.drawing.DrawAbstract"/></drawType>
		<colorType public="1"><x path="trilateral3.drawing.ColorAbstract"/></colorType>
		<translateX public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></translateX>
		<translateY public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></translateY>
		<translateZ public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></translateZ>
		<rotateX public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></rotateX>
		<rotateY public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></rotateY>
		<rotateZ public="1"><f a="">
	<x path="Float"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></rotateZ>
		<indices public="1" expr="[]">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</indices>
		<transformRange public="1" get="inline" set="null" line="33"><f a="trans:ir">
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></transformRange>
		<up public="1" get="inline" set="null" line="37"><f a="ir">
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></up>
		<down public="1" get="inline" set="null" line="42"><f a="ir">
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></down>
		<back public="1" get="inline" set="null" line="47"><f a="ir">
	<x path="trilateral3.shape.IndexRange"/>
	<x path="Void"/>
</f></back>
		<transBack get="inline" set="null" line="51"><f a=""><c path="trilateral3.matrix.MatrixDozen"/></f></transBack>
		<cornerColor public="1" get="inline" set="null" line="81">
			<f a="?color" v="-1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color : -1 }</e></m></meta>
		</cornerColor>
		<cornerColors public="1" get="inline" set="null" line="86"><f a="colorA:colorB:colorC">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
		<middleColor public="1" get="inline" set="null" line="90"><f a="color:colorCentre">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></middleColor>
		<middleColors public="1" get="inline" set="null" line="94"><f a="color:colorCentre:times">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></middleColors>
		<colorTriangles public="1" get="inline" set="null" line="100"><f a="color:times">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
		<addTriangle public="1" get="inline" set="null" line="106"><f a="ax:ay:az:bx:by:bz:cx:cy:cz">
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="cpp.Float32"/>
	<x path="Void"/>
</f></addTriangle>
		<triangle2DFill public="1" get="inline" set="null" line="126">
			<f a="ax:ay:bx:by:cx:cy:?color" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ color : -1 }</e></m></meta>
		</triangle2DFill>
		<pos public="1" get="accessor" set="accessor"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="138"><f a=""><x path="Float"/></f></get_pos>
		<set_pos get="inline" set="null" line="142"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<triangleCurrent public="1" get="accessor" set="null">
			<x path="trilateral3.drawing.TriangleAbstract"/>
			<haxe_doc>* Only optionally available use with care, works with PenNodule.</haxe_doc>
		</triangleCurrent>
		<get_triangleCurrent get="inline" set="null" line="152"><f a=""><x path="trilateral3.drawing.TriangleAbstract"/></f></get_triangleCurrent>
		<color3Current public="1" get="accessor" set="null">
			<x path="trilateral3.drawing.Color3Abstract"/>
			<haxe_doc>* Only possible if using interleave data structure !! use with care.</haxe_doc>
		</color3Current>
		<get_color3Current get="inline" set="null" line="160"><f a=""><x path="trilateral3.drawing.Color3Abstract"/></f></get_color3Current>
		<copyRange public="1" get="inline" set="null" line="164"><f a="otherPen:startEnd:vec">
	<c path="trilateral3.drawing.Pen"/>
	<x path="trilateral3.shape.IndexRange"/>
	<c path="trilateral3.matrix.Vertex"/>
	<x path="trilateral3.shape.IndexRange"/>
</f></copyRange>
		<new public="1" set="method" line="29"><f a="drawType_:colorType_">
	<x path="trilateral3.drawing.DrawAbstract"/>
	<x path="trilateral3.drawing.ColorAbstract"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.drawing.AIColorType" params="" file="src/trilateral3/drawing/Sketch.hx" module="trilateral3.drawing.Sketch">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="trilateral3.drawing._Sketch.AIColorType_Impl_" params="" file="src/trilateral3/drawing/Sketch.hx" private="1" module="trilateral3.drawing.Sketch" extern="1" final="1">
	<GRAY public="1" get="inline" set="null" expr="cast &quot;g&quot;" line="10" static="1">
		<x path="trilateral3.drawing.AIColorType"/>
		<meta>
			<m n=":value"><e>cast "g"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GRAY>
	<CYMK public="1" get="inline" set="null" expr="cast &quot;k&quot;" line="11" static="1">
		<x path="trilateral3.drawing.AIColorType"/>
		<meta>
			<m n=":value"><e>cast "k"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CYMK>
	<RGB public="1" get="inline" set="null" expr="cast &quot;xa&quot;" line="12" static="1">
		<x path="trilateral3.drawing.AIColorType"/>
		<meta>
			<m n=":value"><e>cast "xa"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RGB>
	<EPS_RGB public="1" get="inline" set="null" expr="cast &quot;r&quot;" line="13" static="1">
		<x path="trilateral3.drawing.AIColorType"/>
		<meta>
			<m n=":value"><e>cast "r"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EPS_RGB>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._Sketch.AIColorType_Impl_" params="" file="src/trilateral3/drawing/Sketch.hx" private="1" module="trilateral3.drawing.Sketch" extern="1" final="1">
		<GRAY public="1" get="inline" set="null" expr="cast &quot;g&quot;" line="10" static="1">
			<x path="trilateral3.drawing.AIColorType"/>
			<meta>
				<m n=":value"><e>cast "g"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GRAY>
		<CYMK public="1" get="inline" set="null" expr="cast &quot;k&quot;" line="11" static="1">
			<x path="trilateral3.drawing.AIColorType"/>
			<meta>
				<m n=":value"><e>cast "k"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CYMK>
		<RGB public="1" get="inline" set="null" expr="cast &quot;xa&quot;" line="12" static="1">
			<x path="trilateral3.drawing.AIColorType"/>
			<meta>
				<m n=":value"><e>cast "xa"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RGB>
		<EPS_RGB public="1" get="inline" set="null" expr="cast &quot;r&quot;" line="13" static="1">
			<x path="trilateral3.drawing.AIColorType"/>
			<meta>
				<m n=":value"><e>cast "r"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EPS_RGB>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="trilateral3.drawing.Dim" params="" file="src/trilateral3/drawing/Sketch.hx" module="trilateral3.drawing.Sketch"><a>
	<minY><x path="Float"/></minY>
	<minX><x path="Float"/></minX>
	<maxY><x path="Float"/></maxY>
	<maxX><x path="Float"/></maxX>
</a></typedef>
	<class path="trilateral3.drawing.Sketch" params="" file="src/trilateral3/drawing/Sketch.hx">
		<implements path="justPath.IPathContext"/>
		<create public="1" get="inline" set="null" line="88" static="1">
			<f a="drawType_:colorType_:sketchForm_:?endLine_" v=":::no">
				<x path="trilateral3.drawing.DrawAbstract"/>
				<x path="trilateral3.drawing.ColorAbstract"/>
				<x path="trilateral3.drawing.StyleSketch"/>
				<x path="trilateral3.drawing.StyleEndLine"/>
				<c path="trilateral3.drawing.Sketch"/>
			</f>
			<meta><m n=":value"><e>{ endLine_ : no }</e></m></meta>
		</create>
		<x expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<width public="1" expr="0.01">
			<x path="Float"/>
			<meta><m n=":value"><e>0.01</e></m></meta>
		</width>
		<widthFunction public="1"><f a="::::">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></widthFunction>
		<colourFunction public="1"><f a="::::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colourFunction>
		<tempArr><c path="Array"><x path="Float"/></c></tempArr>
		<contour public="1"><c path="trilateral3.drawing.Contour"/></contour>
		<pen><c path="trilateral3.drawing.Pen"/></pen>
		<endLine><x path="trilateral3.drawing.StyleEndLine"/></endLine>
		<sketchForm><x path="trilateral3.drawing.StyleSketch"/></sketchForm>
		<points public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></points>
		<pointsClock public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></pointsClock>
		<pointsAnti public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></pointsAnti>
		<dim public="1"><c path="Array"><t path="trilateral3.drawing.Dim"/></c></dim>
		<tracerLine get="inline" set="null" line="37"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></tracerLine>
		<fillOnlyLine get="inline" set="null" line="40"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillOnlyLine>
		<baseLine set="method" line="42"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></baseLine>
		<crudeLine get="inline" set="null" line="46"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></crudeLine>
		<roundEndLine get="inline" set="null" line="49"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></roundEndLine>
		<mediumLine get="inline" set="null" line="52"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></mediumLine>
		<mediumOverlapLine get="inline" set="null" line="55"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></mediumOverlapLine>
		<fineLine get="inline" set="null" line="58"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fineLine>
		<fineOverlapLine get="inline" set="null" line="61"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fineOverlapLine>
		<line public="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></line>
		<reset public="1" set="method" line="98"><f a=""><x path="Void"/></f></reset>
		<pointsNoEndOverlap public="1" set="method" line="107"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></pointsNoEndOverlap>
		<pointsRewound public="1" set="method" line="161"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></pointsRewound>
		<initDim get="inline" set="null" line="221"><f a=""><t path="trilateral3.drawing.Dim"/></f></initDim>
		<updateDim get="inline" set="null" line="224"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateDim>
		<moveTo public="1" set="method" line="231"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lastClock public="1" get="inline" set="null" line="248"><f a=""><x path="Void"/></f></lastClock>
		<getEdges public="1" get="inline" set="null" line="258"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></getEdges>
		<lineTo public="1" get="inline" set="null" line="286"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" get="inline" set="null" line="303"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<quadThru public="1" get="inline" set="null" line="312"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadThru>
		<curveTo public="1" get="inline" set="null" line="318"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<plotCoord public="1" get="inline" set="null" line="326">
			<f a="arr:?withMove" v=":true">
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ withMove : true }</e></m></meta>
		</plotCoord>
		<aiColorSet set="method" line="340"><f a="colorType:arr">
	<x path="trilateral3.drawing.AIColorType"/>
	<c path="Array"><c path="String"/></c>
	<x path="trilateral3.color.ColorInt"/>
</f></aiColorSet>
		<getColorType set="method" line="357"><f a="arr">
	<c path="Array"><c path="String"/></c>
	<x path="trilateral3.drawing.AIColorType"/>
</f></getColorType>
		<aiStringPart public="1" get="inline" set="null" line="363">
			<f a="str:x:y:?flipY" v=":::0">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ flipY : 0 }</e></m></meta>
		</aiStringPart>
		<new public="1" set="method" line="65">
			<f a="pen_:sketchForm_:?endLine_" v="::no">
				<c path="trilateral3.drawing.Pen"/>
				<x path="trilateral3.drawing.StyleSketch"/>
				<x path="trilateral3.drawing.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLine_ : no }</e></m></meta>
		</new>
	</class>
	<abstract path="trilateral3.drawing.StyleEndLine" params="" file="src/trilateral3/drawing/StyleEndLine.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="trilateral3.drawing._StyleEndLine.StyleEndLine_Impl_" params="" file="src/trilateral3/drawing/StyleEndLine.hx" private="1" module="trilateral3.drawing.StyleEndLine" extern="1" final="1">
	<no public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="trilateral3.drawing.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</no>
	<begin public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="trilateral3.drawing.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</begin>
	<end public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="trilateral3.drawing.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</end>
	<both public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="trilateral3.drawing.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</both>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._StyleEndLine.StyleEndLine_Impl_" params="" file="src/trilateral3/drawing/StyleEndLine.hx" private="1" module="trilateral3.drawing.StyleEndLine" extern="1" final="1">
		<no public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="trilateral3.drawing.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</no>
		<begin public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="trilateral3.drawing.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</begin>
		<end public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="trilateral3.drawing.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</end>
		<both public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="trilateral3.drawing.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</both>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="trilateral3.drawing.StyleFill" params="" file="src/trilateral3/drawing/StyleFill.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="trilateral3.drawing._StyleFill.StyleFill_Impl_" params="" file="src/trilateral3/drawing/StyleFill.hx" private="1" module="trilateral3.drawing.StyleFill" extern="1" final="1">
	<tess2 public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="trilateral3.drawing.StyleFill"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</tess2>
	<polyK public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="trilateral3.drawing.StyleFill"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</polyK>
	<poly2tri public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="trilateral3.drawing.StyleFill"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</poly2tri>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._StyleFill.StyleFill_Impl_" params="" file="src/trilateral3/drawing/StyleFill.hx" private="1" module="trilateral3.drawing.StyleFill" extern="1" final="1">
		<tess2 public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="trilateral3.drawing.StyleFill"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</tess2>
		<polyK public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="trilateral3.drawing.StyleFill"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</polyK>
		<poly2tri public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="trilateral3.drawing.StyleFill"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</poly2tri>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="trilateral3.drawing.StyleSketch" params="" file="src/trilateral3/drawing/StyleSketch.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="trilateral3.drawing._StyleSketch.StyleSketch_Impl_" params="" file="src/trilateral3/drawing/StyleSketch.hx" private="1" module="trilateral3.drawing.StyleSketch" extern="1" final="1">
	<Tracer public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Tracer>
	<Base public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Base>
	<Crude public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Crude>
	<FillOnly public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FillOnly>
	<Fine public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Fine>
	<FineOverlap public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FineOverlap>
	<Medium public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Medium>
	<MediumOverlap public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MediumOverlap>
	<RoundEnd public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="trilateral3.drawing.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RoundEnd>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._StyleSketch.StyleSketch_Impl_" params="" file="src/trilateral3/drawing/StyleSketch.hx" private="1" module="trilateral3.drawing.StyleSketch" extern="1" final="1">
		<Tracer public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Tracer>
		<Base public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Base>
		<Crude public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Crude>
		<FillOnly public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FillOnly>
		<Fine public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Fine>
		<FineOverlap public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FineOverlap>
		<Medium public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Medium>
		<MediumOverlap public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MediumOverlap>
		<RoundEnd public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="trilateral3.drawing.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RoundEnd>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="trilateral3.drawing.TriangleAbstract" params="" file="src/trilateral3/drawing/TriangleAbstract.hx">
		<from><icast><t path="trilateral3.drawing.TriangleType"/></icast></from>
		<this><t path="trilateral3.drawing.TriangleType"/></this>
		<to><icast><t path="trilateral3.drawing.TriangleType"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.drawing._TriangleAbstract.TriangleAbstract_Impl_" params="" file="src/trilateral3/drawing/TriangleAbstract.hx" private="1" module="trilateral3.drawing.TriangleAbstract" final="1">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="triangleType">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="trilateral3.drawing.TriangleAbstract"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="9" static="1">
		<f a="this">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<back public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</back>
	<get_back get="inline" set="null" line="13" static="1">
		<f a="this">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_back>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="17" static="1">
		<f a="this">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="21" static="1">
		<f a="this">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="24" static="1">
		<f a="this:v">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="28" static="1">
		<f a="this">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="31" static="1">
		<f a="this:v">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</z>
	<get_z get="inline" set="null" line="35" static="1">
		<f a="this">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_z get="inline" set="null" line="38" static="1">
		<f a="this:v">
			<t path="trilateral3.drawing.TriangleType"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
</class></impl>
	</abstract>
	<class path="trilateral3.drawing._TriangleAbstract.TriangleAbstract_Impl_" params="" file="src/trilateral3/drawing/TriangleAbstract.hx" private="1" module="trilateral3.drawing.TriangleAbstract" final="1">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="triangleType">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="trilateral3.drawing.TriangleAbstract"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="9" static="1">
			<f a="this">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<back public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</back>
		<get_back get="inline" set="null" line="13" static="1">
			<f a="this">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_back>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="17" static="1">
			<f a="this">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="21" static="1">
			<f a="this">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="24" static="1">
			<f a="this:v">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="28" static="1">
			<f a="this">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="31" static="1">
			<f a="this:v">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</z>
		<get_z get="inline" set="null" line="35" static="1">
			<f a="this">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_z get="inline" set="null" line="38" static="1">
			<f a="this:v">
				<t path="trilateral3.drawing.TriangleType"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
	</class>
	<typedef path="trilateral3.drawing.TriangleType" params="" file="src/trilateral3/drawing/TriangleType.hx"><a>
	<triangle><f a="ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></triangle>
	<transform><f a="">
	<c path="trilateral3.matrix.MatrixDozen"/>
	<x path="Void"/>
</f></transform>
	<set_z set="method"><f a="z">
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
	<set_y set="method"><f a="y">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<set_x set="method"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<rotateTrig><f a="x:y:cos:sin">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
	<rotate><f a="x:y:theta">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<moveDelta><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
	<liteHit><f a="px:py">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
	<get_z set="method"><f a=""><x path="Float"/></f></get_z>
	<get_y set="method"><f a=""><x path="Float"/></f></get_y>
	<get_x set="method"><f a=""><x path="Float"/></f></get_x>
	<get_right set="method"><f a=""><x path="Float"/></f></get_right>
	<get_bottom set="method"><f a=""><x path="Float"/></f></get_bottom>
	<get_back set="method"><f a=""><x path="Float"/></f></get_back>
	<getTriangle3D><f a=""><c path="trilateral3.structure.Triangle3D"/></f></getTriangle3D>
	<fullHit><f a="px:py">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
</a></typedef>
	<abstract path="trilateral3.geom.FlatColorTriangles" params="" file="src/trilateral3/geom/FlatColorTriangles.hx">
		<this><x path="dsHelper.flatInterleave.FloatColorTriangles"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_" params="" file="src/trilateral3/geom/FlatColorTriangles.hx" private="1" module="trilateral3.geom.FlatColorTriangles" final="1">
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="trilateral3.geom.FlatColorTriangles"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<transform public="1" set="method" line="16" static="1">
		<f a="this:m">
			<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
			<c path="trilateral3.matrix.MatrixDozen"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transform>
	<transformAll public="1" set="method" line="34" static="1">
		<f a="this:m">
			<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
			<c path="trilateral3.matrix.MatrixDozen"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transformAll>
	<transformRange public="1" set="method" line="42" static="1">
		<f a="this:m:startEnd">
			<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
			<c path="trilateral3.matrix.MatrixDozen"/>
			<x path="trilateral3.shape.IndexRange"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transformRange>
	<getTriangle3D public="1" get="inline" set="null" line="53" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
			<c path="trilateral3.structure.Triangle3D"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getTriangle3D>
	<getTriInt public="1" get="inline" set="null" line="60" static="1">
		<f a="this">
			<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
			<c path="trilateral3.structure.TriInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getTriInt>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.geom._FlatColorTriangles.FlatColorTriangles_Impl_" params="" file="src/trilateral3/geom/FlatColorTriangles.hx" private="1" module="trilateral3.geom.FlatColorTriangles" final="1">
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="trilateral3.geom.FlatColorTriangles"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<transform public="1" set="method" line="16" static="1">
			<f a="this:m">
				<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
				<c path="trilateral3.matrix.MatrixDozen"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transform>
		<transformAll public="1" set="method" line="34" static="1">
			<f a="this:m">
				<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
				<c path="trilateral3.matrix.MatrixDozen"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transformAll>
		<transformRange public="1" set="method" line="42" static="1">
			<f a="this:m:startEnd">
				<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
				<c path="trilateral3.matrix.MatrixDozen"/>
				<x path="trilateral3.shape.IndexRange"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transformRange>
		<getTriangle3D public="1" get="inline" set="null" line="53" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
				<c path="trilateral3.structure.Triangle3D"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getTriangle3D>
		<getTriInt public="1" get="inline" set="null" line="60" static="1">
			<f a="this">
				<x path="dsHelper.flatInterleave.FloatColorTriangles"/>
				<c path="trilateral3.structure.TriInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getTriInt>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.geom.FlatColors" params="" file="src/trilateral3/geom/FlatColors.hx">
		<this><x path="dsHelper.flat.f32.Float32FlatRGBA"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.geom._FlatColors.FlatColors_Impl_" params="" file="src/trilateral3/geom/FlatColors.hx" private="1" module="trilateral3.geom.FlatColors" final="1">
	<_new public="1" get="inline" set="null" line="12" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="trilateral3.geom.FlatColors"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<getTriInt public="1" get="inline" set="null" line="15" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32FlatRGBA"/>
			<c path="trilateral3.structure.TriInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getTriInt>
</class></impl>
	</abstract>
	<class path="trilateral3.geom._FlatColors.FlatColors_Impl_" params="" file="src/trilateral3/geom/FlatColors.hx" private="1" module="trilateral3.geom.FlatColors" final="1">
		<_new public="1" get="inline" set="null" line="12" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="trilateral3.geom.FlatColors"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<getTriInt public="1" get="inline" set="null" line="15" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32FlatRGBA"/>
				<c path="trilateral3.structure.TriInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getTriInt>
	</class>
	<abstract path="trilateral3.geom.FlatTriangles" params="" file="src/trilateral3/geom/FlatTriangles.hx">
		<this><x path="dsHelper.flat.f32.Float32FlatTriangle"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.geom._FlatTriangles.FlatTriangles_Impl_" params="" file="src/trilateral3/geom/FlatTriangles.hx" private="1" module="trilateral3.geom.FlatTriangles" final="1">
	<_new public="1" get="inline" set="null" line="11" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="trilateral3.geom.FlatTriangles"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<transform public="1" set="method" line="14" static="1">
		<f a="this:m">
			<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
			<c path="trilateral3.matrix.MatrixDozen"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transform>
	<transformAll public="1" set="method" line="32" static="1">
		<f a="this:m">
			<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
			<c path="trilateral3.matrix.MatrixDozen"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transformAll>
	<transformRange public="1" set="method" line="40" static="1">
		<f a="this:m:startEnd">
			<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
			<c path="trilateral3.matrix.MatrixDozen"/>
			<x path="trilateral3.shape.IndexRange"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transformRange>
	<getTriangle3D public="1" get="inline" set="null" line="51" static="1">
		<f a="this">
			<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
			<c path="trilateral3.structure.Triangle3D"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getTriangle3D>
</class></impl>
	</abstract>
	<class path="trilateral3.geom._FlatTriangles.FlatTriangles_Impl_" params="" file="src/trilateral3/geom/FlatTriangles.hx" private="1" module="trilateral3.geom.FlatTriangles" final="1">
		<_new public="1" get="inline" set="null" line="11" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="trilateral3.geom.FlatTriangles"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<transform public="1" set="method" line="14" static="1">
			<f a="this:m">
				<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
				<c path="trilateral3.matrix.MatrixDozen"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transform>
		<transformAll public="1" set="method" line="32" static="1">
			<f a="this:m">
				<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
				<c path="trilateral3.matrix.MatrixDozen"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transformAll>
		<transformRange public="1" set="method" line="40" static="1">
			<f a="this:m:startEnd">
				<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
				<c path="trilateral3.matrix.MatrixDozen"/>
				<x path="trilateral3.shape.IndexRange"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transformRange>
		<getTriangle3D public="1" get="inline" set="null" line="51" static="1">
			<f a="this">
				<x path="dsHelper.flat.f32.Float32FlatTriangle"/>
				<c path="trilateral3.structure.Triangle3D"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getTriangle3D>
	</class>
	<class path="trilateral3.geom._Transformer.Transformer_Fields_" params="" file="src/trilateral3/geom/Transformer.hx" private="1" module="trilateral3.geom.Transformer" final="1">
		<multiplyTransform public="1" get="inline" set="null" line="5" static="1"><f a="r:s">
	<c path="trilateral3.matrix.MatrixDozen"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
</f></multiplyTransform>
		<transformVertex public="1" get="inline" set="null" line="16" static="1"><f a="v:t">
	<c path="trilateral3.matrix.Vertex"/>
	<c path="trilateral3.matrix.MatrixDozen"/>
	<c path="trilateral3.matrix.Vertex"/>
</f></transformVertex>
		<unitTransform public="1" get="inline" set="null" line="24" static="1"><f a=""><c path="trilateral3.matrix.MatrixDozen"/></f></unitTransform>
	</class>
	<class path="trilateral3.math.Algebra" params="" file="src/trilateral3/math/Algebra.hx">
		<adjustWinding_ public="1" expr="adjustWinding">
			<f a="A_:B_:C_">
				<c path="trilateral3.structure.XY"/>
				<c path="trilateral3.structure.XY"/>
				<c path="trilateral3.structure.XY"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>adjustWinding</e></m></meta>
		</adjustWinding_>
		<minusXY_ public="1" expr="minusXY">
			<f a="a:b">
				<c path="trilateral3.structure.XY"/>
				<c path="trilateral3.structure.XY"/>
				<c path="trilateral3.structure.XY"/>
			</f>
			<meta><m n=":value"><e>minusXY</e></m></meta>
		</minusXY_>
		<sign_ public="1" expr="sign">
			<f a="n">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>sign</e></m></meta>
		</sign_>
		<quadCurve_ public="1" expr="quadCurve">
			<f a="p:ax:ay:bx:by:cx:cy">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>quadCurve</e></m></meta>
		</quadCurve_>
		<cubicCurve_ public="1" expr="cubicCurve">
			<f a="p:ax:ay:bx:by:cx:cy:dx:dy">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>cubicCurve</e></m></meta>
		</cubicCurve_>
		<calculateQuadStep_ public="1" expr="calculateQuadStep">
			<f a="ax:ay:bx:by:cx:cy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>calculateQuadStep</e></m></meta>
		</calculateQuadStep_>
		<calculateCubicStep_ public="1" expr="calculateCubicStep">
			<f a="ax:ay:bx:by:cx:cy:dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>calculateCubicStep</e></m></meta>
		</calculateCubicStep_>
		<lineAB_ public="1" expr="lineAB">
			<f a="A:B:width">
				<c path="trilateral3.structure.XY"/>
				<c path="trilateral3.structure.XY"/>
				<x path="Float"/>
				<c path="trilateral3.structure.Quad2D"/>
			</f>
			<meta><m n=":value"><e>lineAB</e></m></meta>
		</lineAB_>
		<lineABCoord_ public="1" expr="lineABCoord">
			<f a="ax:ay:bx:by:width">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="trilateral3.structure.Quad2D"/>
			</f>
			<meta><m n=":value"><e>lineABCoord</e></m></meta>
		</lineABCoord_>
		<rotateVectorLine_ public="1" expr="rotateVectorLine">
			<f a="pos:dim:omega:pivotX:pivotY">
				<c path="trilateral3.structure.XY"/>
				<c path="trilateral3.structure.XY"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="trilateral3.structure.Quad2D"/>
			</f>
			<meta><m n=":value"><e>rotateVectorLine</e></m></meta>
		</rotateVectorLine_>
		<pivotCheap_ public="1" expr="pivotCheap">
			<f a="p:sin:cos:pivotX:pivotY">
				<c path="trilateral3.structure.XY"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="trilateral3.structure.XY"/>
			</f>
			<meta><m n=":value"><e>pivotCheap</e></m></meta>
		</pivotCheap_>
		<pivot_ public="1" expr="pivot">
			<f a="p:omega:pivotX:pivotY">
				<c path="trilateral3.structure.XY"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="trilateral3.structure.XY"/>
			</f>
			<meta><m n=":value"><e>pivot</e></m></meta>
		</pivot_>
		<thetaCheap_ public="1" expr="thetaCheap">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>thetaCheap</e></m></meta>
		</thetaCheap_>
		<distCheap_ public="1" expr="distCheap">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>distCheap</e></m></meta>
		</distCheap_>
		<distance_ public="1" expr="distance">
			<f a="px:py:qx:qy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>distance</e></m></meta>
		</distance_>
		<quadraticThru_ public="1" expr="quadraticThru">
			<f a="t:s:c:e">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>quadraticThru</e></m></meta>
		</quadraticThru_>
		<quadratic_ public="1" expr="quadratic">
			<f a="t:s:c:e">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>quadratic</e></m></meta>
		</quadratic_>
		<quadSegment_ public="1" expr="quadSegment">
			<f a="t0:t1:s:c:e">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>quadSegment</e></m></meta>
		</quadSegment_>
		<cubic_ public="1" expr="cubic">
			<f a="t:s:c1:c2:e">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>cubic</e></m></meta>
		</cubic_>
		<perp_ public="1" expr="perp">
			<f a="a:b">
				<c path="trilateral3.structure.XY"/>
				<c path="trilateral3.structure.XY"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>perp</e></m></meta>
		</perp_>
		<new public="1" set="method" line="168">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="trilateral3.math._Algebra.Algebra_Fields_" params="" file="src/trilateral3/math/Algebra.hx" private="1" module="trilateral3.math.Algebra" final="1">
		<adjustWinding public="1" get="inline" set="null" line="7" static="1"><f a="A_:B_:C_">
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<x path="Bool"/>
</f></adjustWinding>
		<minusXY public="1" get="inline" set="null" line="14" static="1"><f a="a:b">
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
</f></minusXY>
		<sign public="1" get="inline" set="null" line="19" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<quadStep public="1" expr="0.03" line="22" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.03</e></m></meta>
		</quadStep>
		<quadCurve public="1" get="inline" set="null" line="25" static="1"><f a="p:ax:ay:bx:by:cx:cy">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
</f></quadCurve>
		<cubicStep public="1" get="inline" set="null" expr="0.03" line="41" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.03</e></m></meta>
		</cubicStep>
		<cubicCurve public="1" get="inline" set="null" line="44" static="1"><f a="p:ax:ay:bx:by:cx:cy:dx:dy">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
</f></cubicCurve>
		<calculateQuadStep public="1" get="inline" set="null" line="60" static="1"><f a="ax:ay:bx:by:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculateQuadStep>
		<calculateCubicStep public="1" get="inline" set="null" line="66" static="1"><f a="ax:ay:bx:by:cx:cy:dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculateCubicStep>
		<lineAB public="1" get="inline" set="null" line="73" static="1"><f a="A:B:width">
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<x path="Float"/>
	<c path="trilateral3.structure.Quad2D"/>
</f></lineAB>
		<lineABCoord public="1" get="inline" set="null" line="83" static="1"><f a="ax:ay:bx:by:width">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="trilateral3.structure.Quad2D"/>
</f></lineABCoord>
		<rotateVectorLine public="1" get="inline" set="null" line="92" static="1"><f a="pos:dim:omega:pivotX:pivotY">
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="trilateral3.structure.Quad2D"/>
</f></rotateVectorLine>
		<pivotCheap public="1" get="inline" set="null" line="114" static="1"><f a="p:sin:cos:pivotX:pivotY">
	<c path="trilateral3.structure.XY"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="trilateral3.structure.XY"/>
</f></pivotCheap>
		<pivot public="1" get="inline" set="null" line="122" static="1"><f a="p:omega:pivotX:pivotY">
	<c path="trilateral3.structure.XY"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="trilateral3.structure.XY"/>
</f></pivot>
		<thetaCheap public="1" get="inline" set="null" line="130" static="1"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaCheap>
		<distCheap public="1" get="inline" set="null" line="134" static="1"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distCheap>
		<distance public="1" get="inline" set="null" line="138" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distance>
		<quadraticThru public="1" get="inline" set="null" line="144" static="1"><f a="t:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadraticThru>
		<quadratic public="1" get="inline" set="null" line="149" static="1"><f a="t:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadratic>
		<quadSegment public="1" get="inline" set="null" line="154" static="1"><f a="t0:t1:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadSegment>
		<cubic public="1" get="inline" set="null" line="159" static="1"><f a="t:s:c1:c2:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cubic>
		<perp public="1" get="inline" set="null" line="164" static="1"><f a="a:b">
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<x path="Float"/>
</f></perp>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="trilateral3.matrix.MatrixDozen" params="" file="src/trilateral3/matrix/MatrixDozen.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<d public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</d>
		<e public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</e>
		<f public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</f>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<h public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</h>
		<i public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</i>
		<j public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</j>
		<k public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</k>
		<l public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</l>
		<values public="1" set="method" line="20"><f a=""><c path="String"/></f></values>
		<new set="method" line="12"><f a="a:b:c:d:e:f:g:h:i:j:k:l">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.matrix.Vertex" params="" file="src/trilateral3/matrix/Vertex.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<z public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</z>
		<w public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</w>
		<values public="1" set="method" line="23"><f a=""><c path="String"/></f></values>
		<new set="method" line="16">
			<f a="x:y:z:?w" v=":::1.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1. }</e></m></meta>
		</new>
		<haxe_doc>{ x, y, z, w }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.nodule.PenNodule" params="" file="src/trilateral3/nodule/PenNodule.hx">
		<largeEnough final="1" set="null" expr="20000000" line="12" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>20000000</e></m></meta>
		</largeEnough>
		<colorTriangles public="1" expr="new FlatColorTriangles(largeEnough)">
			<x path="trilateral3.geom.FlatColorTriangles"/>
			<meta><m n=":value"><e>new FlatColorTriangles(largeEnough)</e></m></meta>
		</colorTriangles>
		<pen public="1"><c path="trilateral3.drawing.Pen"/></pen>
		<createPen public="1" set="method" line="25"><f a=""><x path="Void"/></f></createPen>
		<data public="1" get="accessor" set="null"><t path="dsHelper.haxe.io.Float32Array"/></data>
		<get_data public="1" get="inline" set="null" line="85"><f a=""><t path="dsHelper.haxe.io.Float32Array"/></f></get_data>
		<size public="1" get="accessor" set="null"><x path="Int"/></size>
		<get_size public="1" get="inline" set="null" line="90"><f a=""><x path="Int"/></f></get_size>
		<new public="1" set="method" line="15">
			<f a="?useGLScale" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useGLScale : true }</e></m></meta>
		</new>
	</class>
	<abstract path="trilateral3.shape.IndexRange" params="" file="src/trilateral3/shape/IndexRange.hx">
		<from><icast><c path="trilateral3.structure.StartEnd"/></icast></from>
		<this><c path="trilateral3.structure.StartEnd"/></this>
		<to><icast><c path="trilateral3.structure.StartEnd"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.shape._IndexRange.IndexRange_Impl_" params="" file="src/trilateral3/shape/IndexRange.hx" private="1" module="trilateral3.shape.IndexRange" final="1">
	<_new public="1" set="method" line="5" static="1">
		<f a="startEnd">
			<c path="trilateral3.structure.StartEnd"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<adding public="1" get="inline" set="null" line="6" static="1">
		<f a="a:b">
			<x path="trilateral3.shape.IndexRange"/>
			<x path="trilateral3.shape.IndexRange"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</adding>
	<add public="1" get="inline" set="null" line="10" static="1">
		<f a="this:b">
			<c path="trilateral3.structure.StartEnd"/>
			<c path="trilateral3.structure.StartEnd"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</add>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="18" static="1">
		<f a="this">
			<c path="trilateral3.structure.StartEnd"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.shape._IndexRange.IndexRange_Impl_" params="" file="src/trilateral3/shape/IndexRange.hx" private="1" module="trilateral3.shape.IndexRange" final="1">
		<_new public="1" set="method" line="5" static="1">
			<f a="startEnd">
				<c path="trilateral3.structure.StartEnd"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<adding public="1" get="inline" set="null" line="6" static="1">
			<f a="a:b">
				<x path="trilateral3.shape.IndexRange"/>
				<x path="trilateral3.shape.IndexRange"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</adding>
		<add public="1" get="inline" set="null" line="10" static="1">
			<f a="this:b">
				<c path="trilateral3.structure.StartEnd"/>
				<c path="trilateral3.structure.StartEnd"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</add>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="18" static="1">
			<f a="this">
				<c path="trilateral3.structure.StartEnd"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.shape.PolyEdge" params="" file="src/trilateral3/shape/PolyEdge.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="trilateral3.shape._PolyEdge.PolyEdge_Impl_" params="" file="src/trilateral3/shape/PolyEdge.hx" private="1" module="trilateral3.shape.PolyEdge" extern="1" final="1">
	<triangle public="1" get="inline" set="null" expr="cast 3" line="3" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</triangle>
	<quadrilateral public="1" get="inline" set="null" expr="cast 4" line="4" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</quadrilateral>
	<tetragon public="1" get="inline" set="null" expr="cast 4" line="6" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</tetragon>
	<pentagon public="1" get="inline" set="null" expr="cast 5" line="7" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</pentagon>
	<hexagon public="1" get="inline" set="null" expr="cast 6" line="8" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</hexagon>
	<heptagon public="1" get="inline" set="null" expr="cast 7" line="9" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</heptagon>
	<septagon public="1" get="inline" set="null" expr="cast 7" line="10" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</septagon>
	<octagon public="1" get="inline" set="null" expr="cast 8" line="11" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</octagon>
	<nonagon public="1" get="inline" set="null" expr="cast 9" line="12" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</nonagon>
	<enneagon public="1" get="inline" set="null" expr="cast 9" line="13" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</enneagon>
	<decagon public="1" get="inline" set="null" expr="cast 10" line="14" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</decagon>
	<hendecagon public="1" get="inline" set="null" expr="cast 11" line="15" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</hendecagon>
	<undecagon public="1" get="inline" set="null" expr="cast 11" line="16" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</undecagon>
	<dodecagon public="1" get="inline" set="null" expr="cast 12" line="17" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</dodecagon>
	<dozen public="1" get="inline" set="null" expr="cast 12" line="18" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</dozen>
	<triskaidecagon public="1" get="inline" set="null" expr="cast 13" line="19" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</triskaidecagon>
	<tetrakaidecagon public="1" get="inline" set="null" expr="cast 14" line="20" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</tetrakaidecagon>
	<pentadecagon public="1" get="inline" set="null" expr="cast 15" line="21" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 15</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</pentadecagon>
	<hexakaidecagon public="1" get="inline" set="null" expr="cast 16" line="22" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</hexakaidecagon>
	<heptadecagon public="1" get="inline" set="null" expr="cast 17" line="23" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 17</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</heptadecagon>
	<octakaidecagon public="1" get="inline" set="null" expr="cast 18" line="24" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 18</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</octakaidecagon>
	<enneadecagon public="1" get="inline" set="null" expr="cast 19" line="25" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 19</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</enneadecagon>
	<icosagon public="1" get="inline" set="null" expr="cast 20" line="26" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 20</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</icosagon>
	<triacontagon public="1" get="inline" set="null" expr="cast 30" line="27" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 30</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</triacontagon>
	<tetracontagon public="1" get="inline" set="null" expr="cast 40" line="28" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 40</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</tetracontagon>
	<pentacontagon public="1" get="inline" set="null" expr="cast 50" line="29" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 50</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</pentacontagon>
	<hexacontagon public="1" get="inline" set="null" expr="cast 60" line="30" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 60</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</hexacontagon>
	<heptacontagon public="1" get="inline" set="null" expr="cast 70" line="31" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 70</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</heptacontagon>
	<octacontagon public="1" get="inline" set="null" expr="cast 80" line="32" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 80</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</octacontagon>
	<enneacontagon public="1" get="inline" set="null" expr="cast 90" line="33" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 90</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</enneacontagon>
	<hectagon public="1" get="inline" set="null" expr="cast 100" line="34" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 100</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</hectagon>
	<chiliagon public="1" get="inline" set="null" expr="cast 1000" line="35" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 1000</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</chiliagon>
	<myriagon public="1" get="inline" set="null" expr="cast 10000" line="36" static="1">
		<x path="trilateral3.shape.PolyEdge"/>
		<meta>
			<m n=":value"><e>cast 10000</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</myriagon>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.shape._PolyEdge.PolyEdge_Impl_" params="" file="src/trilateral3/shape/PolyEdge.hx" private="1" module="trilateral3.shape.PolyEdge" extern="1" final="1">
		<triangle public="1" get="inline" set="null" expr="cast 3" line="3" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</triangle>
		<quadrilateral public="1" get="inline" set="null" expr="cast 4" line="4" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</quadrilateral>
		<tetragon public="1" get="inline" set="null" expr="cast 4" line="6" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</tetragon>
		<pentagon public="1" get="inline" set="null" expr="cast 5" line="7" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</pentagon>
		<hexagon public="1" get="inline" set="null" expr="cast 6" line="8" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</hexagon>
		<heptagon public="1" get="inline" set="null" expr="cast 7" line="9" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</heptagon>
		<septagon public="1" get="inline" set="null" expr="cast 7" line="10" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</septagon>
		<octagon public="1" get="inline" set="null" expr="cast 8" line="11" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</octagon>
		<nonagon public="1" get="inline" set="null" expr="cast 9" line="12" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</nonagon>
		<enneagon public="1" get="inline" set="null" expr="cast 9" line="13" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</enneagon>
		<decagon public="1" get="inline" set="null" expr="cast 10" line="14" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</decagon>
		<hendecagon public="1" get="inline" set="null" expr="cast 11" line="15" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</hendecagon>
		<undecagon public="1" get="inline" set="null" expr="cast 11" line="16" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</undecagon>
		<dodecagon public="1" get="inline" set="null" expr="cast 12" line="17" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</dodecagon>
		<dozen public="1" get="inline" set="null" expr="cast 12" line="18" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</dozen>
		<triskaidecagon public="1" get="inline" set="null" expr="cast 13" line="19" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</triskaidecagon>
		<tetrakaidecagon public="1" get="inline" set="null" expr="cast 14" line="20" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</tetrakaidecagon>
		<pentadecagon public="1" get="inline" set="null" expr="cast 15" line="21" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 15</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</pentadecagon>
		<hexakaidecagon public="1" get="inline" set="null" expr="cast 16" line="22" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</hexakaidecagon>
		<heptadecagon public="1" get="inline" set="null" expr="cast 17" line="23" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 17</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</heptadecagon>
		<octakaidecagon public="1" get="inline" set="null" expr="cast 18" line="24" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 18</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</octakaidecagon>
		<enneadecagon public="1" get="inline" set="null" expr="cast 19" line="25" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 19</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</enneadecagon>
		<icosagon public="1" get="inline" set="null" expr="cast 20" line="26" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 20</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</icosagon>
		<triacontagon public="1" get="inline" set="null" expr="cast 30" line="27" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 30</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</triacontagon>
		<tetracontagon public="1" get="inline" set="null" expr="cast 40" line="28" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 40</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</tetracontagon>
		<pentacontagon public="1" get="inline" set="null" expr="cast 50" line="29" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 50</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</pentacontagon>
		<hexacontagon public="1" get="inline" set="null" expr="cast 60" line="30" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 60</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</hexacontagon>
		<heptacontagon public="1" get="inline" set="null" expr="cast 70" line="31" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 70</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</heptacontagon>
		<octacontagon public="1" get="inline" set="null" expr="cast 80" line="32" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 80</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</octacontagon>
		<enneacontagon public="1" get="inline" set="null" expr="cast 90" line="33" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 90</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</enneacontagon>
		<hectagon public="1" get="inline" set="null" expr="cast 100" line="34" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 100</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</hectagon>
		<chiliagon public="1" get="inline" set="null" expr="cast 1000" line="35" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 1000</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</chiliagon>
		<myriagon public="1" get="inline" set="null" expr="cast 10000" line="36" static="1">
			<x path="trilateral3.shape.PolyEdge"/>
			<meta>
				<m n=":value"><e>cast 10000</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</myriagon>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="trilateral3.shape.Regular" params="" file="src/trilateral3/shape/Regular.hx">
		<from><icast><c path="trilateral3.drawing.Pen"/></icast></from>
		<this><c path="trilateral3.drawing.Pen"/></this>
		<to><icast><c path="trilateral3.drawing.Pen"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.shape._Regular.Regular_Impl_" params="" file="src/trilateral3/shape/Regular.hx" private="1" module="trilateral3.shape.Regular" final="1">
	<_new public="1" set="method" line="7" static="1">
		<f a="pen_">
			<c path="trilateral3.drawing.Pen"/>
			<x path="trilateral3.shape.Regular"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<addRegular public="1" get="inline" set="null" line="10" static="1">
		<f a="this:rs:style">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.StyleRegular"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</addRegular>
	<triangle public="1" get="inline" set="null" line="32" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</triangle>
	<triangle2 public="1" get="inline" set="null" line="36" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</triangle2>
	<square public="1" get="inline" set="null" line="43" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</square>
	<square2 public="1" get="inline" set="null" line="47" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</square2>
	<bar public="1" get="inline" set="null" line="54" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</bar>
	<colorTrianglesPos public="1" get="inline" set="null" line="64" static="1">
		<f a="this:start:col:len">
			<c path="trilateral3.drawing.Pen"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorTrianglesPos>
	<bar2 public="1" get="inline" set="null" line="69" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</bar2>
	<pentagon public="1" get="inline" set="null" line="76" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</pentagon>
	<pentagon2 public="1" get="inline" set="null" line="80" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</pentagon2>
	<hexagon public="1" get="inline" set="null" line="87" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexagon>
	<hexagon2 public="1" get="inline" set="null" line="91" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexagon2>
	<circle public="1" get="inline" set="null" line="98" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</circle>
	<circle2 public="1" get="inline" set="null" line="102" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</circle2>
	<circleRadial public="1" get="inline" set="null" line="109" static="1">
		<f a="this:rs:colorCentre:rx:ry">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</circleRadial>
	<circleRadial2 public="1" get="inline" set="null" line="113" static="1">
		<f a="this:rs:colorCentre:rx:ry">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</circleRadial2>
	<roundedSquare public="1" get="inline" set="null" line="120" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</roundedSquare>
	<roundedSquare2 public="1" get="inline" set="null" line="129" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</roundedSquare2>
	<star public="1" get="inline" set="null" line="136" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</star>
	<star2 public="1" get="inline" set="null" line="145" static="1">
		<f a="this:rs">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</star2>
	<polygon public="1" get="inline" set="null" line="152" static="1">
		<f a="this:rs:?sides" v="::36">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Int"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ sides : 36 }</e></m>
			<m n=":impl"/>
		</meta>
	</polygon>
	<polygonRadial public="1" get="inline" set="null" line="161" static="1">
		<f a="this:rs:colorCentre:rx:ry:?sides" v=":::::36">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ sides : 36 }</e></m>
			<m n=":impl"/>
		</meta>
	</polygonRadial>
	<circleMultiCorners public="1" get="inline" set="null" line="170" static="1">
		<f a="this:rs:arr:?rx:?ry" v=":::0:0">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<c path="Array"><x path="Int"/></c>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ ry : 0, rx : 0 }</e></m>
			<m n=":impl"/>
		</meta>
	</circleMultiCorners>
	<polygonMultiCorners public="1" get="inline" set="null" line="174" static="1">
		<f a="this:rs:arr:?rx:?ry:?sides" v=":::0:0:36">
			<c path="trilateral3.drawing.Pen"/>
			<c path="trilateral3.structure.RegularShape"/>
			<c path="Array"><x path="Int"/></c>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ sides : 36, ry : 0, rx : 0 }</e></m>
			<m n=":impl"/>
		</meta>
	</polygonMultiCorners>
</class></impl>
	</abstract>
	<class path="trilateral3.shape._Regular.Regular_Impl_" params="" file="src/trilateral3/shape/Regular.hx" private="1" module="trilateral3.shape.Regular" final="1">
		<_new public="1" set="method" line="7" static="1">
			<f a="pen_">
				<c path="trilateral3.drawing.Pen"/>
				<x path="trilateral3.shape.Regular"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<addRegular public="1" get="inline" set="null" line="10" static="1">
			<f a="this:rs:style">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.StyleRegular"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</addRegular>
		<triangle public="1" get="inline" set="null" line="32" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</triangle>
		<triangle2 public="1" get="inline" set="null" line="36" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</triangle2>
		<square public="1" get="inline" set="null" line="43" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</square>
		<square2 public="1" get="inline" set="null" line="47" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</square2>
		<bar public="1" get="inline" set="null" line="54" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</bar>
		<colorTrianglesPos public="1" get="inline" set="null" line="64" static="1">
			<f a="this:start:col:len">
				<c path="trilateral3.drawing.Pen"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorTrianglesPos>
		<bar2 public="1" get="inline" set="null" line="69" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</bar2>
		<pentagon public="1" get="inline" set="null" line="76" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</pentagon>
		<pentagon2 public="1" get="inline" set="null" line="80" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</pentagon2>
		<hexagon public="1" get="inline" set="null" line="87" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexagon>
		<hexagon2 public="1" get="inline" set="null" line="91" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexagon2>
		<circle public="1" get="inline" set="null" line="98" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</circle>
		<circle2 public="1" get="inline" set="null" line="102" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</circle2>
		<circleRadial public="1" get="inline" set="null" line="109" static="1">
			<f a="this:rs:colorCentre:rx:ry">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</circleRadial>
		<circleRadial2 public="1" get="inline" set="null" line="113" static="1">
			<f a="this:rs:colorCentre:rx:ry">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</circleRadial2>
		<roundedSquare public="1" get="inline" set="null" line="120" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</roundedSquare>
		<roundedSquare2 public="1" get="inline" set="null" line="129" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</roundedSquare2>
		<star public="1" get="inline" set="null" line="136" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</star>
		<star2 public="1" get="inline" set="null" line="145" static="1">
			<f a="this:rs">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</star2>
		<polygon public="1" get="inline" set="null" line="152" static="1">
			<f a="this:rs:?sides" v="::36">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Int"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ sides : 36 }</e></m>
				<m n=":impl"/>
			</meta>
		</polygon>
		<polygonRadial public="1" get="inline" set="null" line="161" static="1">
			<f a="this:rs:colorCentre:rx:ry:?sides" v=":::::36">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ sides : 36 }</e></m>
				<m n=":impl"/>
			</meta>
		</polygonRadial>
		<circleMultiCorners public="1" get="inline" set="null" line="170" static="1">
			<f a="this:rs:arr:?rx:?ry" v=":::0:0">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ ry : 0, rx : 0 }</e></m>
				<m n=":impl"/>
			</meta>
		</circleMultiCorners>
		<polygonMultiCorners public="1" get="inline" set="null" line="174" static="1">
			<f a="this:rs:arr:?rx:?ry:?sides" v=":::0:0:36">
				<c path="trilateral3.drawing.Pen"/>
				<c path="trilateral3.structure.RegularShape"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ sides : 36, ry : 0, rx : 0 }</e></m>
				<m n=":impl"/>
			</meta>
		</polygonMultiCorners>
	</class>
	<class path="trilateral3.shape.Shaper" params="" file="src/trilateral3/shape/Shaper.hx">
		<add2DTriangle_ public="1" expr="add2DTriangle">
			<f a="drawType:ax:ay:bx:by:cx:cy">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>add2DTriangle</e></m></meta>
		</add2DTriangle_>
		<add2DQuad_ public="1" expr="add2DQuad">
			<f a="drawType:ax:ay:bx:by:cx:cy:dx:dy">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>add2DQuad</e></m></meta>
		</add2DQuad_>
		<quad_ public="1" expr="quad">
			<f a="drawType:q">
				<t path="trilateral3.drawing.DrawType"/>
				<c path="trilateral3.structure.Quad2D"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>quad</e></m></meta>
		</quad_>
		<lineAB_ public="1" expr="lineAB">
			<f a="drawType:A:B:width">
				<t path="trilateral3.drawing.DrawType"/>
				<c path="trilateral3.structure.XY"/>
				<c path="trilateral3.structure.XY"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>lineAB</e></m></meta>
		</lineAB_>
		<lineXY_ public="1" expr="lineXY">
			<f a="drawType:ax:ay:bx:by:width">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>lineXY</e></m></meta>
		</lineXY_>
		<rectangle_ public="1" expr="rectangle">
			<f a="drawType:x:y:w:h">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>rectangle</e></m></meta>
		</rectangle_>
		<squareOutline_ public="1" expr="squareOutline">
			<f a="drawType:px:py:radius:thick:?theta">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>squareOutline</e></m></meta>
		</squareOutline_>
		<square_ public="1" expr="square">
			<f a="drawType:px:py:radius:?theta">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>square</e></m></meta>
		</square_>
		<diamond_ public="1" expr="diamond">
			<f a="drawType:x:y:radius:?theta">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>diamond</e></m></meta>
		</diamond_>
		<diamondOutline_ public="1" expr="diamondOutline">
			<f a="drawType:x:y:thick:radius:?theta">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>diamondOutline</e></m></meta>
		</diamondOutline_>
		<overlapStar_ public="1" expr="overlapStar">
			<f a="drawType:px:py:radius:?theta">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>overlapStar</e></m></meta>
		</overlapStar_>
		<circle_ public="1" expr="circle">
			<f a="drawType:ax:ay:radius:?sides:?omega">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circle</e></m></meta>
		</circle_>
		<circleRadial_ public="1" expr="circleRadial">
			<f a="drawType:ax:ay:rx:ry:radius:?sides:?omega">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circleRadial</e></m></meta>
		</circleRadial_>
		<circleRadialOnSide_ public="1" expr="circleRadialOnSide">
			<f a="drawType:ax:ay:rx:ry:radius:?sides:?omega">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circleRadialOnSide</e></m></meta>
		</circleRadialOnSide_>
		<ellipse_ public="1" expr="ellipse">
			<f a="drawType:ax:ay:rx:ry:sides">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>ellipse</e></m></meta>
		</ellipse_>
		<pie_ public="1" expr="pie">
			<f a="drawType:ax:ay:radius:beta:gamma:prefer:?sides">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>pie</e></m></meta>
		</pie_>
		<pieX_ public="1" expr="pieX">
			<f a="drawType:ax:ay:radius:beta:gamma:prefer:edgePoly:?sides">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>pieX</e></m></meta>
		</pieX_>
		<pieDifX_ public="1" expr="pieDifX">
			<f a="drawType:ax:ay:radius:beta:dif:edgePoly:?sides">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>pieDifX</e></m></meta>
		</pieDifX_>
		<ellpisePie_ public="1" expr="ellipsePie">
			<f a="drawType:ax:ay:rx:ry:beta:gamma:prefer:?sides">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>ellipsePie</e></m></meta>
		</ellpisePie_>
		<pieDif_ public="1" expr="pieDif">
			<f a="drawType:ax:ay:radius:beta:dif:?sides">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>pieDif</e></m></meta>
		</pieDif_>
		<arc_ public="1" expr="arc">
			<f a="drawType:ax:ay:radius:width:beta:gamma:prefer:?sides">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>arc</e></m></meta>
		</arc_>
		<circleOnSide_ public="1" expr="circleOnSide">
			<f a="drawType:ax:ay:radius:?sides:?omega">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circleOnSide</e></m></meta>
		</circleOnSide_>
		<ellipseOnSide_ public="1" expr="ellipseOnSide">
			<f a="drawType:ax:ay:rx:ry:sides">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>ellipseOnSide</e></m></meta>
		</ellipseOnSide_>
		<shape_ public="1" expr="shape">
			<f a="drawType:x:y:radius:p:?omega">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.PolyEdge"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>shape</e></m></meta>
		</shape_>
		<shapeRadial_ public="1" expr="shapeRadial">
			<f a="drawType:x:y:rx:ry:radius:p:?omega">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.PolyEdge"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>shapeRadial</e></m></meta>
		</shapeRadial_>
		<roundedRectangle_ public="1" expr="roundedRectangle">
			<f a="drawType:x:y:width:height:radius">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>roundedRectangle</e></m></meta>
		</roundedRectangle_>
		<roundedRectangleOutline_ public="1" expr="roundedRectangleOutline">
			<f a="drawType:x:y:width:height:thick:radius">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>roundedRectangleOutline</e></m></meta>
		</roundedRectangleOutline_>
		<spiralLines_ public="1" expr="spiralLines">
			<f a="drawType:x:y:radius:nolines:startWid:stepWid">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>spiralLines</e></m></meta>
		</spiralLines_>
		<new public="1" set="method" line="735">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="trilateral3.shape._Shaper.Shaper_Fields_" params="" file="src/trilateral3/shape/Shaper.hx" private="1" module="trilateral3.shape.Shaper" final="1">
		<add2DTriangle public="1" get="inline" set="null" line="16" static="1">
			<f a="drawType:ax:ay:bx:by:cx:cy">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Shaper provides static methods for drawing with triangles.
the methods return the number of triangles added.</haxe_doc>
		</add2DTriangle>
		<add2DQuad public="1" get="inline" set="null" line="28" static="1"><f a="drawType:ax:ay:bx:by:cx:cy:dx:dy">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></add2DQuad>
		<quad public="1" get="inline" set="null" line="38" static="1"><f a="drawType:q">
	<t path="trilateral3.drawing.DrawType"/>
	<c path="trilateral3.structure.Quad2D"/>
	<x path="Int"/>
</f></quad>
		<lineAB public="1" get="inline" set="null" line="42" static="1"><f a="drawType:A:B:width">
	<t path="trilateral3.drawing.DrawType"/>
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<x path="Float"/>
	<x path="Int"/>
</f></lineAB>
		<lineXY public="1" get="inline" set="null" line="49" static="1"><f a="drawType:ax:ay:bx:by:width">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></lineXY>
		<rectangle public="1" get="inline" set="null" line="56" static="1"><f a="drawType:x:y:w:h">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></rectangle>
		<squareOutline public="1" get="inline" set="null" line="71" static="1">
			<f a="drawType:px:py:radius:thick:?theta" v=":::::0">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0 }</e></m></meta>
		</squareOutline>
		<square public="1" get="inline" set="null" line="171" static="1">
			<f a="drawType:px:py:radius:?theta" v="::::0">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0 }</e></m></meta>
		</square>
		<diamond public="1" get="inline" set="null" line="218" static="1">
			<f a="drawType:x:y:radius:?theta" v="::::0.">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0. }</e></m></meta>
		</diamond>
		<diamondOutline public="1" get="inline" set="null" line="224" static="1">
			<f a="drawType:x:y:thick:radius:?theta" v=":::::0.">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0. }</e></m></meta>
		</diamondOutline>
		<overlapStar public="1" get="inline" set="null" line="232" static="1">
			<f a="drawType:px:py:radius:?theta" v="::::0">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0 }</e></m></meta>
		</overlapStar>
		<circle public="1" get="inline" set="null" line="262" static="1">
			<f a="drawType:ax:ay:radius:?sides:?omega" v="::::36:0.">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circle>
		<circleRadial public="1" get="inline" set="null" line="284" static="1">
			<f a="drawType:ax:ay:rx:ry:radius:?sides:?omega" v="::::::36:0.">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circleRadial>
		<circleRadialOnSide public="1" get="inline" set="null" line="313" static="1">
			<f a="drawType:ax:ay:rx:ry:radius:?sides:?omega" v="::::::36:0.">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circleRadialOnSide>
		<ellipse public="1" get="inline" set="null" line="347" static="1">
			<f a="drawType:ax:ay:rx:ry:?sides" v=":::::36">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</ellipse>
		<pie public="1" get="inline" set="null" line="373" static="1">
			<f a="drawType:ax:ay:radius:beta:gamma:prefer:?sides" v=":::::::36">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
 * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pie>
		<pieX public="1" get="inline" set="null" line="409" static="1">
			<f a="drawType:ax:ay:radius:beta:gamma:prefer:edgePoly:?sides" v="::::::::36">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
 * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pieX>
		<pieDifX public="1" get="inline" set="null" line="449" static="1">
			<f a="drawType:ax:ay:radius:beta:dif:edgePoly:?sides" v=":::::::36">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
			<haxe_doc>* Optimized Pie used in Contour, with dif pre-calculated
 * External edge also added</haxe_doc>
		</pieDifX>
		<ellipsePie public="1" get="inline" set="null" line="484" static="1">
			<f a="drawType:ax:ay:rx:ry:beta:gamma:prefer:?sides" v="::::::::36">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</ellipsePie>
		<pieDif public="1" get="inline" set="null" line="520" static="1">
			<f a="drawType:ax:ay:radius:beta:dif:?sides" v="::::::36">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
			<haxe_doc>* Optimized Pie used in Contour, with dif pre-calculated</haxe_doc>
		</pieDif>
		<arc public="1" get="inline" set="null" line="549" static="1">
			<f a="drawType:ax:ay:radius:width:beta:gamma:prefer:?sides" v="::::::::36">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</arc>
		<circleOnSide public="1" get="inline" set="null" line="589" static="1">
			<f a="drawType:ax:ay:radius:?sides:?omega" v="::::36:0.">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36 }</e></m></meta>
		</circleOnSide>
		<ellipseOnSide public="1" get="inline" set="null" line="612" static="1">
			<f a="drawType:ax:ay:rx:ry:?sides" v=":::::36">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36 }</e></m></meta>
		</ellipseOnSide>
		<shape public="1" get="inline" set="null" line="635" static="1">
			<f a="drawType:x:y:radius:p:?omega" v=":::::0.">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.PolyEdge"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0. }</e></m></meta>
		</shape>
		<shapeRadial public="1" get="inline" set="null" line="645" static="1">
			<f a="drawType:x:y:rx:ry:radius:p:?omega" v=":::::::0.">
				<t path="trilateral3.drawing.DrawType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.PolyEdge"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0. }</e></m></meta>
		</shapeRadial>
		<roundedRectangle public="1" get="inline" set="null" line="659" static="1"><f a="drawType:x:y:width:height:radius">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></roundedRectangle>
		<roundedRectangleOutline public="1" get="inline" set="null" line="689" static="1"><f a="drawType:x:y:width:height:thick:radius">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></roundedRectangleOutline>
		<spiralLines public="1" get="inline" set="null" line="720" static="1"><f a="drawType:x:y:radius:nolines:startWid:stepWid">
	<t path="trilateral3.drawing.DrawType"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></spiralLines>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="trilateral3.shape.StyleRegular" params="" file="src/trilateral3/shape/StyleRegular.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="trilateral3.shape._StyleRegular.StyleRegular_Impl_" params="" file="src/trilateral3/shape/StyleRegular.hx" private="1" module="trilateral3.shape.StyleRegular" extern="1" final="1">
	<TRIANGLE public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TRIANGLE>
	<SQUARE public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SQUARE>
	<BAR public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BAR>
	<PENTAGON public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PENTAGON>
	<HEXAGON public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HEXAGON>
	<CIRCLE public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CIRCLE>
	<ROUNDSQUARE public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ROUNDSQUARE>
	<STAR public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="trilateral3.shape.StyleRegular"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</STAR>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="trilateral3.shape._StyleRegular.StyleRegular_Impl_" params="" file="src/trilateral3/shape/StyleRegular.hx" private="1" module="trilateral3.shape.StyleRegular" extern="1" final="1">
		<TRIANGLE public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TRIANGLE>
		<SQUARE public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SQUARE>
		<BAR public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BAR>
		<PENTAGON public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PENTAGON>
		<HEXAGON public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HEXAGON>
		<CIRCLE public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CIRCLE>
		<ROUNDSQUARE public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ROUNDSQUARE>
		<STAR public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="trilateral3.shape.StyleRegular"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</STAR>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="trilateral3.shape.xtra.DieSpots" params="" file="src/trilateral3/shape/xtra/DieSpots.hx">
		<from><icast><x path="trilateral3.shape.Regular"/></icast></from>
		<this><x path="trilateral3.shape.Regular"/></this>
		<to><icast><x path="trilateral3.shape.Regular"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="trilateral3.shape.xtra._DieSpots.DieSpots_Impl_" params="" file="src/trilateral3/shape/xtra/DieSpots.hx" private="1" module="trilateral3.shape.xtra.DieSpots" final="1">
	<_new public="1" set="method" line="9" static="1">
		<f a="regular">
			<x path="trilateral3.shape.Regular"/>
			<x path="trilateral3.shape.xtra.DieSpots"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<six2 public="1" get="inline" set="null" line="12" static="1">
		<f a="this:rs:?dx:?dy" v="::25:35">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 35, dx : 25 }</e></m>
			<m n=":impl"/>
		</meta>
	</six2>
	<colorSix public="1" get="inline" set="null" line="44" static="1">
		<f a="this:rs:?dx:?dy" v="::25:35">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 35, dx : 25 }</e></m>
			<m n=":impl"/>
		</meta>
	</colorSix>
	<five2 public="1" get="inline" set="null" line="76" static="1">
		<f a="this:rs:?dx:?dy" v="::30:30">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 30, dx : 30 }</e></m>
			<m n=":impl"/>
		</meta>
	</five2>
	<four2 public="1" get="inline" set="null" line="103" static="1">
		<f a="this:rs:?dx:?dy" v="::30:30">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 30, dx : 30 }</e></m>
			<m n=":impl"/>
		</meta>
	</four2>
	<three2 public="1" get="inline" set="null" line="127" static="1">
		<f a="this:rs:?dx:?dy" v="::25:25">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 25, dx : 25 }</e></m>
			<m n=":impl"/>
		</meta>
	</three2>
	<two2 public="1" get="inline" set="null" line="144" static="1">
		<f a="this:rs:?dx:?dy" v="::20:20">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 20, dx : 20 }</e></m>
			<m n=":impl"/>
		</meta>
	</two2>
	<one2 public="1" get="inline" set="null" line="158" static="1">
		<f a="this:rs">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</one2>
	<six public="1" get="inline" set="null" line="164" static="1">
		<f a="this:rs:?dx:?dy" v="::25:35">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 35, dx : 25 }</e></m>
			<m n=":impl"/>
		</meta>
	</six>
	<five public="1" get="inline" set="null" line="196" static="1">
		<f a="this:rs:?dx:?dy" v="::30:30">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 30, dx : 30 }</e></m>
			<m n=":impl"/>
		</meta>
	</five>
	<four public="1" get="inline" set="null" line="223" static="1">
		<f a="this:rs:?dx:?dy" v="::30:30">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 30, dx : 30 }</e></m>
			<m n=":impl"/>
		</meta>
	</four>
	<three public="1" get="inline" set="null" line="247" static="1">
		<f a="this:rs:?dx:?dy" v="::25:25">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 25, dx : 25 }</e></m>
			<m n=":impl"/>
		</meta>
	</three>
	<two public="1" get="inline" set="null" line="264" static="1">
		<f a="this:rs:?dx:?dy" v="::20:20">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta>
			<m n=":value"><e>{ dy : 20, dx : 20 }</e></m>
			<m n=":impl"/>
		</meta>
	</two>
	<one public="1" get="inline" set="null" line="278" static="1">
		<f a="this:rs">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</one>
	<colorOne public="1" get="inline" set="null" line="284" static="1">
		<f a="this:rs">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorOne>
	<goldOne public="1" get="inline" set="null" line="290" static="1">
		<f a="this:rs">
			<x path="trilateral3.shape.Regular"/>
			<c path="trilateral3.structure.RegularShape"/>
			<x path="trilateral3.shape.IndexRange"/>
		</f>
		<meta><m n=":impl"/></meta>
	</goldOne>
</class></impl>
	</abstract>
	<class path="trilateral3.shape.xtra._DieSpots.DieSpots_Impl_" params="" file="src/trilateral3/shape/xtra/DieSpots.hx" private="1" module="trilateral3.shape.xtra.DieSpots" final="1">
		<_new public="1" set="method" line="9" static="1">
			<f a="regular">
				<x path="trilateral3.shape.Regular"/>
				<x path="trilateral3.shape.xtra.DieSpots"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<six2 public="1" get="inline" set="null" line="12" static="1">
			<f a="this:rs:?dx:?dy" v="::25:35">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 35, dx : 25 }</e></m>
				<m n=":impl"/>
			</meta>
		</six2>
		<colorSix public="1" get="inline" set="null" line="44" static="1">
			<f a="this:rs:?dx:?dy" v="::25:35">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 35, dx : 25 }</e></m>
				<m n=":impl"/>
			</meta>
		</colorSix>
		<five2 public="1" get="inline" set="null" line="76" static="1">
			<f a="this:rs:?dx:?dy" v="::30:30">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 30, dx : 30 }</e></m>
				<m n=":impl"/>
			</meta>
		</five2>
		<four2 public="1" get="inline" set="null" line="103" static="1">
			<f a="this:rs:?dx:?dy" v="::30:30">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 30, dx : 30 }</e></m>
				<m n=":impl"/>
			</meta>
		</four2>
		<three2 public="1" get="inline" set="null" line="127" static="1">
			<f a="this:rs:?dx:?dy" v="::25:25">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 25, dx : 25 }</e></m>
				<m n=":impl"/>
			</meta>
		</three2>
		<two2 public="1" get="inline" set="null" line="144" static="1">
			<f a="this:rs:?dx:?dy" v="::20:20">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 20, dx : 20 }</e></m>
				<m n=":impl"/>
			</meta>
		</two2>
		<one2 public="1" get="inline" set="null" line="158" static="1">
			<f a="this:rs">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</one2>
		<six public="1" get="inline" set="null" line="164" static="1">
			<f a="this:rs:?dx:?dy" v="::25:35">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 35, dx : 25 }</e></m>
				<m n=":impl"/>
			</meta>
		</six>
		<five public="1" get="inline" set="null" line="196" static="1">
			<f a="this:rs:?dx:?dy" v="::30:30">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 30, dx : 30 }</e></m>
				<m n=":impl"/>
			</meta>
		</five>
		<four public="1" get="inline" set="null" line="223" static="1">
			<f a="this:rs:?dx:?dy" v="::30:30">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 30, dx : 30 }</e></m>
				<m n=":impl"/>
			</meta>
		</four>
		<three public="1" get="inline" set="null" line="247" static="1">
			<f a="this:rs:?dx:?dy" v="::25:25">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 25, dx : 25 }</e></m>
				<m n=":impl"/>
			</meta>
		</three>
		<two public="1" get="inline" set="null" line="264" static="1">
			<f a="this:rs:?dx:?dy" v="::20:20">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta>
				<m n=":value"><e>{ dy : 20, dx : 20 }</e></m>
				<m n=":impl"/>
			</meta>
		</two>
		<one public="1" get="inline" set="null" line="278" static="1">
			<f a="this:rs">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</one>
		<colorOne public="1" get="inline" set="null" line="284" static="1">
			<f a="this:rs">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorOne>
		<goldOne public="1" get="inline" set="null" line="290" static="1">
			<f a="this:rs">
				<x path="trilateral3.shape.Regular"/>
				<c path="trilateral3.structure.RegularShape"/>
				<x path="trilateral3.shape.IndexRange"/>
			</f>
			<meta><m n=":impl"/></meta>
		</goldOne>
	</class>
	<class path="trilateral3.structure.ARGB" params="" file="src/trilateral3/structure/ARGB.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<r public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</r>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<new public="1" set="method" line="11"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ a, r, g, b }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.CYMKA" params="" file="src/trilateral3/structure/CYMKA.hx">
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<m public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</m>
		<k public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</k>
		<a public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</a>
		<new public="1" set="method" line="12"><f a="c:y:m:k:?a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ a, r, g, b }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.Quad2D" params="" file="src/trilateral3/structure/Quad2D.hx">
		<a public="1"><c path="trilateral3.structure.XY"/></a>
		<b public="1"><c path="trilateral3.structure.XY"/></b>
		<c public="1"><c path="trilateral3.structure.XY"/></c>
		<d public="1"><c path="trilateral3.structure.XY"/></d>
		<new set="method" line="9"><f a="a:b:c:d">
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<c path="trilateral3.structure.XY"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.RegularShape" params="" file="src/trilateral3/structure/RegularShape.hx">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<radius public="1"><x path="Float"/></radius>
		<color public="1"><x path="Int"/></color>
		<clone public="1" set="method" line="14"><f a=""><c path="trilateral3.structure.RegularShape"/></f></clone>
		<new public="1" set="method" line="8"><f a="x:y:radius:color">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="trilateral3.structure.StartEnd" params="" file="src/trilateral3/structure/StartEnd.hx">
		<start public="1"><x path="Int"/></start>
		<end public="1"><x path="Int"/></end>
		<new public="1" set="method" line="6"><f a="start:end">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.TriInt" params="" file="src/trilateral3/structure/TriInt.hx">
		<a public="1"><x path="Int"/></a>
		<b public="1"><x path="Int"/></b>
		<c public="1"><x path="Int"/></c>
		<new public="1" set="method" line="7"><f a="a:b:c">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.Triangle3D" params="" file="src/trilateral3/structure/Triangle3D.hx">
		<a public="1"><c path="trilateral3.matrix.Vertex"/></a>
		<b public="1"><c path="trilateral3.matrix.Vertex"/></b>
		<c public="1"><c path="trilateral3.matrix.Vertex"/></c>
		<new set="method" line="8"><f a="a:b:c">
	<c path="trilateral3.matrix.Vertex"/>
	<c path="trilateral3.matrix.Vertex"/>
	<c path="trilateral3.matrix.Vertex"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="trilateral3.structure.XY" params="" file="src/trilateral3/structure/XY.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<w public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</w>
		<new public="1" set="method" line="10"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ x, y, z, w }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
</haxe>